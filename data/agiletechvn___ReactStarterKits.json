{
  "repo_name": "ReactStarterKits",
  "repo_full_name": "agiletechvn/reactstarterkits",
  "repo_owner": "agiletechvn",
  "repo_description": "ReactStarterKits",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "build/schema/schema.graphql",
      "sha": "b9791fd7dbbb993280dad97b5a7df21208601180",
      "url": "https://api.github.com/repositories/156707836/contents/build/schema/schema.graphql?ref=a6a09b3f90e8d3b367cee033e24c0ea2e1cbfe39",
      "git_url": "https://api.github.com/repositories/156707836/git/blobs/b9791fd7dbbb993280dad97b5a7df21208601180",
      "html_url": "https://github.com/agiletechvn/ReactStarterKits/blob/a6a09b3f90e8d3b367cee033e24c0ea2e1cbfe39/build/schema/schema.graphql",
      "content": "input AddPostInput {\n  title: String!\n  clientMutationId: String\n}\n\ntype AddPostPayload {\n  viewer: Viewer\n  postEdge: PostEdge\n  clientMutationId: String\n}\n\ntype Author implements Node {\n  # The ID of an object\n  id: ID!\n  name: String\n  image: String\n  introduction: String\n  description: String\n\n  # List social accounts of the user\n  social_accounts: [SocialAccount]\n}\n\n# A connection to a list of items.\ntype AuthorConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [AuthorEdge]\n  totalCount: Int\n}\n\n# An edge in a connection.\ntype AuthorEdge {\n  # The item at the end of the edge\n  node: Author\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nscalar Buffer\n\nscalar Date\n\ntype DetailPost {\n  node: Post\n  next: Post\n  prev: Post\n}\n\n# A file uploaded via multipart/form-data\ninput File {\n  # The fieldname used to POST this file.\n  fieldname: String!\n\n  # The original file name.\n  originalname: String!\n\n  # The encoding of file.\n  encoding: String\n\n  # The mimetype of file.\n  mimetype: String\n\n  # The file buffered in memory\n  buffer: Buffer!\n\n  # The size of file.\n  size: Int\n}\n\ntype Item implements Node {\n  type: String\n\n  # The ID of an object\n  id: ID!\n  target_type: itemstarget_typeEnumType\n  target_id: Int\n  sort_rank: Int\n  post_id: Int\n  created_at: String!\n  updated_at: String!\n\n  # Item text data\n  text: ItemText\n\n  # Item image data\n  image: ItemImage\n\n  # Item twitter data\n  twitter: ItemTwitter\n}\n\ntype ItemImage implements Node {\n  type: String\n\n  # The ID of an object\n  id: ID!\n  src: String\n  caption: String\n\n  # Absolute src of image item\n  full_src: String\n}\n\ninput ItemImageInput {\n  id: ID\n  caption: String\n}\n\ninput ItemInput {\n  id: ID\n  target_type: ID!\n  sort_rank: Int\n  text: ItemTextInput\n  twitter: ItemTwitterInput\n  image: ItemImageInput\n}\n\nenum itemstarget_typeEnumType {\n  ItemText\n  ItemImage\n  ItemTwitter\n}\n\ntype ItemText implements Node {\n  type: String\n\n  # The ID of an object\n  id: ID!\n  description: String\n}\n\ninput ItemTextInput {\n  id: ID\n  description: String\n}\n\ntype ItemTwitter implements Node {\n  type: String\n\n  # The ID of an object\n  id: ID!\n  twitter_id: String\n}\n\ninput ItemTwitterInput {\n  id: ID\n  twitter_id: String\n}\n\ntype Mutation {\n  addPost(input: AddPostInput!): AddPostPayload\n  updatePost(input: UpdatePostInput!): UpdatePostPayload\n  removePost(input: RemovePostInput!): RemovePostPayload\n  toggleAcceptancePost(input: ToggleAcceptancePostInput!): ToggleAcceptancePostPayload\n  updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload\n  updateItemImage(input: UpdateItemImageInput!): UpdateItemImagePayload\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype Post implements Node {\n  type: String\n\n  # The ID of an object\n  id: ID!\n  title: String\n  lead_sentence: String\n  accepted: Boolean\n  published_at: String\n  created_at: String!\n  updated_at: String!\n\n  # Tags of the post\n  tags: [Tag]\n\n  # Items of the post\n  items: [Item]\n}\n\n# A connection to a list of items.\ntype PostConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [PostEdge]\n  totalCount: Int\n}\n\n# An edge in a connection.\ntype PostEdge {\n  # The item at the end of the edge\n  node: Post\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype Project implements Node {\n  type: String\n\n  # The ID of an object\n  id: ID!\n  title: String\n  description: String\n  caption: String\n  image: String\n  source_url: String\n  accepted: Boolean\n  created_at: String!\n  updated_at: String!\n\n  # Tags of the project\n  tags: [Tag]\n\n  # Absolute src of image\n  full_image: String\n}\n\n# A connection to a list of items.\ntype ProjectConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ProjectEdge]\n  totalCount: Int\n}\n\n# An edge in a connection.\ntype ProjectEdge {\n  # The item at the end of the edge\n  node: Project\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype Query {\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n  viewer: Viewer\n}\n\ninput RemovePostInput {\n  id: ID!\n  clientMutationId: String\n}\n\ntype RemovePostPayload {\n  viewer: Viewer\n  postId: ID\n  clientMutationId: String\n}\n\ntype SocialAccount implements Node {\n  type: String\n\n  # The ID of an object\n  id: ID!\n  author_id: Int\n  account_type: Int\n  url: String\n}\n\ninput SocialAccountInput {\n  id: Int\n  url: String!\n  account_type: Int\n  author_id: Int\n}\n\ntype Tag implements Node {\n  type: String\n\n  # The ID of an object\n  id: ID!\n  name: String\n  created_at: String!\n  updated_at: String!\n}\n\ninput ToggleAcceptancePostInput {\n  id: ID!\n  clientMutationId: String\n}\n\ntype ToggleAcceptancePostPayload {\n  viewer: Viewer\n  clientMutationId: String\n}\n\ninput UpdateAuthorInput {\n  id: ID!\n  description: String!\n  introduction: String!\n  name: String!\n  email: String!\n  avatar: File\n\n  # List social accounts input of the user\n  social_accounts: [SocialAccountInput]\n  clientMutationId: String\n}\n\ntype UpdateAuthorPayload {\n  author: Author\n  clientMutationId: String\n}\n\ninput UpdateItemImageInput {\n  id: ID!\n  full_src: File\n  clientMutationId: String\n}\n\ntype UpdateItemImagePayload {\n  item_image: ItemImage\n  clientMutationId: String\n}\n\ninput UpdatePostInput {\n  id: ID!\n  title: String!\n  lead_sentence: String!\n  published_at: Date!\n\n  # List tags input of the post\n  tags: [String!]\n\n  # List items input of the post\n  items: [ItemInput!]\n  clientMutationId: String\n}\n\ntype UpdatePostPayload {\n  post: Post\n  clientMutationId: String\n}\n\n# CMS Graph\ntype Viewer implements Node {\n  # The ID of an object\n  id: ID!\n\n  # A list of posts\n  posts(\n    after: String\n    first: Int\n    before: String\n    last: Int\n    offset: Int\n    order: String\n\n    # Filter post by tag-id\n    tagId: ID\n\n    # Filter post by publish, should authorize\n    accepted: Boolean\n  ): PostConnection\n\n  # Latest posts\n  latestPosts(limit: Int): [Post]\n\n  # Detail post\n  detailPost(id: ID!): DetailPost\n\n  # A list of authors\n  authors(after: String, first: Int, before: String, last: Int, offset: Int, order: String): AuthorConnection\n\n  # Detail information of the author\n  detailAuthor(userId: Int): Author\n\n  # A list of projects\n  projects(\n    after: String\n    first: Int\n    before: String\n    last: Int\n    offset: Int\n    order: String\n\n    # Filter project by tag-id\n    tagId: ID\n  ): ProjectConnection\n\n  # Latest project\n  latestProject: Project\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 26,
      "containsCycle": false,
      "polynomialLevel": 2,
      "numDefinitions": 42
    }
  ],
  "metrics": {
    "created_at": "2018-11-08T13:01:17Z",
    "updated_at": "2018-11-08T13:42:19Z",
    "pushed_at": "2018-11-08T13:42:14Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "apache-2.0",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}