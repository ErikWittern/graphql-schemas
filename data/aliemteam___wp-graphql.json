{
  "repo_name": "wp-graphql",
  "repo_full_name": "aliemteam/wp-graphql",
  "repo_owner": "aliemteam",
  "repo_description": "Client-side GraphQL wrapper for the WordPress REST API",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema.graphql",
      "sha": "5012523c3886797b39d6b85a882e3a18cfc2ef76",
      "url": "https://api.github.com/repositories/80672239/contents/schema.graphql?ref=78d2b312c7de506d46809b975caea6eb9ee8091f",
      "git_url": "https://api.github.com/repositories/80672239/git/blobs/5012523c3886797b39d6b85a882e3a18cfc2ef76",
      "html_url": "https://github.com/aliemteam/wp-graphql/blob/78d2b312c7de506d46809b975caea6eb9ee8091f/schema.graphql",
      "content": "# Object containing user avatars.\ntype AvatarObject {\n  # 24x24 avatar url.\n  size24: String\n\n  # 48x48 avatar url.\n  size48: String\n\n  # 96x96 avatar url.\n  size96: String\n}\n\n# A single category.\ntype Category {\n  # Number of published posts for the term.\n  count: Int\n\n  # HTML description of the term.\n  description: String\n\n  # Unique identifier for the term.\n  id: Int!\n\n  # URL of the term.\n  link: String\n\n  # JSON stringified meta fields.\n  meta: String\n\n  # HTML title for the term.\n  name: String\n\n  # The parent term ID.\n  parent: Int\n\n  # An alphanumeric identifier for the term unique to its type.\n  slug: String\n\n  # Type attribution for the term.\n  taxonomy: String\n}\n\n# A single comment object\ntype Comment {\n  # The id of the user object, if author was a user.\n  author: Int\n\n  # Avatar URLs for the object author.\n  author_avatar_urls: AvatarObject\n\n  # Email address for the object author.\n  author_email: String\n\n  # IP address for the object author (IPv6).\n  author_ip: String\n\n  # Display name for the object author.\n  author_name: String\n\n  # URL for the object author.\n  author_url: String\n\n  # User agent for the object author.\n  author_user_agent: String\n\n  # The content for the object.\n  content: ContentDescriptor\n\n  # The date the object was published.\n  date: String\n\n  # The date the object was published as GMT.\n  date_gmt: String\n\n  # Unique identifier for the object.\n  id: Int!\n\n  # Karma for the object.\n  karma: Int\n\n  # URL to the object.\n  link: String\n\n  # JSON stringified meta fields.\n  meta: String\n\n  # The id for the parent of the object.\n  parent: Int\n\n  # The id of the associated post object.\n  post: Int\n\n  # State of the object.\n  status: String\n\n  # Type of Comment for the object.\n  type: CommentType\n}\n\n# Accepts one of the following (unquoted) strings: date, date_gmt, id, include, parent, post, type\nenum CommentsOrderby {\n  date\n  date_gmt\n  id\n  include\n  parent\n  post\n  type\n}\n\n# Accepts one of the following (unquoted) strings: approve, hold, spam, trash\nenum CommentStatus {\n  approve\n  hold\n  spam\n  trash\n}\n\n# Accepts one of the following (unquoted) strings: comment, pingback, trackback\nenum CommentType {\n  comment\n  pingback\n  trackback\n}\n\n# Simple descriptor object for post content.\ntype ContentDescriptor {\n  # Boolean describing whether or not the content is protected.\n  protected: Boolean\n\n  # The raw text without markup of the content. (Requires authentication)\n  raw: String\n\n  # The HTML for the rendered content.\n  rendered: String\n}\n\nenum Context {\n  edit\n  embed\n  view\n}\n\n# Weekday abbreviations to integer enum.\nenum DaysOfWeek {\n  sun\n  mon\n  tues\n  wed\n  thurs\n  fri\n  sat\n}\n\nunion DeleteCommentResponse = DeletedComment | Comment\n\n# An object representing the API response for a deleted Category.\ntype DeletedCategory {\n  # Boolean (usually true) stating if the object has been deleted.\n  deleted: Boolean\n\n  # The entire deleted Category.\n  previous: Category\n}\n\n# An object representing the API response for a deleted Comment.\ntype DeletedComment {\n  # Boolean (usually true) stating if the object has been deleted.\n  deleted: Boolean\n\n  # The entire deleted Comment.\n  previous: Comment\n}\n\n# An object representing the API response for a deleted Media.\ntype DeletedMedia {\n  # Boolean (usually true) stating if the object has been deleted.\n  deleted: Boolean\n\n  # The entire deleted Media.\n  previous: Media\n}\n\n# An object representing the API response for a deleted Page.\ntype DeletedPage {\n  # Boolean (usually true) stating if the object has been deleted.\n  deleted: Boolean\n\n  # The entire deleted Page.\n  previous: Page\n}\n\n# An object representing the API response for a deleted Post.\ntype DeletedPost {\n  # Boolean (usually true) stating if the object has been deleted.\n  deleted: Boolean\n\n  # The entire deleted Post.\n  previous: Post\n}\n\n# An object representing the API response for a deleted Revision.\ntype DeletedRevision {\n  # Boolean (usually true) stating if the object has been deleted.\n  deleted: Boolean\n\n  # The entire deleted Revision.\n  previous: Revision\n}\n\n# An object representing the API response for a deleted Tag.\ntype DeletedTag {\n  # Boolean (usually true) stating if the object has been deleted.\n  deleted: Boolean\n\n  # The entire deleted Tag.\n  previous: Tag\n}\n\n# An object representing the API response for a deleted User.\ntype DeletedUser {\n  # Boolean (usually true) stating if the object has been deleted.\n  deleted: Boolean\n\n  # The entire deleted User.\n  previous: User\n}\n\nunion DeletePageResponse = DeletedPage | Page\n\nunion DeletePostResponse = DeletedPost | Post\n\n# Metadata for photographs.\ntype ImageMeta {\n  # Image aperture.\n  aperture: String\n\n  # Details about the camera used to take the photo.\n  camera: String\n\n  # Image caption.\n  caption: String\n\n  # Copyright details.\n  copyright: String\n\n  # ISO8601 timestamp.\n  created_timestamp: String\n\n  # Image credit.\n  credit: String\n\n  # Image focal length.\n  focal_length: String\n\n  # Image iso details.\n  iso: String\n\n  # List of keywords.\n  keywords: [String]\n\n  # Image orientation.\n  orientation: String\n\n  # Image shutter speed.\n  shutter_speed: String\n\n  # Image title.\n  title: String\n}\n\n# An object representing a singular media item.\ntype Media {\n  # Alternative text to display when resource is not displayed.\n  alt_text: String\n\n  # The id for the author of the object.\n  author: Int\n\n  # The caption for the resource.\n  caption: ContentDescriptor\n\n  # Whether or not comments are open on the object.\n  comment_status: OpenOrClosed\n\n  # The date the object was published, in the site’s timezone.\n  date: String\n\n  # The date the object was published, as GMT.\n  date_gmt: String\n\n  # The description for the resource.\n  description: ContentDescriptor\n\n  # The globally unique identifier for the object.\n  guid: ContentDescriptor\n\n  # Unique identifier for the object.\n  id: Int\n\n  # URL to the object.\n  link: String\n\n  # Array of MediaSizeDetails\n  media_details: MediaDetails\n\n  # Type of resource. (image or file)\n  media_type: MediaKind\n\n  # JSON stringified meta fields.\n  meta: String\n\n  # MIME type of resource.\n  mime_type: String\n\n  # The date the object was last modified, in the site’s timezone.\n  modified: String\n\n  # The date the object was last modified, as GMT.\n  modified_gmt: String\n\n  # Whether or not the object can be pinged.\n  ping_status: OpenOrClosed\n\n  # The id for the associated post of the resource.\n  post: Int\n\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n\n  # URL to the original resource file.\n  source_url: String\n\n  # A named status for the object.\n  status: MediaStatus\n\n  # The title for the object.\n  title: ContentDescriptor\n\n  # Type of Post for the object.\n  type: String\n}\n\n# Details about the resource file, specific to its type.\ntype MediaDetails {\n  file: String\n  height: Int\n  image_meta: ImageMeta\n  sizes: [MediaSize]\n  width: Int\n}\n\n# Accepts one of the following (unquoted) strings: file, image\nenum MediaKind {\n  file\n  image\n}\n\n# Accepts one of the following (unquoted) strings: application, audio, image, text, video\nenum MediaMimeType {\n  application\n  audio\n  image\n  text\n  video\n}\n\n# Accepts one of the following (unquoted) strings: date, id, include, relevance, slug, title\nenum MediaOrderBy {\n  date\n  id\n  include\n  relevance\n  slug\n  title\n}\n\n# Details about a single media item at a specific size.\ntype MediaSize {\n  # File name including extension.\n  file: String\n\n  # The height of the file.\n  height: Int\n\n  # The mime_type for the file.\n  mime_type: String\n\n  # The name of the size. (eg. \"thumbnail\")\n  slug: String\n\n  # The full URL for the file.\n  source_url: String\n\n  # The width of the file.\n  width: Int\n}\n\n# Accepts one of the following (unquoted) strings: inherit, private, trash\nenum MediaStatus {\n  inherit\n  private\n  trash\n}\n\n# The root mutation.\ntype Mutation {\n  # Create a new category.\n  addCategory(\n    # HTML description of the term.\n    description: String\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # HTML title for the term.\n    name: String!\n\n    # The parent term ID.\n    parent: Int\n\n    # An alphanumeric identifier for the term unique to its type.\n    slug: String\n  ): Category\n\n  # Update a category by ID.\n  updateCategory(\n    # HTML description of the term.\n    description: String\n\n    # ID of the category being updated.\n    id: Int!\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # HTML title for the term.\n    name: String\n\n    # The parent term ID.\n    parent: Int\n\n    # An alphanumeric identifier for the term unique to its type.\n    slug: String\n  ): Category\n\n  # Delete a category by ID.\n  deleteCategory(\n    # Set internally. Required to be true, as terms do not support trashing.\n    force: Boolean = true\n\n    # The ID of the category being deleted.\n    id: Int!\n  ): DeletedCategory\n\n  # Create a new comment\n  addComment(\n    # The id of the user object, if author was a user.\n    author: Int\n\n    # Email address for the object author.\n    author_email: String\n\n    # IP address for the object author (IPv6).\n    author_ip: String\n\n    # Display name for the object author.\n    author_name: String\n\n    # URL for the object author.\n    author_url: String\n\n    # The content for the object.\n    content: String!\n\n    # The date the object was published.\n    date: String\n\n    # The date the object was published as GMT.\n    date_gmt: String\n\n    # Karma for the object.\n    karma: Int\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # The id for the parent of the object.\n    parent: Int\n\n    # The id of the associated post object.\n    post: Int!\n\n    # State of the object.\n    status: CommentStatus\n\n    # Type of Comment for the object.\n    type: CommentType\n  ): Comment\n\n  # Update a comment by ID.\n  updateComment(\n    # The id of the user object, if author was a user.\n    author: Int\n\n    # Email address for the object author.\n    author_email: String\n\n    # IP address for the object author (IPv6).\n    author_ip: String\n\n    # Display name for the object author.\n    author_name: String\n\n    # URL for the object author.\n    author_url: String\n\n    # The content for the object.\n    content: String\n\n    # The date the object was published.\n    date: String\n\n    # The date the object was published as GMT.\n    date_gmt: String\n\n    # Required: The ID of the comment to be updated.\n    id: Int!\n\n    # Karma for the object.\n    karma: Int\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # The id for the parent of the object.\n    parent: Int\n\n    # The id of the associated post object.\n    post: Int\n\n    # State of the object.\n    status: CommentStatus\n\n    # Type of Comment for the object.\n    type: CommentType\n  ): Comment\n\n  # Delete a comment by ID.\n  deleteComment(\n    # Whether to bypass trash and force deletion.\n    force: Boolean\n\n    # The ID of the comment being deleted.\n    id: Int!\n  ): DeleteCommentResponse\n\n  # Upload media using an Array Buffer, File, or Blob.\n  addMedia(\n    # Alternative text to display when resource is not displayed.\n    alt_text: String\n\n    # The id for the author of the object.\n    author: Int\n\n    # The caption for the resource.\n    caption: String\n\n    # Whether or not comments are open on the object.\n    comment_status: OpenOrClosed\n\n    # The date the object was published, in the site’s timezone.\n    date: String\n\n    # The date the object was published, as GMT.\n    date_gmt: String\n\n    # The description for the resource.\n    description: Int\n\n    # The file to be uploaded.\n    file: String!\n\n    # The name of the file, including the file extension.\n    filename: String!\n\n    # Meta fields.\n    meta: String\n\n    # Whether or not the object can be pinged.\n    ping_status: OpenOrClosed\n\n    # The id for the associated post of the resource.\n    post: Int\n\n    # An alphanumeric identifier for the object unique to its type.\n    slug: String\n\n    # A named status for the object.\n    status: MediaStatus\n\n    # The title for the object.\n    title: String\n  ): Media\n\n  # Update media by ID.\n  updateMedia(\n    # Alternative text to display when resource is not displayed.\n    alt_text: String\n\n    # The id for the author of the object.\n    author: Int\n\n    # The caption for the resource.\n    caption: String\n\n    # Whether or not comments are open on the object.\n    comment_status: OpenOrClosed\n\n    # The date the object was published, in the site’s timezone.\n    date: String\n\n    # The date the object was published, as GMT.\n    date_gmt: String\n\n    # The description for the resource.\n    description: Int\n\n    # The ID of the media file.\n    id: Int!\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # Whether or not the object can be pinged.\n    ping_status: OpenOrClosed\n\n    # The id for the associated post of the resource.\n    post: Int\n\n    # An alphanumeric identifier for the object unique to its type.\n    slug: String\n\n    # A named status for the object.\n    status: MediaStatus\n\n    # The title for the object.\n    title: String\n  ): Media\n\n  # Delete media by ID.\n  deleteMedia(\n    # Set internally. Must be true for request to complete.\n    force: Boolean = true\n\n    # The ID of the media being deleted.\n    id: Int!\n  ): DeletedMedia\n\n  # Create an object of type \"post\".\n  addPost(\n    # The ID for the author of the object.\n    author: Int\n\n    # The terms assigned to the object in the category taxonomy.\n    categories: [Int]\n\n    # Whether or not comments are open on the object.\n    comment_status: OpenOrClosed\n\n    # The content for the object.\n    content: String!\n\n    # The date the object was published, in the site’s timezone.\n    date: String\n\n    # The date the object was published, as GMT.\n    date_gmt: String\n\n    # The excerpt for the object.\n    excerpt: String\n\n    # The ID of the featured media for the object.\n    featured_media: Int\n\n    # The number of Liveblog Likes the object has.\n    liveblog_likes: Int\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # A password to protect access to the content and excerpt.\n    password: String\n\n    # Whether or not the object can be pinged.\n    ping_status: OpenOrClosed\n\n    # An alphanumeric identifier for the object unique to its type.\n    slug: String\n\n    # A named status for the object.\n    status: PostStatusArg\n\n    # Whether or not the object should be treated as sticky.\n    sticky: Boolean\n\n    # The terms assigned to the object in the post_tag taxonomy.\n    tags: [Int]\n\n    # The theme file to use to display the object.\n    template: String\n\n    # The title for the object.\n    title: String!\n  ): Post\n\n  # Update an object of type \"post\".\n  updatePost(\n    # The ID for the author of the object.\n    author: Int\n\n    # The terms assigned to the object in the category taxonomy.\n    categories: [Int]\n\n    # Whether or not comments are open on the object.\n    comment_status: OpenOrClosed\n\n    # The content for the object.\n    content: String\n\n    # The date the object was published, in the site’s timezone.\n    date: String\n\n    # The date the object was published, as GMT.\n    date_gmt: String\n\n    # The excerpt for the object.\n    excerpt: String\n\n    # The ID of the featured media for the object.\n    featured_media: Int\n\n    # The ID of the object being updated\n    id: Int!\n\n    # The number of Liveblog Likes the object has.\n    liveblog_likes: Int\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # A password to protect access to the content and excerpt.\n    password: String\n\n    # Whether or not the object can be pinged.\n    ping_status: OpenOrClosed\n\n    # An alphanumeric identifier for the object unique to its type.\n    slug: String\n\n    # A named status for the object.\n    status: PostStatusArg\n\n    # Whether or not the object should be treated as sticky.\n    sticky: Boolean\n\n    # The terms assigned to the object in the post_tag taxonomy.\n    tags: [Int]\n\n    # The theme file to use to display the object.\n    template: String\n\n    # The title for the object.\n    title: String\n  ): Post\n\n  # Delete a single object of type \"post\" by ID.\n  deletePost(\n    # Whether to bypass trash and force deletion.\n    force: Boolean\n\n    # The ID of the object being deleted.\n    id: Int!\n  ): DeletePostResponse\n\n  # Create a page.\n  addPage(\n    # The ID for the author of the object.\n    author: Int\n\n    # Whether or not comments are open on the object.\n    comment_status: OpenOrClosed\n\n    # The content for the object.\n    content: String\n\n    # The date the object was published, in the site’s timezone.\n    date: String\n\n    # The date the object was published, as GMT.\n    date_gmt: String\n\n    # The excerpt for the object.\n    excerpt: String\n\n    # The ID of the featured media for the object.\n    featured_media: Int\n\n    # The order of the object in relation to other object of its type.\n    menu_order: Int\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # The id for the parent of the object.\n    parent: Int\n\n    # Whether or not the object can be pinged.\n    ping_status: OpenOrClosed\n\n    # An alphanumeric identifier for the object unique to its type.\n    slug: String\n\n    # A named status for the object.\n    status: PostStatusArg\n\n    # The theme file to use to display the object.\n    template: String\n\n    # The title for the object.\n    title: String\n  ): Page\n\n  # Update a page.\n  updatePage(\n    # The ID for the author of the object.\n    author: Int\n\n    # Whether or not comments are open on the object.\n    comment_status: OpenOrClosed\n\n    # The content for the object.\n    content: String\n\n    # The date the object was published, in the site’s timezone.\n    date: String\n\n    # The date the object was published, as GMT.\n    date_gmt: String\n\n    # The excerpt for the object.\n    excerpt: String\n\n    # The ID of the featured media for the object.\n    featured_media: Int\n\n    # ID of the page being upadated.\n    id: Int!\n\n    # The order of the object in relation to other object of its type.\n    menu_order: Int\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # The id for the parent of the object.\n    parent: Int\n\n    # Whether or not the object can be pinged.\n    ping_status: OpenOrClosed\n\n    # An alphanumeric identifier for the object unique to its type.\n    slug: String\n\n    # A named status for the object.\n    status: PostStatusArg\n\n    # The theme file to use to display the object.\n    template: String\n\n    # The title for the object.\n    title: String\n  ): Page\n\n  # Delete a single page by ID.\n  deletePage(\n    # Whether to bypass trash and force deletion.\n    force: Boolean\n\n    # The ID of the page being deleted.\n    id: Int!\n  ): DeletePageResponse\n\n  # Delete a revision.\n  deleteRevision(\n    # Set internally. Must be true for request to complete.\n    force: Boolean = true\n\n    # ID of the revision being deleted.\n    id: Int!\n\n    # ID of the revisions parent.\n    parentId: Int!\n\n    # Pluralized form of the revision's parent type.\n    parentType: String = \"posts\"\n  ): DeletedRevision\n\n  # Update site settings.\n  updateSettings(\n    # A date format for all date strings.\n    date_format: String\n\n    # ID of default category.\n    default_category: Int\n\n    # Either \"open\" or \"closed\".\n    default_comment_status: OpenOrClosed\n\n    # Either \"open\" or \"closed\".\n    default_ping_status: OpenOrClosed\n\n    # Default post format.\n    default_post_format: String\n\n    # Site description.\n    description: String\n\n    # This address is used for admin purposes.\n    email: String\n\n    # WordPress locale code.\n    language: String\n\n    # Blog pages show at most.\n    posts_per_page: Int\n\n    # A day number of the week that the week should start on.\n    start_of_week: DaysOfWeek\n\n    # A time format for all time strings.\n    time_format: String\n\n    # A city in the same timezone as you.\n    timezone: String\n\n    # Site title.\n    title: String\n\n    # Site URL.\n    url: String\n\n    # Convert emoticons like :-) and :-P to graphics on display.\n    use_smilies: Boolean\n  ): Settings\n\n  # Create a new tag.\n  addTag(\n    # HTML description of the term. \n    description: String\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # HTML title for the term.\n    name: String!\n\n    # An alphanumeric identifier for the term unique to its type.\n    slug: String\n  ): Tag\n\n  # Update a tag by ID.\n  updateTag(\n    # HTML description of the term. \n    description: String\n\n    # ID of the tag being updated.\n    id: Int!\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # HTML title for the term.\n    name: String\n\n    # An alphanumeric identifier for the term unique to its type.\n    slug: String\n  ): Tag\n\n  # Delete a tag by ID.\n  deleteTag(\n    # Set internally. Required to be true, as terms do not support trashing.\n    force: Boolean = true\n\n    # ID of the tag being deleted.\n    id: Int!\n  ): DeletedTag\n\n  # Create a new user.\n  addUser(\n    # Description of the user.\n    description: String\n\n    # The email address for the user.\n    email: String!\n\n    # First name for the user.\n    first_name: String\n\n    # Last name for the user.\n    last_name: String\n\n    # Locale for the user.\n    locale: String\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # Display name for the user.\n    name: String\n\n    # The nickname for the user.\n    nickname: String\n\n    # Password for the user (never included).\n    password: String!\n\n    # Roles assigned to the user.\n    roles: [String]\n\n    # An alphanumeric identifier for the user.\n    slug: String\n\n    # URL of the user.\n    url: String\n\n    # Login name for the user.\n    username: String!\n  ): User\n\n  # Update a user by ID.\n  updateUser(\n    # Description of the user.\n    description: String\n\n    # The email address for the user.\n    email: String\n\n    # First name for the user.\n    first_name: String\n\n    # ID of the user being mutated.\n    id: Int!\n\n    # Last name for the user.\n    last_name: String\n\n    # Locale for the user.\n    locale: String\n\n    # JSON stringified meta fields.\n    meta: String\n\n    # Display name for the user.\n    name: String\n\n    # The nickname for the user.\n    nickname: String\n\n    # Password for the user (never included).\n    password: String\n\n    # Roles assigned to the user.\n    roles: [String]\n\n    # An alphanumeric identifier for the user.\n    slug: String\n\n    # URL of the user.\n    url: String\n\n    # Login name for the user.\n    username: String\n  ): User\n\n  # Delete a user by ID.\n  deleteUser(\n    # Always set to true internally. Must be true to complete request.\n    force: Boolean = true\n\n    # ID of user being deleted.\n    id: Int!\n\n    # Reassign the deleted user’s posts and links to this user ID.\n    reassign: Int = -1\n  ): DeletedUser\n}\n\nenum OpenOrClosed {\n  open\n  closed\n}\n\nenum Order {\n  asc\n  desc\n}\n\n# Accepts one of the following (unquoted) strings: count, description, id, name, slug, term_group\nenum OrderByCategory {\n  count\n  description\n  id\n  name\n  slug\n  term_group\n}\n\n# A WordPress Page Object.\ntype Page {\n  # The ID for the author of the object.\n  author: Int\n\n  # Whether or not comments are open on the object.\n  comment_status: String\n\n  # The content for the object.\n  content: ContentDescriptor\n\n  # The date the object was published, in the site's timezone.\n  date: String\n\n  # The date the object was published, as GMT.\n  date_gmt: String\n\n  # The excerpt for the object.\n  excerpt: ContentDescriptor\n\n  # The ID of the featured media for the object.\n  featured_media: Int\n\n  # The globally unique identifier for the object.\n  guid: RawOrRendered\n\n  # Unique identifier for the object.\n  id: Int!\n\n  # The URL to the object.\n  link: String\n\n  # Meta fields.\n  meta: String\n\n  # The date the object was last modified, in the site's timezone.\n  modified: String\n\n  # The date the object was last modified, as GMT.\n  modified_gmt: String\n\n  # Whether or not the object can be pinged.\n  ping_status: String\n\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n\n  # A named status for the object.\n  status: String\n\n  # The theme file to use to display the object. Currently unused.\n  template: String\n\n  # The title for the object.\n  title: RawOrRendered\n\n  # Type of Post for the object.\n  type: String\n\n  # The order of the object in relation to other object of its type.\n  menu_order: Int\n\n  # The id for the parent of the object.\n  parent: Int\n}\n\n# Accepts one of the following (unquoted) strings: date, id, include, menu_order, relevance, slug, title\nenum PageOrderBy {\n  date\n  id\n  include\n  menu_order\n  relevance\n  slug\n  title\n}\n\n# A WordPress Post Object.\ntype Post {\n  # The ID for the author of the object.\n  author: Int\n\n  # Whether or not comments are open on the object.\n  comment_status: String\n\n  # The content for the object.\n  content: ContentDescriptor\n\n  # The date the object was published, in the site's timezone.\n  date: String\n\n  # The date the object was published, as GMT.\n  date_gmt: String\n\n  # The excerpt for the object.\n  excerpt: ContentDescriptor\n\n  # The ID of the featured media for the object.\n  featured_media: Int\n\n  # The globally unique identifier for the object.\n  guid: RawOrRendered\n\n  # Unique identifier for the object.\n  id: Int!\n\n  # The URL to the object.\n  link: String\n\n  # Meta fields.\n  meta: String\n\n  # The date the object was last modified, in the site's timezone.\n  modified: String\n\n  # The date the object was last modified, as GMT.\n  modified_gmt: String\n\n  # Whether or not the object can be pinged.\n  ping_status: String\n\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n\n  # A named status for the object.\n  status: String\n\n  # The theme file to use to display the object. Currently unused.\n  template: String\n\n  # The title for the object.\n  title: RawOrRendered\n\n  # Type of Post for the object.\n  type: String\n\n  # The terms assigned to the object in the category taxonomy.\n  categories: [Int]\n\n  # The format for the object.\n  format: String\n\n  # The number of Liveblog Likes the post has.\n  liveblog_likes: Int\n\n  # A password to protect access to the content and excerpt.\n  password: String\n\n  # Whether or not the object should be treated as sticky.\n  sticky: Boolean\n\n  # The terms assigned to the object in the post_tag taxonomy.\n  tags: [Int]\n}\n\n# Human-readable labels for the resource for various contexts.\ntype PostLabels {\n  # Label for \"add_new\" field.\n  add_new: String\n\n  # Label for \"add_new_item\" field.\n  add_new_item: String\n\n  # Label for \"all_items\" field.\n  all_items: String\n\n  # Label for \"archives\" field.\n  archives: String\n\n  # Label for \"attributes\" field.\n  attributes: String\n\n  # Label for \"edit_item\" field.\n  edit_item: String\n\n  # Label for \"featured_image\" field.\n  featured_image: String\n\n  # Label for \"filter_items_list\" field.\n  filter_items_list: String\n\n  # Label for \"insert_into_item\" field.\n  insert_into_item: String\n\n  # Label for \"items_list\" field.\n  items_list: String\n\n  # Label for \"items_list_navigation\" field.\n  items_list_navigation: String\n\n  # Label for \"menu_name\" field.\n  menu_name: String\n\n  # Label for \"name\" field.\n  name: String\n\n  # Label for \"name_admin_bar\" field.\n  name_admin_bar: String\n\n  # Label for \"new_item\" field.\n  new_item: String\n\n  # Label for \"not_found\" field.\n  not_found: String\n\n  # Label for \"not_found_in_trash\" field.\n  not_found_in_trash: String\n\n  # Label for \"parent_item_colon\" field.\n  parent_item_colon: String\n\n  # Label for \"remove_featured_image\" field.\n  remove_featured_image: String\n\n  # Label for \"search_items\" field.\n  search_items: String\n\n  # Label for \"set_featured_image\" field.\n  set_featured_image: String\n\n  # Label for \"singular_name\" field.\n  singular_name: String\n\n  # Label for \"uploaded_to_this_item\" field.\n  uploaded_to_this_item: String\n\n  # Label for \"use_featured_image\" field.\n  use_featured_image: String\n\n  # Label for \"view_item\" field.\n  view_item: String\n\n  # Label for \"view_items\" field.\n  view_items: String\n}\n\n# Accepts one of the following (unquoted) strings: date, id, include, relevance, slug, title\nenum PostOrderBy {\n  date\n  id\n  include\n  relevance\n  slug\n  title\n}\n\n# Object representing a single post status type.\ntype PostStatus {\n  # The title for the resource.\n  name: String\n\n  # Whether posts with this resource should be private.\n  private: Boolean\n\n  # Whether posts with this resource should be protected.\n  protected: Boolean\n\n  # Whether posts of this resource should be shown in the front end of the site.\n  public: Boolean\n\n  # Whether posts with this resource should be publicly-queryable.\n  queryable: Boolean\n\n  # Whether to include posts in the edit listing for their post type.\n  show_in_list: Boolean\n\n  # An alphanumeric identifier for the resource.\n  slug: String\n}\n\n# Publication status of the post.\nenum PostStatusArg {\n  draft\n  future\n  pending\n  private\n  publish\n  trash\n}\n\n# Object containing all post status types.\ntype PostStatusObject {\n  # PostStatus for type \"draft\"\n  draft: PostStatus\n\n  # PostStatus for type \"future\"\n  future: PostStatus\n\n  # PostStatus for type \"pending\"\n  pending: PostStatus\n\n  # PostStatus for type \"private\"\n  private: PostStatus\n\n  # PostStatus for type \"publish\"\n  publish: PostStatus\n\n  # PostStatus for type \"trash\"\n  trash: PostStatus\n}\n\n# Object containing data for a single post type.\ntype PostType {\n  # All capabilities used by the resource.\n  capabilities: [String]\n\n  # A human-readable description of the resource.\n  description: String\n\n  # Whether or not the resource should have children.\n  hierarchial: Boolean\n\n  # Human-readable labels for the resource for various contexts.\n  labels: PostLabels\n\n  # The title for the resource.\n  name: String\n\n  # The base URL for the REST call.\n  rest_base: String\n\n  # An alphanumeric identifier for the resource.\n  slug: String\n\n  # Associated taxonomies.\n  taxonomies: [String]\n}\n\n# Object containing all post types whos key names are the post type slug.\ntype PostTypeList {\n  # WordPress \"Post\" type\n  post: PostType\n\n  # WordPress \"Page\" type\n  page: PostType\n\n  # WordPress \"Attachment\" type\n  attachment: PostType\n}\n\n# The root query.\ntype Query {\n  # List categories.\n  categories(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Current page of the collection.\n    page: Int\n\n    # Maximum number of items to be returned in result set.\n    per_page: Int\n\n    # Limit results to those matching a string.\n    search: String\n\n    # Ensure result set excludes specific IDs.\n    exclude: [Int]\n\n    # Limit result set to specific IDs.\n    include: [Int]\n\n    # Order sort attribute ascending or descending.\n    order: Order\n\n    # Sort collection by term attribute.\n    orderby: OrderByCategory\n\n    # Whether to hide terms not assigned to any posts.\n    hide_empty: Boolean\n\n    # Limit result set to terms assigned to a specific parent.\n    parent: String\n\n    # Limit result set to terms assigned to a specific post.\n    post: String\n\n    # Limit result set to terms with a specific slug.\n    slug: String\n  ): [Category]\n\n  # Fetch a single category.\n  category(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # ID for the category.\n    id: Int!\n  ): Category\n\n  # Fetch a list of comments.\n  comments(\n    # Limit response to resources published after a given ISO8601 compliant date.\n    after: String\n\n    # Limit result set to comments assigned to specific user ids. Requires authorization.\n    author: [Int]\n\n    # Limit result set to that from a specific author email. Requires authorization.\n    author_email: String\n\n    # Ensure result set excludes comments assigned to specific user ids. Requires authorization.\n    author_exclude: [Int]\n\n    # Limit response to resources published before a given ISO8601 compliant date.\n    before: String\n\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Ensure result set excludes specific ids.\n    exclude: [Int]\n\n    # Limit result set to specific ids.\n    include: [Int]\n\n    # Limit result set to that of a particular comment karma. Requires authorization.\n    karma: Int\n\n    # Offset the result set by a specific number of comments.\n    offset: Int\n\n    # Order sort attribute ascending or descending.\n    order: Order\n\n    # Sort collection by object attribute.\n    orderby: CommentsOrderby\n\n    # Current page of the collection.\n    page: Int\n\n    # Limit result set to resources of specific parent ids.\n    parent: [Int]\n\n    # Ensure result set excludes specific parent ids.\n    parent_exclude: [Int]\n\n    # Maximum number of items to be returned in result set.\n    per_page: Int\n\n    # Limit result set to resources assigned to specific post ids.\n    post: String\n\n    # Limit results to those matching a string.\n    search: String\n\n    # Limit result set to comments assigned a specific status. Requires authorization.\n    status: CommentStatus\n\n    # Limit result set to comments assigned a specific type. Requires authorization.\n    type: String\n  ): [Comment]\n\n  # Fetch a single comment\n  comment(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # ID of the comment being requested.\n    id: Int!\n  ): Comment\n\n  # Fetch a list of media items.\n  mediaList(\n    # Limit response to resources published after a given ISO8601 compliant date.\n    after: String\n\n    # Limit result set to posts assigned to specific authors.\n    author: [Int]\n\n    # Ensure result set excludes posts assigned to specific authors.\n    author_exclude: [Int]\n\n    # Limit response to resources published before a given ISO8601 compliant date.\n    before: String\n\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Ensure result set excludes specific ids.\n    exclude: [Int]\n\n    # Use WP Query arguments to modify the response. (Not supported very well by WordPress)\n    filter: String\n\n    # Limit result set to specific ids.\n    include: [Int]\n\n    # Limit result set to attachments of a particular media type.\n    media_type: MediaMimeType\n\n    # Limit result set to attachments of a particular MIME type.\n    mime_type: String\n\n    # Offset the result set by a specific number of items.\n    offset: Int\n\n    # Order sort attribute ascending or descending.\n    order: Order\n\n    # Sort collection by object attribute.\n    orderby: MediaOrderBy\n\n    # Current page of the collection.\n    page: Int\n\n    # Limit result set to those of particular parent ids.\n    parent: [Int]\n\n    # Limit result set to all items except those of a particular parent id.\n    parent_exclude: [Int]\n\n    # Maximum number of items to be returned in result set.\n    per_page: Int\n\n    # Limit results to those matching a string.\n    search: String\n\n    # Limit result set to posts with a specific slug.\n    slug: String\n\n    # Limit result set to posts assigned a specific status.\n    status: MediaStatus\n  ): [Media]\n\n  # Retrieve a single media item by ID.\n  media(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # ID of the media item being fetched.\n    id: Int!\n\n    # The password for the post if it is password protected.\n    password: String\n  ): Media\n\n  # Retrieve a list of posts.\n  pages(\n    # Limit response to resources published after a given ISO8601 compliant date.\n    after: String\n\n    # Limit result set to posts assigned to specific authors.\n    author: [Int]\n\n    # Ensure result set excludes posts assigned to specific authors.\n    author_exclude: [Int]\n\n    # Limit response to resources published before a given ISO8601 compliant date.\n    before: String\n\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Ensure result set excludes specific ids.\n    exclude: [Int]\n\n    # Use WP Query arguments to modify the response.\n    filter: String\n\n    # Limit result set to specific ids.\n    include: [Int]\n\n    # Limit result set to resources with a specific menu_order value.\n    menu_order: Int\n\n    # Offset the result set by a specific number of items.\n    offset: Int\n\n    # Order sort attribute ascending or descending.\n    order: Order\n\n    # Sort collection by object attribute.\n    orderby: PageOrderBy\n\n    # Current page of the collection.\n    page: Int\n\n    # Limit result set to those of particular parent ids.\n    parent: [Int]\n\n    # Limit result set to all items except those of a particular parent id.\n    parent_exclude: [Int]\n\n    # Maximum number of items to be returned in result set.\n    per_page: Int\n\n    # Limit results to those matching a string.\n    search: String\n\n    # Limit result set to posts with a specific slug.\n    slug: String\n\n    # Limit result set to posts assigned a specific status.\n    status: [PostStatusArg]\n  ): [Page]\n  page(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # The ID of the page.\n    id: Int!\n\n    # The password for the post if it is password protected.\n    password: String\n  ): Page\n\n  # Fetch all post statuses.\n  postStatuses(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n  ): PostStatusObject\n\n  # Fetch a single post status.\n  postStatus(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # The post status being queried.\n    status: PostStatusArg!\n  ): PostStatus\n\n  # Retrieve an object of post types.\n  postTypes(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n  ): PostTypeList\n\n  # Retrieve a single post type.\n  postType(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Slug of the post type being requested.\n    slug: String!\n  ): PostType\n\n  # Retrieve a list of type \"post\".\n  posts(\n    # Limit response to resources published after a given ISO8601 compliant date.\n    after: String\n\n    # Limit result set to content assigned to specific authors.\n    author: [Int]\n\n    # Ensure result set excludes content assigned to specific authors.\n    author_exclude: [Int]\n\n    # Limit response to resources published before a given ISO8601 compliant date.\n    before: String\n\n    # Limit result set to all items that have the specified term assigned in the categories taxonomy.\n    categories: [Int]\n\n    # Limit result set to all items except those that have the specified term assigned in the categories taxonomy.\n    categories_exclude: [Int]\n\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Ensure result set excludes specific ids.\n    exclude: [Int]\n\n    # Limit result set to specific ids.\n    include: [Int]\n\n    # Offset the result set by a specific number of items.\n    offset: Int\n\n    # Order sort attribute ascending or descending.\n    order: Order\n\n    # Sort collection by object attribute.\n    orderby: PostOrderBy\n\n    # Current page of the collection.\n    page: Int\n\n    # Maximum number of items to be returned in result set.\n    per_page: Int\n\n    # Limit results to those matching a string.\n    search: String\n\n    # Limit result set to content with a specific slug.\n    slug: String\n\n    # Limit result set to content assigned a specific status.\n    status: [PostStatusArg]\n\n    # Limit result set to items that are sticky.\n    sticky: Boolean\n\n    # Limit result set to all items that have the specified term assigned in the tags taxonomy.\n    tags: [Int]\n\n    # Limit result set to all items except those that have the specified term assigned in the tags taxonomy.\n    tags_exclude: [Int]\n  ): [Post]\n\n  # Retrieve a single item of type \"posts\"\n  post(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # The ID of the content.\n    id: Int!\n\n    # The password for the content if it is password protected.\n    password: String\n  ): Post\n\n  # List all revisions for an individual post.\n  revisions(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # The ID of the post.\n    id: Int!\n\n    # The type of post.\n    postType: String = \"posts\"\n  ): [Revision]\n\n  # Get a single post revision.\n  revision(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # The ID of the revision.\n    id: Int!\n\n    # The type of post.\n    postType: String = \"posts\"\n\n    # The ID of the post.\n    parentId: Int!\n  ): Revision\n\n  # Fetch the site settings.\n  settings: Settings\n\n  # Fetch a list of tags.\n  tags(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Ensure result set excludes specific IDs.\n    exclude: [Int]\n\n    # Whether to hide terms not assigned to any posts.\n    hide_empty: Boolean\n\n    # Limit result set to specific IDs.\n    include: [Int]\n\n    # Offset the result set by a specific number of items.\n    offset: Int\n\n    # Order sort attribute ascending or descending.\n    order: Order\n\n    # Sort collection by term attribute.\n    orderby: TagOrderBy\n\n    # Current page of the collection.\n    page: Int\n\n    # Maximum number of items to be returned in result set.\n    per_page: Int\n\n    # Limit result set to terms assigned to a specific post.\n    post: Int\n\n    # Limit results to those matching a string.\n    search: String\n\n    # Limit result set to terms with a specific slug.\n    slug: String\n  ): [Tag]\n\n  # Fetch a single tag.\n  tag(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # ID of the tag of interest.\n    id: Int!\n  ): Tag\n\n  # List all taxonomies.\n  taxonomies(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Limit results to taxonomies associated with a specific post type.\n    type: String\n  ): [Taxonomy]\n\n  # Fetch a single taxonomy.\n  taxonomy(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Slug of the specific taxonomy being queried.\n    slug: String!\n  ): Taxonomy\n\n  # Fetch a list of all users.\n  users(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # Ensure result set excludes specific IDs.\n    exclude: [Int]\n\n    # Limit result set to specific IDs.\n    include: [Int]\n\n    # Offset the result set by a specific number of items.\n    offset: Int\n\n    # Order sort attribute ascending or descending.\n    order: Order\n\n    # Sort collection by object attribute.\n    orderby: UserOrderBy\n\n    # Current page of the collection.\n    page: Int\n\n    # Maximum number of items to be returned in result set.\n    per_page: Int\n\n    # Limit results to those matching a string.\n    search: String\n\n    # Limit result set to users matching at least one specific role provided. Accepts csv list or single role.\n    roles: [String]\n\n    # Limit result set to users with a specific slug.\n    slug: String\n  ): [User]\n\n  # Retrieve a single user.\n  user(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context\n\n    # ID for the user.\n    id: Int!\n  ): User\n\n  # Retrieve the currently logged in user.\n  me(\n    # Scope under which the request is made; determines fields present in response.\n    context: Context = edit\n  ): User\n}\n\ntype RawOrRendered {\n  # The raw text without markup of the content. (Requires authentication)\n  raw: String\n\n  # The HTML for the rendered content.\n  rendered: String\n}\n\n# A post revision object.\ntype Revision {\n  # The id for the author of the object.\n  author: Int\n\n  # Content for the object, as it exists in the database.\n  content: ContentDescriptor\n\n  # The date the object was published. (ISO8601)\n  date: String\n\n  # The date the object was published, as GMT.\n  date_gmt: String\n\n  # Excerpt for the object, as it exists in the database.\n  excerpt: ContentDescriptor\n\n  # GUID for the object, as it exists in the database.\n  guid: RawOrRendered\n\n  # Unique identifier for the object.\n  id: Int\n\n  # The date the object was last modified.\n  modified: String\n\n  # The date the object was last modified, as GMT.\n  modified_gmt: String\n\n  # The id for the parent of the object.\n  parent: Int\n\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n\n  # Title for the object, as it exists in the database.\n  title: RawOrRendered\n}\n\n# Object containing site settings.\ntype Settings {\n  # A date format for all date strings.\n  date_format: String\n\n  # ID of default category.\n  default_category: Int\n\n  # Either \"open\" or \"closed\".\n  default_comment_status: OpenOrClosed\n\n  # Either \"open\" or \"closed\".\n  default_ping_status: OpenOrClosed\n\n  # Default post format.\n  default_post_format: String\n\n  # Site description.\n  description: String\n\n  # This address is used for admin purposes.\n  email: String\n\n  # WordPress locale code.\n  language: String\n\n  # Blog pages show at most.\n  posts_per_page: Int\n\n  # A day number of the week that the week should start on.\n  start_of_week: Int\n\n  # A time format for all time strings.\n  time_format: String\n\n  # A city in the same timezone as you.\n  timezone: String\n\n  # Site title.\n  title: String\n\n  # Site URL.\n  url: String\n\n  # Convert emoticons like :-) and :-P to graphics on display.\n  use_smilies: Boolean\n}\n\n# A single tag object.\ntype Tag {\n  # Number of published posts for the term.\n  count: Int\n\n  # HTML description of the term.\n  description: String\n\n  # Unique identifier for the term.\n  id: Int!\n\n  # URL of the term.\n  link: String\n\n  # Meta fields.\n  meta: String\n\n  # HTML title for the term.\n  name: String\n\n  # An alphanumeric identifier for the term unique to its type.\n  slug: String\n\n  # Type attribution for the term.\n  taxonomy: String\n}\n\n# Accepts one of the following (unquoted) strings: count, description, id, include, name, slug, term_group\nenum TagOrderBy {\n  count\n  description\n  id\n  include\n  name\n  slug\n  term_group\n}\n\n# A single taxonomy object.\ntype Taxonomy {\n  # All capabilities used by the taxonomy.\n  capabilities: TaxonomyCapabilities\n\n  # A human-readable description of the taxonomy.\n  description: String\n\n  # Whether or not the taxonomy should have children.\n  hierarchial: Boolean\n\n  # Human-readable labels for the taxonomy for various contexts.\n  labels: TaxonomyLabels\n\n  # The title for the taxonomy.\n  name: String\n\n  # REST base route for the taxonomy.\n  rest_base: String\n\n  # Whether or not the term cloud should be displayed.\n  show_cloud: Boolean\n\n  # An alphanumeric identifier for the taxonomy.\n  slug: String\n\n  # Types associated with the taxonomy.\n  types: [String]\n}\n\n# All capabilities used by the taxonomy.\ntype TaxonomyCapabilities {\n  # Unique label for \"assign_terms\" field\n  assign_terms: String\n\n  # Unique label for \"delete_terms\" field\n  delete_terms: String\n\n  # Unique label for \"edit_terms\" field\n  edit_terms: String\n\n  # Unique label for \"manage_terms\" field\n  manage_terms: String\n}\n\n# Human-readable labels for the resource for various contexts.\ntype TaxonomyLabels {\n  # Label for \"add_new_item\" field.\n  add_new_item: String\n\n  # Label for \"add_or_remove_items\" field.\n  add_or_remove_items: String\n\n  # Label for \"all_items\" field.\n  all_items: String\n\n  # Label for \"choose_from_most_used\" field.\n  choose_from_most_used: String\n\n  # Label for \"edit_item\" field.\n  edit_item: String\n\n  # Label for \"items_list\" field.\n  items_list: String\n\n  # Label for \"items_list_navigation\" field.\n  items_list_navigation: String\n\n  # Label for \"menu_name\" field.\n  menu_name: String\n\n  # Label for \"name\" field.\n  name: String\n\n  # Label for \"name_admin_bar\" field.\n  name_admin_bar: String\n\n  # Label for \"new_item_name\" field.\n  new_item_name: String\n\n  # Label for \"no_terms\" field.\n  no_terms: String\n\n  # Label for \"not_found\" field.\n  not_found: String\n\n  # Label for \"parent_item\" field.\n  parent_item: String\n\n  # Label for \"parent_item_colon\" field.\n  parent_item_colon: String\n\n  # Label for \"popular_items\" field.\n  popular_items: String\n\n  # Label for \"search_items\" field.\n  search_items: String\n\n  # Label for \"separate_items_with_commas\" field.\n  separate_items_with_commas: String\n\n  # Label for \"singular_name\" field.\n  singular_name: String\n\n  # Label for \"update_item\" field.\n  update_item: String\n\n  # Label for \"view_item\" field.\n  view_item: String\n}\n\n# A WordPress User Object.\ntype User {\n  # Avatar URLs for the user.\n  avatar_urls: AvatarObject\n\n  # All capabilities assigned to the user.\n  capabilities: [String]\n\n  # Description of the user.\n  description: String\n\n  # Any extra capabilities assigned to the user.\n  extra_capabilities: [String]\n\n  # The email address for the user.\n  email: String\n\n  # First name for the user.\n  first_name: String\n\n  # Unique identifier for the user.\n  id: Int!\n\n  # Last name for the user.\n  last_name: String\n\n  # Author URL of the user.\n  link: String\n\n  # Locale for the user.\n  locale: String\n\n  # JSON stringified meta fields.\n  meta: String\n\n  # Display name for the user.\n  name: String\n\n  # The nickname for the user.\n  nickname: String\n\n  # Registration date for the user. (ISO8601)\n  registered_date: String\n\n  # Roles assigned to the user.\n  roles: [String]\n\n  # An alphanumeric identifier for the user.\n  slug: String\n\n  # URL of the user.\n  url: String\n\n  # Login name for the user.\n  username: String\n}\n\n# Accepts one of the following (unquoted) strings: email, id, include, name, registered_date, slug, url\nenum UserOrderBy {\n  email\n  id\n  include\n  name\n  registered_date\n  slug\n  url\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 33,
      "containsCycle": false,
      "polynomialLevel": 2,
      "numDefinitions": 53
    }
  ],
  "metrics": {
    "created_at": "2017-02-01T22:43:55Z",
    "updated_at": "2018-09-03T09:17:42Z",
    "pushed_at": "2017-03-03T19:48:29Z",
    "issues": 2,
    "watchers": 5,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 5,
    "pull_requests_open": 0,
    "pull_requests_closed": 1,
    "pull_requests_merged": 4,
    "releases": 1,
    "stargazers": 9
  }
}