{
  "repo_name": "Engispace-React-Redux-Backend",
  "repo_full_name": "starcoma/engispace-react-redux-backend",
  "repo_owner": "starcoma",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "models.graphql",
      "path": "graphql/models.graphql",
      "sha": "28643f88a4000e8a42faa3f51420d42aed3a7acc",
      "url": "https://api.github.com/repositories/185114629/contents/graphql/models.graphql?ref=b18f48cd053e99bbc84aa5cf5509ac36ca450794",
      "git_url": "https://api.github.com/repositories/185114629/git/blobs/28643f88a4000e8a42faa3f51420d42aed3a7acc",
      "html_url": "https://github.com/starcoma/Engispace-React-Redux-Backend/blob/b18f48cd053e99bbc84aa5cf5509ac36ca450794/graphql/models.graphql",
      "content": "\"\"\"All input for the create `PlUser` mutation.\"\"\"\ninput CreatePlUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `PlUser` to be created by this mutation.\"\"\"\n  plUser: PlUserInput!\n}\n\n\"\"\"The output of our create `PlUser` mutation.\"\"\"\ntype CreatePlUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `PlUser` that was created by this mutation.\"\"\"\n  plUser: PlUser\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `PlUser`. May be used by Relay 1.\"\"\"\n  plUserEdge(\n    \"\"\"The method to use when ordering `PlUser`.\"\"\"\n    orderBy: [PlUsersOrderBy!] = PRIMARY_KEY_ASC\n  ): PlUsersEdge\n}\n\n\"\"\"All input for the create `Session` mutation.\"\"\"\ninput CreateSessionInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Session` to be created by this mutation.\"\"\"\n  session: SessionInput!\n}\n\n\"\"\"The output of our create `Session` mutation.\"\"\"\ntype CreateSessionPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Session` that was created by this mutation.\"\"\"\n  session: Session\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Session`. May be used by Relay 1.\"\"\"\n  sessionEdge(\n    \"\"\"The method to use when ordering `Session`.\"\"\"\n    orderBy: [SessionsOrderBy!] = PRIMARY_KEY_ASC\n  ): SessionsEdge\n}\n\n\"\"\"A location in a connection that can be used for resuming pagination.\"\"\"\nscalar Cursor\n\n\"\"\"\nA point in time as described by the [ISO\n8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.\n\"\"\"\nscalar Datetime\n\n\"\"\"All input for the `deletePlUserByEmail` mutation.\"\"\"\ninput DeletePlUserByEmailInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  email: String!\n}\n\n\"\"\"All input for the `deletePlUserByFacebookId` mutation.\"\"\"\ninput DeletePlUserByFacebookIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  facebookId: String!\n}\n\n\"\"\"All input for the `deletePlUserByGithubId` mutation.\"\"\"\ninput DeletePlUserByGithubIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  githubId: String!\n}\n\n\"\"\"All input for the `deletePlUserByGoogleId` mutation.\"\"\"\ninput DeletePlUserByGoogleIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  googleId: String!\n}\n\n\"\"\"All input for the `deletePlUserById` mutation.\"\"\"\ninput DeletePlUserByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deletePlUserByLinkedInId` mutation.\"\"\"\ninput DeletePlUserByLinkedInIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  linkedInId: String!\n}\n\n\"\"\"All input for the `deletePlUserByTwitterId` mutation.\"\"\"\ninput DeletePlUserByTwitterIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  twitterId: String!\n}\n\n\"\"\"All input for the `deletePlUser` mutation.\"\"\"\ninput DeletePlUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `PlUser` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `PlUser` mutation.\"\"\"\ntype DeletePlUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `PlUser` that was deleted by this mutation.\"\"\"\n  plUser: PlUser\n  deletedPlUserId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `PlUser`. May be used by Relay 1.\"\"\"\n  plUserEdge(\n    \"\"\"The method to use when ordering `PlUser`.\"\"\"\n    orderBy: [PlUsersOrderBy!] = PRIMARY_KEY_ASC\n  ): PlUsersEdge\n}\n\n\"\"\"All input for the `deleteSessionBySid` mutation.\"\"\"\ninput DeleteSessionBySidInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  sid: String!\n}\n\n\"\"\"All input for the `deleteSession` mutation.\"\"\"\ninput DeleteSessionInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Session` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `Session` mutation.\"\"\"\ntype DeleteSessionPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Session` that was deleted by this mutation.\"\"\"\n  session: Session\n  deletedSessionId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Session`. May be used by Relay 1.\"\"\"\n  sessionEdge(\n    \"\"\"The method to use when ordering `Session`.\"\"\"\n    orderBy: [SessionsOrderBy!] = PRIMARY_KEY_ASC\n  ): SessionsEdge\n}\n\n\"\"\"\nA JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n\n\"\"\"\nThe root mutation type which contains root level fields which mutate data.\n\"\"\"\ntype Mutation {\n  \"\"\"Creates a single `PlUser`.\"\"\"\n  createPlUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreatePlUserInput!\n  ): CreatePlUserPayload\n\n  \"\"\"Creates a single `Session`.\"\"\"\n  createSession(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreateSessionInput!\n  ): CreateSessionPayload\n\n  \"\"\"Updates a single `PlUser` using its globally unique id and a patch.\"\"\"\n  updatePlUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePlUserInput!\n  ): UpdatePlUserPayload\n\n  \"\"\"Updates a single `PlUser` using a unique key and a patch.\"\"\"\n  updatePlUserById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePlUserByIdInput!\n  ): UpdatePlUserPayload\n\n  \"\"\"Updates a single `PlUser` using a unique key and a patch.\"\"\"\n  updatePlUserByGoogleId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePlUserByGoogleIdInput!\n  ): UpdatePlUserPayload\n\n  \"\"\"Updates a single `PlUser` using a unique key and a patch.\"\"\"\n  updatePlUserByFacebookId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePlUserByFacebookIdInput!\n  ): UpdatePlUserPayload\n\n  \"\"\"Updates a single `PlUser` using a unique key and a patch.\"\"\"\n  updatePlUserByTwitterId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePlUserByTwitterIdInput!\n  ): UpdatePlUserPayload\n\n  \"\"\"Updates a single `PlUser` using a unique key and a patch.\"\"\"\n  updatePlUserByLinkedInId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePlUserByLinkedInIdInput!\n  ): UpdatePlUserPayload\n\n  \"\"\"Updates a single `PlUser` using a unique key and a patch.\"\"\"\n  updatePlUserByGithubId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePlUserByGithubIdInput!\n  ): UpdatePlUserPayload\n\n  \"\"\"Updates a single `PlUser` using a unique key and a patch.\"\"\"\n  updatePlUserByEmail(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePlUserByEmailInput!\n  ): UpdatePlUserPayload\n\n  \"\"\"Updates a single `Session` using its globally unique id and a patch.\"\"\"\n  updateSession(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateSessionInput!\n  ): UpdateSessionPayload\n\n  \"\"\"Updates a single `Session` using a unique key and a patch.\"\"\"\n  updateSessionBySid(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateSessionBySidInput!\n  ): UpdateSessionPayload\n\n  \"\"\"Deletes a single `PlUser` using its globally unique id.\"\"\"\n  deletePlUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePlUserInput!\n  ): DeletePlUserPayload\n\n  \"\"\"Deletes a single `PlUser` using a unique key.\"\"\"\n  deletePlUserById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePlUserByIdInput!\n  ): DeletePlUserPayload\n\n  \"\"\"Deletes a single `PlUser` using a unique key.\"\"\"\n  deletePlUserByGoogleId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePlUserByGoogleIdInput!\n  ): DeletePlUserPayload\n\n  \"\"\"Deletes a single `PlUser` using a unique key.\"\"\"\n  deletePlUserByFacebookId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePlUserByFacebookIdInput!\n  ): DeletePlUserPayload\n\n  \"\"\"Deletes a single `PlUser` using a unique key.\"\"\"\n  deletePlUserByTwitterId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePlUserByTwitterIdInput!\n  ): DeletePlUserPayload\n\n  \"\"\"Deletes a single `PlUser` using a unique key.\"\"\"\n  deletePlUserByLinkedInId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePlUserByLinkedInIdInput!\n  ): DeletePlUserPayload\n\n  \"\"\"Deletes a single `PlUser` using a unique key.\"\"\"\n  deletePlUserByGithubId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePlUserByGithubIdInput!\n  ): DeletePlUserPayload\n\n  \"\"\"Deletes a single `PlUser` using a unique key.\"\"\"\n  deletePlUserByEmail(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePlUserByEmailInput!\n  ): DeletePlUserPayload\n\n  \"\"\"Deletes a single `Session` using its globally unique id.\"\"\"\n  deleteSession(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteSessionInput!\n  ): DeleteSessionPayload\n\n  \"\"\"Deletes a single `Session` using a unique key.\"\"\"\n  deleteSessionBySid(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteSessionBySidInput!\n  ): DeleteSessionPayload\n}\n\n\"\"\"An object with a globally unique `ID`.\"\"\"\ninterface Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: Cursor\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: Cursor\n}\n\ntype PlUser implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n  password: String\n  googleId: String\n  facebookId: String\n  twitterId: String\n  linkedInId: String\n  githubId: String\n  resetPasswordExpires: Datetime\n  resetPasswordToken: String\n  createdAt: Datetime\n  updatedAt: Datetime\n  logins: Int\n  email: String!\n  profile: JSON\n  tokens: JSON\n}\n\n\"\"\"\nA condition to be used against `PlUser` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput PlUserCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `password` field.\"\"\"\n  password: String\n\n  \"\"\"Checks for equality with the object’s `googleId` field.\"\"\"\n  googleId: String\n\n  \"\"\"Checks for equality with the object’s `facebookId` field.\"\"\"\n  facebookId: String\n\n  \"\"\"Checks for equality with the object’s `twitterId` field.\"\"\"\n  twitterId: String\n\n  \"\"\"Checks for equality with the object’s `linkedInId` field.\"\"\"\n  linkedInId: String\n\n  \"\"\"Checks for equality with the object’s `githubId` field.\"\"\"\n  githubId: String\n\n  \"\"\"Checks for equality with the object’s `resetPasswordExpires` field.\"\"\"\n  resetPasswordExpires: Datetime\n\n  \"\"\"Checks for equality with the object’s `resetPasswordToken` field.\"\"\"\n  resetPasswordToken: String\n\n  \"\"\"Checks for equality with the object’s `createdAt` field.\"\"\"\n  createdAt: Datetime\n\n  \"\"\"Checks for equality with the object’s `updatedAt` field.\"\"\"\n  updatedAt: Datetime\n\n  \"\"\"Checks for equality with the object’s `logins` field.\"\"\"\n  logins: Int\n\n  \"\"\"Checks for equality with the object’s `email` field.\"\"\"\n  email: String\n\n  \"\"\"Checks for equality with the object’s `profile` field.\"\"\"\n  profile: JSON\n\n  \"\"\"Checks for equality with the object’s `tokens` field.\"\"\"\n  tokens: JSON\n}\n\n\"\"\"An input for mutations affecting `PlUser`\"\"\"\ninput PlUserInput {\n  id: Int\n  password: String\n  googleId: String\n  facebookId: String\n  twitterId: String\n  linkedInId: String\n  githubId: String\n  resetPasswordExpires: Datetime\n  resetPasswordToken: String\n  createdAt: Datetime\n  updatedAt: Datetime\n  logins: Int\n  email: String!\n  profile: JSON\n  tokens: JSON\n}\n\n\"\"\"\nRepresents an update to a `PlUser`. Fields that are set will be updated.\n\"\"\"\ninput PlUserPatch {\n  id: Int\n  password: String\n  googleId: String\n  facebookId: String\n  twitterId: String\n  linkedInId: String\n  githubId: String\n  resetPasswordExpires: Datetime\n  resetPasswordToken: String\n  createdAt: Datetime\n  updatedAt: Datetime\n  logins: Int\n  email: String\n  profile: JSON\n  tokens: JSON\n}\n\n\"\"\"A connection to a list of `PlUser` values.\"\"\"\ntype PlUsersConnection {\n  \"\"\"A list of `PlUser` objects.\"\"\"\n  nodes: [PlUser]!\n\n  \"\"\"\n  A list of edges which contains the `PlUser` and cursor to aid in pagination.\n  \"\"\"\n  edges: [PlUsersEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `PlUser` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `PlUser` edge in the connection.\"\"\"\ntype PlUsersEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `PlUser` at the end of the edge.\"\"\"\n  node: PlUser\n}\n\n\"\"\"Methods to use when ordering `PlUser`.\"\"\"\nenum PlUsersOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  PASSWORD_ASC\n  PASSWORD_DESC\n  GOOGLE_ID_ASC\n  GOOGLE_ID_DESC\n  FACEBOOK_ID_ASC\n  FACEBOOK_ID_DESC\n  TWITTER_ID_ASC\n  TWITTER_ID_DESC\n  LINKED_IN_ID_ASC\n  LINKED_IN_ID_DESC\n  GITHUB_ID_ASC\n  GITHUB_ID_DESC\n  RESET_PASSWORD_EXPIRES_ASC\n  RESET_PASSWORD_EXPIRES_DESC\n  RESET_PASSWORD_TOKEN_ASC\n  RESET_PASSWORD_TOKEN_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  UPDATED_AT_ASC\n  UPDATED_AT_DESC\n  LOGINS_ASC\n  LOGINS_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PROFILE_ASC\n  PROFILE_DESC\n  TOKENS_ASC\n  TOKENS_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"The root query type which gives access points into the data universe.\"\"\"\ntype Query implements Node {\n  \"\"\"\n  Exposes the root query type nested one level down. This is helpful for Relay 1\n  which can only query top level fields if they are in a particular form.\n  \"\"\"\n  query: Query!\n\n  \"\"\"\n  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"Fetches an object given its globally unique `ID`.\"\"\"\n  node(\n    \"\"\"The globally unique `ID`.\"\"\"\n    nodeId: ID!\n  ): Node\n\n  \"\"\"Reads and enables pagination through a set of `PlUser`.\"\"\"\n  allPlUsers(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `PlUser`.\"\"\"\n    orderBy: [PlUsersOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: PlUserCondition\n  ): PlUsersConnection\n\n  \"\"\"Reads and enables pagination through a set of `Session`.\"\"\"\n  allSessions(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Session`.\"\"\"\n    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: SessionCondition\n  ): SessionsConnection\n  plUserById(id: Int!): PlUser\n  plUserByGoogleId(googleId: String!): PlUser\n  plUserByFacebookId(facebookId: String!): PlUser\n  plUserByTwitterId(twitterId: String!): PlUser\n  plUserByLinkedInId(linkedInId: String!): PlUser\n  plUserByGithubId(githubId: String!): PlUser\n  plUserByEmail(email: String!): PlUser\n  sessionBySid(sid: String!): Session\n\n  \"\"\"Reads a single `PlUser` using its globally unique `ID`.\"\"\"\n  plUser(\n    \"\"\"The globally unique `ID` to be used in selecting a single `PlUser`.\"\"\"\n    nodeId: ID!\n  ): PlUser\n\n  \"\"\"Reads a single `Session` using its globally unique `ID`.\"\"\"\n  session(\n    \"\"\"The globally unique `ID` to be used in selecting a single `Session`.\"\"\"\n    nodeId: ID!\n  ): Session\n}\n\ntype Session implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  sid: String!\n  sess: JSON!\n  expire: Datetime!\n}\n\n\"\"\"\nA condition to be used against `Session` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput SessionCondition {\n  \"\"\"Checks for equality with the object’s `sid` field.\"\"\"\n  sid: String\n\n  \"\"\"Checks for equality with the object’s `sess` field.\"\"\"\n  sess: JSON\n\n  \"\"\"Checks for equality with the object’s `expire` field.\"\"\"\n  expire: Datetime\n}\n\n\"\"\"An input for mutations affecting `Session`\"\"\"\ninput SessionInput {\n  sid: String!\n  sess: JSON!\n  expire: Datetime!\n}\n\n\"\"\"\nRepresents an update to a `Session`. Fields that are set will be updated.\n\"\"\"\ninput SessionPatch {\n  sid: String\n  sess: JSON\n  expire: Datetime\n}\n\n\"\"\"A connection to a list of `Session` values.\"\"\"\ntype SessionsConnection {\n  \"\"\"A list of `Session` objects.\"\"\"\n  nodes: [Session]!\n\n  \"\"\"\n  A list of edges which contains the `Session` and cursor to aid in pagination.\n  \"\"\"\n  edges: [SessionsEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `Session` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `Session` edge in the connection.\"\"\"\ntype SessionsEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `Session` at the end of the edge.\"\"\"\n  node: Session\n}\n\n\"\"\"Methods to use when ordering `Session`.\"\"\"\nenum SessionsOrderBy {\n  NATURAL\n  SID_ASC\n  SID_DESC\n  SESS_ASC\n  SESS_DESC\n  EXPIRE_ASC\n  EXPIRE_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"All input for the `updatePlUserByEmail` mutation.\"\"\"\ninput UpdatePlUserByEmailInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `PlUser` being updated.\n  \"\"\"\n  plUserPatch: PlUserPatch!\n  email: String!\n}\n\n\"\"\"All input for the `updatePlUserByFacebookId` mutation.\"\"\"\ninput UpdatePlUserByFacebookIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `PlUser` being updated.\n  \"\"\"\n  plUserPatch: PlUserPatch!\n  facebookId: String!\n}\n\n\"\"\"All input for the `updatePlUserByGithubId` mutation.\"\"\"\ninput UpdatePlUserByGithubIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `PlUser` being updated.\n  \"\"\"\n  plUserPatch: PlUserPatch!\n  githubId: String!\n}\n\n\"\"\"All input for the `updatePlUserByGoogleId` mutation.\"\"\"\ninput UpdatePlUserByGoogleIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `PlUser` being updated.\n  \"\"\"\n  plUserPatch: PlUserPatch!\n  googleId: String!\n}\n\n\"\"\"All input for the `updatePlUserById` mutation.\"\"\"\ninput UpdatePlUserByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `PlUser` being updated.\n  \"\"\"\n  plUserPatch: PlUserPatch!\n  id: Int!\n}\n\n\"\"\"All input for the `updatePlUserByLinkedInId` mutation.\"\"\"\ninput UpdatePlUserByLinkedInIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `PlUser` being updated.\n  \"\"\"\n  plUserPatch: PlUserPatch!\n  linkedInId: String!\n}\n\n\"\"\"All input for the `updatePlUserByTwitterId` mutation.\"\"\"\ninput UpdatePlUserByTwitterIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `PlUser` being updated.\n  \"\"\"\n  plUserPatch: PlUserPatch!\n  twitterId: String!\n}\n\n\"\"\"All input for the `updatePlUser` mutation.\"\"\"\ninput UpdatePlUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `PlUser` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `PlUser` being updated.\n  \"\"\"\n  plUserPatch: PlUserPatch!\n}\n\n\"\"\"The output of our update `PlUser` mutation.\"\"\"\ntype UpdatePlUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `PlUser` that was updated by this mutation.\"\"\"\n  plUser: PlUser\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `PlUser`. May be used by Relay 1.\"\"\"\n  plUserEdge(\n    \"\"\"The method to use when ordering `PlUser`.\"\"\"\n    orderBy: [PlUsersOrderBy!] = PRIMARY_KEY_ASC\n  ): PlUsersEdge\n}\n\n\"\"\"All input for the `updateSessionBySid` mutation.\"\"\"\ninput UpdateSessionBySidInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Session` being updated.\n  \"\"\"\n  sessionPatch: SessionPatch!\n  sid: String!\n}\n\n\"\"\"All input for the `updateSession` mutation.\"\"\"\ninput UpdateSessionInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Session` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `Session` being updated.\n  \"\"\"\n  sessionPatch: SessionPatch!\n}\n\n\"\"\"The output of our update `Session` mutation.\"\"\"\ntype UpdateSessionPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Session` that was updated by this mutation.\"\"\"\n  session: Session\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Session`. May be used by Relay 1.\"\"\"\n  sessionEdge(\n    \"\"\"The method to use when ordering `Session`.\"\"\"\n    orderBy: [SessionsOrderBy!] = PRIMARY_KEY_ASC\n  ): SessionsEdge\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 15,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 49
    }
  ],
  "metrics": {
    "created_at": "2019-05-06T03:05:53Z",
    "updated_at": "2019-05-06T03:08:11Z",
    "pushed_at": "2019-05-06T03:07:46Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 1
  }
}