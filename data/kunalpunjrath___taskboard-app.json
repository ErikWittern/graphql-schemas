{
  "repo_name": "taskboard-app",
  "repo_full_name": "kunalpunjrath/taskboard-app",
  "repo_owner": "kunalpunjrath",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "prisma.graphql",
      "path": "server/src/generated/prisma.graphql",
      "sha": "32cf087d8f739a7e4f4a56a1ffb15363c071a3c5",
      "url": "https://api.github.com/repositories/121659708/contents/server/src/generated/prisma.graphql?ref=1d0779e54d3d7baf3ffafa866befcd1d08acce4e",
      "git_url": "https://api.github.com/repositories/121659708/git/blobs/32cf087d8f739a7e4f4a56a1ffb15363c071a3c5",
      "html_url": "https://github.com/kunalpunjrath/taskboard-app/blob/1d0779e54d3d7baf3ffafa866befcd1d08acce4e/server/src/generated/prisma.graphql",
      "content": "# THIS FILE HAS BEEN AUTO-GENERATED BY \"PRISMA DEPLOY\"\n# DO NOT EDIT THIS FILE DIRECTLY\n\n#\n# Model Types\n#\n\ntype Board implements Node {\n  id: ID!\n  title: String!\n  createdAt: DateTime!\n  positionIndex: Int!\n  owner(where: UserWhereInput): User!\n  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List!]\n}\n\ntype Card implements Node {\n  id: ID!\n  title: String!\n  description: String\n  createdAt: DateTime!\n  dueDate: DateTime\n  status: String\n  list(where: ListWhereInput): List!\n}\n\ntype List implements Node {\n  id: ID!\n  title: String!\n  createdAt: DateTime!\n  positionIndex: Int!\n  board(where: BoardWhereInput): Board!\n  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]\n  cardPositionIndexes: [Int!]\n}\n\ntype User implements Node {\n  id: ID!\n  name: String!\n  email: String!\n  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]\n}\n\n\n#\n# Other Types\n#\n\ntype AggregateBoard {\n  count: Int!\n}\n\ntype AggregateCard {\n  count: Int!\n}\n\ntype AggregateList {\n  count: Int!\n}\n\ntype AggregateUser {\n  count: Int!\n}\n\ntype BatchPayload {\n  count: Long!\n}\n\ntype BoardConnection {\n  pageInfo: PageInfo!\n  edges: [BoardEdge]!\n  aggregate: AggregateBoard!\n}\n\ninput BoardCreateInput {\n  title: String!\n  positionIndex: Int!\n  owner: UserCreateOneWithoutBoardsInput!\n  lists: ListCreateManyWithoutBoardInput\n}\n\ninput BoardCreateManyWithoutOwnerInput {\n  create: [BoardCreateWithoutOwnerInput!]\n  connect: [BoardWhereUniqueInput!]\n}\n\ninput BoardCreateOneWithoutListsInput {\n  create: BoardCreateWithoutListsInput\n  connect: BoardWhereUniqueInput\n}\n\ninput BoardCreateWithoutListsInput {\n  title: String!\n  positionIndex: Int!\n  owner: UserCreateOneWithoutBoardsInput!\n}\n\ninput BoardCreateWithoutOwnerInput {\n  title: String!\n  positionIndex: Int!\n  lists: ListCreateManyWithoutBoardInput\n}\n\ntype BoardEdge {\n  node: Board!\n  cursor: String!\n}\n\nenum BoardOrderByInput {\n  id_ASC\n  id_DESC\n  title_ASC\n  title_DESC\n  createdAt_ASC\n  createdAt_DESC\n  positionIndex_ASC\n  positionIndex_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype BoardPreviousValues {\n  id: ID!\n  title: String!\n  createdAt: DateTime!\n  positionIndex: Int!\n}\n\ntype BoardSubscriptionPayload {\n  mutation: MutationType!\n  node: Board\n  updatedFields: [String!]\n  previousValues: BoardPreviousValues\n}\n\ninput BoardSubscriptionWhereInput {\n  AND: [BoardSubscriptionWhereInput!]\n  OR: [BoardSubscriptionWhereInput!]\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: BoardWhereInput\n}\n\ninput BoardUpdateInput {\n  title: String\n  positionIndex: Int\n  owner: UserUpdateOneWithoutBoardsInput\n  lists: ListUpdateManyWithoutBoardInput\n}\n\ninput BoardUpdateManyWithoutOwnerInput {\n  create: [BoardCreateWithoutOwnerInput!]\n  connect: [BoardWhereUniqueInput!]\n  disconnect: [BoardWhereUniqueInput!]\n  delete: [BoardWhereUniqueInput!]\n  update: [BoardUpdateWithoutOwnerInput!]\n  upsert: [BoardUpsertWithoutOwnerInput!]\n}\n\ninput BoardUpdateOneWithoutListsInput {\n  create: BoardCreateWithoutListsInput\n  connect: BoardWhereUniqueInput\n  disconnect: BoardWhereUniqueInput\n  delete: BoardWhereUniqueInput\n  update: BoardUpdateWithoutListsInput\n  upsert: BoardUpsertWithoutListsInput\n}\n\ninput BoardUpdateWithoutListsDataInput {\n  title: String\n  positionIndex: Int\n  owner: UserUpdateOneWithoutBoardsInput\n}\n\ninput BoardUpdateWithoutListsInput {\n  where: BoardWhereUniqueInput!\n  data: BoardUpdateWithoutListsDataInput!\n}\n\ninput BoardUpdateWithoutOwnerDataInput {\n  title: String\n  positionIndex: Int\n  lists: ListUpdateManyWithoutBoardInput\n}\n\ninput BoardUpdateWithoutOwnerInput {\n  where: BoardWhereUniqueInput!\n  data: BoardUpdateWithoutOwnerDataInput!\n}\n\ninput BoardUpsertWithoutListsInput {\n  where: BoardWhereUniqueInput!\n  update: BoardUpdateWithoutListsDataInput!\n  create: BoardCreateWithoutListsInput!\n}\n\ninput BoardUpsertWithoutOwnerInput {\n  where: BoardWhereUniqueInput!\n  update: BoardUpdateWithoutOwnerDataInput!\n  create: BoardCreateWithoutOwnerInput!\n}\n\ninput BoardWhereInput {\n  AND: [BoardWhereInput!]\n  OR: [BoardWhereInput!]\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  title: String\n  title_not: String\n  title_in: [String!]\n  title_not_in: [String!]\n  title_lt: String\n  title_lte: String\n  title_gt: String\n  title_gte: String\n  title_contains: String\n  title_not_contains: String\n  title_starts_with: String\n  title_not_starts_with: String\n  title_ends_with: String\n  title_not_ends_with: String\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  positionIndex: Int\n  positionIndex_not: Int\n  positionIndex_in: [Int!]\n  positionIndex_not_in: [Int!]\n  positionIndex_lt: Int\n  positionIndex_lte: Int\n  positionIndex_gt: Int\n  positionIndex_gte: Int\n  owner: UserWhereInput\n  lists_every: ListWhereInput\n  lists_some: ListWhereInput\n  lists_none: ListWhereInput\n}\n\ninput BoardWhereUniqueInput {\n  id: ID\n}\n\ntype CardConnection {\n  pageInfo: PageInfo!\n  edges: [CardEdge]!\n  aggregate: AggregateCard!\n}\n\ninput CardCreateInput {\n  title: String!\n  description: String\n  dueDate: DateTime\n  status: String\n  list: ListCreateOneWithoutCardsInput!\n}\n\ninput CardCreateManyWithoutListInput {\n  create: [CardCreateWithoutListInput!]\n  connect: [CardWhereUniqueInput!]\n}\n\ninput CardCreateWithoutListInput {\n  title: String!\n  description: String\n  dueDate: DateTime\n  status: String\n}\n\ntype CardEdge {\n  node: Card!\n  cursor: String!\n}\n\nenum CardOrderByInput {\n  id_ASC\n  id_DESC\n  title_ASC\n  title_DESC\n  description_ASC\n  description_DESC\n  createdAt_ASC\n  createdAt_DESC\n  dueDate_ASC\n  dueDate_DESC\n  status_ASC\n  status_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype CardPreviousValues {\n  id: ID!\n  title: String!\n  description: String\n  createdAt: DateTime!\n  dueDate: DateTime\n  status: String\n}\n\ntype CardSubscriptionPayload {\n  mutation: MutationType!\n  node: Card\n  updatedFields: [String!]\n  previousValues: CardPreviousValues\n}\n\ninput CardSubscriptionWhereInput {\n  AND: [CardSubscriptionWhereInput!]\n  OR: [CardSubscriptionWhereInput!]\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: CardWhereInput\n}\n\ninput CardUpdateInput {\n  title: String\n  description: String\n  dueDate: DateTime\n  status: String\n  list: ListUpdateOneWithoutCardsInput\n}\n\ninput CardUpdateManyWithoutListInput {\n  create: [CardCreateWithoutListInput!]\n  connect: [CardWhereUniqueInput!]\n  disconnect: [CardWhereUniqueInput!]\n  delete: [CardWhereUniqueInput!]\n  update: [CardUpdateWithoutListInput!]\n  upsert: [CardUpsertWithoutListInput!]\n}\n\ninput CardUpdateWithoutListDataInput {\n  title: String\n  description: String\n  dueDate: DateTime\n  status: String\n}\n\ninput CardUpdateWithoutListInput {\n  where: CardWhereUniqueInput!\n  data: CardUpdateWithoutListDataInput!\n}\n\ninput CardUpsertWithoutListInput {\n  where: CardWhereUniqueInput!\n  update: CardUpdateWithoutListDataInput!\n  create: CardCreateWithoutListInput!\n}\n\ninput CardWhereInput {\n  AND: [CardWhereInput!]\n  OR: [CardWhereInput!]\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  title: String\n  title_not: String\n  title_in: [String!]\n  title_not_in: [String!]\n  title_lt: String\n  title_lte: String\n  title_gt: String\n  title_gte: String\n  title_contains: String\n  title_not_contains: String\n  title_starts_with: String\n  title_not_starts_with: String\n  title_ends_with: String\n  title_not_ends_with: String\n  description: String\n  description_not: String\n  description_in: [String!]\n  description_not_in: [String!]\n  description_lt: String\n  description_lte: String\n  description_gt: String\n  description_gte: String\n  description_contains: String\n  description_not_contains: String\n  description_starts_with: String\n  description_not_starts_with: String\n  description_ends_with: String\n  description_not_ends_with: String\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  dueDate: DateTime\n  dueDate_not: DateTime\n  dueDate_in: [DateTime!]\n  dueDate_not_in: [DateTime!]\n  dueDate_lt: DateTime\n  dueDate_lte: DateTime\n  dueDate_gt: DateTime\n  dueDate_gte: DateTime\n  status: String\n  status_not: String\n  status_in: [String!]\n  status_not_in: [String!]\n  status_lt: String\n  status_lte: String\n  status_gt: String\n  status_gte: String\n  status_contains: String\n  status_not_contains: String\n  status_starts_with: String\n  status_not_starts_with: String\n  status_ends_with: String\n  status_not_ends_with: String\n  list: ListWhereInput\n}\n\ninput CardWhereUniqueInput {\n  id: ID\n}\n\nscalar DateTime\n\ntype ListConnection {\n  pageInfo: PageInfo!\n  edges: [ListEdge]!\n  aggregate: AggregateList!\n}\n\ninput ListCreatecardPositionIndexesInput {\n  set: [Int!]\n}\n\ninput ListCreateInput {\n  title: String!\n  positionIndex: Int!\n  cardPositionIndexes: ListCreatecardPositionIndexesInput\n  board: BoardCreateOneWithoutListsInput!\n  cards: CardCreateManyWithoutListInput\n}\n\ninput ListCreateManyWithoutBoardInput {\n  create: [ListCreateWithoutBoardInput!]\n  connect: [ListWhereUniqueInput!]\n}\n\ninput ListCreateOneWithoutCardsInput {\n  create: ListCreateWithoutCardsInput\n  connect: ListWhereUniqueInput\n}\n\ninput ListCreateWithoutBoardInput {\n  title: String!\n  positionIndex: Int!\n  cardPositionIndexes: ListCreatecardPositionIndexesInput\n  cards: CardCreateManyWithoutListInput\n}\n\ninput ListCreateWithoutCardsInput {\n  title: String!\n  positionIndex: Int!\n  cardPositionIndexes: ListCreatecardPositionIndexesInput\n  board: BoardCreateOneWithoutListsInput!\n}\n\ntype ListEdge {\n  node: List!\n  cursor: String!\n}\n\nenum ListOrderByInput {\n  id_ASC\n  id_DESC\n  title_ASC\n  title_DESC\n  createdAt_ASC\n  createdAt_DESC\n  positionIndex_ASC\n  positionIndex_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype ListPreviousValues {\n  id: ID!\n  title: String!\n  createdAt: DateTime!\n  positionIndex: Int!\n  cardPositionIndexes: [Int!]\n}\n\ntype ListSubscriptionPayload {\n  mutation: MutationType!\n  node: List\n  updatedFields: [String!]\n  previousValues: ListPreviousValues\n}\n\ninput ListSubscriptionWhereInput {\n  AND: [ListSubscriptionWhereInput!]\n  OR: [ListSubscriptionWhereInput!]\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: ListWhereInput\n}\n\ninput ListUpdatecardPositionIndexesInput {\n  set: [Int!]\n}\n\ninput ListUpdateInput {\n  title: String\n  positionIndex: Int\n  cardPositionIndexes: ListUpdatecardPositionIndexesInput\n  board: BoardUpdateOneWithoutListsInput\n  cards: CardUpdateManyWithoutListInput\n}\n\ninput ListUpdateManyWithoutBoardInput {\n  create: [ListCreateWithoutBoardInput!]\n  connect: [ListWhereUniqueInput!]\n  disconnect: [ListWhereUniqueInput!]\n  delete: [ListWhereUniqueInput!]\n  update: [ListUpdateWithoutBoardInput!]\n  upsert: [ListUpsertWithoutBoardInput!]\n}\n\ninput ListUpdateOneWithoutCardsInput {\n  create: ListCreateWithoutCardsInput\n  connect: ListWhereUniqueInput\n  disconnect: ListWhereUniqueInput\n  delete: ListWhereUniqueInput\n  update: ListUpdateWithoutCardsInput\n  upsert: ListUpsertWithoutCardsInput\n}\n\ninput ListUpdateWithoutBoardDataInput {\n  title: String\n  positionIndex: Int\n  cardPositionIndexes: ListUpdatecardPositionIndexesInput\n  cards: CardUpdateManyWithoutListInput\n}\n\ninput ListUpdateWithoutBoardInput {\n  where: ListWhereUniqueInput!\n  data: ListUpdateWithoutBoardDataInput!\n}\n\ninput ListUpdateWithoutCardsDataInput {\n  title: String\n  positionIndex: Int\n  cardPositionIndexes: ListUpdatecardPositionIndexesInput\n  board: BoardUpdateOneWithoutListsInput\n}\n\ninput ListUpdateWithoutCardsInput {\n  where: ListWhereUniqueInput!\n  data: ListUpdateWithoutCardsDataInput!\n}\n\ninput ListUpsertWithoutBoardInput {\n  where: ListWhereUniqueInput!\n  update: ListUpdateWithoutBoardDataInput!\n  create: ListCreateWithoutBoardInput!\n}\n\ninput ListUpsertWithoutCardsInput {\n  where: ListWhereUniqueInput!\n  update: ListUpdateWithoutCardsDataInput!\n  create: ListCreateWithoutCardsInput!\n}\n\ninput ListWhereInput {\n  AND: [ListWhereInput!]\n  OR: [ListWhereInput!]\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  title: String\n  title_not: String\n  title_in: [String!]\n  title_not_in: [String!]\n  title_lt: String\n  title_lte: String\n  title_gt: String\n  title_gte: String\n  title_contains: String\n  title_not_contains: String\n  title_starts_with: String\n  title_not_starts_with: String\n  title_ends_with: String\n  title_not_ends_with: String\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  positionIndex: Int\n  positionIndex_not: Int\n  positionIndex_in: [Int!]\n  positionIndex_not_in: [Int!]\n  positionIndex_lt: Int\n  positionIndex_lte: Int\n  positionIndex_gt: Int\n  positionIndex_gte: Int\n  board: BoardWhereInput\n  cards_every: CardWhereInput\n  cards_some: CardWhereInput\n  cards_none: CardWhereInput\n}\n\ninput ListWhereUniqueInput {\n  id: ID\n}\n\nscalar Long\n\ntype Mutation {\n  createCard(data: CardCreateInput!): Card!\n  createList(data: ListCreateInput!): List!\n  createBoard(data: BoardCreateInput!): Board!\n  createUser(data: UserCreateInput!): User!\n  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card\n  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List\n  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  deleteCard(where: CardWhereUniqueInput!): Card\n  deleteList(where: ListWhereUniqueInput!): List\n  deleteBoard(where: BoardWhereUniqueInput!): Board\n  deleteUser(where: UserWhereUniqueInput!): User\n  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!\n  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!\n  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  updateManyCards(data: CardUpdateInput!, where: CardWhereInput!): BatchPayload!\n  updateManyLists(data: ListUpdateInput!, where: ListWhereInput!): BatchPayload!\n  updateManyBoards(data: BoardUpdateInput!, where: BoardWhereInput!): BatchPayload!\n  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!\n  deleteManyCards(where: CardWhereInput!): BatchPayload!\n  deleteManyLists(where: ListWhereInput!): BatchPayload!\n  deleteManyBoards(where: BoardWhereInput!): BatchPayload!\n  deleteManyUsers(where: UserWhereInput!): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!\n  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!\n  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  card(where: CardWhereUniqueInput!): Card\n  list(where: ListWhereUniqueInput!): List\n  board(where: BoardWhereUniqueInput!): Board\n  user(where: UserWhereUniqueInput!): User\n  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!\n  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!\n  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  node(id: ID!): Node\n}\n\ntype Subscription {\n  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload\n  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload\n  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n}\n\ntype UserConnection {\n  pageInfo: PageInfo!\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  name: String!\n  email: String!\n  boards: BoardCreateManyWithoutOwnerInput\n}\n\ninput UserCreateOneWithoutBoardsInput {\n  create: UserCreateWithoutBoardsInput\n  connect: UserWhereUniqueInput\n}\n\ninput UserCreateWithoutBoardsInput {\n  name: String!\n  email: String!\n}\n\ntype UserEdge {\n  node: User!\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  email_ASC\n  email_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  name: String!\n  email: String!\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  AND: [UserSubscriptionWhereInput!]\n  OR: [UserSubscriptionWhereInput!]\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n}\n\ninput UserUpdateInput {\n  name: String\n  email: String\n  boards: BoardUpdateManyWithoutOwnerInput\n}\n\ninput UserUpdateOneWithoutBoardsInput {\n  create: UserCreateWithoutBoardsInput\n  connect: UserWhereUniqueInput\n  disconnect: UserWhereUniqueInput\n  delete: UserWhereUniqueInput\n  update: UserUpdateWithoutBoardsInput\n  upsert: UserUpsertWithoutBoardsInput\n}\n\ninput UserUpdateWithoutBoardsDataInput {\n  name: String\n  email: String\n}\n\ninput UserUpdateWithoutBoardsInput {\n  where: UserWhereUniqueInput!\n  data: UserUpdateWithoutBoardsDataInput!\n}\n\ninput UserUpsertWithoutBoardsInput {\n  where: UserWhereUniqueInput!\n  update: UserUpdateWithoutBoardsDataInput!\n  create: UserCreateWithoutBoardsInput!\n}\n\ninput UserWhereInput {\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  email: String\n  email_not: String\n  email_in: [String!]\n  email_not_in: [String!]\n  email_lt: String\n  email_lte: String\n  email_gt: String\n  email_gte: String\n  email_contains: String\n  email_not_contains: String\n  email_starts_with: String\n  email_not_starts_with: String\n  email_ends_with: String\n  email_not_ends_with: String\n  boards_every: BoardWhereInput\n  boards_some: BoardWhereInput\n  boards_none: BoardWhereInput\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n  email: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 29,
      "containsCycle": true,
      "numDefinitions": 95
    }
  ],
  "metrics": {
    "created_at": "2018-02-15T17:36:02Z",
    "updated_at": "2018-04-15T16:29:52Z",
    "pushed_at": "2018-04-15T16:29:51Z",
    "issues": 0,
    "watchers": 2,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 1
  }
}