{
  "repo_name": "boldr",
  "repo_full_name": "strues/boldr",
  "repo_owner": "strues",
  "repo_description": "React based CMF / blogging engine using Redux, Postgres, Node, and more...",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "project/schema.graphql",
      "sha": "1e218950fb611a1dc293a2795bf269eeed175a40",
      "url": "https://api.github.com/repositories/57095633/contents/project/schema.graphql?ref=21f1ed9a5ed754e01c50827249e89087b788e660",
      "git_url": "https://api.github.com/repositories/57095633/git/blobs/1e218950fb611a1dc293a2795bf269eeed175a40",
      "html_url": "https://github.com/strues/boldr/blob/21f1ed9a5ed754e01c50827249e89087b788e660/project/schema.graphql",
      "content": "schema {\n  query: Query\n  mutation: RootMutation\n}\n\n# The URL scalar type represents URL addresses.\nscalar URL\n\n# The UUID scalar type represents a UUID.\nscalar UUID\n\n# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\nscalar JSON\n\n# The Email scalar type represents E-Mail addresses compliant to RFC 822.\nscalar Email\n\n# The DateTime scalar type represents date time strings complying to ISO-8601.\nscalar DateTime\n\n# Variations of status for content\nenum CONTENT_STATUS {\n  PUBLISHED\n  ARCHIVED\n  DRAFT\n}\n\n# An account belonging to a user.\ntype Account {\n  # Unique identifier for the object.\n  id: ID!\n  # Email address belonging to the account\n  email: Email!\n  # true if email is verified, false otherwise\n  verified: Boolean\n  # The ip address of the person performing the reset\n  ip: String\n  # The reset token\n  resetToken: String\n  # When the token expires.\n  resetTokenExp: DateTime\n  # The account verification token\n  verificationToken: String\n  # When the verification expires.\n  verificationTokenExp: DateTime\n  # When the account was last logged in to.\n  lastLogin: DateTime\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Roles the account belongs to.\n  roles: [Role]\n  # Profile belonging to the account.\n  profile: Profile\n  # Articles the user has written\n  articles: [Article]\n  # Articles the user has written\n  uploads: [Media]\n}\n\ntype AccountLoginResponse {\n  # The JSONWebToken for the user.\n  token: String\n  # The user who logged in.\n  account: Account\n  # Any auth related errors.\n  errors: [Error]\n}\n\n# A query for delivering the maximum amount of content\ntype AllContent {\n  articles: [Article]\n  tags: Tag\n  entities: Entity\n  categories: Category\n}\n\n# A blog post or article\ntype Article {\n  # Unique identifier for the object.\n  id: ID!\n  # The title of the article\n  title: String!\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # html content of the article\n  content: String\n  # Raw JSON of the article\n  rawContent: JSON\n  # Short description of the article\n  excerpt: String\n  # True if the article is featured\n  featured: Boolean\n  # True if the article is published\n  published: Boolean\n  # The publishing status of content\n  status: CONTENT_STATUS\n  # url of the article feature image\n  image: String\n  # url of the article hero image\n  heroImage: String\n  # True if the article is published\n  authorId: ID\n  # The category id\n  categoryId: ID\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Tags relating articles together\n  tags: [Tag]\n  # Media uploaded with the article\n  media: [Media]\n  # The account of the person who wrote the article.\n  author: Account\n  # Category the article belongs to.\n  category: Category\n}\n\n# A category groups content together\ntype Category {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # An icon to use for the category\n  icon: String\n  # A description of the category\n  description: String\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Entities belonging to the category\n  entities: [Entity]\n  # Articles belonging to the category\n  articles: [Article]\n}\n\n# A content item\ntype Entity {\n  # Unique identifier for the object.\n  id: ID!\n  # The title of the entity\n  title: String!\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # html content of the entity\n  content: String\n  # Raw JSON of the entity\n  rawContent: JSON\n  # Short description of the entity\n  excerpt: String\n  meta: JSON\n  # The publish status of content\n  status: CONTENT_STATUS\n  # url of the entity main image\n  image: String\n  # The id of the creator\n  authorId: ID\n  # The content type id\n  contentTypeId: ID\n  # The category id\n  categoryId: ID\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Tags relating articles together\n  tags: [Tag]\n  contentType: ContentType\n  category: Category\n  # User who created the entity.\n  author: Account\n}\n\ntype Error {\n  # HTTP status code\n  code: Int\n  # The error message\n  message: String\n}\n\ntype File {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # The type of file.\n  type: String!\n  # The size of the file\n  size: Int!\n  # The path to the file.\n  path: String!\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n# Uploaded images, videos or audio\ntype Media {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # A normalized copy of the object name.\n  safeName: String\n  # thumbnail filename\n  thumbName: String\n  # The description of the upload\n  fileDescription: String\n  # The mime-type of the upload\n  type: String\n  # The size of the upload\n  size: Int\n  # The local path where the file is stored\n  path: String\n  # The relative url to access the file\n  url: String\n  # The id of the user the file belongs to.\n  ownerId: ID\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n# Navigation for the site\ntype Menu {\n  # Unique identifier for the object.\n  id: ID!\n  # A UUID (Universal Unique Identifier) is a 128-bit number used to uniquely identify some object or entity.\n  uuid: UUID\n  # A name for the object.\n  name: String\n  # A normalized copy of the object name.\n  safeName: String\n  # True if the menu should be hidden from unauth\n  restricted: Boolean\n  # Links\n  details: [MenuDetail]\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n# links and other menu content\ntype MenuDetail {\n  # Unique identifier for the object.\n  id: ID!\n  # The title text for the menu link\n  title: String\n  # A normalized copy of the object name.\n  safeName: String\n  # Custom css classname for the link\n  cssClassname: String\n  # True if the item has a dropdown\n  hasDropdown: Boolean\n  # True if the item has is a dropdown item\n  isDropdown: Boolean\n  # The display order\n  order: Int\n  # The id of the menu the detail belongs to.\n  menuId: ID\n  # The id of the menu the detail belongs to.\n  parentId: ID\n  # The link\n  href: String\n  # Icon kind\n  icon: String\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n# Page of the website\ntype Page {\n  # Unique identifier for the object.\n  id: ID!\n  # The title of the page\n  title: String!\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # A URL to access the page\n  url: String\n  # Page meta data\n  meta: JSON\n  # Page content blocks\n  blocks: JSON\n  # Page html markup\n  markup: String\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n# The profile belonging to an account displays information such as username or a bio.\ntype Profile {\n  # Unique identifier for the object.\n  id: ID!\n  # The id of the account the profile belongs to.\n  accountId: ID\n  # The username of the user\n  username: String\n  # The website of the user\n  website: URL\n  # The first name of the user\n  firstName: String\n  # The last name associated with the user\n  lastName: String\n  # Information about the user\n  bio: String\n  # The url for an avatar\n  avatarUrl: URL\n  # A url for an image to use as a profile background.\n  profileImage: URL\n  # Where the user lives\n  location: String\n  # Language the user prefers\n  language: String\n  # When the user was born\n  birthday: DateTime\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Social media profiles.\n  socialMedia: Social\n}\n\n# Restrict access to content or areas of your site using a role.\ntype Role {\n  # Unique identifier for the object.\n  id: ID!\n  # A UUID (Universal Unique Identifier) is a 128-bit number used to uniquely identify some object or entity.\n  uuid: UUID\n  # A name for the object.\n  name: String\n  # An image for role identification\n  image: URL\n  # The role description\n  description: String\n  # Accounts belonging to a role.\n  accounts: [Account]\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n# Editable site settings\ntype Setting {\n  # Unique identifier for the object.\n  id: ID!\n  # The option or setting identifier\n  key: String\n  # The value of the setting\n  value: String\n  # A non-normalized key.\n  label: String\n  # Explaination of what the setting does.\n  description: String\n}\n\n# Social media portion of a profile for an account.\ntype Social {\n  # Unique identifier for the object.\n  id: ID!\n  # The id of the profile the social media accounts belong to.\n  profileId: ID!\n  # Facebook profile url.\n  facebookUrl: URL\n  # Twitter profile url.\n  twitterUrl: URL\n  # Google plus profile url.\n  googleUrl: URL\n  # GitHub profile url.\n  githubUrl: URL\n  # LinkedIn profile url.\n  linkedinUrl: URL\n  # Stackoverflow profile url.\n  stackoverflowUrl: URL\n}\n\n# A tag relates content together\ntype Tag {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # A normalized copy of the object name.\n  safeName: String\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Articles related to the tag\n  articles: [Article]\n  # Entities related to the tag\n  entities: [Entity]\n}\n\n# Defines a class of entities.\ntype ContentType {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # An icon to use for the content type\n  icon: String\n  # Information regarding what the content type does.\n  description: String\n  # Entities are instances of content types. For example ContentType of Portfolio would have Projects as entities.\n  entities: [Article]\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\ninput Upload {\n  # The file name\n  name: String!\n  # The type of file.\n  type: String!\n  # The size of the file\n  size: Int!\n  # The path to the file.\n  path: String!\n}\n\ninput UploadMediaInput {\n  # The file name\n  name: String!\n  # The type of file.\n  type: String!\n  # The size of the file\n  size: Int!\n  # The path to the file.\n  path: String!\n}\n\ninput SettingInput {\n  # The setting option\n  key: String\n  # The value of the setting\n  value: String\n  # A non-normalized key\n  label: String\n  # The description for what the setting does.\n  description: String\n}\n\ninput AuthInput {\n  # The email address for the account to create or login to.\n  email: Email!\n  # The password belonging to the account.\n  password: String!\n}\n\ninput CreateArticleInput {\n  # The title of the article\n  title: String!\n  # The slug / normalized article title.\n  slug: String\n  # html content of the article\n  content: String\n  # Raw JSON of the article\n  rawContent: JSON\n  # Short description of the article\n  excerpt: String\n  # True if the article is featured\n  featured: Boolean\n  # True if the article is published\n  published: Boolean!\n  # The publishing status of content\n  status: CONTENT_STATUS\n  # url of the article feature image\n  image: String\n  # url of the article background image\n  heroImage: String\n  # Tags relating articles together\n  tags: [String]\n  # Id of the category\n  categoryId: ID\n}\n\ninput CreateCategoryInput {\n  # A name for the object.\n  name: String\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # An icon to use for the category\n  icon: String\n  # A description of the category\n  description: String\n}\n\ninput CreateContentTypeInput {\n  # A name for the object.\n  name: String\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # An icon to use for the content type\n  icon: String\n  # A description of the content type\n  description: String\n}\n\ninput CreateTagInput {\n  # The name of the tag\n  name: String!\n  # Automatically slugified version of the name\n  safeName: String\n}\n\ninput EditArticleInput {\n  # The title of the article\n  title: String!\n  # The slug / normalized article title.\n  slug: String!\n  # html content of the article\n  content: String\n  # Raw JSON of the article\n  rawContent: JSON\n  # Short description of the article\n  excerpt: String!\n  # True if the article is featured\n  featured: Boolean\n  # True if the article is published\n  published: Boolean!\n  # The publishing status of content\n  status: CONTENT_STATUS\n  # url of the article feature image\n  image: URL\n  # url of the article hero image\n  heroImage: URL\n  # Id of the category\n  categoryId: ID\n}\n\ninput EditDetailInput {\n  # The id\n  id: ID\n  # The title text for the menu link\n  title: String\n  # Lowercase, normalized, name\n  safeName: String\n  # Custom css classname for the link\n  cssClassname: String\n  # True if the item has a dropdown\n  hasDropdown: Boolean\n  # True if the item is a dropdown menu item\n  isDropdown: Boolean\n  # The display order\n  order: Int\n  # The link\n  href: String\n  # Icon kind\n  icon: String\n}\n\ninput EditMediaInput {\n  # The file name\n  name: String!\n  # A description of the file\n  fileDescription: String\n}\n\ninput EditProfileInput {\n  # The username for the new user\n  username: String\n  # The website of the user\n  website: URL\n  # The first name of the user\n  firstName: String\n  # The last name associated with the user\n  lastName: String\n  # Information about the user\n  bio: String\n  # url of user's avatar picture\n  avatarUrl: URL\n  # Url for the user's profile background image\n  profileImage: URL\n  # Location the user lives\n  location: String\n}\n\ninput EditTagInput {\n  # The name of the tag\n  name: String!\n  # Automatically slugified version of the name\n  safeName: String\n}\n\ntype Query {\n  # A query for a listing of all accounts\n  accounts(\n    # The number of accounts to offset\n    offset: Int\n    # The maximum number of accounts to return at a time.\n    limit: Int\n  ): [Account]\n  # Find an account by the id, username or email\n  account(\n    # The user ID for the desired account\n    id: ID\n    # An email address to query for the account\n    email: Email\n  ): Account\n  # Given an auth token, return the user and auth token\n  me: Account\n  # Returns all articles from the database..\n  articles(\n    # The number of articles to offset\n    offset: Int\n    # The maximum number of articles to return at a time.\n    limit: Int\n  ): [Article]\n  # Return all articles matching the given tag.\n  getArticlesForTag(name: String, offset: Int, limit: Int): [Article]\n  # Return a specific article using its slug\n  getArticleBySlug(slug: String): Article\n  # A query for a listing of all categories\n  categories: [Category]\n  # A query for a single category\n  category(\n    # The id of the requested category\n    id: ID!\n  ): Category\n  # A query for a listing of all content types\n  contentTypes: [ContentType]\n  # A query for a single content type\n  contentType(\n    # The id of the requested content type\n    id: ID!\n  ): ContentType\n  allContent: AllContent\n  # Returns all content entities from the database..\n  entities(\n    # The number of entities to offset\n    offset: Int\n    # The maximum number of entities to return at a time.\n    limit: Int\n  ): [Entity]\n  # A query for a listing of all attachments\n  files(\n    # The number of attachments to offset\n    offset: Int!\n    # The maximum number of attachments to return at a time.\n    limit: Int!\n  ): [File]\n  # A query for a listing of all media\n  getMedia(\n    # The number of media to offset\n    offset: Int\n    # The maximum number of media to return at a time.\n    limit: Int\n  ): [Media]\n  # A query for a returning a single media by its id\n  getMediaById(\n    # The id of the requested media\n    id: ID!\n  ): Media\n  # A query for a specific menu\n  getMenuById(id: ID!): Menu\n  # A query returning all links\n  details: [MenuDetail]\n  # A query for a listing of all pages\n  pages: [Page]\n  # A query for a single page\n  singlePage(slug: String): Page\n  # A query for admin to find a user by their id\n  profile(\n    # The id of the profile to query\n    id: ID\n    # The id of the account the profile belongs to.\n    accountId: ID\n    # The username of the profile to find\n    username: String\n  ): Profile\n  # A query for a listing of all roles\n  roles: [Role]\n  # A query for a listing of all settings\n  settings: [Setting]\n  # A query for a listing of all tags\n  getTags(\n    # The number of tags to offset\n    offset: Int!\n    # The maximum number of tags to return at a time.\n    limit: Int!\n  ): [Tag]\n}\n\ntype RootMutation {\n  # Authenticates a user and returns a signed JWT.\n  loginAccount(input: AuthInput!): AccountLoginResponse\n  # Register a new account.\n  signupAccount(input: AuthInput!): Account\n  # Adds a new article to the database.\n  createArticle(input: CreateArticleInput!): Article\n  # Edit an existing article\n  editArticle(\n    # The article ID\n    id: ID!\n    # The required fields for creating an article.\n    input: EditArticleInput!\n  ): Article\n  # Remove an article from the database\n  deleteArticle(\n    # The article ID\n    id: ID!\n  ): Boolean\n  # Adds a new category to the database.\n  createCategory(input: CreateCategoryInput!): Category\n  # Adds a new content type to the database.\n  createContentType(input: CreateContentTypeInput!): ContentType\n  # Upload a new media file and store in the database.\n  singleUpload(\n    # The file to upload\n    file: Upload!\n  ): File\n  # Upload a new media file and store in the database.\n  multipleUpload(\n    # The file to upload\n    files: [Upload]\n  ): [File]\n  # Upload a new media file and store in the database.\n  uploadMedia(\n    # The file to upload\n    file: UploadMediaInput!\n  ): File\n  # Edit an existing media file\n  editMedia(\n    # The media ID\n    id: ID!\n    # The required fields for editing a media file.\n    input: EditMediaInput!\n  ): Media\n  # Remove a media file from the server\n  deleteMedia(\n    # The media ID\n    id: ID!\n  ): Boolean\n  # Edit menu details\n  editDetails(\n    # The detail ID\n    id: ID!\n    # The required fields for editing a detail.\n    input: EditDetailInput!\n  ): MenuDetail\n  # Edit an existing user\n  editProfile(\n    # The profile id\n    id: ID!\n    # Fields available for editing a profile.\n    input: EditProfileInput!\n  ): Profile\n  # Modify the value of the site setting\n  editSetting(id: ID!, input: SettingInput!): Setting\n  # creating a new tag\n  addTag(input: CreateTagInput!): Tag\n  # Edit an existing tag\n  editTag(\n    # The tag ID\n    id: ID!\n    # The fields (name, description) for editing a tag.\n    input: EditTagInput!\n  ): Tag\n  # Remove a tag from the database\n  deleteTag(\n    # The tag ID\n    id: ID!\n  ): Boolean\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 20,
      "containsCycle": true,
      "numDefinitions": 40
    },
    {
      "name": "typedefs.graphql",
      "path": "project/server/graphql/typedefs.graphql",
      "sha": "fc0857ee6a0e31a3fbba0891dc2776055ca1ee67",
      "url": "https://api.github.com/repositories/57095633/contents/project/server/graphql/typedefs.graphql?ref=21f1ed9a5ed754e01c50827249e89087b788e660",
      "git_url": "https://api.github.com/repositories/57095633/git/blobs/fc0857ee6a0e31a3fbba0891dc2776055ca1ee67",
      "html_url": "https://github.com/strues/boldr/blob/21f1ed9a5ed754e01c50827249e89087b788e660/project/server/graphql/typedefs.graphql",
      "content": "\n################################################################################\n## Schema\n################################################################################\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\n################################################################################\n## Custom Scalars\n################################################################################\n\n# The URL scalar type represents URL addresses.\nscalar URL\n\n# The UUID scalar type represents a UUID.\nscalar UUID\n\n# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\nscalar JSON\n\n# The Email scalar type represents E-Mail addresses compliant to RFC 822.\nscalar Email\n\n# The DateTime scalar type represents date time strings complying to ISO-8601.\nscalar DateTime\n\n# Variations of status for content\nenum CONTENT_STATUS {\n  published\n  archived\n  draft\n}\n\n################################################################################\n## Account\n################################################################################\n\n# An account belonging to a user.\ntype Account {\n  # Unique identifier for the object.\n  id: ID!\n  # Email address belonging to the account\n  email: Email!\n  # true if email is verified, false otherwise\n  verified: Boolean\n  # The reset token\n  resetToken: String\n  # When the token expires.\n  resetTokenExp: DateTime\n  # The account verification token\n  verificationToken: String\n  # When the verification expires.\n  verificationTokenExp: DateTime\n  # When the account was last logged in to.\n  lastLogin: DateTime\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Roles the account belongs to.\n  roles: [Role]\n  # Profile belonging to the account.\n  profile: Profile\n  # Articles the user has written\n  articles: [Article]\n  # Articles the user has written\n  uploads: [Media]\n}\n\ntype AccountLoginResponse {\n  # The JSONWebToken for the user.\n  token: String\n  # The user who logged in.\n  account: Account\n  # Any auth related errors.\n  errors: [Error]\n}\n\ninput AuthInput {\n  # The email address for the account to create or login to.\n  email: Email!\n  # The password belonging to the account.\n  password: String!\n}\n\n\n################################################################################\n## Profile\n################################################################################\n\n\n# The profile belonging to an account displays information such as username or a bio.\ntype Profile {\n  # Unique identifier for the object.\n  id: ID!\n  # The id of the account the profile belongs to.\n  accountId: ID\n  # The username of the user\n  username: String\n  # The website of the user\n  website: URL\n  # The first name of the user\n  firstName: String\n  # The last name associated with the user\n  lastName: String\n  # Information about the user\n  bio: String\n  # The url for an avatar\n  avatarUrl: URL\n  # A url for an image to use as a profile background.\n  profileImage: URL\n  # Where the user lives\n  location: String\n  # Language the user prefers\n  language: String\n  # When the user was born\n  birthday: DateTime\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Social media profiles.\n  socialMedia: Social\n}\n\ninput EditProfileInput {\n  # The username for the new user\n  username: String\n  # The website of the user\n  website: URL\n  # The first name of the user\n  firstName: String\n  # The last name associated with the user\n  lastName: String\n  # Information about the user\n  bio: String\n  # url of user's avatar picture\n  avatarUrl: URL\n  # Url for the user's profile background image\n  profileImage: URL\n  # Location the user lives\n  location: String\n}\n################################################################################\n## Role\n################################################################################\n\n# Restrict access to content or areas of your site using a role.\ntype Role {\n  # Unique identifier for the object.\n  id: ID!\n  # A UUID (Universal Unique Identifier) is a 128-bit number used to uniquely identify some object or entity.\n  uuid: UUID\n  # A name for the object.\n  name: String\n  # An image for role identification\n  image: URL\n  # The role description\n  description: String\n  # Accounts belonging to a role.\n  accounts: [Account]\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n################################################################################\n## Social\n################################################################################\n\n# Social media portion of a profile for an account.\ntype Social {\n  # Unique identifier for the object.\n  id: ID!\n  # The id of the profile the social media accounts belong to.\n  profileId: ID!\n  # Facebook profile url.\n  facebookUrl: URL\n  # Twitter profile url.\n  twitterUrl: URL\n  # Google plus profile url.\n  googleUrl: URL\n  # GitHub profile url.\n  githubUrl: URL\n  # LinkedIn profile url.\n  linkedinUrl: URL\n  # Stackoverflow profile url.\n  stackoverflowUrl: URL\n}\n\n\n################################################################################\n## Tag\n################################################################################\n\n# A tag relates content together\ntype Tag {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # A normalized copy of the object name.\n  safeName: String\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Articles related to the tag\n  articles: [Article]\n  # Entities related to the tag\n  entities: [Entity]\n}\n\ninput EditTagInput {\n  # The name of the tag\n  name: String!\n  # Automatically slugified version of the name\n  safeName: String\n}\n\n\ninput CreateTagInput {\n  # The name of the tag\n  name: String!\n  # Automatically slugified version of the name\n  safeName: String\n}\n\n\n# A query for delivering the maximum amount of content\ntype AllContent {\n  articles: [Article]\n  tags: Tag\n  entities: Entity\n  categories: Category\n}\n\ntype ContentRoot {\n  tags: [Tag]\n  categories: [Category]\n  contentTypes: [ContentType]\n}\n\n\n################################################################################\n## Article\n################################################################################\n\n# A blog post or article\ntype Article {\n  # Unique identifier for the object.\n  id: ID!\n  # The title of the article\n  title: String!\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # html content of the article\n  content: String\n  # Raw JSON of the article\n  rawContent: JSON\n  # Short description of the article\n  excerpt: String\n  # True if the article is featured\n  featured: Boolean\n  # True if the article is published\n  published: Boolean\n  # The publishing status of content\n  status: CONTENT_STATUS\n  # url of the article feature image\n  image: String\n  # url of the article hero image\n  heroImage: String\n  # True if the article is published\n  authorId: ID\n  # The category id\n  categoryId: ID\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Tags relating articles together\n  tags: [Tag]\n  # Media uploaded with the article\n  media: [Media]\n  # The account of the person who wrote the article.\n  author: Account\n  # Category the article belongs to.\n  category: Category\n}\n\ninput CreateArticleInput {\n  # The title of the article\n  title: String!\n  # The slug / normalized article title.\n  slug: String\n  # html content of the article\n  content: String\n  # Raw JSON of the article\n  rawContent: JSON\n  # Short description of the article\n  excerpt: String\n  # True if the article is featured\n  featured: Boolean\n  # True if the article is published\n  published: Boolean!\n  # The publishing status of content\n  status: CONTENT_STATUS\n  # url of the article feature image\n  image: String\n  # url of the article background image\n  heroImage: String\n  # Tags relating articles together\n  tags: [String]\n  # Id of the category\n  categoryId: ID\n}\n\ninput EditArticleInput {\n  # The title of the article\n  title: String!\n  # The slug / normalized article title.\n  slug: String!\n  # html content of the article\n  content: String\n  # Raw JSON of the article\n  rawContent: JSON\n  # Short description of the article\n  excerpt: String!\n  # True if the article is featured\n  featured: Boolean\n  # True if the article is published\n  published: Boolean!\n  # The publishing status of content\n  status: CONTENT_STATUS\n  # url of the article feature image\n  image: URL\n  # url of the article hero image\n  heroImage: URL\n  # Id of the category\n  categoryId: ID\n}\n\n\n################################################################################\n## Category\n################################################################################\n\n# A category groups content together\ntype Category {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # An icon to use for the category\n  icon: String\n  # A description of the category\n  description: String\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Entities belonging to the category\n  entities: [Entity]\n  # Articles belonging to the category\n  articles: [Article]\n}\n\ninput CreateCategoryInput {\n  # A name for the object.\n  name: String\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # An icon to use for the category\n  icon: String\n  # A description of the category\n  description: String\n}\n\n\n################################################################################\n## Entity\n################################################################################\n\n# A content item\ntype Entity {\n  # Unique identifier for the object.\n  id: ID!\n  # The title of the entity\n  title: String!\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # html content of the entity\n  content: String\n  # Raw JSON of the entity\n  rawContent: JSON\n  # Short description of the entity\n  excerpt: String\n  meta: JSON\n  # The publish status of content\n  status: CONTENT_STATUS\n  # url of the entity main image\n  image: String\n  # The id of the creator\n  authorId: ID\n  # The content type id\n  contentTypeId: ID\n  # The category id\n  categoryId: ID\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n  # Tags relating articles together\n  tags: [Tag]\n  contentType: ContentType\n  category: Category\n  # User who created the entity.\n  author: Account\n}\n\ntype Error {\n  # HTTP status code\n  code: Int\n  # The error message\n  message: String\n}\n\n################################################################################\n## File\n################################################################################\n\ntype File {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # The type of file.\n  type: String!\n  # The size of the file\n  size: Int!\n  # The path to the file.\n  path: String!\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\ninput Upload {\n  # The file name\n  name: String!\n  # The type of file.\n  type: String!\n  # The size of the file\n  size: Int!\n  # The path to the file.\n  path: String!\n}\n\n################################################################################\n## Media\n################################################################################\n\n# Uploaded images, videos or audio\ntype Media {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # A normalized copy of the object name.\n  safeName: String\n  # thumbnail filename\n  thumbName: String\n  # The description of the upload\n  fileDescription: String\n  # The mime-type of the upload\n  type: String\n  # The size of the upload\n  size: Int\n  # The local path where the file is stored\n  path: String\n  # The relative url to access the file\n  url: String\n  # The id of the user the file belongs to.\n  ownerId: ID\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\ninput UploadMediaInput {\n  # The file name\n  name: String!\n  # The type of file.\n  type: String!\n  # The size of the file\n  size: Int!\n  # The path to the file.\n  path: String!\n}\n\ninput EditMediaInput {\n  # The file name\n  name: String!\n  # A description of the file\n  fileDescription: String\n}\n################################################################################\n## Menu / Navigation\n################################################################################\n\n# Navigation for the site\ntype Menu {\n  # Unique identifier for the object.\n  id: ID!\n  # A UUID (Universal Unique Identifier) is a 128-bit number used to uniquely identify some object or entity.\n  uuid: UUID\n  # A name for the object.\n  name: String\n  # A normalized copy of the object name.\n  safeName: String\n  # True if the menu should be hidden from unauth\n  restricted: Boolean\n  # Links\n  details: [MenuDetail]\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n# links and other menu content\ntype MenuDetail {\n  # Unique identifier for the object.\n  id: ID!\n  # The title text for the menu link\n  title: String\n  # A normalized copy of the object name.\n  safeName: String\n  # Custom css classname for the link\n  cssClassname: String\n  # True if the item has a dropdown\n  hasDropdown: Boolean\n  # True if the item has is a dropdown item\n  isDropdown: Boolean\n  # The display order\n  order: Int\n  # The id of the menu the detail belongs to.\n  menuId: ID\n  # The id of the menu the detail belongs to.\n  parentId: ID\n  # The link\n  href: String\n  # Icon kind\n  icon: String\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\ninput EditDetailInput {\n  # The id\n  id: ID\n  # The title text for the menu link\n  title: String\n  # Lowercase, normalized, name\n  safeName: String\n  # Custom css classname for the link\n  cssClassname: String\n  # True if the item has a dropdown\n  hasDropdown: Boolean\n  # True if the item is a dropdown menu item\n  isDropdown: Boolean\n  # The display order\n  order: Int\n  # The link\n  href: String\n  # Icon kind\n  icon: String\n}\n\n\n################################################################################\n## Page\n################################################################################\n\n# Page of the website\ntype Page {\n  # Unique identifier for the object.\n  id: ID!\n  # The title of the page\n  title: String!\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # A URL to access the page\n  url: String\n  # Page meta data\n  meta: JSON\n  # Page content blocks\n  blocks: JSON\n  # Page html markup\n  markup: String\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\n################################################################################\n## Setting\n################################################################################\n\n# Editable site settings\ntype Setting {\n  # Unique identifier for the object.\n  id: ID!\n  # The option or setting identifier\n  key: String\n  # The value of the setting\n  value: String\n  # A non-normalized key.\n  label: String\n  # Explaination of what the setting does.\n  description: String\n}\n\ninput SettingInput {\n  # The setting option\n  key: String\n  # The value of the setting\n  value: String\n  # A non-normalized key\n  label: String\n  # The description for what the setting does.\n  description: String\n}\n\n################################################################################\n## Content Type\n################################################################################\n\n# Defines a class of entities.\ntype ContentType {\n  # Unique identifier for the object.\n  id: ID!\n  # A name for the object.\n  name: String\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # An icon to use for the content type\n  icon: String\n  # Information regarding what the content type does.\n  description: String\n  # Entities are instances of content types. For example ContentType of Portfolio would have Projects as entities.\n  entities: [Article]\n  # The timestamp when the object was deleted\n  deletedAt: DateTime\n  # The timestamp when the object was last updated\n  updatedAt: DateTime\n  # The timestamp when the object was created\n  createdAt: DateTime\n}\n\ninput CreateContentTypeInput {\n  # A name for the object.\n  name: String\n  # An alphanumeric identifier for the object unique to its type.\n  slug: String\n  # An icon to use for the content type\n  icon: String\n  # A description of the content type\n  description: String\n}\n\n\n\n################################################################################\n## Subscriptions\n################################################################################\n\ntype Subscription {\n  articleUpdated(id: ID!): Article\n}\n\n\ntype Query {\n  # A query for a listing of all accounts\n  accounts(\n    # The number of accounts to offset\n    offset: Int\n    # The maximum number of accounts to return at a time.\n    limit: Int\n  ): [Account]\n  # Find an account by the id, username or email\n  account(\n    # The user ID for the desired account\n    id: ID\n    # An email address to query for the account\n    email: Email\n  ): Account\n  # Given an auth token, return the user and auth token\n  me: Account\n  # Returns all articles from the database..\n  articles(\n    # The number of articles to offset\n    offset: Int\n    # The maximum number of articles to return at a time.\n    limit: Int\n  ): [Article]\n  # Return all articles matching the given tag.\n  getArticlesForTag(name: String, offset: Int, limit: Int): [Article]\n  # Return a specific article using its slug\n  getArticleBySlug(slug: String): Article\n  # A query for a listing of all categories\n  categories: [Category]\n  # A query for a single category\n  category(\n    # The id of the requested category\n    id: ID!\n  ): Category\n  # A query for a listing of all content types\n  contentTypes: [ContentType]\n  # A query for a single content type\n  contentType(\n    # The id of the requested content type\n    id: ID!\n  ): ContentType\n  contentRoot: ContentRoot\n  allContent: AllContent\n  # Returns all content entities from the database..\n  entities(\n    # The number of entities to offset\n    offset: Int\n    # The maximum number of entities to return at a time.\n    limit: Int\n  ): [Entity]\n  # A query for a listing of all attachments\n  files(\n    # The number of attachments to offset\n    offset: Int!\n    # The maximum number of attachments to return at a time.\n    limit: Int!\n  ): [File]\n  # A query for a listing of all media\n  getMedia(\n    # The number of media to offset\n    offset: Int\n    # The maximum number of media to return at a time.\n    limit: Int\n  ): [Media]\n  # A query for a returning a single media by its id\n  getMediaById(\n    # The id of the requested media\n    id: ID!\n  ): Media\n  # A query for a specific menu\n  getMenuById(id: ID!): Menu\n  # A query returning all links\n  details: [MenuDetail]\n  # A query for a listing of all pages\n  pages: [Page]\n  # A query for a single page\n  singlePage(slug: String): Page\n  # A query for admin to find a user by their id\n  profile(\n    # The id of the profile to query\n    id: ID\n    # The id of the account the profile belongs to.\n    accountId: ID\n    # The username of the profile to find\n    username: String\n  ): Profile\n  # A query for a listing of all roles\n  roles: [Role]\n  # A query for a listing of all settings\n  settings: [Setting]\n  # A query for a listing of all tags\n  getTags(\n    # The number of tags to offset\n    offset: Int!\n    # The maximum number of tags to return at a time.\n    limit: Int!\n  ): [Tag]\n}\n\ntype Mutation {\n  # Authenticates a user and returns a signed JWT.\n  loginAccount(input: AuthInput!): AccountLoginResponse\n  # Register a new account.\n  signupAccount(input: AuthInput!): Account\n  # Adds a new article to the database.\n  createArticle(input: CreateArticleInput!): Article\n  # Edit an existing article\n  editArticle(\n    # The article ID\n    id: ID!\n    # The required fields for creating an article.\n    input: EditArticleInput!\n  ): Article\n  # Remove an article from the database\n  deleteArticle(\n    # The article ID\n    id: ID!\n  ): Boolean\n  # Adds a new category to the database.\n  createCategory(input: CreateCategoryInput!): Category\n  # Adds a new content type to the database.\n  createContentType(input: CreateContentTypeInput!): ContentType\n  # Upload a new media file and store in the database.\n  singleUpload(\n    # The file to upload\n    file: Upload!\n  ): File\n  # Upload a new media file and store in the database.\n  multipleUpload(\n    # The file to upload\n    files: [Upload]\n  ): [File]\n  # Upload a new media file and store in the database.\n  uploadMedia(\n    # The file to upload\n    file: UploadMediaInput!\n  ): File\n  # Edit an existing media file\n  editMedia(\n    # The media ID\n    id: ID!\n    # The required fields for editing a media file.\n    input: EditMediaInput!\n  ): Media\n  # Remove a media file from the server\n  deleteMedia(\n    # The media ID\n    id: ID!\n  ): Boolean\n  # Edit menu details\n  editDetails(\n    # The detail ID\n    id: ID!\n    # The required fields for editing a detail.\n    input: EditDetailInput!\n  ): MenuDetail\n  # Edit an existing user\n  editProfile(\n    # The profile id\n    id: ID!\n    # Fields available for editing a profile.\n    input: EditProfileInput!\n  ): Profile\n  # Modify the value of the site setting\n  editSetting(id: ID!, input: SettingInput!): Setting\n  # creating a new tag\n  addTag(input: CreateTagInput!): Tag\n  # Edit an existing tag\n  editTag(\n    # The tag ID\n    id: ID!\n    # The fields (name, description) for editing a tag.\n    input: EditTagInput!\n  ): Tag\n  # Remove a tag from the database\n  deleteTag(\n    # The tag ID\n    id: ID!\n  ): Boolean\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 22,
      "containsCycle": true,
      "numDefinitions": 42
    }
  ],
  "metrics": {
    "created_at": "2016-04-26T03:42:37Z",
    "updated_at": "2019-03-28T09:40:08Z",
    "pushed_at": "2017-10-19T22:35:33Z",
    "issues": 67,
    "watchers": 12,
    "fork_count": 9,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 244,
    "pull_requests_open": 0,
    "pull_requests_closed": 78,
    "pull_requests_merged": 166,
    "releases": 0,
    "stargazers": 80
  }
}