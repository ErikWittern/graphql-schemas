{
  "repo_name": "nexus",
  "repo_full_name": "prisma/nexus",
  "repo_owner": "prisma",
  "repo_description": "GraphQL Nexus: Code-First, Type-Safe, GraphQL Schema Construction",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "fullstack-schema.graphql",
      "path": "examples/apollo-fullstack/fullstack-schema.graphql",
      "sha": "3aa36bb7bb6639132fd15fc8217c2599de2b7ac9",
      "url": "https://api.github.com/repositories/155921978/contents/examples/apollo-fullstack/fullstack-schema.graphql?ref=0060cb9ec748816e6dbdc9202e7a564dcd2f357e",
      "git_url": "https://api.github.com/repositories/155921978/git/blobs/3aa36bb7bb6639132fd15fc8217c2599de2b7ac9",
      "html_url": "https://github.com/prisma/nexus/blob/0060cb9ec748816e6dbdc9202e7a564dcd2f357e/examples/apollo-fullstack/fullstack-schema.graphql",
      "content": "### This file was autogenerated by GraphQL Nexus\n### Do not make changes to this file directly\n\n\ntype Launch {\n  id: ID!\n  isBooked: Boolean!\n  mission: Mission!\n  rocket: Rocket!\n  site: String\n}\n\n\"\"\"\nSimple wrapper around our list of launches that contains a cursor to the\nlast item in the list. Pass this cursor to the launches query to fetch results\nafter these.\n\"\"\"\ntype LaunchConnection {\n  cursor: String\n  hasMore: Boolean!\n  launches: [Launch]!\n}\n\ntype Mission {\n  missionPatch(size: PatchSize): String!\n  name: String\n}\n\ntype Mutation {\n  bookTrips(launchIds: [ID!]!): TripUpdateResponse!\n  cancelTrip(launchId: ID!): TripUpdateResponse!\n  login(email: String): String\n}\n\nenum PatchSize {\n  LARGE\n  SMALL\n}\n\ntype Query {\n  launch(count: Int, id: ID!): Launch!\n  launches(\n    \"\"\"\n    If you add a cursor here, it will only return results _after_ this cursor\n    \"\"\"\n    after: String\n\n    \"\"\"The number of results to show. Must be >= 1. Default = 20\"\"\"\n    pageSize: Int\n  ): LaunchConnection!\n  me: User\n}\n\ntype Rocket {\n  id: ID!\n  name: String\n  type: String\n}\n\ntype TripUpdateResponse {\n  launches: [Launch!]\n  message: String\n  success: Boolean!\n}\n\ntype User {\n  email: String!\n  id: ID!\n  trips: [Launch!]!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 8,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 9
    },
    {
      "name": "ts-ast-reader-schema.graphql",
      "path": "examples/ts-ast-reader/ts-ast-reader-schema.graphql",
      "sha": "29cf8400e53e4ac081617279b7bdfb491ff1e2b2",
      "url": "https://api.github.com/repositories/155921978/contents/examples/ts-ast-reader/ts-ast-reader-schema.graphql?ref=135dd9c9a3a678e71feb6f1f0bb16b626bd940af",
      "git_url": "https://api.github.com/repositories/155921978/git/blobs/29cf8400e53e4ac081617279b7bdfb491ff1e2b2",
      "html_url": "https://github.com/prisma/nexus/blob/135dd9c9a3a678e71feb6f1f0bb16b626bd940af/examples/ts-ast-reader/ts-ast-reader-schema.graphql",
      "content": "### This file was autogenerated by GraphQL Nexus\n### Do not make changes to this file directly\n\n\ntype ArrayTypeNode implements Node {\n  elementType: Node!\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype BindingPattern implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype CallSignatureDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype ClassDeclaration implements HasJSDoc & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  members(only: [SyntaxKind!], skip: [SyntaxKind!]): [Node!]!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype ComputedPropertyName implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype ConditionalTypeNode implements Node {\n  checkType: Node!\n  end: Int!\n  extendsType: Node!\n  falseType: Node!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  trueType: Node!\n  typeName: DeclarationName\n}\n\ntype ConstructorDeclaration implements HasJSDoc & MaybeOptional & Node {\n  asteriskToken: Token\n  end: Int!\n  exclamationToken: Token\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parameters: [ParameterDeclaration!]!\n  parent: Node!\n  pos: Int!\n  questionToken: Token\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node\n  typeName: DeclarationName\n  typeParameters: [TypeParameterDeclaration!]\n}\n\ntype ConstructorTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node!\n  typeName: DeclarationName\n}\n\ntype ConstructSignatureDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\nunion DeclarationName = BindingPattern | ComputedPropertyName | Identifier | NumericLiteral | QualifiedName | StringLiteralLike | UnnamedNode\n\ntype EnumDeclaration implements HasJSDoc & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  members: [Node!]!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype ExportAssignment implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype ExportDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype FunctionDeclaration implements HasJSDoc & MaybeOptional & Node {\n  asteriskToken: Token\n  end: Int!\n  exclamationToken: Token\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parameters: [ParameterDeclaration!]!\n  parent: Node!\n  pos: Int!\n  questionToken: Token\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node\n  typeName: DeclarationName\n  typeParameters: [TypeParameterDeclaration!]\n}\n\ntype FunctionTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node!\n  typeName: DeclarationName\n}\n\ntype GetAccessorDeclaration implements HasJSDoc & MaybeOptional & Node {\n  asteriskToken: Token\n  end: Int!\n  exclamationToken: Token\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parameters: [ParameterDeclaration!]!\n  parent: Node!\n  pos: Int!\n  questionToken: Token\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node\n  typeName: DeclarationName\n  typeParameters: [TypeParameterDeclaration!]\n}\n\ninterface HasJSDoc {\n  jsDoc: [JSDoc!]\n}\n\ntype Identifier implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  text: String!\n  typeName: DeclarationName\n}\n\ntype ImportDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype ImportEqualsDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype ImportTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype IndexedAccessTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype IndexSignatureDeclaration implements HasJSDoc & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype InferTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n  typeParameter: Node!\n}\n\ntype InterfaceDeclaration implements HasJSDoc & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype IntersectionTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n  types: [Node!]!\n}\n\ntype JSDoc {\n  comment: String\n  tags: [JSDocTag!]\n}\n\ntype JSDocAugmentsTag implements JSDocTag {\n  comment: String\n  tagName: String\n}\n\ntype JSDocClassTag implements JSDocTag {\n  comment: String\n  tagName: String\n}\n\ntype JSDocEnumTag implements JSDocTag {\n  comment: String\n  tagName: String\n}\n\ntype JSDocNamespaceDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype JSDocReturnTag implements JSDocTag {\n  comment: String\n  tagName: String\n}\n\ninterface JSDocTag {\n  comment: String\n  tagName: String\n}\n\ntype JSDocTemplateTag implements JSDocTag {\n  comment: String\n  tagName: String\n}\n\ntype JSDocThisTag implements JSDocTag {\n  comment: String\n  tagName: String\n}\n\ntype JSDocTypeTag implements JSDocTag {\n  comment: String\n  tagName: String\n}\n\ntype JSDocUnknownTag implements JSDocTag {\n  comment: String\n  tagName: String\n}\n\ntype KeywordTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype LiteralType implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype MappedTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ninterface MaybeOptional {\n  questionToken: Token\n}\n\ntype MethodDeclaration implements HasJSDoc & MaybeOptional & Node {\n  asteriskToken: Token\n  end: Int!\n  exclamationToken: Token\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parameters: [ParameterDeclaration!]!\n  parent: Node!\n  pos: Int!\n  questionToken: Token\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node\n  typeName: DeclarationName\n  typeParameters: [TypeParameterDeclaration!]\n}\n\ntype MissingDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype ModuleDeclaration implements HasJSDoc & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype NamespaceDeclaration implements HasJSDoc & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype NamespaceExportDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ninterface Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\nenum NodeFlags {\n  Ambient\n  AwaitContext\n  BlockScoped\n  Const\n  ContainsThis\n  ContextFlags\n  DecoratorContext\n  DisallowInContext\n  ExportContext\n  GlobalAugmentation\n  HasAggregatedChildData\n  HasAsyncFunctions\n  HasExplicitReturn\n  HasImplicitReturn\n  InWithStatement\n  JavaScriptFile\n  JSDoc\n  JsonFile\n  Let\n  Namespace\n  NestedNamespace\n  None\n  PermanentlySetIncrementalFlags\n  PossiblyContainsDynamicImport\n  PossiblyContainsImportMeta\n  ReachabilityAndEmitFlags\n  ReachabilityCheckFlags\n  Synthesized\n  ThisNodeHasError\n  ThisNodeOrAnySubNodesHasError\n  TypeExcludesFlags\n  UNKNOWN\n  YieldContext\n}\n\ntype NumericLiteral implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype OptionalTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node!\n  typeName: DeclarationName\n}\n\ntype ParameterDeclaration implements HasJSDoc & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node\n  typeName: DeclarationName\n}\n\ntype ParenthesizedType implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node!\n  typeName: DeclarationName\n}\n\ntype PropertyDeclaration implements HasJSDoc & MaybeOptional & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  questionToken: Token\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype PropertyLikeDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype PropertySignature implements HasJSDoc & MaybeOptional & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  questionToken: Token\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node\n  typeName: DeclarationName\n}\n\ntype QualifiedName implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype Query {\n  parseFile(file: String!): SourceFile!\n}\n\ntype RestTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node!\n  typeName: DeclarationName\n}\n\ntype SetAccessorDeclaration implements HasJSDoc & MaybeOptional & Node {\n  asteriskToken: Token\n  end: Int!\n  exclamationToken: Token\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parameters: [ParameterDeclaration!]!\n  parent: Node!\n  pos: Int!\n  questionToken: Token\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node\n  typeName: DeclarationName\n  typeParameters: [TypeParameterDeclaration!]\n}\n\ntype SourceFile implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  statements(only: [SyntaxKind!], skip: [SyntaxKind!]): [Node!]!\n  typeName: DeclarationName\n}\n\ntype StringLiteral implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype StringLiteralLike implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\nenum SyntaxKind {\n  AbstractKeyword\n  AmpersandAmpersandToken\n  AmpersandEqualsToken\n  AmpersandToken\n  AnyKeyword\n  ArrayBindingPattern\n  ArrayLiteralExpression\n  ArrayType\n  ArrowFunction\n  AsExpression\n  AsKeyword\n  AsteriskAsteriskEqualsToken\n  AsteriskAsteriskToken\n  AsteriskEqualsToken\n  AsteriskToken\n  AsyncKeyword\n  AtToken\n  AwaitExpression\n  AwaitKeyword\n  BarBarToken\n  BarEqualsToken\n  BarToken\n  BigIntKeyword\n  BigIntLiteral\n  BinaryExpression\n  BindingElement\n  Block\n  BooleanKeyword\n  BreakKeyword\n  BreakStatement\n  Bundle\n  CallExpression\n  CallSignature\n  CaretEqualsToken\n  CaretToken\n  CaseBlock\n  CaseClause\n  CaseKeyword\n  CatchClause\n  CatchKeyword\n  ClassDeclaration\n  ClassExpression\n  ClassKeyword\n  CloseBraceToken\n  CloseBracketToken\n  CloseParenToken\n  ColonToken\n  CommaListExpression\n  CommaToken\n  ComputedPropertyName\n  ConditionalExpression\n  ConditionalType\n  ConflictMarkerTrivia\n  ConstKeyword\n  Constructor\n  ConstructorKeyword\n  ConstructorType\n  ConstructSignature\n  ContinueKeyword\n  ContinueStatement\n  Count\n  DebuggerKeyword\n  DebuggerStatement\n  DeclareKeyword\n  Decorator\n  DefaultClause\n  DefaultKeyword\n  DeleteExpression\n  DeleteKeyword\n  DoKeyword\n  DoStatement\n  DotDotDotToken\n  DotToken\n  ElementAccessExpression\n  ElseKeyword\n  EmptyStatement\n  EndOfDeclarationMarker\n  EndOfFileToken\n  EnumDeclaration\n  EnumKeyword\n  EnumMember\n  EqualsEqualsEqualsToken\n  EqualsEqualsToken\n  EqualsGreaterThanToken\n  EqualsToken\n  ExclamationEqualsEqualsToken\n  ExclamationEqualsToken\n  ExclamationToken\n  ExportAssignment\n  ExportDeclaration\n  ExportKeyword\n  ExportSpecifier\n  ExpressionStatement\n  ExpressionWithTypeArguments\n  ExtendsKeyword\n  ExternalModuleReference\n  FalseKeyword\n  FinallyKeyword\n  FirstAssignment\n  FirstBinaryOperator\n  FirstCompoundAssignment\n  FirstContextualKeyword\n  FirstFutureReservedWord\n  FirstJSDocNode\n  FirstJSDocTagNode\n  FirstKeyword\n  FirstLiteralToken\n  FirstNode\n  FirstPunctuation\n  FirstReservedWord\n  FirstTemplateToken\n  FirstToken\n  FirstTriviaToken\n  FirstTypeNode\n  ForInStatement\n  ForKeyword\n  ForOfStatement\n  ForStatement\n  FromKeyword\n  FunctionDeclaration\n  FunctionExpression\n  FunctionKeyword\n  FunctionType\n  GetAccessor\n  GetKeyword\n  GlobalKeyword\n  GreaterThanEqualsToken\n  GreaterThanGreaterThanEqualsToken\n  GreaterThanGreaterThanGreaterThanEqualsToken\n  GreaterThanGreaterThanGreaterThanToken\n  GreaterThanGreaterThanToken\n  GreaterThanToken\n  HeritageClause\n  Identifier\n  IfKeyword\n  IfStatement\n  ImplementsKeyword\n  ImportClause\n  ImportDeclaration\n  ImportEqualsDeclaration\n  ImportKeyword\n  ImportSpecifier\n  ImportType\n  IndexedAccessType\n  IndexSignature\n  InferKeyword\n  InferType\n  InKeyword\n  InputFiles\n  InstanceOfKeyword\n  InterfaceDeclaration\n  InterfaceKeyword\n  IntersectionType\n  IsKeyword\n  JSDocAllType\n  JSDocAugmentsTag\n  JSDocCallbackTag\n  JSDocClassTag\n  JSDocComment\n  JSDocEnumTag\n  JSDocFunctionType\n  JSDocNonNullableType\n  JSDocNullableType\n  JSDocOptionalType\n  JSDocParameterTag\n  JSDocPropertyTag\n  JSDocReturnTag\n  JSDocSignature\n  JSDocTag\n  JSDocTemplateTag\n  JSDocThisTag\n  JSDocTypedefTag\n  JSDocTypeExpression\n  JSDocTypeLiteral\n  JSDocTypeTag\n  JSDocUnknownType\n  JSDocVariadicType\n  JsxAttribute\n  JsxAttributes\n  JsxClosingElement\n  JsxClosingFragment\n  JsxElement\n  JsxExpression\n  JsxFragment\n  JsxOpeningElement\n  JsxOpeningFragment\n  JsxSelfClosingElement\n  JsxSpreadAttribute\n  JsxText\n  JsxTextAllWhiteSpaces\n  KeyOfKeyword\n  LabeledStatement\n  LastAssignment\n  LastBinaryOperator\n  LastCompoundAssignment\n  LastContextualKeyword\n  LastFutureReservedWord\n  LastJSDocNode\n  LastJSDocTagNode\n  LastKeyword\n  LastLiteralToken\n  LastPunctuation\n  LastReservedWord\n  LastTemplateToken\n  LastToken\n  LastTriviaToken\n  LastTypeNode\n  LessThanEqualsToken\n  LessThanLessThanEqualsToken\n  LessThanLessThanToken\n  LessThanSlashToken\n  LessThanToken\n  LetKeyword\n  LiteralType\n  MappedType\n  MergeDeclarationMarker\n  MetaProperty\n  MethodDeclaration\n  MethodSignature\n  MinusEqualsToken\n  MinusMinusToken\n  MinusToken\n  MissingDeclaration\n  ModuleBlock\n  ModuleDeclaration\n  ModuleKeyword\n  MultiLineCommentTrivia\n  NamedExports\n  NamedImports\n  NamespaceExportDeclaration\n  NamespaceImport\n  NamespaceKeyword\n  NeverKeyword\n  NewExpression\n  NewKeyword\n  NewLineTrivia\n  NonNullExpression\n  NoSubstitutionTemplateLiteral\n  NotEmittedStatement\n  NullKeyword\n  NumberKeyword\n  NumericLiteral\n  ObjectBindingPattern\n  ObjectKeyword\n  ObjectLiteralExpression\n  OfKeyword\n  OmittedExpression\n  OpenBraceToken\n  OpenBracketToken\n  OpenParenToken\n  OptionalType\n  PackageKeyword\n  Parameter\n  ParenthesizedExpression\n  ParenthesizedType\n  PartiallyEmittedExpression\n  PercentEqualsToken\n  PercentToken\n  PlusEqualsToken\n  PlusPlusToken\n  PlusToken\n  PostfixUnaryExpression\n  PrefixUnaryExpression\n  PrivateKeyword\n  PropertyAccessExpression\n  PropertyAssignment\n  PropertyDeclaration\n  PropertySignature\n  ProtectedKeyword\n  PublicKeyword\n  QualifiedName\n  QuestionToken\n  ReadonlyKeyword\n  RegularExpressionLiteral\n  RequireKeyword\n  RestType\n  ReturnKeyword\n  ReturnStatement\n  SemicolonClassElement\n  SemicolonToken\n  SetAccessor\n  SetKeyword\n  ShebangTrivia\n  ShorthandPropertyAssignment\n  SingleLineCommentTrivia\n  SlashEqualsToken\n  SlashToken\n  SourceFile\n  SpreadAssignment\n  SpreadElement\n  StaticKeyword\n  StringKeyword\n  StringLiteral\n  SuperKeyword\n  SwitchKeyword\n  SwitchStatement\n  SymbolKeyword\n  SyntaxList\n  SyntheticExpression\n  TaggedTemplateExpression\n  TemplateExpression\n  TemplateHead\n  TemplateMiddle\n  TemplateSpan\n  TemplateTail\n  ThisKeyword\n  ThisType\n  ThrowKeyword\n  ThrowStatement\n  TildeToken\n  TrueKeyword\n  TryKeyword\n  TryStatement\n  TupleType\n  TypeAliasDeclaration\n  TypeAssertionExpression\n  TypeKeyword\n  TypeLiteral\n  TypeOfExpression\n  TypeOfKeyword\n  TypeOperator\n  TypeParameter\n  TypePredicate\n  TypeQuery\n  TypeReference\n  UndefinedKeyword\n  UnionType\n  UniqueKeyword\n  Unknown\n  UnknownKeyword\n  UnparsedInternalText\n  UnparsedPrepend\n  UnparsedPrologue\n  UnparsedSource\n  UnparsedSyntheticReference\n  UnparsedText\n  VariableDeclaration\n  VariableDeclarationList\n  VariableStatement\n  VarKeyword\n  VoidExpression\n  VoidKeyword\n  WhileKeyword\n  WhileStatement\n  WhitespaceTrivia\n  WithKeyword\n  WithStatement\n  YieldExpression\n  YieldKeyword\n}\n\ntype ThisTypeNode implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype Token {\n  kind: SyntaxKind!\n}\n\ntype TupleTypeNode implements Node {\n  elementTypes: [Node!]!\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype TypeAliasDeclaration implements HasJSDoc & Node {\n  end: Int!\n  flags: NodeFlags!\n  jsDoc: [JSDoc!]\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  type: Node\n  typeName: DeclarationName\n  typeParameters: [TypeParameterDeclaration!]\n}\n\ntype TypeLiteral implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype TypeParameterDeclaration implements Node {\n  constraint: Node!\n  default: Node!\n  end: Int!\n  expression: Node!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype TypeReference implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  text: String\n  typeArguments: [Node!]\n  typeName: DeclarationName\n}\n\ntype UnionType implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n  types: [Node!]!\n}\n\ntype UNKNOWN_NODE implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n\ntype UnnamedNode {\n  text: String\n}\n\ntype VariableDeclaration implements Node {\n  end: Int!\n  flags: NodeFlags!\n  kind: SyntaxKind!\n  kindCode: Int!\n  modifiers(only: [SyntaxKind!], skip: [SyntaxKind!]): [Token!]\n  name: DeclarationName\n  nameText: String\n  parent: Node!\n  pos: Int!\n  rawText(only: [SyntaxKind!], skip: [SyntaxKind!]): String!\n  typeName: DeclarationName\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 67,
      "containsCycle": false,
      "polynomialLevel": 3,
      "numDefinitions": 74
    },
    {
      "name": "githunt-api-schema.graphql",
      "path": "examples/githunt-api/githunt-api-schema.graphql",
      "sha": "2ff71b7ec20186c824b2bbe8f1a9ffe44f17da99",
      "url": "https://api.github.com/repositories/155921978/contents/examples/githunt-api/githunt-api-schema.graphql?ref=0060cb9ec748816e6dbdc9202e7a564dcd2f357e",
      "git_url": "https://api.github.com/repositories/155921978/git/blobs/2ff71b7ec20186c824b2bbe8f1a9ffe44f17da99",
      "html_url": "https://github.com/prisma/nexus/blob/0060cb9ec748816e6dbdc9202e7a564dcd2f357e/examples/githunt-api/githunt-api-schema.graphql",
      "content": "### This file was autogenerated by GraphQL Nexus\n### Do not make changes to this file directly\n\n\n\"\"\"A comment about an entry, submitted by a user\"\"\"\ntype Comment {\n  \"\"\"The text of the comment\"\"\"\n  content: String!\n\n  \"\"\"A timestamp of when the comment was posted\"\"\"\n  createdAt: Float!\n\n  \"\"\"The SQL ID of this entry\"\"\"\n  id: Int!\n\n  \"\"\"The GitHub user who posted the comment\"\"\"\n  postedBy: User\n\n  \"\"\"The repository which this comment is about\"\"\"\n  repoName: String!\n}\n\ntype Entry {\n  \"\"\"The number of comments posted about this repository\"\"\"\n  commentCount: Int!\n\n  \"\"\"Comments posted about this repository\"\"\"\n  comments(limit: Int, offset: Int): [Comment!]!\n\n  \"\"\"A timestamp of when the entry was submitted\"\"\"\n  createdAt: Float!\n\n  \"\"\"The hot score of this repository\"\"\"\n  hotScore: Float!\n\n  \"\"\"The SQL ID of this entry\"\"\"\n  id: Int!\n\n  \"\"\"The GitHub user who posted the comment\"\"\"\n  postedBy: User\n\n  \"\"\"Information about the repository from GitHub\"\"\"\n  repository: Repository!\n\n  \"\"\"The score of this repository, upvotes - downvotes\"\"\"\n  score: Int!\n\n  \"\"\"XXX to be changed\"\"\"\n  vote: Vote!\n}\n\n\"\"\"A list of options for the sort order of the feed\"\"\"\nenum FeedType {\n  \"\"\"\n  Sort by a combination of freshness and score, using Reddit's algorithm\n  \"\"\"\n  HOT\n\n  \"\"\"Newest entries first\"\"\"\n  NEW\n\n  \"\"\"Highest score entries first\"\"\"\n  TOP\n}\n\ntype Mutation {\n  submitComment(\n    \"\"\"The text content for the new comment\"\"\"\n    commentContent: String!\n\n    \"\"\"\n    The full repository name from GitHub, e.g. \"apollostack/GitHunt-API\"\n    \"\"\"\n    repoFullName: String!\n  ): Comment!\n\n  \"\"\"Submit a new repository, returns the new submission\"\"\"\n  submitRepository(\n    \"\"\"\n    The full repository name from GitHub, e.g. \"apollostack/GitHunt-API\"\n    \"\"\"\n    repoFullName: String!\n  ): Entry!\n\n  \"\"\"\n  Vote on a repository submission, returns the submission that was voted on\n  \"\"\"\n  vote(\n    \"\"\"\n    The full repository name from GitHub, e.g. \"apollostack/GitHunt-API\"\n    \"\"\"\n    repoFullName: String!\n\n    \"\"\"The type of vote - UP, DOWN, or CANCEL\"\"\"\n    type: VoteType!\n  ): Entry!\n}\n\ntype Query {\n  \"\"\"Return the currently logged in user, or null if nobody is logged in\"\"\"\n  currentUser: User\n\n  \"\"\"A single entry\"\"\"\n  entry(\n    \"\"\"\n    The full repository name from GitHub, e.g. \"apollostack/GitHunt-API\"\n    \"\"\"\n    repoFullName: String!\n  ): Entry\n  feed(\n    \"\"\"The number of items to fetch starting from the offset, for pagination\"\"\"\n    limit: Int\n\n    \"\"\"The number of items to skip, for pagination\"\"\"\n    offset: Int\n\n    \"\"\"The sort order for the feed\"\"\"\n    type: FeedType!\n  ): [Entry!]!\n}\n\n\"\"\"\n\n    A repository object from the GitHub API. This uses the exact field names returned by the\n    GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.\n  \n\"\"\"\ntype Repository {\n  \"\"\"The description of the repository\"\"\"\n  description: String\n\n  \"\"\"\n  The full name of the repository with the username, e.g. apollostack/GitHunt-API\n  \"\"\"\n  full_name: String!\n\n  \"\"\"The link to the repository on GitHub\"\"\"\n  html_url: String!\n\n  \"\"\"Just the name of the repository, e.g. GitHunt-API\"\"\"\n  name: String!\n\n  \"\"\"The number of open issues on this repository on GitHub\"\"\"\n  open_issues_count: Int\n\n  \"\"\"The owner of this repository on GitHub, e.g. apollostack\"\"\"\n  owner: User\n\n  \"\"\"The number of people who have starred this repository on GitHub\"\"\"\n  stargazers_count: Int!\n}\n\n\"\"\"\nA user object from the GitHub API. This uses the exact field names returned from the GitHub API.\n\"\"\"\ntype User {\n  \"\"\"The URL to a directly embeddable image for this user's avatar\"\"\"\n  avatar_url: String!\n\n  \"\"\"The URL of this user's GitHub page\"\"\"\n  html_url: String!\n\n  \"\"\"The name of the user, e.g. apollostack\"\"\"\n  login: String!\n}\n\ntype Vote {\n  vote_value: Int!\n}\n\n\"\"\"The type of vote to record, when submitting a vote\"\"\"\nenum VoteType {\n  CANCEL\n  DOWN\n  UP\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 7,
      "containsCycle": false,
      "polynomialLevel": 2,
      "numDefinitions": 9
    },
    {
      "name": "schema.graphql",
      "path": "examples/nexus-prisma/src/generated/schema.graphql",
      "sha": "cf04db45b699961f8795366af9830cee1d0e2a9e",
      "url": "https://api.github.com/repositories/155921978/contents/examples/nexus-prisma/src/generated/schema.graphql?ref=78013cf8ee65b209186c7c0f558048e3d07051b9",
      "git_url": "https://api.github.com/repositories/155921978/git/blobs/cf04db45b699961f8795366af9830cee1d0e2a9e",
      "html_url": "https://github.com/prisma/nexus/blob/78013cf8ee65b209186c7c0f558048e3d07051b9/examples/nexus-prisma/src/generated/schema.graphql",
      "content": "### This file was autogenerated by Nexus 0.9.11\n### Do not make changes to this file directly\n\n\nscalar DateTime\n\ntype Mutation {\n  createDraft(authorEmail: String, content: String, title: String): Post\n  deletePost(id: ID): Post\n  publish(id: ID): Post\n  signupUser(email: String, name: String): User\n}\n\ntype Post {\n  author: User!\n  content: String\n  createdAt: DateTime!\n  id: ID!\n  published: Boolean!\n  title: String!\n  updatedAt: DateTime!\n}\n\ntype Query {\n  feed: [Post!]\n  filterPosts(searchString: String): [Post!]\n  post(id: ID): Post\n}\n\ntype User {\n  email: String!\n  id: ID!\n  name: String\n  posts: [Post!]\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 5
    },
    {
      "name": "kitchen-sink-schema.graphql",
      "path": "examples/kitchen-sink/kitchen-sink-schema.graphql",
      "sha": "13144ac965aa39c6211d6d7efbc7ad583018bb28",
      "url": "https://api.github.com/repositories/155921978/contents/examples/kitchen-sink/kitchen-sink-schema.graphql?ref=09abed674a7d4f56686b98494201d205caa46ed5",
      "git_url": "https://api.github.com/repositories/155921978/git/blobs/13144ac965aa39c6211d6d7efbc7ad583018bb28",
      "html_url": "https://github.com/prisma/nexus/blob/09abed674a7d4f56686b98494201d205caa46ed5/examples/kitchen-sink/kitchen-sink-schema.graphql",
      "content": "### This file was autogenerated by GraphQL Nexus\n### Do not make changes to this file directly\n\n\n\"\"\"Bar description\"\"\"\ninterface Bar {\n  argsTest(a: InputType = {answer: 2, key: \"one\"}): Boolean!\n  ok: Boolean! @deprecated(reason: \"Not ok?\")\n}\n\ninterface Baz {\n  \"\"\"'A' description\"\"\"\n  a: Bar!\n  ok: Boolean!\n}\n\nscalar Date\n\ntype Foo implements Bar {\n  argsTest(a: InputType = {answer: 2, key: \"one\"}): Boolean!\n  name: String!\n  ok: Boolean! @deprecated(reason: \"Not ok?\")\n}\n\ninput InputType {\n  answer: Int\n  key: String!\n  nestedInput: InputType2\n}\n\ninput InputType2 {\n  answer: Int\n  key: String!\n}\n\ntype Mutation {\n  ok: Boolean!\n  someMutationField(id: ID!): Foo!\n}\n\ntype Query {\n  bar: Bar!\n  dateAsList: [Date!]!\n  extended: Bar!\n  getNumberOrNull(a: Int!): Int\n}\n\ntype TestObj implements Bar & Baz {\n  \"\"\"'A' description\"\"\"\n  a: Bar!\n  argsTest(a: InputType = {answer: 2, key: \"one\"}): Boolean!\n  item: String!\n  ok: Boolean!\n}\n\nunion TestUnion = Foo\n",
      "containsQueryType": true,
      "typesUndefined": [],
      "directivesUndefined": [
        "deprecated"
      ],
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 4,
      "containsCycle": false,
      "polynomialLevel": 0,
      "numDefinitions": 10
    },
    {
      "name": "ghost-schema.graphql",
      "path": "examples/ghost/src/ghost-schema.graphql",
      "sha": "ba9a029813ddbb9eca9632142309eb8ca5a51df6",
      "url": "https://api.github.com/repositories/155921978/contents/examples/ghost/src/ghost-schema.graphql?ref=f78dc7b1b7122727030ad3f8f21806817e4a1480",
      "git_url": "https://api.github.com/repositories/155921978/git/blobs/ba9a029813ddbb9eca9632142309eb8ca5a51df6",
      "html_url": "https://github.com/prisma/nexus/blob/f78dc7b1b7122727030ad3f8f21806817e4a1480/examples/ghost/src/ghost-schema.graphql",
      "content": "### This file was autogenerated by GraphQL Nexus\n### Do not make changes to this file directly\n\n\"\"\"\nA date string, such as 2007-12-03, compliant with the `full-date` format\noutlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for\nrepresentation of dates and times using the Gregorian calendar.\n\"\"\"\nscalar Date\n\ntype Post {\n  html: String!\n  slug: String!\n  title: String!\n  uuid: String!\n}\n\ntype Query {\n  me: Post\n  postById(id: ID!): Post!\n  userById(id: ID!): User!\n}\n\ntype User {\n  accessibility: String\n  bio: String\n  coverImage: String\n  createdAt: Date!\n  createdBy: User!\n  email: String!\n  facebook: String\n  ghostAuthAccessToken: String\n  ghostAuthId: String\n  id: String!\n  lastSeen: Date\n  locale: String\n  location: String\n  metaDescription: String\n  metaTitle: String\n  name: String!\n  profileImage: String\n  slug: String!\n  status: String!\n  tour: String\n  twitter: String\n  updatedAt: Date\n  updatedBy: String\n  visibility: String!\n  website: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 3,
      "containsCycle": false,
      "polynomialLevel": 0,
      "numDefinitions": 4
    }
  ],
  "metrics": {
    "created_at": "2018-11-02T21:11:33Z",
    "updated_at": "2019-07-19T17:45:02Z",
    "pushed_at": "2019-07-15T00:21:18Z",
    "issues": 118,
    "watchers": 27,
    "fork_count": 43,
    "has_wiki_enabled": false,
    "license": "mit",
    "pull_requests": 63,
    "pull_requests_open": 2,
    "pull_requests_closed": 9,
    "pull_requests_merged": 52,
    "releases": 0,
    "stargazers": 884
  }
}