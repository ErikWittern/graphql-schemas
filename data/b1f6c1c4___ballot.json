{
  "repo_name": "ballot",
  "repo_full_name": "b1f6c1c4/ballot",
  "repo_owner": "b1f6c1c4",
  "repo_description": "Customizable anonymous online balloting system with ring signature authentication.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "public.graphql",
      "path": "backend/docs/public.graphql",
      "sha": "86255504cd68cf045692d82ebb3ff2cc6c99abbb",
      "url": "https://api.github.com/repositories/116217485/contents/backend/docs/public.graphql?ref=45351c9bc2ce79f96c025667d84f005ef50c84d3",
      "git_url": "https://api.github.com/repositories/116217485/git/blobs/86255504cd68cf045692d82ebb3ff2cc6c99abbb",
      "html_url": "https://github.com/b1f6c1c4/ballot/blob/45351c9bc2ce79f96c025667d84f005ef50c84d3/backend/docs/public.graphql",
      "content": "# Entry points\n\ntype Query {\n\n  # Check system status [GET /]\n  status: Status\n\n  ballot(input: BallotInput!): Ballot\n\n  # Authentication is required\n  ballots: [Ballot!]\n\n  countTickets(input: CountTicketsInput!): Int\n\n  tickets(input: TicketsInput!): [BallotTicket!]\n\n  fieldStat(input: FieldStatInput!): [FieldStat!]\n}\n\ntype Mutation {\n\n  # Create account\n  #\n  # + Username must be unique.\n  # + Username must have at least 5 characters.\n  # + Username must be composed of alphanumeric and dash.\n  # + Username must start with an alphanumeric character.\n  # + Password must have at least 8 characters.\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `unmf`   | Username malformed                          |\n  # | `400`   | `pwmf`   | Password malformed                          |\n  # | `409`   | `unex`   | Username exists                             |\n  register(input: RegisterInput!): Boolean\n\n  # Get credential\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `unmf`   | Username malformed                          |\n  # | `400`   | `pwmf`   | Password malformed                          |\n  login(input: LoginInput!): JWT\n\n  # Change password\n  #\n  # Authentication is required\n  #\n  # + Password must have at least 8 characters.\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `pwmf`   | Password malformed                          |\n  password(input: PasswordInput!): Boolean\n\n  # Create a new ballot\n  #\n  # Authentication is required\n  #\n  # + Name must have at least 1 characters.\n  # + Name must be composed of alphanumeric and dash.\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `nmmf`   | Name malformed                              |\n  createBallot(input: CreateBallotInput!): Ballot\n\n  # Replace all fields\n  #\n  # Authentication required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `fdmf`   | Field malformed                             |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  replaceFields(input: ReplaceFieldsInput!): [BallotField!]\n\n  # Finalize field changes\n  #\n  # Locks field changes, and turn ballot status from `invited` to `preVoting`.\n  #\n  # Authentication required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  finalizeFields(input: FinalizeFieldsInput!): Boolean\n\n  # Create a new voter\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  createVoter(input: CreateVoterInput!): BallotVoter\n\n  # Delete a voter\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  deleteVoter(input: DeleteVoterInput!): Boolean\n\n  # Finalize voter changes\n  #\n  # Locks voter changes, and turn ballot status from `inviting` to `invited`.\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  finalizeVoters(input: FinalizeVotersInput!): Boolean\n\n  # Register as a voter\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `pkmf`   | Public key malformed                        |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  # | `409`   | `vtrg`   | Voter already registered                    |\n  registerVoter(input: RegisterVoterInput!): Boolean\n\n  # Finalize pre voting\n  #\n  # Turn ballot status from `preVoting` to `voting`.\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  finalizePreVoting(input: FinalizePreVotingInput!): Boolean\n\n  # Finalize voting\n  #\n  # Turn ballot status from `voting` to `finished`.\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  finalizeVoting(input: FinalizeVotingInput!): Boolean\n}\n\ntype Subscription {\n\n  ballotStatus(input: BallotInput!): BallotSt\n\n  # Authentication is required\n  ballotsStatus: BallotSt\n\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  voterRegistered(input: BallotInput!): VoterRg\n}\n\n# Inputs\n\ninput BallotInput {\n  bId: ID!\n}\n\ninput TicketsInput {\n  bId: ID!\n}\n\ninput CountTicketsInput {\n  bId: ID!\n}\n\ninput FieldStatInput {\n  bId: ID!\n  index: Int!\n}\n\ninput RegisterInput {\n  # Must be unique.\n  # Must have at least 5 characters.\n  # Must be composed of alphanumeric and dash.\n  # Must start with an alphanumeric character.\n  username: String!\n  # Must have at least 8 characters.\n  password: String!\n}\n\ninput LoginInput {\n  username: String!\n  password: String!\n}\n\ninput PasswordInput {\n  oldPassword: String!\n  # Must have at least 8 characters.\n  newPassword: String!\n}\n\ninput CreateBallotInput {\n  # Must have at least 1 characters.\n  # Must be composed of alphanumeric and dash.\n  name: String!\n}\n\ninput ReplaceFieldsInput {\n  bId: ID!\n  fields: [FieldInput!]!\n}\n\ninput FieldInput {\n  prompt: String!\n  stringDefault: String\n  enumItems: [String!]\n}\n\ninput FinalizeFieldsInput {\n  bId: ID!\n}\n\ninput CreateVoterInput {\n  bId: ID!\n  name: String!\n}\n\ninput DeleteVoterInput {\n  bId: ID!\n  iCode: ID!\n}\n\ninput FinalizeVotersInput {\n  bId: ID!\n}\n\ninput RegisterVoterInput {\n  bId: ID!\n  iCode: ID!\n  comment: String\n  publicKey: Crypto!\n}\n\ninput FinalizePreVotingInput {\n  bId: ID!\n}\n\ninput FinalizeVotingInput {\n  bId: ID!\n}\n\n# Objects\n\ntype Status {\n  version: String\n  commitHash: String\n}\n\ntype BallotSt {\n  bId: ID!\n  status: BallotStatus!\n}\n\ntype Ballot {\n  bId: ID!\n  name: String!\n  owner: String!\n  status: BallotStatus!\n  q: Crypto\n  g: Crypto\n  h: Crypto\n\n  # Authentication **is** required when\n  # - `creating`\n  # - `inviting`\n  # - `invited`\n  #\n  # Authentication is **not** required when\n  # - `preVoting`\n  # - `voting`\n  # - `finished`\n  fields: [BallotField!]!\n\n  # Authentication **is** required when\n  # - `creating`\n  # - `inviting`\n  #\n  # Authentication is **not** required when\n  # - `invited`\n  # - `preVoting`\n  # - `voting`\n  # - `finished`\n  voters: [BallotVoter!]!\n}\n\ninterface BallotField {\n  prompt: String!\n}\n\ntype StringField implements BallotField {\n  prompt: String!\n  default: String\n}\n\ntype EnumField implements BallotField {\n  prompt: String!\n  items: [String]!\n}\n\ntype BallotVoter {\n  iCode: ID!\n  name: String!\n  comment: String\n  publicKey: Crypto\n}\n\ntype BallotTicket {\n  t: Crypto!\n  payload: TicketPayload!\n  s: [Crypto!]!\n  c: [Crypto!]!\n}\n\ntype TicketPayload {\n  bId: ID!\n  result: [String]!\n}\n\ntype FieldStat {\n  answer: String\n  count: Int!\n}\n\ntype VoterRg {\n  iCode: ID!\n  comment: String\n  publicKey: Crypto!\n}\n\n# Enums\n\nenum BallotStatus {\n  creating\n  inviting\n  invited\n  preVoting\n  voting\n  finished\n}\n\n# Scalars\n\nscalar JWT\nscalar Crypto\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 13,
      "containsCycle": false,
      "polynomialLevel": 2,
      "numDefinitions": 34
    },
    {
      "name": "public.graphql",
      "path": "frontend/docs/public.graphql",
      "sha": "86255504cd68cf045692d82ebb3ff2cc6c99abbb",
      "url": "https://api.github.com/repositories/116217485/contents/frontend/docs/public.graphql?ref=45351c9bc2ce79f96c025667d84f005ef50c84d3",
      "git_url": "https://api.github.com/repositories/116217485/git/blobs/86255504cd68cf045692d82ebb3ff2cc6c99abbb",
      "html_url": "https://github.com/b1f6c1c4/ballot/blob/45351c9bc2ce79f96c025667d84f005ef50c84d3/frontend/docs/public.graphql",
      "content": "# Entry points\n\ntype Query {\n\n  # Check system status [GET /]\n  status: Status\n\n  ballot(input: BallotInput!): Ballot\n\n  # Authentication is required\n  ballots: [Ballot!]\n\n  countTickets(input: CountTicketsInput!): Int\n\n  tickets(input: TicketsInput!): [BallotTicket!]\n\n  fieldStat(input: FieldStatInput!): [FieldStat!]\n}\n\ntype Mutation {\n\n  # Create account\n  #\n  # + Username must be unique.\n  # + Username must have at least 5 characters.\n  # + Username must be composed of alphanumeric and dash.\n  # + Username must start with an alphanumeric character.\n  # + Password must have at least 8 characters.\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `unmf`   | Username malformed                          |\n  # | `400`   | `pwmf`   | Password malformed                          |\n  # | `409`   | `unex`   | Username exists                             |\n  register(input: RegisterInput!): Boolean\n\n  # Get credential\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `unmf`   | Username malformed                          |\n  # | `400`   | `pwmf`   | Password malformed                          |\n  login(input: LoginInput!): JWT\n\n  # Change password\n  #\n  # Authentication is required\n  #\n  # + Password must have at least 8 characters.\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `pwmf`   | Password malformed                          |\n  password(input: PasswordInput!): Boolean\n\n  # Create a new ballot\n  #\n  # Authentication is required\n  #\n  # + Name must have at least 1 characters.\n  # + Name must be composed of alphanumeric and dash.\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `nmmf`   | Name malformed                              |\n  createBallot(input: CreateBallotInput!): Ballot\n\n  # Replace all fields\n  #\n  # Authentication required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `fdmf`   | Field malformed                             |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  replaceFields(input: ReplaceFieldsInput!): [BallotField!]\n\n  # Finalize field changes\n  #\n  # Locks field changes, and turn ballot status from `invited` to `preVoting`.\n  #\n  # Authentication required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  finalizeFields(input: FinalizeFieldsInput!): Boolean\n\n  # Create a new voter\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  createVoter(input: CreateVoterInput!): BallotVoter\n\n  # Delete a voter\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  deleteVoter(input: DeleteVoterInput!): Boolean\n\n  # Finalize voter changes\n  #\n  # Locks voter changes, and turn ballot status from `inviting` to `invited`.\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  finalizeVoters(input: FinalizeVotersInput!): Boolean\n\n  # Register as a voter\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `400`   | `pkmf`   | Public key malformed                        |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  # | `409`   | `vtrg`   | Voter already registered                    |\n  registerVoter(input: RegisterVoterInput!): Boolean\n\n  # Finalize pre voting\n  #\n  # Turn ballot status from `preVoting` to `voting`.\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  finalizePreVoting(input: FinalizePreVotingInput!): Boolean\n\n  # Finalize voting\n  #\n  # Turn ballot status from `voting` to `finished`.\n  #\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  finalizeVoting(input: FinalizeVotingInput!): Boolean\n}\n\ntype Subscription {\n\n  ballotStatus(input: BallotInput!): BallotSt\n\n  # Authentication is required\n  ballotsStatus: BallotSt\n\n  # Authentication is required\n  #\n  # **Error codes**\n  #\n  # | Status  | Code     | Description                                 |\n  # | ------- | -------- | ------------------------------------------- |\n  # | `404`   | `ntfd`   | Resource not found                          |\n  # | `409`   | `stna`   | Ballot status doesn't allow the operation   |\n  voterRegistered(input: BallotInput!): VoterRg\n}\n\n# Inputs\n\ninput BallotInput {\n  bId: ID!\n}\n\ninput TicketsInput {\n  bId: ID!\n}\n\ninput CountTicketsInput {\n  bId: ID!\n}\n\ninput FieldStatInput {\n  bId: ID!\n  index: Int!\n}\n\ninput RegisterInput {\n  # Must be unique.\n  # Must have at least 5 characters.\n  # Must be composed of alphanumeric and dash.\n  # Must start with an alphanumeric character.\n  username: String!\n  # Must have at least 8 characters.\n  password: String!\n}\n\ninput LoginInput {\n  username: String!\n  password: String!\n}\n\ninput PasswordInput {\n  oldPassword: String!\n  # Must have at least 8 characters.\n  newPassword: String!\n}\n\ninput CreateBallotInput {\n  # Must have at least 1 characters.\n  # Must be composed of alphanumeric and dash.\n  name: String!\n}\n\ninput ReplaceFieldsInput {\n  bId: ID!\n  fields: [FieldInput!]!\n}\n\ninput FieldInput {\n  prompt: String!\n  stringDefault: String\n  enumItems: [String!]\n}\n\ninput FinalizeFieldsInput {\n  bId: ID!\n}\n\ninput CreateVoterInput {\n  bId: ID!\n  name: String!\n}\n\ninput DeleteVoterInput {\n  bId: ID!\n  iCode: ID!\n}\n\ninput FinalizeVotersInput {\n  bId: ID!\n}\n\ninput RegisterVoterInput {\n  bId: ID!\n  iCode: ID!\n  comment: String\n  publicKey: Crypto!\n}\n\ninput FinalizePreVotingInput {\n  bId: ID!\n}\n\ninput FinalizeVotingInput {\n  bId: ID!\n}\n\n# Objects\n\ntype Status {\n  version: String\n  commitHash: String\n}\n\ntype BallotSt {\n  bId: ID!\n  status: BallotStatus!\n}\n\ntype Ballot {\n  bId: ID!\n  name: String!\n  owner: String!\n  status: BallotStatus!\n  q: Crypto\n  g: Crypto\n  h: Crypto\n\n  # Authentication **is** required when\n  # - `creating`\n  # - `inviting`\n  # - `invited`\n  #\n  # Authentication is **not** required when\n  # - `preVoting`\n  # - `voting`\n  # - `finished`\n  fields: [BallotField!]!\n\n  # Authentication **is** required when\n  # - `creating`\n  # - `inviting`\n  #\n  # Authentication is **not** required when\n  # - `invited`\n  # - `preVoting`\n  # - `voting`\n  # - `finished`\n  voters: [BallotVoter!]!\n}\n\ninterface BallotField {\n  prompt: String!\n}\n\ntype StringField implements BallotField {\n  prompt: String!\n  default: String\n}\n\ntype EnumField implements BallotField {\n  prompt: String!\n  items: [String]!\n}\n\ntype BallotVoter {\n  iCode: ID!\n  name: String!\n  comment: String\n  publicKey: Crypto\n}\n\ntype BallotTicket {\n  t: Crypto!\n  payload: TicketPayload!\n  s: [Crypto!]!\n  c: [Crypto!]!\n}\n\ntype TicketPayload {\n  bId: ID!\n  result: [String]!\n}\n\ntype FieldStat {\n  answer: String\n  count: Int!\n}\n\ntype VoterRg {\n  iCode: ID!\n  comment: String\n  publicKey: Crypto!\n}\n\n# Enums\n\nenum BallotStatus {\n  creating\n  inviting\n  invited\n  preVoting\n  voting\n  finished\n}\n\n# Scalars\n\nscalar JWT\nscalar Crypto\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 34
    }
  ],
  "metrics": {
    "created_at": "2018-01-04T05:11:30Z",
    "updated_at": "2019-01-04T20:35:07Z",
    "pushed_at": "2018-05-28T15:39:37Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 2
  }
}