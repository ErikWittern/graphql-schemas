{
  "repo_name": "SnapchatStoryKit",
  "repo_full_name": "chessybear22/snapchatstorykit",
  "repo_owner": "chessybear22",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "public_story_api.graphql",
      "path": "gqlschema/public_story_api.graphql",
      "sha": "cfe99f7abc514e23ce56d4e16ee0c52b97033a92",
      "url": "https://api.github.com/repositories/178250859/contents/gqlschema/public_story_api.graphql?ref=cc1078d41d032436d2a2e080830dfe2d6856b685",
      "git_url": "https://api.github.com/repositories/178250859/git/blobs/cfe99f7abc514e23ce56d4e16ee0c52b97033a92",
      "html_url": "https://github.com/chessybear22/SnapchatStoryKit/blob/cc1078d41d032436d2a2e080830dfe2d6856b685/gqlschema/public_story_api.graphql",
      "content": "# Public Story API GraphQL Schema\n\nschema {\n  query: Query\n}\n\n\n# Geographic position input type.\ninput GeoPointInput {\n    # Latitude in degrees.\n    latitude: Float!\n    # Longitude in degrees.\n    longitude: Float!\n}\n\n# Geographic circular area input type.\ninput GeoCircleInput {\n    #Center of the circle.\n    center: GeoPointInput!\n    # Radius in meters.\n    radius_in_meters: Float!\n}\n\n# Geographic polygon area input type.\ninput GeoPolygonInput {\n    # Geo polygon vertices in clockwise order. The first and last vertex in the\n    # coordinates should be the same to enclose a polygon.\n    coordinates: [GeoPointInput]!\n}\n\n# Geographic area input type defined by southwestern and northeastern points.\ninput GeoBoundingBoxInput {\n    # Southwest geo point.\n    sw_point: GeoPointInput!\n    # Northeast geo point.\n    ne_point: GeoPointInput!\n}\n\n# Content filter type\nenum ContentFilterType {\n    # Finds Stories containing the terms in any field.\n    ANY\n    # Finds Stories containing the terms in the Snap's caption.\n    CAPTION\n    # Finds Stories containing terms in a display name or official username.\n    USER\n    # Finds Stories containing terms in fields related to location name\n    # (example: city name or country code).\n    LOCATION\n}\n\n# Keyword of named source filter input type.\ninput ContentFilterInput {\n    type: ContentFilterType!\n    keyword: String!\n}\n\n# Time range filter input type.\ninput TimeRangeFilterInput {\n    # Start time in epoch seconds.\n    min_timestamp_secs: Int!\n    # End time in epoch seconds.\n    max_timestamp_secs: Int!\n}\n\n\n# Media types.\nenum MediaType {\n    UNSET\n    IMAGE\n    VIDEO\n}\n\n# Media orientation.\nenum OrientationType {\n    UNSET\n    PORTRAIT\n    LANDSCAPE\n}\n\n# Media camera position.\nenum CameraPositionType {\n    UNSET\n    REAR_FACING\n    FRONT_FACING\n}\n\n# Media format filter input type.\ninput MediaFormatFilterInput {\n    media_type :MediaType!\n    orientation_type: OrientationType!\n    facing_type: CameraPositionType!\n}\n\n# Media information.\ntype Media {\n    media_type: MediaType!\n    orientation_type: OrientationType!\n    camera_position: CameraPositionType!\n    # Duration of the Snap video in seconds. This field is not applicable for images.\n    duration_secs: Int!\n    # URL for the preview image of the Snap.\n    media_preview_url: String!\n}\n\ntype SnapAttributionInfo {\n    # Display name of the person who created the Snap.\n    display_name: String!\n    # Emoji of the person who created the Snap.\n    emoji: String!\n}\n\ntype Snap {\n    # Unique Snap ID from backend.\n    id: String!\n    # Information to display on the Snap (example: city and state). Single line\n    # formatted optional.\n    title: String!\n    # The capture time of the snap in epoch seconds.\n    capture_time_secs: Int!\n    # Snap expiration time.\n    expiration_time_secs: Int!\n    # Snap embed url.\n    embed_url: String!\n    # Media of this Snap.\n    media: Media!\n    # The URL attached to the Snap if one exists.\n    attachment_url: String!\n    # Snap attribution information. Only populated for certain Snaps.\n    attribution_info: SnapAttributionInfo!\n}\n\n# The returned results are ordered by the specified orderType and paginated.\ntype SearchSnapsResults {\n    # The list of Snaps returned. The list can be empty when no Snaps are\n    # available.\n    snaps: [Snap]!\n    # nextSnapOffset denotes where to start to fetch the next page with current\n    # search criteria. A nextSnapOffset of value -1 indicates there is no more\n    # record after the last Snap returned in this call.\n    nextSnapOffset: Int!\n}\n\n\n# Story type.\nenum StoryType {\n    UNKNOWN\n    DISCOVER_FEED\n    USER_STORY\n}\n\n# Geographic position.\ntype GeoPoint {\n    # Latitude in degrees.\n    latitude: Float!\n    # Longitude in degrees.\n    longitude: Float!\n}\n\ntype StoryMetadata {\n    # Story type.\n    story_type: StoryType!\n    # Story title to display with the story thumbnail. Single line, formatted,\n    # localized string.\n    title: String!\n    # Subtitles shown together with the title as additional information, e.g.,\n    # city name, time, distance, volume. Each subtitle is a single line\n    # formatted, localized string. Optional.\n    sub_titles: [String]!\n    # Emoji of the story.\n    emoji: String!\n    # Story timestamp to display on the UI.\n    display_timestamp_secs : Int!\n    # Image thumbnail url.\n    image_thumbnail_url: String!\n    # The weighted centroid geo point of the story. This might not be meaningful\n    # for certain types of Stories, e.g. truly global topic Stories.\n    location: GeoPoint!\n    # Place information where the story is happening.\n    placeNames: [String]!\n}\n\n# A story is a list of snaps and metadata.\ntype Story {\n    # Unique snap ID from backend.\n    id: String!\n    # Metadata of this story.\n    metadata: StoryMetadata!\n    # Story embed url.\n    embed_url: String!\n    # Snaps within this story.\n    snaps: [Snap]!\n}\n\n# The returned results are ordered by the specified orderType and paginated.\ntype SearchStoriesResults {\n    # The list of snaps returned. The list can be empty when no more snap is\n    # available.\n    stories: [Story]!\n    # nextStoryOffset denotes where to start to fetch the next page with current\n    # search criteria. A nextStoryOffset of value -1 indicates there is no more\n    # record after the last snap returned in this call.\n    nextStoryOffset: Int!\n}\n\nenum SearchResultsOrderType {\n    # Sorts the results by creation time, in chronological order (oldest first).\n    CHRONOLOGICAL\n    # Sort the results by the reverse chronological order of creation time.\n    REVERSE_CHRONOLOGICAL\n    # Sorts the results by relevance (most relevant first).\n    RELEVANCE\n}\n\ninput PagingInput {\n    # The starting index of the record among all the qualified records.\n    # Note that it's a zero-based index.\n    offset: Int!\n    # The total number of records the caller expects to get with this call.\n    # Note that the count is not guaranteed; the remaining number of\n    # records could be less than the specified count, or the count could\n    # exceed the server's limitation on the max number of records allowed to\n    # be returned with one response.\n    count: Int!\n}\n\n# Geo Filter Type\nenum GeoFilterType {\n    CIRCLE\n    BOUNDINGBOX\n    POLYGON\n}\n\n# Geo Filter Input. Must fill the selected type. Others will be ignored\ninput GeoFilterInput {\n    geotype: GeoFilterType!\n    circle: GeoCircleInput,\n    boundbox: GeoBoundingBoxInput,\n    polygon:  GeoPolygonInput,\n}\n\n# User's name and recent activity info.\ntype User {\n    # Name of the user.\n    userName: String!\n    # User's latest post time in epoch seconds.\n    latestPostEpochTime: Int!\n}\n\n# The returned results of GetActiveUsers query.\ntype GetActiveUsersResults {\n    # The list of active users returned.\n    users: [User]!\n    # nextUserOffset denotes where to start to fetch the next page with current\n    # search criteria. A nextUserOffset of value -1 indicates there is no more\n    # record after the last user returned in this call.\n    nextUserOffset: Int!\n}\n\ntype Query {\n    # Searches Snaps that meet the specified requirements.\n    # All filters are combined with AND-condition. For example,\n    # {ContentFilterInput A, ContentFilterInput B, GeoFilterInput G, TimeRangeFilterInput T}\n    # becomes (A AND B and G and T).\n    SearchSnaps(\n        # The geo filter that the returned Snaps must fall into.\n        geo_filter: GeoFilterInput,\n        # The content filter that the Snap should meet. This is a\n        # loose requirement. The resulting Snaps can be ranked by relevance.\n        content:[ContentFilterInput],\n        # The time range that the Snap creation time must fall into. Every record\n        # in the results must meet this piece of criteria.\n        time_range: TimeRangeFilterInput,\n        # The media format filter that the Snap needs to meet.\n        media_format_filter: MediaFormatFilterInput,\n        # The ordering type that determines the order of the Snap records.\n        order: SearchResultsOrderType!,\n        # Pagination argument for fetching paginated results.\n        paging: PagingInput!\n    ): SearchSnapsResults!\n\n    # Searches Stories that meet the specified requirements.\n    # All filters are combined with AND-condition. For example,\n    # {ContentFilterInput A, ContentFilterInput B, GeoFilterInput G, TimeRangeFilterInput T}\n    # becomes (A AND B and G and T).\n    SearchStories(\n        # The geo filter that the returned Snaps must fall into.\n        geo_filter: GeoFilterInput,\n        # The content filter that the Snap should meet. This is a\n        # loose requirement. The resulting Snaps can be ranked by relevance.\n        content:[ContentFilterInput],\n        # The time range that the Snap creation time must fall into. Every record\n        # in the results must meet this piece of criteria.\n        time_range: TimeRangeFilterInput,\n        # The media format filter that the Snap needs to meet.\n        media_format_filter: MediaFormatFilterInput,\n        # The ordering type that determines the order of the Snap records.\n        order: SearchResultsOrderType!,\n        # Pagination argument for fetching paginated results.\n        paging: PagingInput!\n    ): SearchStoriesResults!\n\n    # Searches Stories that meet the specified requirements.\n    # All filters are combined with AND-condition.\n    # For example, {TimeRangeFilterInput A, MediaFormatFilterInput B}\n    # becomes (A and B).\n    SearchUserStories(\n        # User name to search for.\n        user_name: String!,\n        # Caption to search for.\n        caption: String,\n        # The time range that the Snap creation time must fall into. Every record\n        # in the results must meet this piece of criteria.\n        time_range: TimeRangeFilterInput,\n        # The media format filter that the Snap needs to meet.\n        media_format_filter: MediaFormatFilterInput,\n        # The ordering type that determines the order of the Snap records.\n        order: SearchResultsOrderType!,\n        # Pagination argument for fetching paginated results.\n        paging: PagingInput!\n    ): SearchStoriesResults!\n\n    # Get users who were active within the past 24 hrs.\n    GetActiveUsers(\n        # Pagination argument for fetching paginated results.\n        paging: PagingInput!\n    ): GetActiveUsersResults!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 11,
      "containsCycle": false,
      "polynomialLevel": 2,
      "numDefinitions": 28
    }
  ],
  "metrics": {
    "created_at": "2019-03-28T17:21:22Z",
    "updated_at": "2019-03-28T17:21:38Z",
    "pushed_at": "2019-03-28T17:21:36Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}