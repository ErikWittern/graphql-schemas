{
  "repo_name": "global-ids",
  "repo_full_name": "graphile/global-ids",
  "repo_owner": "graphile",
  "repo_description": "[EXPERIMENTAL] Allows you to use Relay global object identifiers in more places.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema.graphql",
      "sha": "e34fae8db597ac05e193616484d94598edaf4584",
      "url": "https://api.github.com/repositories/168336926/contents/schema.graphql?ref=329e71927b7e8cf6338ac8a8407d721e095201da",
      "git_url": "https://api.github.com/repositories/168336926/git/blobs/e34fae8db597ac05e193616484d94598edaf4584",
      "html_url": "https://github.com/graphile/global-ids/blob/329e71927b7e8cf6338ac8a8407d721e095201da/schema.graphql",
      "content": "\"\"\"All input for the create `Organization` mutation.\"\"\"\ninput CreateOrganizationInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Organization` to be created by this mutation.\"\"\"\n  organization: OrganizationInput!\n}\n\n\"\"\"The output of our create `Organization` mutation.\"\"\"\ntype CreateOrganizationPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Organization` that was created by this mutation.\"\"\"\n  organization: Organization\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Organization`. May be used by Relay 1.\"\"\"\n  organizationEdge(\n    \"\"\"The method to use when ordering `Organization`.\"\"\"\n    orderBy: [OrganizationsOrderBy!] = PRIMARY_KEY_ASC\n  ): OrganizationsEdge\n}\n\n\"\"\"All input for the create `User` mutation.\"\"\"\ninput CreateUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` to be created by this mutation.\"\"\"\n  user: UserInput!\n}\n\n\"\"\"The output of our create `User` mutation.\"\"\"\ntype CreateUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` that was created by this mutation.\"\"\"\n  user: User\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Organization` that is related to this `User`.\"\"\"\n  organizationByOrganizationId: Organization\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\n\"\"\"A location in a connection that can be used for resuming pagination.\"\"\"\nscalar Cursor\n\n\"\"\"All input for the `deleteOrganizationById` mutation.\"\"\"\ninput DeleteOrganizationByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deleteOrganization` mutation.\"\"\"\ninput DeleteOrganizationInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Organization` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `Organization` mutation.\"\"\"\ntype DeleteOrganizationPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Organization` that was deleted by this mutation.\"\"\"\n  organization: Organization\n  deletedOrganizationId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Organization`. May be used by Relay 1.\"\"\"\n  organizationEdge(\n    \"\"\"The method to use when ordering `Organization`.\"\"\"\n    orderBy: [OrganizationsOrderBy!] = PRIMARY_KEY_ASC\n  ): OrganizationsEdge\n}\n\n\"\"\"All input for the `deleteUserByOrganizationIdAndUuid` mutation.\"\"\"\ninput DeleteUserByOrganizationIdAndUuidInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  organizationId: Int!\n  uuid: UUID!\n}\n\n\"\"\"All input for the `deleteUser` mutation.\"\"\"\ninput DeleteUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `User` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `User` mutation.\"\"\"\ntype DeleteUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` that was deleted by this mutation.\"\"\"\n  user: User\n  deletedUserId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Organization` that is related to this `User`.\"\"\"\n  organizationByOrganizationId: Organization\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\n\"\"\"\nThe root mutation type which contains root level fields which mutate data.\n\"\"\"\ntype Mutation {\n  \"\"\"Creates a single `Organization`.\"\"\"\n  createOrganization(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreateOrganizationInput!\n  ): CreateOrganizationPayload\n\n  \"\"\"Creates a single `User`.\"\"\"\n  createUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreateUserInput!\n  ): CreateUserPayload\n\n  \"\"\"\n  Updates a single `Organization` using its globally unique id and a patch.\n  \"\"\"\n  updateOrganization(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateOrganizationInput!\n  ): UpdateOrganizationPayload\n\n  \"\"\"Updates a single `Organization` using a unique key and a patch.\"\"\"\n  updateOrganizationById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateOrganizationByIdInput!\n  ): UpdateOrganizationPayload\n\n  \"\"\"Updates a single `User` using its globally unique id and a patch.\"\"\"\n  updateUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateUserInput!\n  ): UpdateUserPayload\n\n  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n  updateUserByOrganizationIdAndUuid(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateUserByOrganizationIdAndUuidInput!\n  ): UpdateUserPayload\n\n  \"\"\"Deletes a single `Organization` using its globally unique id.\"\"\"\n  deleteOrganization(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteOrganizationInput!\n  ): DeleteOrganizationPayload\n\n  \"\"\"Deletes a single `Organization` using a unique key.\"\"\"\n  deleteOrganizationById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteOrganizationByIdInput!\n  ): DeleteOrganizationPayload\n\n  \"\"\"Deletes a single `User` using its globally unique id.\"\"\"\n  deleteUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserInput!\n  ): DeleteUserPayload\n\n  \"\"\"Deletes a single `User` using a unique key.\"\"\"\n  deleteUserByOrganizationIdAndUuid(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserByOrganizationIdAndUuidInput!\n  ): DeleteUserPayload\n}\n\n\"\"\"An object with a globally unique `ID`.\"\"\"\ninterface Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n}\n\ntype Organization implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n  name: String!\n\n  \"\"\"Reads and enables pagination through a set of `User`.\"\"\"\n  usersByOrganizationId(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: UserCondition\n  ): UsersConnection!\n}\n\n\"\"\"\nA condition to be used against `Organization` object types. All fields are\ntested for equality and combined with a logical ‘and.’\n\"\"\"\ninput OrganizationCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `name` field.\"\"\"\n  name: String\n}\n\n\"\"\"An input for mutations affecting `Organization`\"\"\"\ninput OrganizationInput {\n  id: Int\n  name: String!\n}\n\n\"\"\"\nRepresents an update to a `Organization`. Fields that are set will be updated.\n\"\"\"\ninput OrganizationPatch {\n  id: Int\n  name: String\n}\n\n\"\"\"A connection to a list of `Organization` values.\"\"\"\ntype OrganizationsConnection {\n  \"\"\"A list of `Organization` objects.\"\"\"\n  nodes: [Organization]!\n\n  \"\"\"\n  A list of edges which contains the `Organization` and cursor to aid in pagination.\n  \"\"\"\n  edges: [OrganizationsEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `Organization` you could get from the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"A `Organization` edge in the connection.\"\"\"\ntype OrganizationsEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `Organization` at the end of the edge.\"\"\"\n  node: Organization\n}\n\n\"\"\"Methods to use when ordering `Organization`.\"\"\"\nenum OrganizationsOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  NAME_ASC\n  NAME_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: Cursor\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: Cursor\n}\n\n\"\"\"The root query type which gives access points into the data universe.\"\"\"\ntype Query implements Node {\n  \"\"\"\n  Exposes the root query type nested one level down. This is helpful for Relay 1\n  which can only query top level fields if they are in a particular form.\n  \"\"\"\n  query: Query!\n\n  \"\"\"\n  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"Fetches an object given its globally unique `ID`.\"\"\"\n  node(\n    \"\"\"The globally unique `ID`.\"\"\"\n    nodeId: ID!\n  ): Node\n\n  \"\"\"Reads and enables pagination through a set of `Organization`.\"\"\"\n  allOrganizations(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Organization`.\"\"\"\n    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: OrganizationCondition\n  ): OrganizationsConnection\n\n  \"\"\"Reads and enables pagination through a set of `User`.\"\"\"\n  allUsers(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: UserCondition\n  ): UsersConnection\n  organizationById(id: Int!): Organization\n  userByOrganizationIdAndUuid(organizationId: Int!, uuid: UUID!): User\n\n  \"\"\"Reads a single `Organization` using its globally unique `ID`.\"\"\"\n  organization(\n    \"\"\"\n    The globally unique `ID` to be used in selecting a single `Organization`.\n    \"\"\"\n    nodeId: ID!\n  ): Organization\n\n  \"\"\"Reads a single `User` using its globally unique `ID`.\"\"\"\n  user(\n    \"\"\"The globally unique `ID` to be used in selecting a single `User`.\"\"\"\n    nodeId: ID!\n  ): User\n}\n\n\"\"\"All input for the `updateOrganizationById` mutation.\"\"\"\ninput UpdateOrganizationByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Organization` being updated.\n  \"\"\"\n  organizationPatch: OrganizationPatch!\n  id: Int!\n}\n\n\"\"\"All input for the `updateOrganization` mutation.\"\"\"\ninput UpdateOrganizationInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Organization` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `Organization` being updated.\n  \"\"\"\n  organizationPatch: OrganizationPatch!\n}\n\n\"\"\"The output of our update `Organization` mutation.\"\"\"\ntype UpdateOrganizationPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Organization` that was updated by this mutation.\"\"\"\n  organization: Organization\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Organization`. May be used by Relay 1.\"\"\"\n  organizationEdge(\n    \"\"\"The method to use when ordering `Organization`.\"\"\"\n    orderBy: [OrganizationsOrderBy!] = PRIMARY_KEY_ASC\n  ): OrganizationsEdge\n}\n\n\"\"\"All input for the `updateUserByOrganizationIdAndUuid` mutation.\"\"\"\ninput UpdateUserByOrganizationIdAndUuidInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `User` being updated.\n  \"\"\"\n  userPatch: UserPatch!\n  organizationId: Int!\n  uuid: UUID!\n}\n\n\"\"\"All input for the `updateUser` mutation.\"\"\"\ninput UpdateUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `User` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `User` being updated.\n  \"\"\"\n  userPatch: UserPatch!\n}\n\n\"\"\"The output of our update `User` mutation.\"\"\"\ntype UpdateUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` that was updated by this mutation.\"\"\"\n  user: User\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Organization` that is related to this `User`.\"\"\"\n  organizationByOrganizationId: Organization\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\ntype User implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  organizationId: Int!\n  uuid: UUID!\n  name: String!\n\n  \"\"\"Reads a single `Organization` that is related to this `User`.\"\"\"\n  organizationByOrganizationId: Organization\n}\n\n\"\"\"\nA condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput UserCondition {\n  \"\"\"Checks for equality with the object’s `organizationId` field.\"\"\"\n  organizationId: Int\n\n  \"\"\"Checks for equality with the object’s `uuid` field.\"\"\"\n  uuid: UUID\n\n  \"\"\"Checks for equality with the object’s `name` field.\"\"\"\n  name: String\n}\n\n\"\"\"An input for mutations affecting `User`\"\"\"\ninput UserInput {\n  organizationId: Int!\n  uuid: UUID\n  name: String!\n}\n\n\"\"\"Represents an update to a `User`. Fields that are set will be updated.\"\"\"\ninput UserPatch {\n  organizationId: Int\n  uuid: UUID\n  name: String\n}\n\n\"\"\"A connection to a list of `User` values.\"\"\"\ntype UsersConnection {\n  \"\"\"A list of `User` objects.\"\"\"\n  nodes: [User]!\n\n  \"\"\"\n  A list of edges which contains the `User` and cursor to aid in pagination.\n  \"\"\"\n  edges: [UsersEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `User` you could get from the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"A `User` edge in the connection.\"\"\"\ntype UsersEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `User` at the end of the edge.\"\"\"\n  node: User\n}\n\n\"\"\"Methods to use when ordering `User`.\"\"\"\nenum UsersOrderBy {\n  NATURAL\n  ORGANIZATION_ID_ASC\n  ORGANIZATION_ID_DESC\n  UUID_ASC\n  UUID_DESC\n  NAME_ASC\n  NAME_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"\nA universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).\n\"\"\"\nscalar UUID\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 15,
      "containsCycle": true,
      "numDefinitions": 36
    }
  ],
  "metrics": {
    "created_at": "2019-01-30T12:09:07Z",
    "updated_at": "2019-07-17T10:43:29Z",
    "pushed_at": "2019-06-07T18:35:01Z",
    "issues": 5,
    "watchers": 4,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 3,
    "pull_requests_open": 1,
    "pull_requests_closed": 0,
    "pull_requests_merged": 2,
    "releases": 2,
    "stargazers": 2
  }
}