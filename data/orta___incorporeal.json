{
  "repo_name": "incorporeal",
  "repo_full_name": "orta/incorporeal",
  "repo_owner": "orta",
  "repo_description": "What is a meta-metaphysics?",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "metaphysics.graphql",
      "path": "src/schemas/metaphysics.graphql",
      "sha": "175faf3c990eda6be1875fffd7747a29907cd471",
      "url": "https://api.github.com/repositories/150362889/contents/src/schemas/metaphysics.graphql?ref=7e540236612ce3ef6bfb0f1b6c41b8712d365a9c",
      "git_url": "https://api.github.com/repositories/150362889/git/blobs/175faf3c990eda6be1875fffd7747a29907cd471",
      "html_url": "https://github.com/orta/incorporeal/blob/7e540236612ce3ef6bfb0f1b6c41b8712d365a9c/src/schemas/metaphysics.graphql",
      "content": "input AddAssetToConsignmentSubmissionInput {\n  # The type of the asset\n  asset_type: String!\n\n  # The token provided by Gemini for your asset\n  gemini_token: String!\n\n  # The id of the submission you want to attach an asset to\n  submission_id: String!\n  clientMutationId: String\n}\n\ntype AddAssetToConsignmentSubmissionPayload {\n  asset: Asset\n  clientMutationId: String\n}\n\n# One item in an aggregation\ntype AggregationCount {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  count: Int\n  name: String\n  sortable_id: String\n}\n\ninput ApproveOrderInput {\n  # Order ID\n  orderId: String!\n  clientMutationId: String\n}\n\ntype ApproveOrderPayload {\n  orderOrError: OrderOrFailureUnionType\n  clientMutationId: String\n}\n\ntype Article implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  author: Author\n  channel_id: String\n  contributing_authors: [Author]\n  href: String\n  published_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  slug: String\n  thumbnail_title: String\n  thumbnail_teaser: String\n  thumbnail_image: Image\n  tier: Int\n  title: String\n  updated_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n}\n\n# A connection to a list of items.\ntype ArticleConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ArticleEdge]\n  pageCursors: PageCursors\n  totalCount: Int\n}\n\n# An edge in a connection.\ntype ArticleEdge {\n  # The item at the end of the edge\n  node: Article\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum ArticleSorts {\n  PUBLISHED_AT_ASC\n  PUBLISHED_AT_DESC\n}\n\ntype Artist implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  alternate_names: [String]\n  articlesConnection(\n    sort: ArticleSorts\n    limit: Int\n    in_editorial_feed: Boolean\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArticleConnection\n  articles(\n    sort: ArticleSorts\n    limit: Int\n    in_editorial_feed: Boolean\n  ): [Article]\n  artists(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  artworks(\n    # The number of Artworks to return\n    size: Int\n    page: Int\n    sort: ArtworkSorts\n    published: Boolean = true\n    filter: [ArtistArtworksFilters]\n    exclude: [String]\n  ): [Artwork]\n  artworks_connection(\n    sort: ArtworkSorts\n    filter: [ArtistArtworksFilters]\n    published: Boolean = true\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtworkConnection\n  auctionResults(\n    sort: AuctionResultSorts\n\n    # When true, will only return records for allowed artists.\n    recordsTrusted: Boolean = false\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): AuctionResultConnection\n  bio: String\n\n  # The Artist biography article written by Artsy\n  biography: Article\n  biography_blurb(\n    # If true, will return featured bio over Artsy one.\n    partner_bio: Boolean = false\n    format: Format\n  ): ArtistBlurb\n  birthday: String\n  blurb(format: Format): String\n  carousel: ArtistCarousel\n  collections: [String]\n  contemporary(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  consignable: Boolean\n    @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  counts: ArtistCounts\n  currentEvent: CurrentEvent\n  deathday: String\n  display_auction_link: Boolean\n    @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n\n  # Custom-sorted list of shows for an artist, in order of significance.\n  exhibition_highlights(\n    # The number of Shows to return\n    size: Int = 5\n  ): [Show]\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n\n  # A string showing the total number of works and those for sale\n  formatted_artworks_count: String\n\n  # A string of the form \"Nationality, Birthday (or Birthday-Deathday)\"\n  formatted_nationality_and_birthday: String\n\n  # A list of genes associated with an artist\n  genes: [Gene]\n  gender: String\n  href: String\n  has_metadata: Boolean\n  hometown: String\n  image: Image\n  initials(length: Int = 3): String\n  is_consignable: Boolean\n\n  # Only specific Artists should show a link to auction results.\n  is_display_auction_link: Boolean\n  is_followed: Boolean\n  is_public: Boolean\n  is_shareable: Boolean\n  location: String\n  meta: ArtistMeta\n  nationality: String\n  name: String\n  partners(\n    represented_by: Boolean\n    partner_category: [String]\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): PartnerArtistConnection\n  partner_artists(\n    # The number of PartnerArtists to return\n    size: Int\n  ): [PartnerArtist]\n  partner_shows(\n    active: Boolean\n    at_a_fair: Boolean\n    is_reference: Boolean\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    status: String\n    top_tier: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [PartnerShow] @deprecated(reason: \"Prefer to use shows attribute\")\n  public: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  related: ArtistRelatedData\n  sales(\n    live: Boolean\n    is_auction: Boolean\n\n    # The number of Sales to return\n    size: Int\n    sort: SaleSorts\n  ): [Sale]\n  shows(\n    active: Boolean\n    at_a_fair: Boolean\n    is_reference: Boolean\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    status: String\n    top_tier: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [Show]\n  showsConnection(\n    active: Boolean\n    at_a_fair: Boolean\n    is_reference: Boolean\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    status: String\n    top_tier: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ShowConnection\n\n  # Use this attribute to sort by when sorting a collection of Artists\n  sortable_id: String\n  statuses: ArtistStatuses\n  highlights: ArtistHighlights\n  years: String\n}\n\nenum ArtistArtworksFilters {\n  IS_FOR_SALE\n  IS_NOT_FOR_SALE\n}\n\ntype ArtistBlurb {\n  credit: String\n  text: String\n\n  # The partner id of the partner who submitted the featured bio.\n  partner_id: String\n}\n\ntype ArtistCarousel {\n  images: [Image]\n}\n\n# A connection to a list of items.\ntype ArtistConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ArtistEdge]\n  pageCursors: PageCursors\n  totalCount: Int\n}\n\ntype ArtistCounts {\n  artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  follows(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  for_sale_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  partner_shows(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  related_artists: Int\n  articles: Int\n  ecommerce_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  auction_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\n# An edge in a connection.\ntype ArtistEdge {\n  # The item at the end of the edge\n  node: Artist\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype ArtistHighlights {\n  partners(\n    represented_by: Boolean\n    partner_category: [String]\n    display_on_partner_profile: Boolean\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): PartnerArtistConnection\n}\n\ntype ArtistItem implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  alternate_names: [String]\n  articlesConnection(\n    sort: ArticleSorts\n    limit: Int\n    in_editorial_feed: Boolean\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArticleConnection\n  articles(\n    sort: ArticleSorts\n    limit: Int\n    in_editorial_feed: Boolean\n  ): [Article]\n  artists(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  artworks(\n    # The number of Artworks to return\n    size: Int\n    page: Int\n    sort: ArtworkSorts\n    published: Boolean = true\n    filter: [ArtistArtworksFilters]\n    exclude: [String]\n  ): [Artwork]\n  artworks_connection(\n    sort: ArtworkSorts\n    filter: [ArtistArtworksFilters]\n    published: Boolean = true\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtworkConnection\n  auctionResults(\n    sort: AuctionResultSorts\n\n    # When true, will only return records for allowed artists.\n    recordsTrusted: Boolean = false\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): AuctionResultConnection\n  bio: String\n\n  # The Artist biography article written by Artsy\n  biography: Article\n  biography_blurb(\n    # If true, will return featured bio over Artsy one.\n    partner_bio: Boolean = false\n    format: Format\n  ): ArtistBlurb\n  birthday: String\n  blurb(format: Format): String\n  carousel: ArtistCarousel\n  collections: [String]\n  contemporary(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  consignable: Boolean\n    @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  counts: ArtistCounts\n  currentEvent: CurrentEvent\n  deathday: String\n  display_auction_link: Boolean\n    @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n\n  # Custom-sorted list of shows for an artist, in order of significance.\n  exhibition_highlights(\n    # The number of Shows to return\n    size: Int = 5\n  ): [Show]\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n\n  # A string showing the total number of works and those for sale\n  formatted_artworks_count: String\n\n  # A string of the form \"Nationality, Birthday (or Birthday-Deathday)\"\n  formatted_nationality_and_birthday: String\n\n  # A list of genes associated with an artist\n  genes: [Gene]\n  gender: String\n  href: String\n  has_metadata: Boolean\n  hometown: String\n  image: Image\n  initials(length: Int = 3): String\n  is_consignable: Boolean\n\n  # Only specific Artists should show a link to auction results.\n  is_display_auction_link: Boolean\n  is_followed: Boolean\n  is_public: Boolean\n  is_shareable: Boolean\n  location: String\n  meta: ArtistMeta\n  nationality: String\n  name: String\n  partners(\n    represented_by: Boolean\n    partner_category: [String]\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): PartnerArtistConnection\n  partner_artists(\n    # The number of PartnerArtists to return\n    size: Int\n  ): [PartnerArtist]\n  partner_shows(\n    active: Boolean\n    at_a_fair: Boolean\n    is_reference: Boolean\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    status: String\n    top_tier: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [PartnerShow] @deprecated(reason: \"Prefer to use shows attribute\")\n  public: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  related: ArtistRelatedData\n  sales(\n    live: Boolean\n    is_auction: Boolean\n\n    # The number of Sales to return\n    size: Int\n    sort: SaleSorts\n  ): [Sale]\n  shows(\n    active: Boolean\n    at_a_fair: Boolean\n    is_reference: Boolean\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    status: String\n    top_tier: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [Show]\n  showsConnection(\n    active: Boolean\n    at_a_fair: Boolean\n    is_reference: Boolean\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    status: String\n    top_tier: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ShowConnection\n\n  # Use this attribute to sort by when sorting a collection of Artists\n  sortable_id: String\n  statuses: ArtistStatuses\n  highlights: ArtistHighlights\n  years: String\n}\n\ntype ArtistMeta {\n  description: String\n  title: String\n}\n\ntype ArtistRelatedData {\n  genes(after: String, first: Int, before: String, last: Int): GeneConnection\n  artists(\n    exclude_artists_without_artworks: Boolean = true\n    kind: RelatedArtistsKind\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtistConnection\n\n  # A list of the current user’s suggested artists, based on a single artist\n  suggested(\n    # The slug or ID of an artist\n    artist_id: String\n\n    # Exclude artists without for sale works\n    exclude_artists_without_forsale_artworks: Boolean\n\n    # Exclude artists without any artworks\n    exclude_artists_without_artworks: Boolean\n\n    # Exclude artists the user already follows\n    exclude_followed_artists: Boolean\n\n    # Exclude these ids from results, may result in all artists being excluded.\n    exclude_artist_ids: [String]\n\n    # Pagination, need I say more?\n    page: Int\n\n    # Amount of artists to return\n    size: Int\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtistConnection\n}\n\nenum ArtistSorts {\n  sortable_id_asc @deprecated(reason: \"use capital enums\")\n  sortable_id_desc @deprecated(reason: \"use capital enums\")\n  trending_desc @deprecated(reason: \"use capital enums\")\n  SORTABLE_ID_ASC\n  SORTABLE_ID_DESC\n  TRENDING_DESC\n}\n\ntype ArtistStatuses {\n  artists: Boolean\n  articles: Boolean\n  artworks: Boolean\n  auction_lots: Boolean\n  biography: Boolean\n  contemporary: Boolean\n  cv(\n    # Suppress the cv tab when artist show count is less than this.\n    minShowCount: Int = 15\n  ): Boolean\n  shows: Boolean\n}\n\ntype Artwork implements Node & Sellable {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  additional_information(format: Format): String\n  artist(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): Artist\n  artists(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): [Artist]\n  artist_names: String\n  articles(size: Int): [Article]\n  availability: String\n  myLotStanding(live: Boolean = null): [LotStanding!]\n  can_share_image: Boolean\n    @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  category: String\n\n  # Attribution class object\n  attribution_class: AttributionClass\n  collecting_institution: String\n  contact_label: String\n\n  # Pre-filled inquiry text\n  contact_message: String\n\n  # Returns the associated Fair/Sale/PartnerShow\n  context: ArtworkContext\n  cultural_maker: String\n  date: String\n  description(format: Format): String\n  dimensions: dimensions\n\n  # Returns an HTML string representing the embedded content (video)\n  embed(width: Int = 853, height: Int = 450, autoplay: Boolean = false): String\n  edition_of: String\n  edition_sets: [EditionSet]\n  exhibition_history(format: Format): String\n  fair: Fair\n\n  # Returns the highlighted shows and articles\n  highlights: [Highlighted]\n  href: String\n  image: Image\n  image_rights: String\n  image_title: String\n  images(size: Int): [Image]\n\n  # Private text field for partner use\n  inventoryId: String\n\n  # Whether a work can be purchased through e-commerce\n  is_acquireable: Boolean\n\n  # Is this artwork part of an auction that is currently running?\n  is_biddable: Boolean\n\n  # When in an auction, can the work be bought immediately\n  is_buy_nowable: Boolean\n  is_comparable_with_auction_results: Boolean\n\n  # Are we able to display a contact form on artwork pages?\n  is_contactable: Boolean @deprecated(reason: \"Prefer to use is_inquireable\")\n  is_downloadable: Boolean\n  is_embeddable_video: Boolean\n  is_ecommerce: Boolean\n    @deprecated(reason: \"Should not be used to determine anything UI-level\")\n  is_for_sale: Boolean\n  is_hangable: Boolean\n\n  # Do we want to encourage inquiries on this work?\n  is_inquireable: Boolean\n\n  # Is this artwork part of an auction?\n  is_in_auction: Boolean\n\n  # Is this artwork part of a current show\n  is_in_show: Boolean\n  is_not_for_sale: String\n  is_on_hold: String\n  is_price_hidden: Boolean\n  is_price_range: Boolean\n  is_purchasable: Boolean\n    @deprecated(\n      reason: \"Purchase requests are not supported. Replaced by buy now.\"\n    )\n  is_saved: Boolean\n  is_shareable: Boolean\n  is_sold: Boolean\n  is_unique: Boolean\n  layer(id: String): ArtworkLayer\n  layers: [ArtworkLayer]\n  literature(format: Format): String\n  manufacturer(format: Format): String\n  medium: String\n  meta: ArtworkMeta\n  partner(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): Partner\n  pickup_available: Boolean\n  price: String\n  price_currency: String\n\n  # The string that describes domestic and international shipping.\n  shippingInfo: String\n\n  # Minimal location information describing from where artwork will be shipped.\n  shippingOrigin: String\n  provenance(format: Format): String\n  publisher(format: Format): String\n  related(size: Int): [Artwork]\n  sale: Sale\n  sale_artwork(sale_id: String = null): SaleArtwork\n  sale_message: String\n  series(format: Format): String\n  show(\n    size: Int\n    active: Boolean\n    at_a_fair: Boolean\n    sort: PartnerShowSorts\n  ): PartnerShow\n  shows(\n    size: Int\n    active: Boolean\n    at_a_fair: Boolean\n    sort: PartnerShowSorts\n  ): [PartnerShow]\n  signature(format: Format): String\n  title: String\n  to_s: String\n\n  # Whether this Artwork is Published of not\n  published: Boolean!\n\n  # If the category is video, then it returns the href for the (youtube/vimeo) video, otherwise returns the website from CMS\n  website: String\n  framed: ArtworkInfoRow\n  signatureInfo: ArtworkInfoRow\n  conditionDescription: ArtworkInfoRow\n  certificateOfAuthenticity: ArtworkInfoRow\n  cached: Int\n}\n\nenum ArtworkAggregation {\n  COLOR\n  DIMENSION_RANGE\n  FOLLOWED_ARTISTS\n  MAJOR_PERIOD\n  MEDIUM\n  MERCHANDISABLE_ARTISTS\n  GALLERY\n  INSTITUTION\n  PARTNER_CITY\n  PERIOD\n  PRICE_RANGE\n  TOTAL\n}\n\n# A connection to a list of items.\ntype ArtworkConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ArtworkEdge]\n  pageCursors: PageCursors\n  totalCount: Int\n}\n\nunion ArtworkContext =\n    ArtworkContextAuction\n  | ArtworkContextFair\n  | ArtworkContextPartnerShow\n  | ArtworkContextSale\n\ntype ArtworkContextAuction implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  associated_sale: Sale\n  auction_state: String\n    @deprecated(reason: \"Favor `status` for consistency with other models\")\n\n  # A bid increment policy that explains minimum bids in ranges.\n  bid_increments: [BidIncrement]\n\n  # Auction's buyer's premium policy.\n  buyers_premium: [BuyersPremium]\n  cover_image: Image\n  currency: String\n  description: String\n  display_timely_at: String\n  eligible_sale_artworks_count: Int\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  event_start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  event_end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  href: String\n  name: String\n  is_auction: Boolean\n  is_auction_promo: Boolean\n  is_closed: Boolean\n  is_open: Boolean\n  is_live_open: Boolean\n  is_preview: Boolean\n  is_registration_closed: Boolean\n  is_with_buyers_premium: Boolean\n  live_start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # Returns a live auctions url if the sale is open and start time is after now\n  live_url_if_open: String\n  partner: Partner\n  profile: Profile\n  promoted_sale: Sale\n  registration_ends_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # A registration for this sale or null\n  registrationStatus: Bidder\n  require_bidder_approval: Boolean\n  sale_artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n  ): [SaleArtwork]\n  sale_artworks_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): SaleArtworkConnection\n  sale_type: String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  status: String\n  sale_artwork(id: String!): SaleArtwork\n  symbol: String\n}\n\ntype ArtworkContextFair {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  banner_size: String\n  has_full_feature: Boolean\n  has_homepage_section: Boolean\n  has_large_banner: Boolean\n  has_listing: Boolean\n  href: String\n  image: Image\n\n  # Are we currently in the fair's active period?\n  is_active: Boolean\n  mobile_image: Image\n  is_published: Boolean\n  location: Location\n  name: String\n  profile: Profile\n  shows_connection(\n    # Number of artworks to return\n    section: String\n\n    # Sorts for shows in a fair\n    sort: ShowSort = FEATURED_DESC\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ShowConnection\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  organizer: organizer\n  published: Boolean\n    @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  tagline: String\n}\n\ntype ArtworkContextPartnerShow implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artists: [Artist]\n  artworks(\n    all: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n    for_sale: Boolean\n    published: Boolean = true\n    page: Int = 1\n\n    # Number of artworks to return\n    size: Int = 25\n  ): [Artwork]\n  counts: PartnerShowCounts\n  cover_image: Image\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  description: String\n  displayable: Boolean\n    @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  events: [PartnerShowEventType]\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  fair: Fair\n  href: String\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n\n  # Flag showing if show has any location.\n  has_location: Boolean\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  kind: String\n  location: Location\n  meta_image: Image\n\n  # The exhibition title\n  name: String\n  partner: Partner\n  press_release(format: Format): String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  type: String\n}\n\ntype ArtworkContextSale implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  associated_sale: Sale\n  auction_state: String\n    @deprecated(reason: \"Favor `status` for consistency with other models\")\n\n  # A bid increment policy that explains minimum bids in ranges.\n  bid_increments: [BidIncrement]\n\n  # Auction's buyer's premium policy.\n  buyers_premium: [BuyersPremium]\n  cover_image: Image\n  currency: String\n  description: String\n  display_timely_at: String\n  eligible_sale_artworks_count: Int\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  event_start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  event_end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  href: String\n  name: String\n  is_auction: Boolean\n  is_auction_promo: Boolean\n  is_closed: Boolean\n  is_open: Boolean\n  is_live_open: Boolean\n  is_preview: Boolean\n  is_registration_closed: Boolean\n  is_with_buyers_premium: Boolean\n  live_start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # Returns a live auctions url if the sale is open and start time is after now\n  live_url_if_open: String\n  partner: Partner\n  profile: Profile\n  promoted_sale: Sale\n  registration_ends_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # A registration for this sale or null\n  registrationStatus: Bidder\n  require_bidder_approval: Boolean\n  sale_artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n  ): [SaleArtwork]\n  sale_artworks_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): SaleArtworkConnection\n  sale_type: String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  status: String\n  sale_artwork(id: String!): SaleArtwork\n  symbol: String\n}\n\n# An edge in a connection.\ntype ArtworkEdge {\n  # The item at the end of the edge\n  node: Artwork\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nunion ArtworkFilterFacet = ArtworkFilterTag | ArtworkFilterGene\n\ntype ArtworkFilterGene implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  description: String\n  name: String\n  href: String\n  image: Image\n  count: Int\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n}\n\ntype ArtworkFilterTag implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  description: String\n  name: String\n  href: String\n  image: Image\n  count: Int\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n}\n\ntype ArtworkInfoRow {\n  # Label for information row\n  label: String\n\n  # Additional details about given attribute\n  details: String\n}\n\n# An inquiry on an Artwork\ntype ArtworkInquiry {\n  artwork: Artwork!\n  id: ID\n  impulse_conversation_id: String\n}\n\n# A connection to a list of items.\ntype ArtworkInquiryConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ArtworkInquiryEdge]\n}\n\n# An edge in a connection.\ntype ArtworkInquiryEdge {\n  # The item at the end of the edge\n  node: ArtworkInquiry\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype ArtworkItem implements Node & Sellable {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  additional_information(format: Format): String\n  artist(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): Artist\n  artists(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): [Artist]\n  artist_names: String\n  articles(size: Int): [Article]\n  availability: String\n  myLotStanding(live: Boolean = null): [LotStanding!]\n  can_share_image: Boolean\n    @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  category: String\n\n  # Attribution class object\n  attribution_class: AttributionClass\n  collecting_institution: String\n  contact_label: String\n\n  # Pre-filled inquiry text\n  contact_message: String\n\n  # Returns the associated Fair/Sale/PartnerShow\n  context: ArtworkContext\n  cultural_maker: String\n  date: String\n  description(format: Format): String\n  dimensions: dimensions\n\n  # Returns an HTML string representing the embedded content (video)\n  embed(width: Int = 853, height: Int = 450, autoplay: Boolean = false): String\n  edition_of: String\n  edition_sets: [EditionSet]\n  exhibition_history(format: Format): String\n  fair: Fair\n\n  # Returns the highlighted shows and articles\n  highlights: [Highlighted]\n  href: String\n  image: Image\n  image_rights: String\n  image_title: String\n  images(size: Int): [Image]\n\n  # Private text field for partner use\n  inventoryId: String\n\n  # Whether a work can be purchased through e-commerce\n  is_acquireable: Boolean\n\n  # Is this artwork part of an auction that is currently running?\n  is_biddable: Boolean\n\n  # When in an auction, can the work be bought immediately\n  is_buy_nowable: Boolean\n  is_comparable_with_auction_results: Boolean\n\n  # Are we able to display a contact form on artwork pages?\n  is_contactable: Boolean @deprecated(reason: \"Prefer to use is_inquireable\")\n  is_downloadable: Boolean\n  is_embeddable_video: Boolean\n  is_ecommerce: Boolean\n    @deprecated(reason: \"Should not be used to determine anything UI-level\")\n  is_for_sale: Boolean\n  is_hangable: Boolean\n\n  # Do we want to encourage inquiries on this work?\n  is_inquireable: Boolean\n\n  # Is this artwork part of an auction?\n  is_in_auction: Boolean\n\n  # Is this artwork part of a current show\n  is_in_show: Boolean\n  is_not_for_sale: String\n  is_on_hold: String\n  is_price_hidden: Boolean\n  is_price_range: Boolean\n  is_purchasable: Boolean\n    @deprecated(\n      reason: \"Purchase requests are not supported. Replaced by buy now.\"\n    )\n  is_saved: Boolean\n  is_shareable: Boolean\n  is_sold: Boolean\n  is_unique: Boolean\n  layer(id: String): ArtworkLayer\n  layers: [ArtworkLayer]\n  literature(format: Format): String\n  manufacturer(format: Format): String\n  medium: String\n  meta: ArtworkMeta\n  partner(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): Partner\n  pickup_available: Boolean\n  price: String\n  price_currency: String\n\n  # The string that describes domestic and international shipping.\n  shippingInfo: String\n\n  # Minimal location information describing from where artwork will be shipped.\n  shippingOrigin: String\n  provenance(format: Format): String\n  publisher(format: Format): String\n  related(size: Int): [Artwork]\n  sale: Sale\n  sale_artwork(sale_id: String = null): SaleArtwork\n  sale_message: String\n  series(format: Format): String\n  show(\n    size: Int\n    active: Boolean\n    at_a_fair: Boolean\n    sort: PartnerShowSorts\n  ): PartnerShow\n  shows(\n    size: Int\n    active: Boolean\n    at_a_fair: Boolean\n    sort: PartnerShowSorts\n  ): [PartnerShow]\n  signature(format: Format): String\n  title: String\n  to_s: String\n\n  # Whether this Artwork is Published of not\n  published: Boolean!\n\n  # If the category is video, then it returns the href for the (youtube/vimeo) video, otherwise returns the website from CMS\n  website: String\n  framed: ArtworkInfoRow\n  signatureInfo: ArtworkInfoRow\n  conditionDescription: ArtworkInfoRow\n  certificateOfAuthenticity: ArtworkInfoRow\n  cached: Int\n}\n\ntype ArtworkLayer {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  artworks: [Artwork]\n  description: String\n  href: String\n  name: String\n  type: String\n}\n\ntype ArtworkMeta {\n  description(limit: Int = 155): String\n  image: String\n  title: String\n}\n\n# The results for one of the requested aggregations\ntype ArtworksAggregationResults {\n  counts: [AggregationCount]\n  slice: ArtworkAggregation\n}\n\nenum ArtworkSorts {\n  availability_desc @deprecated(reason: \"use capital enums\")\n  created_at_asc @deprecated(reason: \"use capital enums\")\n  created_at_desc @deprecated(reason: \"use capital enums\")\n  deleted_at_asc @deprecated(reason: \"use capital enums\")\n  deleted_at_desc @deprecated(reason: \"use capital enums\")\n  iconicity_desc @deprecated(reason: \"use capital enums\")\n  merchandisability_desc @deprecated(reason: \"use capital enums\")\n  published_at_asc @deprecated(reason: \"use capital enums\")\n  published_at_desc @deprecated(reason: \"use capital enums\")\n  partner_updated_at_desc @deprecated(reason: \"use capital enums\")\n  title_asc @deprecated(reason: \"use capital enums\")\n  title_desc @deprecated(reason: \"use capital enums\")\n  AVAILABILITY_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  DELETED_AT_ASC\n  DELETED_AT_DESC\n  ICONICITY_DESC\n  MERCHANDISABILITY_DESC\n  PARTNER_UPDATED_AT_DESC\n  PUBLISHED_AT_ASC\n  PUBLISHED_AT_DESC\n  TITLE_ASC\n  TITLE_DESC\n}\n\n# An asset which is assigned to a consignment submission\ntype Asset {\n  # Convection asset ID.\n  id: String!\n\n  # The convection submission ID\n  submission_id: String\n\n  # The gemini token for the asset\n  gemini_token: String\n\n  # The type of the asset\n  asset_type: String\n}\n\n# Fields of an attachment (currently from Radiation)\ntype Attachment {\n  # Attachment id.\n  id: String!\n\n  # Content type of file.\n  content_type: String!\n\n  # File name.\n  file_name: String!\n  download_url: String!\n}\n\n# Collection of fields that describe attribution class\ntype AttributionClass {\n  id: String!\n\n  # Shortest form of attribution class display\n  name: String\n\n  # Descriptive phrase used as companion for attribution class name display\n  info: String\n\n  # Longer version of attribution class display\n  short_description: String\n\n  # Long descriptive phrase used as companion for short_description\n  long_description: String\n}\n\n# In centimeters.\ntype AuctionLotDimensions {\n  width: Float\n  height: Float\n  depth: Float\n}\n\ntype AuctionLotEstimate {\n  low: Float\n  high: Float\n  display: String\n}\n\ntype AuctionLotImages {\n  larger: Image\n  thumbnail: Image\n}\n\ntype AuctionResult implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  title: String\n  artist_id: String!\n  date(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  date_text: String\n  medium_text: String\n  category_text: String\n  dimension_text: String\n  dimensions: AuctionLotDimensions\n  organization: String\n  sale_date(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  sale_date_text: String\n  sale_title: String\n  currency: String\n  description: String\n  external_url: String\n  images: AuctionLotImages\n  estimate: AuctionLotEstimate\n  price_realized: AuctionResultPriceRealized\n}\n\n# A connection to a list of items.\ntype AuctionResultConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [AuctionResultEdge]\n  pageCursors: PageCursors\n  totalCount: Int\n}\n\n# An edge in a connection.\ntype AuctionResultEdge {\n  # The item at the end of the edge\n  node: AuctionResult\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype AuctionResultPriceRealized {\n  cents: Float\n  cents_usd: Float\n  display(\n    # Passes in to numeral, such as `'0.00'`\n    format: String = \"\"\n  ): String\n}\n\nenum AuctionResultSorts {\n  DATE_DESC\n  PRICE_AND_DATE_DESC\n  ESTIMATE_AND_DATE_DESC\n}\n\ntype Author {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  name: String\n  href: String\n    @deprecated(\n      reason: \"Profiles have been removed and thus author hrefs don't exist anymore.\"\n    )\n  profile_handle: String\n}\n\ntype Bidder {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  pin: String\n  qualified_for_bidding: Boolean\n  sale: Sale\n}\n\ntype BidderPosition {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  updated_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  processed_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  display_max_bid_amount_dollars: String @deprecated(reason: \"Favor `max_bid`\")\n  display_suggested_next_bid_dollars: String\n    @deprecated(reason: \"Favor `suggested_next_bid`\")\n  highest_bid: HighestBid\n  is_active: Boolean\n  is_retracted: Boolean\n  is_with_bid_max: Boolean\n  is_winning: Boolean\n  max_bid: BidderPositionMaxBid\n  max_bid_amount_cents: Int @deprecated(reason: \"Favor `max_bid`\")\n  sale_artwork: SaleArtwork\n  suggested_next_bid: BidderPositionSuggestedNextBid\n  suggested_next_bid_cents: Int\n    @deprecated(reason: \"Favor `suggested_next_bid`\")\n}\n\ninput BidderPositionInput {\n  sale_id: String!\n  artwork_id: String!\n  max_bid_amount_cents: Float!\n  clientMutationId: String\n}\n\ntype BidderPositionMaxBid {\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n}\n\ntype BidderPositionPayload {\n  result: BidderPositionResult\n  clientMutationId: String\n}\n\ntype BidderPositionResult {\n  status: String!\n  message_header: String\n  message_description_md: String\n  position: BidderPosition\n}\n\ntype BidderPositionSuggestedNextBid {\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n}\n\ntype BidIncrement {\n  amount: Int\n  from: Int\n  to: Int\n}\n\ntype BidIncrementsFormatted {\n  cents: Float\n  display: String\n}\n\ntype BuyersPremium {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n  cents: Int\n  percent: Float\n}\n\n# Fields of partner category (currently from Gravity).\ntype Category {\n  id: String!\n  category_type: String\n  internal: Boolean\n  name: String\n}\n\nenum CategoryType {\n  GALLERY\n  INSTITUTION\n}\n\ntype Collection implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artworks_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n    private: Boolean = false\n    sort: CollectionSorts = POSITION_DESC\n  ): ArtworkConnection\n  description: String!\n  default: Boolean!\n  name: String!\n  private: Boolean!\n  slug: String!\n}\n\nenum CollectionSorts {\n  POSITION_ASC\n  POSITION_DESC\n}\n\ntype CollectorProfileType {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  email: String\n  name: String\n  confirmed_buyer_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  collector_level: Int\n  self_reported_purchases: String\n  loyalty_applicant_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  professional_buyer_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  professional_buyer_applied_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  intents: [String]\n}\n\n# A work to be consigned to the user\ntype ConsignmentSubmission implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n\n  # The gravity ID for an Artist\n  artist_id: String!\n\n  # Does the artwork come with an certificate of authenticity?\n  authenticity_certificate: Boolean\n\n  # The set in which to put the work\n  category: SubmissionCategoryAggregation\n\n  # The depth of the work\n  depth: String\n\n  # A string, either CM or IN\n  dimensions_metric: SubmissionDimensionAggregation\n\n  # Is the work a part of an edition\n  edition: Boolean\n\n  # The number of the individual work if in a set\n  edition_number: String\n\n  # The whole size of the set of works\n  edition_size: Int\n\n  # The height of the work\n  height: String\n\n  # The city where the work currently resides\n  location_city: String\n\n  # The country where the work currently resides\n  location_country: String\n\n  # The state where the work currently resides\n  location_state: String\n\n  # The materials in which the work is created\n  medium: String\n\n  # The history of an work\n  provenance: String\n\n  # Is this work signed?\n  signature: Boolean\n\n  # The name of the work\n  title: String\n\n  # The internal state of the work, e.g. draft/submitted\n  state: SubmissionStateAggregation\n\n  # The width of the work\n  width: String\n\n  # The year the work was created\n  year: String\n\n  # The user who submitted the work\n  user_id: ID\n  artist: Artist\n}\n\n# A connection to a list of items.\ntype ConsignmentSubmissionConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ConsignmentSubmissionEdge]\n}\n\n# An edge in a connection.\ntype ConsignmentSubmissionEdge {\n  # The item at the end of the edge\n  node: ConsignmentSubmission\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype Convection {\n  geminiTemplateKey: String!\n}\n\n# A conversation.\ntype Conversation implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # Impulse id.\n  id: String\n\n  # Gravity inquiry id.\n  inquiry_id: String\n\n  # The participant who initiated the conversation\n  from: ConversationInitiator!\n\n  # The participant(s) responding to the conversation\n  to: ConversationResponder!\n  buyer_outcome: String\n  buyer_outcome_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  purchase_request: Boolean\n    @deprecated(\n      reason: \"Purchase requests are not supported. Replaced by buy now.\"\n    )\n  from_last_viewed_message_id: String\n  initial_message: String!\n\n  # This is a snippet of text from the last message.\n  last_message: String\n  last_message_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # Impulse id of the last message.\n  last_message_id: String\n\n  # True if user/conversation initiator is a recipient.\n  is_last_message_to_user: Boolean\n\n  # Timestamp if the user opened the last message, null in all other cases\n  last_message_open: String @deprecated(reason: \"Prefer to use `unread`\")\n\n  # Delivery id if the user is a recipient of the last message, null otherwise.\n  last_message_delivery_id: String\n\n  # Only the artworks discussed in the conversation.\n  artworks: [Artwork]\n\n  # The artworks and/or partner shows discussed in the conversation.\n  items: [ConversationItem]\n\n  # A connection for all messages in a single conversation\n  messages(\n    sort: sort\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): MessageConnection\n\n  # True if there is an unread message by the user.\n  unread: Boolean\n}\n\n# A connection to a list of items.\ntype ConversationConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ConversationEdge]\n  totalUnreadCount: Int\n}\n\n# An edge in a connection.\ntype ConversationEdge {\n  # The item at the end of the edge\n  node: Conversation\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# The participant who started the conversation, currently always a User\ntype ConversationInitiator {\n  # Impulse id.\n  id: String!\n\n  # The type of participant, e.g. Partner or User\n  type: String!\n  name: String!\n  email: String!\n  initials(length: Int = 3): String\n}\n\ntype ConversationItem {\n  item: ConversationItemType\n  title: String\n  permalink: String\n}\n\nunion ConversationItemType = Artwork | Show\n\n# The participant responding to the conversation, currently always a Partner\ntype ConversationResponder {\n  # Impulse id.\n  id: String!\n\n  # The type of participant, e.g. Partner or User\n  type: String!\n  name: String!\n\n  # An array of Impulse IDs that correspond to all email addresses that messages should be sent to\n  reply_to_impulse_ids: [String]!\n  initials(length: Int = 3): String\n}\n\ntype coordinates {\n  lat: Float\n  lng: Float\n}\n\ninput CreateBidderInput {\n  sale_id: String!\n  clientMutationId: String\n}\n\ntype CreateBidderPayload {\n  bidder: Bidder\n  clientMutationId: String\n}\n\ninput CreateGeminiEntryForAssetInput {\n  # The path to the file\n  source_key: String!\n\n  # The template key, this is `name` in the asset request\n  template_key: String!\n\n  # The S3 bucket where the file was uploaded\n  source_bucket: String!\n\n  # Additional JSON data to pass through gemini, should deiinitely contain an `id` and a `_type`\n  metadata: JSON!\n  clientMutationId: String\n}\n\ntype CreateGeminiEntryForAssetPayload {\n  asset: GeminiEntry\n  clientMutationId: String\n}\n\ninput CreateOrderWithArtworkInput {\n  # BSON ID of artwork\n  artworkId: String!\n\n  # ID of artwork's edition set\n  editionSetId: String\n\n  # quantity of artwork\n  quantity: Int\n  clientMutationId: String\n}\n\ntype CreateOrderWithArtworkPayload {\n  orderOrError: OrderOrFailureUnionType\n  clientMutationId: String\n}\n\ninput CreateSubmissionMutationInput {\n  # The gravity ID for an Artist\n  artist_id: String!\n\n  # Does the artwork come with an certificate of authenticity?\n  authenticity_certificate: Boolean\n\n  # The set in which to put the work\n  category: SubmissionCategoryAggregation\n\n  # The depth of the work\n  depth: String\n\n  # A string, either CM or IN\n  dimensions_metric: SubmissionDimensionAggregation\n\n  # Is the work a part of an edition\n  edition: Boolean\n\n  # The number of the individual work if in a set\n  edition_number: String\n\n  # The whole size of the set of works\n  edition_size: Int\n\n  # The height of the work\n  height: String\n\n  # The city where the work currently resides\n  location_city: String\n\n  # The country where the work currently resides\n  location_country: String\n\n  # The state where the work currently resides\n  location_state: String\n\n  # The materials in which the work is created\n  medium: String\n\n  # The history of an work\n  provenance: String\n\n  # Is this work signed?\n  signature: Boolean\n\n  # The name of the work\n  title: String\n\n  # The internal state of the work, e.g. draft/submitted\n  state: SubmissionStateAggregation\n\n  # The width of the work\n  width: String\n\n  # The year the work was created\n  year: String\n\n  # The user who submitted the work\n  user_id: ID\n  clientMutationId: String\n}\n\ntype CreateSubmissionMutationPayload {\n  consignment_submission: ConsignmentSubmission\n  clientMutationId: String\n}\n\n# An asset which is assigned to a consignment submission\ntype Credentials {\n  # The key to use with S3.\n  credentials: String!\n\n  # A base64 encoded version of the S3 policy\n  policy_encoded: String!\n\n  # The s3 policy document for your request\n  policy_document: S3PolicyDocumentType!\n\n  # The signature for your asset.\n  signature: String!\n}\n\ntype CreditCard {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n\n  # Brand of credit card\n  brand: String!\n\n  # Name on the credit card\n  name: String\n\n  # Last four digits on the credit card\n  last_digits: String!\n\n  # Credit card's expiration month\n  expiration_month: Int!\n\n  # Credit card's expiration year\n  expiration_year: Int!\n}\n\n# A connection to a list of items.\ntype CreditCardConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [CreditCardEdge]\n  pageCursors: PageCursors\n  totalCount: Int\n}\n\n# An edge in a connection.\ntype CreditCardEdge {\n  # The item at the end of the edge\n  node: CreditCard\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput CreditCardInput {\n  token: String!\n  clientMutationId: String\n}\n\ntype CreditCardMutationFailure {\n  mutationError: GravityMutationError\n}\n\ntype CreditCardMutationSuccess {\n  creditCard: CreditCard\n}\n\nunion CreditCardMutationType =\n    CreditCardMutationSuccess\n  | CreditCardMutationFailure\n\ntype CreditCardPayload {\n  credit_card: CreditCard @deprecated(reason: \"Favor `creditCardOrError`\")\n  creditCardOrError: CreditCardMutationType\n  clientMutationId: String\n}\n\ntype CroppedImageUrl {\n  width: Int\n  height: Int\n  url: String\n}\n\ntype CurrentEvent {\n  event: UnderlyingCurrentEvent!\n  image: Image\n\n  # The state of the event\n  status: String\n\n  # Name of the partner associated to the event\n  partner: String\n\n  # Location and date of the event if available\n  details: String\n\n  # Name of the event\n  name: String\n\n  # Link to the event\n  href: String\n}\n\ntype DaySchedule {\n  start_time: Int\n  end_time: Int\n  day_of_week: String\n}\n\ntype DeepZoom {\n  Image: DeepZoomImage\n}\n\ntype DeepZoomImage {\n  Format: String\n  Overlap: Int\n  Size: DeepZoomImageSize\n  TileSize: Int\n  Url: String\n  xmlns: String\n}\n\ntype DeepZoomImageSize {\n  Width: Int\n  Height: Int\n}\n\ninput DeleteCreditCardInput {\n  id: String!\n  clientMutationId: String\n}\n\ntype DeleteCreditCardPayload {\n  creditCardOrError: CreditCardMutationType\n  clientMutationId: String\n}\n\n# Fields of a delivery (currently from Radiation)\ntype Delivery {\n  # Delivery id.\n  id: String!\n\n  # Masked email w/ display name.\n  full_transformed_email: String!\n  delivered_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  bounced_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  opened_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  clicked_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n}\n\ntype dimensions {\n  in: String\n  cm: String\n}\n\ntype EcommerceError {\n  # The error message\n  type: String!\n\n  # The error message\n  code: String!\n\n  # A data object in JSON format providing additional context about the error.\n  data: String\n}\n\ninput EditableLocation {\n  # First line of an address\n  address: String\n\n  # Second line of an address\n  address_2: String\n\n  # The city the location is based in\n  city: String\n\n  # The county the location is based in\n  country: String\n\n  # An optional display string for the location\n  summary: String\n\n  # Postal code for a string\n  postal_code: String\n\n  # The (optional) name of the state for location\n  state: String\n\n  # The (optional) state code of the state for location\n  state_code: String\n}\n\ntype EditionSet implements Sellable {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  dimensions: dimensions\n  edition_of: String\n  is_acquireable: Boolean\n  is_for_sale: Boolean\n  is_sold: Boolean\n  price: String @deprecated(reason: \"Prefer to use `sale_message`.\")\n  sale_message: String\n}\n\ninput EndSaleInput {\n  sale_id: String\n  clientMutationId: String\n}\n\ntype EndSalePayload {\n  sale: Sale\n  clientMutationId: String\n}\n\nenum EventStatus {\n  closed @deprecated(reason: \"use capital enums\")\n  current @deprecated(reason: \"use capital enums\")\n  running @deprecated(reason: \"use capital enums\")\n  upcoming @deprecated(reason: \"use capital enums\")\n  CLOSED\n  CURRENT\n  RUNNING\n  UPCOMING\n}\n\ntype ExternalPartner {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  city: String\n  name: String\n}\n\ntype Fair {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  banner_size: String\n  has_full_feature: Boolean\n  has_homepage_section: Boolean\n  has_large_banner: Boolean\n  has_listing: Boolean\n  href: String\n  image: Image\n\n  # Are we currently in the fair's active period?\n  is_active: Boolean\n  mobile_image: Image\n  is_published: Boolean\n  location: Location\n  name: String\n  profile: Profile\n  shows_connection(\n    # Number of artworks to return\n    section: String\n\n    # Sorts for shows in a fair\n    sort: ShowSort = FEATURED_DESC\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ShowConnection\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  organizer: organizer\n  published: Boolean\n    @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  tagline: String\n}\n\nenum FairSorts {\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  NAME_ASC\n  NAME_DESC\n  START_AT_ASC\n  START_AT_DESC\n}\n\ntype FeaturedLinkItem {\n  # Attempt to get the ID of the entity of the FeaturedLink\n  id: String\n  href: String\n  image: Image\n  initials(length: Int = 3): String\n  subtitle: String\n  title: String\n}\n\ntype FilterArtworks implements Node {\n  # The ID of the object.\n  __id: ID!\n\n  # Returns aggregation counts for the given filter query.\n  aggregations: [ArtworksAggregationResults]\n  artworks_connection(\n    sort: String\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtworkConnection\n    @deprecated(\n      reason: \"Favour artwork connections that take filter arguments.\"\n    )\n  counts: FilterArtworksCounts\n  followed_artists_total: Int\n    @deprecated(reason: \"Favor `favor counts.followed_artists`\")\n\n  # Artwork results.\n  hits: [Artwork]\n\n  # Returns a list of merchandisable artists sorted by merch score.\n  merchandisable_artists: [Artist]\n  total: Int @deprecated(reason: \"Favor `counts.total`\")\n  facet: ArtworkFilterFacet\n}\n\ntype FilterArtworksCounts {\n  total(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  followed_artists(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype FilterPartners {\n  aggregations: [PartnersAggregationResults]\n  hits: [Partner]\n  total: Int\n}\n\ntype FilterSaleArtworks {\n  # Returns aggregation counts for the given filter query.\n  aggregations: [SaleArtworksAggregationResults]\n  counts: FilterSaleArtworksCounts\n\n  # Sale Artwork results.\n  hits: [SaleArtwork]\n}\n\ntype FilterSaleArtworksCounts {\n  total(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  followed_artists(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype FollowArtist {\n  artist: Artist\n  auto: Boolean\n\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n}\n\n# A connection to a list of items.\ntype FollowArtistConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [FollowArtistEdge]\n}\n\ntype FollowArtistCounts {\n  artists: Int\n}\n\n# An edge in a connection.\ntype FollowArtistEdge {\n  # The item at the end of the edge\n  node: FollowArtist\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput FollowArtistInput {\n  artist_id: String\n  unfollow: Boolean = false\n  clientMutationId: String\n}\n\ntype FollowArtistPayload {\n  artist: Artist\n\n  # Popular artists\n  popular_artists(\n    # If true, will exclude followed artists for the user\n    exclude_followed_artists: Boolean\n\n    # Exclude these ids from results, may result in all artists being excluded.\n    exclude_artist_ids: [String]\n\n    # Number of results to return\n    size: Int\n  ): PopularArtists\n  clientMutationId: String\n}\n\ntype FollowArtists {\n  artists: [Artist]\n  counts: FollowArtistCounts\n}\n\ntype FollowedArtistsArtworksGroup implements Node {\n  # A globally unique ID.\n  __id: ID!\n  href: String\n\n  # List of artworks in this group.\n  artworks: [Artwork]\n  artworksConnection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtworkConnection\n  artists: String\n  summary: String\n  image: Image\n  published_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n}\n\n# A connection to a list of items.\ntype FollowedArtistsArtworksGroupConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [FollowedArtistsArtworksGroupEdge]\n}\n\n# An edge in a connection.\ntype FollowedArtistsArtworksGroupEdge {\n  # The item at the end of the edge\n  node: FollowedArtistsArtworksGroup\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype FollowGene {\n  gene: Gene\n\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n}\n\n# A connection to a list of items.\ntype FollowGeneConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [FollowGeneEdge]\n}\n\n# An edge in a connection.\ntype FollowGeneEdge {\n  # The item at the end of the edge\n  node: FollowGene\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput FollowGeneInput {\n  gene_id: String\n  clientMutationId: String\n}\n\ntype FollowGenePayload {\n  gene: Gene\n  clientMutationId: String\n}\n\ntype FollowsAndSaves {\n  # A list of published artworks by followed artists (grouped by date and artists).\n  bundledArtworksByArtist(\n    sort: ArtworkSorts\n    for_sale: Boolean\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): FollowedArtistsArtworksGroupConnection\n}\n\nenum Format {\n  HTML\n  PLAIN\n  markdown @deprecated(reason: \"deprecated\")\n}\n\n# The `FormattedNumber` type represents a number that can optionally be returnedas\n# a formatted String. It does not try to coerce the type.\nscalar FormattedNumber\n\ninput FulfillmentInputType {\n  # Courier of the fulfiller\n  courier: String!\n\n  # Courier's Tracking ID of this fulfillment\n  trackingId: String\n\n  # Estimated delivery in YY-MM-DD format\n  estimatedDelivery: String\n}\n\ninput FulfillOrderAtOnceInput {\n  # ID of the order\n  orderId: String!\n\n  # Fulfillment information of this order\n  fulfillment: FulfillmentInputType!\n  clientMutationId: String\n}\n\ntype FulfillOrderAtOncePayload {\n  orderOrError: OrderOrFailureUnionType\n  clientMutationId: String\n}\n\n# An entry from gemini\ntype GeminiEntry {\n  # The token that represents the gemini entry.\n  token: String!\n}\n\ntype Gene implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artists: [Artist]\n  artists_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtistConnection\n  artworks_connection(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): GeneArtworksConnection\n  description: String\n  display_name: String\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n  href: String\n  image: Image\n  is_published: Boolean\n  is_followed: Boolean\n  mode: String\n  name: String\n\n  # A list of genes similar to the specified gene\n  similar(\n    # Array of gene ids (not slugs) to exclude, may result in all genes being excluded.\n    exclude_gene_ids: [String]\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): GeneConnection\n  trending_artists(sample: Int): [Artist]\n}\n\n# A connection to a list of items.\ntype GeneArtworksConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [GeneArtworksEdge]\n\n  # Returns aggregation counts for the given filter query.\n  aggregations: [ArtworksAggregationResults]\n  counts: FilterArtworksCounts\n}\n\n# An edge in a connection.\ntype GeneArtworksEdge {\n  # The item at the end of the edge\n  node: Artwork\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# A connection to a list of items.\ntype GeneConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [GeneEdge]\n}\n\n# An edge in a connection.\ntype GeneEdge {\n  # The item at the end of the edge\n  node: Gene\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype GeneFamily {\n  id: String!\n  name: String!\n  genes: [Gene]\n}\n\n# A connection to a list of items.\ntype GeneFamilyConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [GeneFamilyEdge]\n}\n\n# An edge in a connection.\ntype GeneFamilyEdge {\n  # The item at the end of the edge\n  node: GeneFamily\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype GeneItem implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artists: [Artist]\n  artists_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtistConnection\n  artworks_connection(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): GeneArtworksConnection\n  description: String\n  display_name: String\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n  href: String\n  image: Image\n  is_published: Boolean\n  is_followed: Boolean\n  mode: String\n  name: String\n\n  # A list of genes similar to the specified gene\n  similar(\n    # Array of gene ids (not slugs) to exclude, may result in all genes being excluded.\n    exclude_gene_ids: [String]\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): GeneConnection\n  trending_artists(sample: Int): [Artist]\n}\n\ntype GravityMutationError {\n  type: String\n  message: String\n  detail: String\n  error: String\n}\n\ntype HighestBid {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  number: Int\n  is_cancelled: Boolean\n\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n  cents: Int\n  display: String\n  amount_cents: Int @deprecated(reason: \"Favor `cents`\")\n  display_amount_dollars: String @deprecated(reason: \"Favor `display`\")\n}\n\nunion Highlighted = HighlightedShow | HighlightedArticle\n\ntype HighlightedArticle implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  author: Author\n  channel_id: String\n  contributing_authors: [Author]\n  href: String\n  published_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  slug: String\n  thumbnail_title: String\n  thumbnail_teaser: String\n  thumbnail_image: Image\n  tier: Int\n  title: String\n  updated_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n}\n\ntype HighlightedShow implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artists: [Artist]\n  artworks(\n    all: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n    for_sale: Boolean\n    published: Boolean = true\n    page: Int = 1\n\n    # Number of artworks to return\n    size: Int = 25\n  ): [Artwork]\n  counts: PartnerShowCounts\n  cover_image: Image\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  description: String\n  displayable: Boolean\n    @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  events: [PartnerShowEventType]\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  fair: Fair\n  href: String\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n\n  # Flag showing if show has any location.\n  has_location: Boolean\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  kind: String\n  location: Location\n  meta_image: Image\n\n  # The exhibition title\n  name: String\n  partner: Partner\n  press_release(format: Format): String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  type: String\n}\n\ntype HomePage {\n  # Single artist module to show on the home screen.\n  artist_module(\n    # Module identifier.\n    key: HomePageArtistModuleTypes\n  ): HomePageArtistModule\n\n  # Artist modules to show on the home screen\n  artist_modules: [HomePageArtistModule]\n\n  # Single artwork module to show on the home screen\n  artwork_module(\n    # ID of followed artist to target for related artist rails\n    followed_artist_id: String\n\n    # ID of generic gene rail to target\n    generic_gene_id: String\n\n    # ID of generic gene rail to target\n    id: String\n\n    # Module key\n    key: String\n\n    # ID of related artist to target for related artist rails\n    related_artist_id: String\n  ): HomePageArtworkModule\n\n  # Artwork modules to show on the home screen\n  artwork_modules(\n    # Maximum number of followed genes to return, disable with a negative number\n    max_followed_gene_rails: Int = 1\n\n    # Maximum number of modules to return, disable limit with a negative number\n    max_rails: Int = 8\n\n    # The preferred order of modules, defaults to order returned by Gravity\n    order: [HomePageArtworkModuleTypes]\n\n    # Exclude certain modules\n    exclude: [HomePageArtworkModuleTypes] = []\n  ): [HomePageArtworkModule]\n\n  # A list of enabled hero units to show on the requested platform\n  hero_units(platform: HomePageHeroUnitPlatform!): [HomePageHeroUnit]\n  fairs_module: HomePageFairsModule\n}\n\ntype HomePageArtistModule implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # Module identifier.\n  key: String\n  results: [Artist]\n}\n\nenum HomePageArtistModuleTypes {\n  # Artists recommended for the specific user.\n  SUGGESTED\n\n  # The trending artists.\n  TRENDING\n\n  # The most searched for artists.\n  POPULAR\n}\n\ntype HomePageArtworkModule implements Node {\n  # A globally unique ID.\n  __id: ID!\n  context: HomePageModuleContext\n  display: String\n    @deprecated(\n      reason: \"Favor `is_`-prefixed Booleans (*and* this should be a Boolean)\"\n    )\n  is_displayable: Boolean\n  key: String\n  params: HomePageModulesParams\n  results: [Artwork]\n  title: String\n}\n\nenum HomePageArtworkModuleTypes {\n  ACTIVE_BIDS\n  CURRENT_FAIRS\n  FOLLOWED_ARTIST\n  FOLLOWED_ARTISTS\n  FOLLOWED_GALLERIES\n  FOLLOWED_GENES\n  GENERIC_GENES\n  LIVE_AUCTIONS\n  RECOMMENDED_WORKS\n  RELATED_ARTISTS\n  SAVED_WORKS\n  RECENTLY_VIEWED_WORKS\n  SIMILAR_TO_RECENTLY_VIEWED\n  SIMILAR_TO_SAVED_WORKS\n}\n\ntype HomePageFairsModule {\n  results: [Fair]!\n}\n\ntype HomePageHeroUnit {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  mode: HomePageHeroUnitMode\n  heading: String\n  href: String\n  title: String\n  title_image_url(retina: Boolean): String\n  subtitle: String\n  link_text: String\n  credit_line: String\n\n  # The image to show, on desktop this defaults to the wide version.\n  background_image_url(version: HomePageHeroUnitImageVersion): String\n}\n\nenum HomePageHeroUnitImageVersion {\n  WIDE\n  NARROW\n}\n\nenum HomePageHeroUnitMode {\n  LEFT_DARK\n  LEFT_LIGHT\n  CENTERED_DARK\n  CENTERED_LIGHT\n  RIGHT_DARK\n  RIGHT_LIGHT\n}\n\nenum HomePageHeroUnitPlatform {\n  MOBILE\n  DESKTOP\n  MARTSY\n}\n\nunion HomePageModuleContext =\n    HomePageModuleContextFair\n  | HomePageModuleContextFollowArtists\n  | HomePageModuleContextFollowedArtist\n  | HomePageModuleContextGene\n  | HomePageModuleContextRelatedArtist\n  | HomePageModuleContextSale\n  | HomePageModuleContextTrending\n\ntype HomePageModuleContextFair {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  banner_size: String\n  has_full_feature: Boolean\n  has_homepage_section: Boolean\n  has_large_banner: Boolean\n  has_listing: Boolean\n  href: String\n  image: Image\n\n  # Are we currently in the fair's active period?\n  is_active: Boolean\n  mobile_image: Image\n  is_published: Boolean\n  location: Location\n  name: String\n  profile: Profile\n  shows_connection(\n    # Number of artworks to return\n    section: String\n\n    # Sorts for shows in a fair\n    sort: ShowSort = FEATURED_DESC\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ShowConnection\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  organizer: organizer\n  published: Boolean\n    @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  tagline: String\n}\n\ntype HomePageModuleContextFollowArtists {\n  artists: [Artist]\n  counts: FollowArtistCounts\n}\n\ntype HomePageModuleContextFollowedArtist {\n  artist: Artist\n}\n\ntype HomePageModuleContextGene implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artists: [Artist]\n  artists_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtistConnection\n  artworks_connection(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): GeneArtworksConnection\n  description: String\n  display_name: String\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n  href: String\n  image: Image\n  is_published: Boolean\n  is_followed: Boolean\n  mode: String\n  name: String\n\n  # A list of genes similar to the specified gene\n  similar(\n    # Array of gene ids (not slugs) to exclude, may result in all genes being excluded.\n    exclude_gene_ids: [String]\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): GeneConnection\n  trending_artists(sample: Int): [Artist]\n}\n\ntype HomePageModuleContextRelatedArtist {\n  artist: Artist\n  based_on: Artist\n}\n\ntype HomePageModuleContextSale implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  associated_sale: Sale\n  auction_state: String\n    @deprecated(reason: \"Favor `status` for consistency with other models\")\n\n  # A bid increment policy that explains minimum bids in ranges.\n  bid_increments: [BidIncrement]\n\n  # Auction's buyer's premium policy.\n  buyers_premium: [BuyersPremium]\n  cover_image: Image\n  currency: String\n  description: String\n  display_timely_at: String\n  eligible_sale_artworks_count: Int\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  event_start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  event_end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  href: String\n  name: String\n  is_auction: Boolean\n  is_auction_promo: Boolean\n  is_closed: Boolean\n  is_open: Boolean\n  is_live_open: Boolean\n  is_preview: Boolean\n  is_registration_closed: Boolean\n  is_with_buyers_premium: Boolean\n  live_start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # Returns a live auctions url if the sale is open and start time is after now\n  live_url_if_open: String\n  partner: Partner\n  profile: Profile\n  promoted_sale: Sale\n  registration_ends_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # A registration for this sale or null\n  registrationStatus: Bidder\n  require_bidder_approval: Boolean\n  sale_artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n  ): [SaleArtwork]\n  sale_artworks_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): SaleArtworkConnection\n  sale_type: String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  status: String\n  sale_artwork(id: String!): SaleArtwork\n  symbol: String\n}\n\ntype HomePageModuleContextTrending {\n  artists: [Artist]\n}\n\ntype HomePageModulesParams {\n  followed_artist_id: ID\n  gene_id: String\n  id: ID\n  medium: String\n  price_range: String\n  related_artist_id: ID\n}\n\ntype Image {\n  aspect_ratio: Float\n  caption: String\n  cropped(width: Int!, height: Int!, version: [String]): CroppedImageUrl\n  deep_zoom: DeepZoom\n  href: String\n  height: Int\n\n  # A type-specific ID.\n  id: String\n  image_url: String\n  image_versions: [String]\n  is_default: Boolean\n  is_zoomable: Boolean\n  max_tiled_height: Int\n  max_tiled_width: Int\n  original_height: Int\n  original_width: Int\n  orientation: String\n\n  # Value to use when `padding-bottom` for fluid image placeholders\n  placeholder: String\n  position: Int\n  resized(width: Int, height: Int, version: [String]): ResizedImageUrl\n  tile_base_url: String\n  tile_format: String\n  tile_size: Int\n  title: String\n  width: Int\n  url(version: [String]): String\n  versions: [String]\n}\n\nenum Intents {\n  BUY_ART_AND_DESIGN\n  SELL_ART_AND_DESIGN\n  RESEARCH_ART_PRICES\n  LEARN_ABOUT_ART\n  FIND_ART_EXHIBITS\n  READ_ART_MARKET_NEWS\n}\n\n# Fields of an invoice (currently from Lewitt)\ntype Invoice implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # Lewitt's invoice id.\n  lewitt_invoice_id: String!\n\n  # Link to public checkout page.\n  payment_url: String\n\n  # Current state of invoice.\n  state: InvoiceState\n\n  # A formatted price with various currency formatting options.\n  total(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n}\n\nenum InvoiceState {\n  UNPAID\n  PAID\n  VOID\n  REFUNDED\n}\n\nunion Item = ArtistItem | ArtworkItem | FeaturedLinkItem | GeneItem\n\n# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\nscalar JSON\n\ntype Location {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  address: String\n  address_2: String\n  city: String\n  country: String\n  coordinates: coordinates\n  day_schedules: [DaySchedule]\n  display: String\n  phone: String\n  postal_code: String\n  state: String\n}\n\ntype LotStanding {\n  # Your bid if it is currently winning\n  active_bid: BidderPosition\n  bidder: Bidder\n\n  # You are winning and reserve is met\n  is_highest_bidder: Boolean\n\n  # You are the leading bidder without regard to reserve\n  is_leading_bidder: Boolean\n\n  # Your most recent bid—which is not necessarily winning (may be higher or lower)\n  most_recent_bid: BidderPosition\n  sale: Sale\n  sale_artwork: SaleArtwork\n}\n\ntype Me implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A list of the current user’s consignment submissions\n  consignment_submissions(\n    after: String\n    first: Int\n    before: String\n    last: Int\n    completed: Boolean\n  ): ConsignmentSubmissionConnection\n\n  # A list of the current user’s inquiry requests\n  artwork_inquiries_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtworkInquiryConnection\n\n  # A list of the current user’s bidder registrations\n  bidders(\n    # The slug or ID of a Sale\n    sale_id: String\n  ): [Bidder]\n\n  # The current user's status relating to bids on artworks\n  bidder_status(artwork_id: String!, sale_id: String!): LotStanding\n\n  # A list of the current user's bidder positions\n  bidder_positions(\n    # Only the bidder positions on a specific artwork\n    artwork_id: String\n\n    # Only the most recent bidder positions per artwork.\n    current: Boolean\n\n    # Only the bidder positions for a specific auction\n    sale_id: String\n  ): [BidderPosition]\n\n  # Returns a single bidder position\n  bidder_position(id: String!): BidderPositionResult\n\n  # A collector profile.\n  collector_profile: CollectorProfileType\n\n  # A conversation, usually between a user and a partner\n  conversation(\n    # The ID of the Conversation\n    id: String!\n  ): Conversation\n\n  # Conversations, usually between a user and partner.\n  conversations(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ConversationConnection\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # A list of the current user’s credit cards\n  creditCards(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): CreditCardConnection\n  email: String\n\n  # A list of the current user’s artist follows\n  follow_artists(page: Int, size: Int): FollowArtists\n\n  # A list of the current user’s inquiry requests\n  followed_artists_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): FollowArtistConnection\n\n  # A list of the current user’s inquiry requests\n  followed_genes(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): FollowGeneConnection\n  followsAndSaves: FollowsAndSaves\n  has_credit_cards: Boolean\n  has_qualified_credit_cards: Boolean\n\n  # An invoice\n  invoice(\n    # The ID of the Conversation\n    conversationId: String!\n\n    # The ID of the invoice\n    invoiceId: String!\n  ): Invoice\n\n  # The current user's status relating to bids on artworks\n  lot_standing(\n    artwork_id: String\n    sale_id: String\n    sale_artwork_id: String\n  ): LotStanding\n\n  # A list of the current user's auction standings for given lots\n  lot_standings(\n    # Only includes lots on which you have a leading bidder position.\n    active_positions: Boolean\n\n    # Only the lot standings on a specific artwork\n    artwork_id: String\n\n    # Only the lot standings for currently open or closed auctions.\n    live: Boolean\n\n    # Only the lot standings for a specific auction\n    sale_id: String\n    sale_artwork_id: String\n  ): [LotStanding]\n  name: String\n  initials(length: Int = 3): String\n\n  # A list of feed items, indicating published artworks (grouped by date and artists).\n  notifications_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): NotificationsFeedItemConnection\n    @deprecated(reason: \"Prefer to use followed_artists_artwork_groups.\")\n  paddle_number: String\n  recentlyViewedArtworkIds: [String]!\n\n  # A list of the current user’s recently viewed artworks.\n  recentlyViewedArtworks(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtworkConnection\n  sale_registrations(\n    # Limit by auction.\n    is_auction: Boolean = true\n\n    #\n    #         Only return sales matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n\n    # Limit by live status.\n    live: Boolean = true\n\n    # Limit by published status.\n    published: Boolean = true\n    size: Int\n    sort: SaleSorts\n  ): [SaleRegistration]\n  saved_artworks: Collection\n\n  # A list of the current user’s suggested artists, based on a single artist\n  suggested_artists(\n    # The slug or ID of an artist\n    artist_id: String\n\n    # Exclude artists without for sale works\n    exclude_artists_without_forsale_artworks: Boolean\n\n    # Exclude artists without any artworks\n    exclude_artists_without_artworks: Boolean\n\n    # Exclude artists the user already follows\n    exclude_followed_artists: Boolean\n\n    # Exclude these ids from results, may result in all artists being excluded.\n    exclude_artist_ids: [String]\n\n    # Pagination, need I say more?\n    page: Int\n\n    # Amount of artists to return\n    size: Int\n  ): [Artist]\n  type: String\n}\n\n# A message in a conversation.\ntype Message implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # Impulse message id.\n  id: String!\n\n  # Impulse message id.\n  impulse_id: String!\n\n  # True if message is from the user to the partner.\n  is_from_user: Boolean\n  from_email_address: String\n    @deprecated(reason: \"Prefer to use the structured `from` field.\")\n  from: MessageInitiator\n\n  # Full unsanitized text.\n  raw_text: String!\n    @deprecated(reason: \"Prefer to use the parsed/cleaned-up `body`.\")\n\n  # Unaltered text if possible, otherwise `body`: a parsed/sanitized version from Sendgrid.\n  body: String\n  deliveries: [Delivery]\n  attachments: [Attachment]\n  invoice: Invoice\n\n  # True if message is an invoice message\n  is_invoice: Boolean\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n}\n\n# A connection to a list of items.\ntype MessageConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [MessageEdge]\n}\n\n# An edge in a connection.\ntype MessageEdge {\n  # The item at the end of the edge\n  node: Message\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# The participant who sent the message.\ntype MessageInitiator {\n  name: String\n  email: String\n}\n\ntype Metaphysics {\n  environment: Boolean!\n  queryTracing: Boolean!\n  heapDumps: Boolean!\n  stitching: Boolean!\n  stitchingGravity: Boolean!\n  stitchingConvection: Boolean!\n  stitchingExchange: Boolean!\n}\n\ntype Mutation {\n  # Create a bidder\n  createBidder(input: CreateBidderInput!): CreateBidderPayload\n\n  # Creates a bidder position\n  createBidderPosition(input: BidderPositionInput!): BidderPositionPayload\n\n  # Create a credit card\n  createCreditCard(input: CreditCardInput!): CreditCardPayload\n\n  # Remove a credit card\n  deleteCreditCard(input: DeleteCreditCardInput!): DeleteCreditCardPayload\n\n  # Follow (or unfollow) an artist\n  followArtist(input: FollowArtistInput!): FollowArtistPayload\n\n  # Follow (or unfollow) an gene\n  followGene(input: FollowGeneInput!): FollowGenePayload\n\n  # Updating a collector profile (loyalty applicant status).\n  updateCollectorProfile(\n    input: UpdateCollectorProfileInput!\n  ): UpdateCollectorProfilePayload\n\n  # Update the current logged in user.\n  updateMyUserProfile(input: UpdateMyProfileInput!): UpdateMyProfilePayload\n\n  # Update a conversation.\n  updateConversation(\n    input: UpdateConversationMutationInput!\n  ): UpdateConversationMutationPayload\n\n  # Appending a message to a conversation thread\n  sendConversationMessage(\n    input: SendConversationMessageMutationInput!\n  ): SendConversationMessageMutationPayload\n\n  # Save (or remove) an artwork to (from) a users default collection.\n  saveArtwork(input: SaveArtworkInput!): SaveArtworkPayload\n\n  # Mark sale as ended.\n  endSale(input: EndSaleInput!): EndSalePayload\n\n  # Attach an gemini asset to a consignment submission\n  requestCredentialsForAssetUpload(\n    input: RequestCredentialsForAssetUploadInput!\n  ): RequestCredentialsForAssetUploadPayload\n\n  # Attach an gemini asset to a consignment submission\n  createGeminiEntryForAsset(\n    input: CreateGeminiEntryForAssetInput!\n  ): CreateGeminiEntryForAssetPayload\n\n  # Records an artwork view.\n  recordArtworkView(input: RecordArtworkViewInput!): RecordArtworkViewPayload\n\n  # Create a new consignment submission using Convection\n  createConsignmentSubmission(\n    input: CreateSubmissionMutationInput!\n  ): CreateSubmissionMutationPayload\n\n  # Update a consignment using Convection\n  updateConsignmentSubmission(\n    input: UpdateSubmissionMutationInput!\n  ): UpdateSubmissionMutationPayload\n\n  # Attach an gemini asset to a consignment submission\n  addAssetToConsignmentSubmission(\n    input: AddAssetToConsignmentSubmissionInput!\n  ): AddAssetToConsignmentSubmissionPayload\n\n  # Creates an order with an artwork\n  createOrderWithArtwork(\n    input: CreateOrderWithArtworkInput!\n  ): CreateOrderWithArtworkPayload\n\n  # Sets shipping information for an order\n  setOrderShipping(input: SetOrderShippingInput!): SetOrderShippingPayload\n\n  # Sets payment information on an order\n  setOrderPayment(input: SetOrderPaymentInput!): SetOrderPaymentPayload\n\n  # Approves an order with payment\n  approveOrder(input: ApproveOrderInput!): ApproveOrderPayload\n\n  # Fulfills an Order with one fulfillment by setting this fulfillment to all line items of this order\n  fulfillOrderAtOnce(input: FulfillOrderAtOnceInput!): FulfillOrderAtOncePayload\n\n  # Rejects an order\n  rejectOrder(input: RejectOrderInput!): RejectOrderPayload\n\n  # Submits an order\n  submitOrder(input: SubmitOrderInput!): SubmitOrderPayload\n\n  # Creates an order with an artwork\n  ecommerceCreateOrderWithArtwork(\n    input: CreateOrderWithArtworkInput!\n  ): CreateOrderWithArtworkPayload\n\n  # Sets shipping information for an order\n  ecommerceSetOrderShipping(\n    input: SetOrderShippingInput!\n  ): SetOrderShippingPayload\n\n  # Sets payment information on an order\n  ecommerceSetOrderPayment(input: SetOrderPaymentInput!): SetOrderPaymentPayload\n\n  # Approves an order with payment\n  ecommerceApproveOrder(input: ApproveOrderInput!): ApproveOrderPayload\n\n  # Fulfills an Order with one fulfillment by setting this fulfillment to all line items of this order\n  ecommerceFulfillOrderAtOnce(\n    input: FulfillOrderAtOnceInput!\n  ): FulfillOrderAtOncePayload\n\n  # Rejects an order\n  ecommerceRejectOrder(input: RejectOrderInput!): RejectOrderPayload\n\n  # Submits an order\n  ecommerceSubmitOrder(input: SubmitOrderInput!): SubmitOrderPayload\n}\n\ninput Near {\n  lat: Float!\n  lng: Float!\n  max_distance: Float\n}\n\n# An object with a Globally Unique ID\ninterface Node {\n  # The ID of the object.\n  __id: ID!\n}\n\ntype NotificationsFeedItem implements Node {\n  # A globally unique ID.\n  __id: ID!\n  artists: String\n\n  # List of artworks in this notification bundle\n  artworks: [Artwork]\n  date(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  message: String\n  status: NotificationsFeedItemStatus\n  image: Image\n}\n\n# A connection to a list of items.\ntype NotificationsFeedItemConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [NotificationsFeedItemEdge]\n}\n\n# An edge in a connection.\ntype NotificationsFeedItemEdge {\n  # The item at the end of the edge\n  node: NotificationsFeedItem\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum NotificationsFeedItemStatus {\n  READ\n  UNREAD\n}\n\ntype Order {\n  # ID of the order\n  id: ID\n\n  # Currency code of this order\n  currencyCode: String\n\n  # State of the order\n  state: String\n\n  # Tracking code of the order\n  code: String\n\n  # Order Requested Fulfillment\n  requestedFulfillment: RequestedFulfillment\n\n  # Item total in cents\n  itemsTotalCents: Int\n\n  # A formatted price with various currency formatting options.\n  itemsTotal(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # Shipping total in cents\n  shippingTotalCents: Int\n\n  # A formatted price with various currency formatting options.\n  shippingTotal(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # Tax total in cents\n  taxTotalCents: Int\n\n  # A formatted price with various currency formatting options.\n  taxTotal(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # Transaction fee in cents\n  transactionFeeCents: Int\n\n  # A formatted price with various currency formatting options.\n  transactionFee(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # Commission fee in cents\n  commissionFeeCents: Int\n\n  # A formatted price with various currency formatting options.\n  commissionFee(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # Buyer total in cents\n  buyerTotalCents: Int\n\n  # A formatted price with various currency formatting options.\n  buyerTotal(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # Seller total in cents\n  sellerTotalCents: Int\n\n  # A formatted price with various currency formatting options.\n  sellerTotal(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # List of order line items\n  lineItems: OrderLineItemConnection\n\n  # Seller of this order\n  seller: OrderParty\n\n  # Buyer of this order\n  buyer: OrderParty\n\n  # Credit card on this order\n  creditCard: CreditCard\n  lastApprovedAt(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  lastSubmittedAt(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  updatedAt(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  createdAt(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  stateUpdatedAt(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  stateExpiresAt(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # Buyer phone number\n  buyerPhoneNumber: String\n}\n\n# A connection to a list of items.\ntype OrderConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [OrderEdge]\n  totalCount: Int\n}\n\n# An edge in a connection.\ntype OrderEdge {\n  # The item at the end of the edge\n  node: Order\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype OrderedSet {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  description: String\n  key: String\n  item_type: String\n  items: [Item]\n  name: String\n}\n\ntype OrderFulfillment {\n  # ID of the fulfillment\n  id: ID\n\n  # Fulfillment Courier\n  courier: String\n\n  # Courier's tracking id\n  trackingId: String\n  estimatedDelivery(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n}\n\n# A connection to a list of items.\ntype OrderFulfillmentConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [OrderFulfillmentEdge]\n}\n\n# An edge in a connection.\ntype OrderFulfillmentEdge {\n  # The item at the end of the edge\n  node: OrderFulfillment\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum OrderFulfillmentType {\n  SHIP\n  PICKUP\n}\n\ntype OrderLineItem {\n  # ID of the order line item\n  id: ID\n\n  # Artwork that is being ordered\n  artwork: Artwork\n\n  # ID of the selected Edition set from the artwork\n  editionSetId: String\n\n  # Unit price in cents\n  priceCents: Int\n\n  # A formatted price with various currency formatting options.\n  price(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n  updatedAt(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  createdAt(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # Quantity of items in this line item\n  quantity: Int\n\n  # List of order line items\n  fulfillments: OrderFulfillmentConnection\n}\n\n# A connection to a list of items.\ntype OrderLineItemConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [OrderLineItemEdge]\n}\n\n# An edge in a connection.\ntype OrderLineItemEdge {\n  # The item at the end of the edge\n  node: OrderLineItem\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nunion OrderOrFailureUnionType =\n    OrderWithMutationSuccess\n  | OrderWithMutationFailure\n\nunion OrderParty = Partner | User\n\nenum OrdersSortMethodType {\n  # Sort by the timestamp the order was last updated in ascending order\n  UPDATED_AT_ASC\n\n  # Sort by the timestamp the order was last updated in descending order\n  UPDATED_AT_DESC\n\n  # Sort by the timestamp the state of order was last updated in ascending order\n  STATE_UPDATED_AT_ASC\n\n  # Sort by the timestamp the state of order was last updated in descending order\n  STATE_UPDATED_AT_DESC\n}\n\ntype OrderWithMutationFailure {\n  error: EcommerceError\n}\n\ntype OrderWithMutationSuccess {\n  order: Order\n}\n\ntype organizer {\n  profile_id: ID\n  profile: Profile\n}\n\ntype PageCursor {\n  cursor: String!\n  page: Int!\n  isCurrent: Boolean!\n}\n\ntype PageCursors {\n  # Optional, may be included in `around` (if current page is near the beginning).\n  first: PageCursor\n\n  # Optional, may be included in `around` (if current page is near the end).\n  last: PageCursor\n\n  # Always includes current page\n  around: [PageCursor!]!\n  previous: PageCursor\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype Partner implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artworks(\n    size: Int\n    for_sale: Boolean\n    sort: ArtworkSorts\n    exclude: [String]\n  ): [Artwork]\n  categories: [Category]\n  collecting_institution: String\n  contact_message: String\n    @deprecated(\n      reason: \"Prefer artwork contact_message to handle availability-based prompts.\"\n    )\n  counts: PartnerCounts\n  default_profile_id: String\n  has_fair_partnership: Boolean\n  href: String\n  initials(length: Int = 3): String\n  is_default_profile_public: Boolean\n  is_limited_fair_partner: Boolean\n    @deprecated(\n      reason: \"This field no longer exists, this is for backwards compatibility\"\n    )\n  is_linkable: Boolean\n  is_pre_qualify: Boolean\n  locations(size: Int = 25): [Location]\n  name: String\n  profile: Profile\n  shows(\n    at_a_fair: Boolean\n    displayable: Boolean = true\n    fair_id: String\n    featured: Boolean\n\n    #\n    #         Only return shows matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n    near: Near\n    size: Int\n    sort: PartnerShowSorts\n    status: EventStatus\n  ): [PartnerShow]\n  type: String\n  acceptsCardPayments: Boolean\n}\n\ntype PartnerArtist {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  artist: Artist\n  biography: String\n  counts: PartnerArtistCounts\n  is_display_on_partner_profile: Boolean\n  is_represented_by: Boolean\n  is_use_default_biography: Boolean\n  partner: Partner\n  sortable_id: String\n}\n\n# A connection to a list of items.\ntype PartnerArtistConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [PartnerArtistEdge]\n}\n\ntype PartnerArtistCounts {\n  artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  for_sale_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\n# An edge in a connection.\ntype PartnerArtistEdge {\n  # The item at the end of the edge\n  node: Partner\n\n  # A cursor for use in pagination\n  cursor: String!\n\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  artist: Artist\n  biography: String\n  counts: PartnerArtistCounts\n  is_display_on_partner_profile: Boolean\n  is_represented_by: Boolean\n  is_use_default_biography: Boolean\n  partner: Partner\n  sortable_id: String\n}\n\ntype PartnerCategory {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  category_type: CategoryType\n  name: String\n  partners(\n    default_profile_public: Boolean\n    eligible_for_carousel: Boolean\n\n    # Indicates an active subscription\n    eligible_for_listing: Boolean\n\n    # Indicates tier 1/2 for gallery, 1 for institution\n    eligible_for_primary_bucket: Boolean\n\n    # Indicates tier 3/4 for gallery, 2 for institution\n    eligible_for_secondary_bucket: Boolean\n    ids: [String]\n    has_full_profile: Boolean\n\n    # Coordinates to find partners closest to\n    near: String\n    page: Int\n\n    #\n    #         Only return partners of the specified partner categories.\n    #         Accepts list of slugs.\n    #\n    partner_categories: [String]\n    size: Int\n    sort: PartnersSortType\n\n    # term used for searching Partners\n    term: String\n    type: [PartnerClassification]\n  ): [Partner]\n}\n\nenum PartnerClassification {\n  AUCTION\n  BRAND\n  DEMO\n  GALLERY\n  INSTITUTION\n  INSTITUTIONAL_SELLER\n  PRIVATE_COLLECTOR\n  PRIVATE_DEALER\n}\n\ntype PartnerCounts {\n  artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  artists(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  partner_artists(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  eligible_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  published_for_sale_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  published_not_for_sale_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  shows(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  displayable_shows(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  current_displayable_shows(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  artist_documents(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n  partner_show_documents(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\nenum PartnersAggregation {\n  CATEGORY\n  LOCATION\n  TOTAL\n}\n\n# The results for one of the requested aggregations\ntype PartnersAggregationResults {\n  counts: [AggregationCount]\n  slice: PartnersAggregation\n}\n\ntype PartnerShow implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artists: [Artist]\n  artworks(\n    all: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n    for_sale: Boolean\n    published: Boolean = true\n    page: Int = 1\n\n    # Number of artworks to return\n    size: Int = 25\n  ): [Artwork]\n  counts: PartnerShowCounts\n  cover_image: Image\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  description: String\n  displayable: Boolean\n    @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  events: [PartnerShowEventType]\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  fair: Fair\n  href: String\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n\n  # Flag showing if show has any location.\n  has_location: Boolean\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  kind: String\n  location: Location\n  meta_image: Image\n\n  # The exhibition title\n  name: String\n  partner: Partner\n  press_release(format: Format): String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  type: String\n}\n\ntype PartnerShowCounts {\n  artworks(\n    # The slug or ID of an artist in the show.\n    artist_id: String\n  ): Int\n  eligible_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype PartnerShowEventType {\n  event_type: String\n  description: String\n  title: String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n}\n\nenum PartnerShowSorts {\n  created_at_asc @deprecated(reason: \"use capital enums\")\n  created_at_desc @deprecated(reason: \"use capital enums\")\n  end_at_asc @deprecated(reason: \"use capital enums\")\n  end_at_desc @deprecated(reason: \"use capital enums\")\n  name_asc @deprecated(reason: \"use capital enums\")\n  name_desc @deprecated(reason: \"use capital enums\")\n  publish_at_asc @deprecated(reason: \"use capital enums\")\n  publish_at_desc @deprecated(reason: \"use capital enums\")\n  start_at_asc @deprecated(reason: \"use capital enums\")\n  start_at_desc @deprecated(reason: \"use capital enums\")\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  END_AT_ASC\n  END_AT_DESC\n  NAME_ASC\n  NAME_DESC\n  PUBLISH_AT_ASC\n  PUBLISH_AT_DESC\n  START_AT_ASC\n  START_AT_DESC\n}\n\nenum PartnersSortType {\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  SORTABLE_ID_ASC\n  SORTABLE_ID_DESC\n  RELATIVE_SIZE_ASC\n  RELATIVE_SIZE_DESC\n  PUBLISHED_AT_DESC\n  RANDOM_SCORE_DESC\n}\n\nunion PartnerTypes = Partner | ExternalPartner\n\ntype Pickup {\n  # It will always be PICKUP\n  fulfillmentType: String\n}\n\ntype PopularArtists {\n  artists: [Artist]\n}\n\ntype Profile {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  bio: String\n  counts: ProfileCounts\n  href: String\n  icon: Image\n  image: Image\n  initials(length: Int = 3): String\n  is_followed: Boolean\n  is_published: Boolean\n  name: String\n  is_publically_visible: Boolean\n}\n\ntype ProfileCounts {\n  follows(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype Query {\n  # An Article\n  article(\n    # The ID of the Article\n    id: String!\n  ): Article\n\n  # A list of Articles\n  articles(\n    auction_id: String\n    published: Boolean = true\n    show_id: String\n    sort: ArticleSorts\n  ): [Article]\n\n  # An Artwork\n  artwork(\n    # The slug or ID of the Artwork\n    id: String!\n  ): Artwork\n\n  # A list of Artworks\n  artworks(ids: [String]): [Artwork]\n\n  # An Artist\n  artist(\n    # The slug or ID of the Artist\n    id: String!\n  ): Artist\n\n  # A list of Artists\n  artists(\n    #\n    #         Only return artists matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n\n    #\n    #         Only return artists matching specified slugs.\n    #         Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')\n    #\n    slugs: [String]\n    page: Int = 1\n    size: Int\n    sort: ArtistSorts\n  ): [Artist]\n\n  # Creates, and authorizes, a JWT custom for Causality\n  causality_jwt(\n    role: Role\n\n    # The id of the auction to participate in\n    sale_id: String!\n  ): String\n  collection(\n    # The slug or ID of the Collection\n    id: String!\n  ): Collection\n\n  # A user's credit card\n  credit_card(\n    # The ID of the Credit Card\n    id: String!\n  ): CreditCard\n\n  # An External Partner not on the platform\n  external_partner(\n    # The ID of the Partner\n    id: String!\n  ): ExternalPartner\n\n  # A Fair\n  fair(\n    # The slug or ID of the Fair\n    id: String!\n  ): Fair\n\n  # A list of Fairs\n  fairs(\n    fair_organizer_id: String\n    has_full_feature: Boolean\n    has_homepage_section: Boolean\n    has_listing: Boolean\n\n    #\n    #         Only return fairs matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n    near: Near\n    page: Int\n    size: Int\n    sort: FairSorts\n    status: EventStatus\n  ): [Fair]\n\n  # Partners Elastic Search results\n  filter_partners(\n    default_profile_public: Boolean\n    eligible_for_carousel: Boolean\n\n    # Indicates an active subscription\n    eligible_for_listing: Boolean\n\n    # Indicates tier 1/2 for gallery, 1 for institution\n    eligible_for_primary_bucket: Boolean\n\n    # Indicates tier 3/4 for gallery, 2 for institution\n    eligible_for_secondary_bucket: Boolean\n    ids: [String]\n    has_full_profile: Boolean\n\n    # Coordinates to find partners closest to\n    near: String\n    page: Int\n\n    #\n    #         Only return partners of the specified partner categories.\n    #         Accepts list of slugs.\n    #\n    partner_categories: [String]\n    size: Int\n    sort: PartnersSortType\n\n    # term used for searching Partners\n    term: String\n    type: [PartnerClassification]\n    aggregations: [PartnersAggregation]!\n  ): FilterPartners\n\n  # Artworks Elastic Search results\n  filter_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n\n  # Sale Artworks Elastic Search results\n  filter_sale_artworks(\n    aggregations: [SaleArtworkAggregation]\n    artist_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    live_sale: Boolean\n    is_auction: Boolean\n    gene_ids: [String]\n    estimate_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n  ): FilterSaleArtworks\n    @deprecated(reason: \"This type has been superceded by `sale_artworks`\")\n  gene(\n    # The slug or ID of the Gene\n    id: String!\n  ): Gene\n\n  # A list of Genes\n  genes(\n    size: Int\n\n    #\n    #         Only return genes matching specified slugs.\n    #         Accepts list of slugs.\n    #\n    slugs: [String]\n  ): [Gene]\n\n  # List of curated genes with custom images\n  suggested_genes: [Gene]\n\n  # A list of Gene Families\n  gene_families(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): GeneFamilyConnection\n  gene_family: GeneFamily\n\n  # Home screen content\n  home_page: HomePage\n\n  # A Search for Artists\n  match_artist(\n    # Your search term\n    term: String!\n\n    # Maximum number of items to retrieve. Default: 5.\n    size: Int\n\n    # Page to retrieve. Default: 1.\n    page: Int\n\n    # Exclude these MongoDB ids from results\n    exclude_ids: [String]\n  ): [Artist]\n\n  # A Search for Genes\n  match_gene(\n    # Your search term\n    term: String!\n\n    # Maximum number of items to retrieve. Default: 5.\n    size: Int\n\n    # Page to retrieve. Default: 1.\n    page: Int\n\n    # Exclude these MongoDB ids from results\n    exclude_ids: [String]\n  ): [Gene]\n  me: Me\n\n  # Fetches an object given its Globally Unique ID\n  node(\n    # The ID of the object\n    __id: ID!\n  ): Node\n\n  # An OrderedSet\n  ordered_set(\n    # The ID of the OrderedSet\n    id: String!\n  ): OrderedSet\n\n  # A collection of OrderedSets\n  ordered_sets(\n    # Key to the OrderedSet or group of OrderedSets\n    key: String!\n    public: Boolean = true\n    page: Int = 1\n    size: Int = 10\n  ): [OrderedSet]\n\n  # A Partner\n  partner(\n    # The slug or ID of the Partner\n    id: String!\n  ): Partner\n\n  # A list of PartnerCategories\n  partner_categories(\n    category_type: CategoryType\n\n    # Filter by whether category is internal\n    internal: Boolean = false\n    size: Int\n  ): [PartnerCategory]\n\n  # A PartnerCategory\n  partner_category(\n    # The slug or ID of the PartnerCategory\n    id: String!\n  ): PartnerCategory\n\n  # A Partner Show\n  partner_show(\n    # The slug or ID of the PartnerShow\n    id: String!\n  ): PartnerShow\n\n  # A list of PartnerShows\n  partner_shows(\n    at_a_fair: Boolean\n    displayable: Boolean = true\n    fair_id: String\n    featured: Boolean\n\n    #\n    #         Only return shows matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n    near: Near\n    partner_id: String\n    size: Int\n    sort: PartnerShowSorts\n    status: EventStatus\n  ): [PartnerShow]\n\n  # A list of Partners\n  partners(\n    default_profile_public: Boolean\n    eligible_for_carousel: Boolean\n\n    # Indicates an active subscription\n    eligible_for_listing: Boolean\n\n    # Indicates tier 1/2 for gallery, 1 for institution\n    eligible_for_primary_bucket: Boolean\n\n    # Indicates tier 3/4 for gallery, 2 for institution\n    eligible_for_secondary_bucket: Boolean\n    ids: [String]\n    has_full_profile: Boolean\n\n    # Coordinates to find partners closest to\n    near: String\n    page: Int\n\n    #\n    #         Only return partners of the specified partner categories.\n    #         Accepts list of slugs.\n    #\n    partner_categories: [String]\n    size: Int\n    sort: PartnersSortType\n\n    # term used for searching Partners\n    term: String\n    type: [PartnerClassification]\n  ): [Partner]\n\n  # A Profile\n  profile(\n    # The slug or ID of the Profile\n    id: String!\n  ): Profile\n\n  # A Sale\n  sale(\n    # The slug or ID of the Sale\n    id: String!\n  ): Sale\n\n  # A Sale Artwork\n  sale_artwork(\n    # The slug or ID of the SaleArtwork\n    id: String!\n  ): SaleArtwork\n\n  # Sale Artworks search results\n  sale_artworks(\n    aggregations: [SaleArtworkAggregation]\n    artist_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    live_sale: Boolean\n    is_auction: Boolean\n    gene_ids: [String]\n    estimate_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): SaleArtworksConnection\n\n  # A list of Sales\n  sales(\n    # Limit by auction.\n    is_auction: Boolean = true\n\n    #\n    #         Only return sales matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n\n    # Limit by live status.\n    live: Boolean = true\n\n    # Limit by published status.\n    published: Boolean = true\n    size: Int\n    sort: SaleSorts\n  ): [Sale]\n\n  # The schema for difference micro-service settings\n  services: Services\n\n  # A Show\n  show(\n    # The slug or ID of the Show\n    id: String!\n  ): Show\n  status: Status\n\n  # Fields related to internal systems.\n  system: System\n  tag(\n    # The slug or ID of the Tag\n    id: String!\n  ): Tag\n\n  # Trending artists\n  trending_artists(\n    # Fetch the top artists for each metric within double the base time period\n    double_time_period: Boolean = false\n\n    # Trending method\n    method: String = \"fetch\"\n\n    # Trending metric name\n    name: TrendingMetrics!\n\n    # Number of results to return\n    size: Int = 40\n  ): TrendingArtists\n  user(\n    # Email to search for user by\n    email: String\n  ): User\n\n  # A list of Users\n  users(ids: [String]): [User]\n\n  # Popular artists\n  popular_artists(\n    # If true, will exclude followed artists for the user\n    exclude_followed_artists: Boolean\n\n    # Exclude these ids from results, may result in all artists being excluded.\n    exclude_artist_ids: [String]\n\n    # Number of results to return\n    size: Int\n  ): PopularArtists\n\n  # Returns a single Order\n  order(id: String!): Order\n\n  # Returns list of orders\n  orders(\n    buyerId: String\n    buyerType: String\n    sellerId: String\n    sellerType: String\n    state: String\n    sort: OrdersSortMethodType\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): OrderConnection\n\n  # Returns a single Order\n  ecommerceOrder(id: String!): Order\n\n  # Returns list of orders\n  ecommerceOrders(\n    buyerId: String\n    buyerType: String\n    sellerId: String\n    sellerType: String\n    state: String\n    sort: OrdersSortMethodType\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): OrderConnection\n\n  # A wildcard used to support complex root queries in Relay\n  viewer: Viewer\n}\n\ninput RecordArtworkViewInput {\n  artwork_id: String!\n  clientMutationId: String\n}\n\ntype RecordArtworkViewPayload {\n  artwork_id: String!\n  clientMutationId: String\n}\n\ninput RejectOrderInput {\n  # Order ID\n  orderId: String!\n  clientMutationId: String\n}\n\ntype RejectOrderPayload {\n  orderOrError: OrderOrFailureUnionType\n  clientMutationId: String\n}\n\nenum RelatedArtistsKind {\n  MAIN\n  CONTEMPORARY\n}\n\ninput RequestCredentialsForAssetUploadInput {\n  # The gemini template you want to request\n  name: String!\n\n  # The desired access control\n  acl: String!\n  clientMutationId: String\n}\n\ntype RequestCredentialsForAssetUploadPayload {\n  asset: Credentials\n  clientMutationId: String\n}\n\nunion RequestedFulfillment = Ship | Pickup\n\ntype ResizedImageUrl {\n  factor: Float\n  width: Int\n  height: Int\n  url: String\n}\n\nenum Role {\n  PARTICIPANT\n  OPERATOR\n}\n\n# The conditions for uploading assets to media.artsy.net\ntype S3PolicyConditionsType {\n  # The bucket to upload to.\n  bucket: String!\n\n  # The assigned access control\n  acl: String!\n\n  # A key which is prefixed on your file\n  gemini_key: String!\n\n  # The returned status code, currently always 201\n  success_action_status: String!\n}\n\n# An policy for uploading assets to media.artsy.net\ntype S3PolicyDocumentType {\n  # An expiration date string.\n  expiration: String!\n\n  # The details for the upload\n  conditions: S3PolicyConditionsType!\n}\n\ntype Sale implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  associated_sale: Sale\n  auction_state: String\n    @deprecated(reason: \"Favor `status` for consistency with other models\")\n\n  # A bid increment policy that explains minimum bids in ranges.\n  bid_increments: [BidIncrement]\n\n  # Auction's buyer's premium policy.\n  buyers_premium: [BuyersPremium]\n  cover_image: Image\n  currency: String\n  description: String\n  display_timely_at: String\n  eligible_sale_artworks_count: Int\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  event_start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  event_end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  href: String\n  name: String\n  is_auction: Boolean\n  is_auction_promo: Boolean\n  is_closed: Boolean\n  is_open: Boolean\n  is_live_open: Boolean\n  is_preview: Boolean\n  is_registration_closed: Boolean\n  is_with_buyers_premium: Boolean\n  live_start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # Returns a live auctions url if the sale is open and start time is after now\n  live_url_if_open: String\n  partner: Partner\n  profile: Profile\n  promoted_sale: Sale\n  registration_ends_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n\n  # A registration for this sale or null\n  registrationStatus: Bidder\n  require_bidder_approval: Boolean\n  sale_artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n  ): [SaleArtwork]\n  sale_artworks_connection(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): SaleArtworkConnection\n  sale_type: String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  status: String\n  sale_artwork(id: String!): SaleArtwork\n  symbol: String\n}\n\ntype SaleArtwork {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artwork: Artwork\n  bidder_positions_count: Int\n    @deprecated(reason: \"Favor `counts.bidder_positions`\")\n  bid_increments: [Float] @deprecated(reason: \"Favor `increments.cents`\")\n  counts: SaleArtworkCounts\n\n  # Currency abbreviation (e.g. \"USD\")\n  currency: String\n  current_bid: SaleArtworkCurrentBid\n  estimate: String\n\n  # Singular estimate field, if specified\n  estimate_cents: Int\n  high_estimate: SaleArtworkHighEstimate\n  high_estimate_cents: Float @deprecated(reason: \"Favor `high_estimate\")\n  highest_bid: SaleArtworkHighestBid\n  increments(\n    # Whether or not to start the increments at the user's latest bid\n    useMyMaxBid: Boolean\n  ): [BidIncrementsFormatted]\n  is_bid_on: Boolean\n\n  # Can bids be placed on the artwork?\n  is_biddable: Boolean\n  is_with_reserve: Boolean\n  lot_label: String\n  lot_number: String @deprecated(reason: \"Favor `lot_label`\")\n  low_estimate: SaleArtworkLowEstimate\n  low_estimate_cents: Float @deprecated(reason: \"Favor `low_estimate`\")\n  minimum_next_bid: SaleArtworkMinimumNextBid\n  minimum_next_bid_cents: Float @deprecated(reason: \"Favor `minimum_next_bid`\")\n  opening_bid: SaleArtworkOpeningBid\n  opening_bid_cents: Float @deprecated(reason: \"Favor `opening_bid`\")\n  position: Int\n  reserve: SaleArtworkReserve\n  reserve_message: String\n  reserve_status: String\n  sale_id: String\n  sale: Sale\n\n  # Currency symbol (e.g. \"$\")\n  symbol: String\n}\n\nenum SaleArtworkAggregation {\n  ARTIST\n  FOLLOWED_ARTISTS\n  MEDIUM\n  TOTAL\n}\n\n# A connection to a list of items.\ntype SaleArtworkConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [SaleArtworkEdge]\n}\n\ntype SaleArtworkCounts {\n  bidder_positions(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype SaleArtworkCurrentBid {\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n}\n\n# An edge in a connection.\ntype SaleArtworkEdge {\n  # The item at the end of the edge\n  node: SaleArtwork\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype SaleArtworkHighestBid {\n  id: ID\n  created_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  is_cancelled: Boolean\n\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n  cents: Int\n  display: String\n  amount_cents: Float @deprecated(reason: \"Favor `cents`\")\n}\n\ntype SaleArtworkHighEstimate {\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n}\n\ntype SaleArtworkLowEstimate {\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n}\n\ntype SaleArtworkMinimumNextBid {\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n}\n\ntype SaleArtworkOpeningBid {\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n}\n\ntype SaleArtworkReserve {\n  # A formatted price with various currency formatting options.\n  amount(\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n    symbol: String\n    thousand: String = \",\"\n  ): String\n\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n}\n\n# The results for one of the requested aggregations\ntype SaleArtworksAggregationResults {\n  counts: [AggregationCount]\n  slice: SaleArtworkAggregation\n}\n\n# A connection to a list of items.\ntype SaleArtworksConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [SaleArtworksEdge]\n\n  # Returns aggregation counts for the given filter query.\n  aggregations: [SaleArtworksAggregationResults]\n  counts: FilterSaleArtworksCounts\n}\n\n# An edge in a connection.\ntype SaleArtworksEdge {\n  # The item at the end of the edge\n  node: SaleArtwork\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype SaleRegistration {\n  bidder: Bidder\n  is_registered: Boolean\n  sale: Sale\n}\n\nenum SaleSorts {\n  _ID_ASC\n  _ID_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  ELIGIBLE_SALE_ARTWORKS_COUNT_ASC\n  ELIGIBLE_SALE_ARTWORKS_COUNT_DESC\n  END_AT_ASC\n  END_AT_DESC\n  NAME_ASC\n  NAME_DESC\n  START_AT_ASC\n  START_AT_DESC\n  TIMELY_AT_NAME_ASC\n  TIMELY_AT_NAME_DESC\n}\n\ninput SaveArtworkInput {\n  artwork_id: String\n  remove: Boolean\n  clientMutationId: String\n}\n\ntype SaveArtworkPayload {\n  artwork: Artwork\n  clientMutationId: String\n}\n\n# A piece that can be sold\ninterface Sellable {\n  dimensions: dimensions\n  edition_of: String\n\n  # Whether a piece can be purchased through e-commerce\n  is_acquireable: Boolean\n  is_for_sale: Boolean\n  is_sold: Boolean\n  price: String\n  sale_message: String\n}\n\ninput SendConversationMessageMutationInput {\n  # The id of the conversation to be updated\n  id: String!\n\n  # The email address of the message sender\n  from: String!\n  body_text: String!\n\n  # The message being replied to\n  reply_to_message_id: String!\n  clientMutationId: String\n}\n\ntype SendConversationMessageMutationPayload {\n  conversation: Conversation\n  messageEdge: MessageEdge\n  clientMutationId: String\n}\n\ntype Services {\n  convection: Convection!\n  metaphysics: Metaphysics!\n}\n\ninput SetOrderPaymentInput {\n  # Order ID\n  orderId: String!\n\n  # Gravity Credit Card Id\n  creditCardId: String!\n  clientMutationId: String\n}\n\ntype SetOrderPaymentPayload {\n  orderOrError: OrderOrFailureUnionType\n  clientMutationId: String\n}\n\ninput SetOrderShippingInput {\n  # Id of the Order\n  orderId: ID\n\n  # Fulfillment Type of this Order\n  fulfillmentType: OrderFulfillmentType\n\n  # Shipping information\n  shipping: ShippingInputField\n  clientMutationId: String\n}\n\ntype SetOrderShippingPayload {\n  orderOrError: OrderOrFailureUnionType\n  clientMutationId: String\n}\n\ntype Ship {\n  # Name for the shipping information\n  name: String\n\n  # Shipping address line 1\n  addressLine1: String\n\n  # Shipping address line 2\n  addressLine2: String\n\n  # Shipping city\n  city: String\n\n  # Shipping region\n  region: String\n\n  # Shipping country\n  country: String!\n\n  # Shipping postal code\n  postalCode: String\n\n  # Shipping phone number\n  phoneNumber: String\n}\n\ninput ShippingInputField {\n  # Name for the shipping information\n  name: String\n\n  # Shipping address line 1\n  addressLine1: String\n\n  # Shipping address line 2\n  addressLine2: String\n\n  # Shipping city\n  city: String\n\n  # Shipping region\n  region: String\n\n  # Shipping country\n  country: String\n\n  # Shipping postal code\n  postalCode: String\n\n  # Shipping phone number\n  phoneNumber: String\n}\n\ntype Show implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  artists: [Artist]\n  artworks(\n    # Number of artworks to return\n    size: Int = 25\n    published: Boolean = true\n    page: Int = 1\n    all: Boolean\n    for_sale: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  artworks_connection(\n    # Number of artworks to return\n    size: Int = 25\n    published: Boolean = true\n    page: Int = 1\n    all: Boolean\n    for_sale: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): ArtworkConnection\n  artists_without_artworks: [Artist]\n  city: String\n  cover_image: Image\n  counts: ShowCounts\n  description: String\n  displayable: Boolean\n    @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  end_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  events: [PartnerShowEventType]\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  fair: Fair\n  href: String\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n\n  # Flag showing if show has any location.\n  has_location: Boolean\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  is_reference: Boolean\n  kind: String\n  location: Location\n  meta_image: Image\n\n  # The exhibition title\n  name: String\n  partner: PartnerTypes\n  press_release(format: Format): String\n  start_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  type: String\n}\n\n# A connection to a list of items.\ntype ShowConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ShowEdge]\n  pageCursors: PageCursors\n  totalCount: Int\n}\n\ntype ShowCounts {\n  artworks(\n    # The slug or ID of an artist in the show.\n    artist_id: String\n  ): Int\n  eligible_artworks(\n    # Returns a `String` when format is specified. e.g.`'0,0.0000''`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\n# An edge in a connection.\ntype ShowEdge {\n  # The item at the end of the edge\n  node: Show\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum ShowSort {\n  START_AT_ASC\n  START_AT_DESC\n  END_AT_ASC\n  END_AT_DESC\n  UPDATED_AT_ASC\n  UPDATED_AT_DESC\n  NAME_ASC\n  NAME_DESC\n  FEATURED_ASC\n  FEATURED_DESC\n  SORTABLE_NAME_ASC\n  SORTABLE_NAME_DESC\n}\n\nenum sort {\n  DESC\n  ASC\n}\n\ntype Status {\n  gravity: StatusGravity\n\n  # Metaphysics ping\n  ping: Boolean\n}\n\n# Gravity ping\ntype StatusGravity {\n  ping: Boolean\n}\n\nenum SubmissionCategoryAggregation {\n  PAINTING\n  SCULPTURE\n  PHOTOGRAPHY\n  PRINT\n  DRAWING_COLLAGE_OR_OTHER_WORK_ON_PAPER\n  MIXED_MEDIA\n  PERFORMANCE_ART\n  INSTALLATION\n  VIDEO_FILM_ANIMATION\n  ARCHITECTURE\n  FASHION_DESIGN_AND_WEARABLE_ART\n  JEWELRY\n  DESIGN_DECORATIVE_ART\n  TEXTILE_ARTS\n  OTHER\n}\n\nenum SubmissionDimensionAggregation {\n  CM\n  IN\n}\n\nenum SubmissionStateAggregation {\n  DRAFT\n  SUBMITTED\n  APPROVED\n  REJECTED\n}\n\ninput SubmitOrderInput {\n  # Order ID\n  orderId: String!\n  clientMutationId: String\n}\n\ntype SubmitOrderPayload {\n  orderOrError: OrderOrFailureUnionType\n  clientMutationId: String\n}\n\ntype System {\n  # Gravity system time, necessary for synchronizing device clocks.\n  time: SystemTime\n}\n\ntype SystemTime {\n  day: Int\n  wday: Int\n  month: Int\n  year: Int\n  hour: Int\n  min: Int\n  sec: Int\n  dst: Boolean\n  unix: Int\n  utc_offset: Int\n  zone: String\n  iso8601: String\n}\n\ntype Tag implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  description: String\n  name: String\n  href: String\n  image: Image\n  count: Int\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n}\n\ntype TrendingArtists {\n  artists: [Artist]\n}\n\nenum TrendingMetrics {\n  # Cumulative price achieved at auction. Base time period: 12 weeks\n  ARTIST_AUCTION_LOT\n\n  # Number of artworks in fairs. Base time period: 12 weeks.\n  ARTIST_FAIR\n\n  # Base time period: 2 weeks\n  ARTIST_FOLLOW\n\n  # Base time period: 1 month\n  ARTIST_INQUIRY\n\n  # Base time period: 1 month\n  ARTIST_SAVE\n\n  # Base time period: 2 weeks\n  ARTIST_SEARCH\n}\n\nunion UnderlyingCurrentEvent = Show | Sale\n\ninput UpdateCollectorProfileInput {\n  loyalty_applicant: Boolean\n  professional_buyer: Boolean\n  self_reported_purchases: String\n  intents: [Intents]\n  clientMutationId: String\n}\n\ntype UpdateCollectorProfilePayload {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  email: String\n  name: String\n  confirmed_buyer_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  collector_level: Int\n  self_reported_purchases: String\n  loyalty_applicant_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  professional_buyer_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  professional_buyer_applied_at(\n    # This arg is deprecated, use timezone instead\n    convert_to_utc: Boolean\n    format: String\n\n    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header\n    timezone: String\n  ): String\n  intents: [String]\n  clientMutationId: String\n}\n\ninput UpdateConversationMutationInput {\n  # The id of the conversation to be updated.\n  conversationId: String!\n\n  # The message id to mark as read.\n  fromLastViewedMessageId: String!\n  clientMutationId: String\n}\n\ntype UpdateConversationMutationPayload {\n  conversation: Conversation\n  clientMutationId: String\n}\n\ninput UpdateMyProfileInput {\n  # The given name of the user.\n  name: String\n\n  # The given email of the user.\n  email: String\n\n  # The given phone number of the user.\n  phone: String\n\n  # The given location of the user as structured data\n  location: EditableLocation\n\n  # The collector level for the user\n  collector_level: Int\n\n  # The minimum price collector has selected\n  price_range_min: Int\n\n  # The maximum price collector has selected\n  price_range_max: Float\n  clientMutationId: String\n}\n\ntype UpdateMyProfilePayload {\n  user: User\n  clientMutationId: String\n}\n\ninput UpdateSubmissionMutationInput {\n  # A type-specific ID.\n  id: String!\n\n  # The gravity ID for an Artist\n  artist_id: String!\n\n  # Does the artwork come with an certificate of authenticity?\n  authenticity_certificate: Boolean\n\n  # The set in which to put the work\n  category: SubmissionCategoryAggregation\n\n  # The depth of the work\n  depth: String\n\n  # A string, either CM or IN\n  dimensions_metric: SubmissionDimensionAggregation\n\n  # Is the work a part of an edition\n  edition: Boolean\n\n  # The number of the individual work if in a set\n  edition_number: String\n\n  # The whole size of the set of works\n  edition_size: Int\n\n  # The height of the work\n  height: String\n\n  # The city where the work currently resides\n  location_city: String\n\n  # The country where the work currently resides\n  location_country: String\n\n  # The state where the work currently resides\n  location_state: String\n\n  # The materials in which the work is created\n  medium: String\n\n  # The history of an work\n  provenance: String\n\n  # Is this work signed?\n  signature: Boolean\n\n  # The name of the work\n  title: String\n\n  # The internal state of the work, e.g. draft/submitted\n  state: SubmissionStateAggregation\n\n  # The width of the work\n  width: String\n\n  # The year the work was created\n  year: String\n\n  # The user who submitted the work\n  user_id: ID\n  clientMutationId: String\n}\n\ntype UpdateSubmissionMutationPayload {\n  consignment_submission: ConsignmentSubmission\n  clientMutationId: String\n}\n\ntype User {\n  # A globally unique ID.\n  __id: ID!\n\n  # User id.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n\n  # The given name of the user.\n  name: String!\n\n  # The given email of the user.\n  email: String!\n\n  # The given phone number of the user.\n  phone: String\n\n  # The given location of the user as structured data\n  location: Location\n\n  # The price range the collector has selected\n  price_range: String\n\n  # Check whether a user exists by email address before creating an account.\n  userAlreadyExists: Boolean\n}\n\n# A wildcard used to support complex root queries in Relay\ntype Viewer {\n  # An Article\n  article(\n    # The ID of the Article\n    id: String!\n  ): Article\n\n  # A list of Articles\n  articles(\n    auction_id: String\n    published: Boolean = true\n    show_id: String\n    sort: ArticleSorts\n  ): [Article]\n\n  # An Artwork\n  artwork(\n    # The slug or ID of the Artwork\n    id: String!\n  ): Artwork\n\n  # A list of Artworks\n  artworks(ids: [String]): [Artwork]\n\n  # An Artist\n  artist(\n    # The slug or ID of the Artist\n    id: String!\n  ): Artist\n\n  # A list of Artists\n  artists(\n    #\n    #         Only return artists matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n\n    #\n    #         Only return artists matching specified slugs.\n    #         Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')\n    #\n    slugs: [String]\n    page: Int = 1\n    size: Int\n    sort: ArtistSorts\n  ): [Artist]\n\n  # Creates, and authorizes, a JWT custom for Causality\n  causality_jwt(\n    role: Role\n\n    # The id of the auction to participate in\n    sale_id: String!\n  ): String\n  collection(\n    # The slug or ID of the Collection\n    id: String!\n  ): Collection\n\n  # A user's credit card\n  credit_card(\n    # The ID of the Credit Card\n    id: String!\n  ): CreditCard\n\n  # An External Partner not on the platform\n  external_partner(\n    # The ID of the Partner\n    id: String!\n  ): ExternalPartner\n\n  # A Fair\n  fair(\n    # The slug or ID of the Fair\n    id: String!\n  ): Fair\n\n  # A list of Fairs\n  fairs(\n    fair_organizer_id: String\n    has_full_feature: Boolean\n    has_homepage_section: Boolean\n    has_listing: Boolean\n\n    #\n    #         Only return fairs matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n    near: Near\n    page: Int\n    size: Int\n    sort: FairSorts\n    status: EventStatus\n  ): [Fair]\n\n  # Partners Elastic Search results\n  filter_partners(\n    default_profile_public: Boolean\n    eligible_for_carousel: Boolean\n\n    # Indicates an active subscription\n    eligible_for_listing: Boolean\n\n    # Indicates tier 1/2 for gallery, 1 for institution\n    eligible_for_primary_bucket: Boolean\n\n    # Indicates tier 3/4 for gallery, 2 for institution\n    eligible_for_secondary_bucket: Boolean\n    ids: [String]\n    has_full_profile: Boolean\n\n    # Coordinates to find partners closest to\n    near: String\n    page: Int\n\n    #\n    #         Only return partners of the specified partner categories.\n    #         Accepts list of slugs.\n    #\n    partner_categories: [String]\n    size: Int\n    sort: PartnersSortType\n\n    # term used for searching Partners\n    term: String\n    type: [PartnerClassification]\n    aggregations: [PartnersAggregation]!\n  ): FilterPartners\n\n  # Artworks Elastic Search results\n  filter_artworks(\n    acquireable: Boolean\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    artist_ids: [String]\n    at_auction: Boolean\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    include_medium_filter_in_aggregation: Boolean\n    inquireable_only: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    tag_id: String\n    keyword: String\n  ): FilterArtworks\n\n  # Sale Artworks Elastic Search results\n  filter_sale_artworks(\n    aggregations: [SaleArtworkAggregation]\n    artist_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    live_sale: Boolean\n    is_auction: Boolean\n    gene_ids: [String]\n    estimate_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n  ): FilterSaleArtworks\n    @deprecated(reason: \"This type has been superceded by `sale_artworks`\")\n  gene(\n    # The slug or ID of the Gene\n    id: String!\n  ): Gene\n\n  # A list of Genes\n  genes(\n    size: Int\n\n    #\n    #         Only return genes matching specified slugs.\n    #         Accepts list of slugs.\n    #\n    slugs: [String]\n  ): [Gene]\n\n  # List of curated genes with custom images\n  suggested_genes: [Gene]\n\n  # A list of Gene Families\n  gene_families(\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): GeneFamilyConnection\n  gene_family: GeneFamily\n\n  # Home screen content\n  home_page: HomePage\n\n  # A Search for Artists\n  match_artist(\n    # Your search term\n    term: String!\n\n    # Maximum number of items to retrieve. Default: 5.\n    size: Int\n\n    # Page to retrieve. Default: 1.\n    page: Int\n\n    # Exclude these MongoDB ids from results\n    exclude_ids: [String]\n  ): [Artist]\n\n  # A Search for Genes\n  match_gene(\n    # Your search term\n    term: String!\n\n    # Maximum number of items to retrieve. Default: 5.\n    size: Int\n\n    # Page to retrieve. Default: 1.\n    page: Int\n\n    # Exclude these MongoDB ids from results\n    exclude_ids: [String]\n  ): [Gene]\n  me: Me\n\n  # Fetches an object given its Globally Unique ID\n  node(\n    # The ID of the object\n    __id: ID!\n  ): Node\n\n  # An OrderedSet\n  ordered_set(\n    # The ID of the OrderedSet\n    id: String!\n  ): OrderedSet\n\n  # A collection of OrderedSets\n  ordered_sets(\n    # Key to the OrderedSet or group of OrderedSets\n    key: String!\n    public: Boolean = true\n    page: Int = 1\n    size: Int = 10\n  ): [OrderedSet]\n\n  # A Partner\n  partner(\n    # The slug or ID of the Partner\n    id: String!\n  ): Partner\n\n  # A list of PartnerCategories\n  partner_categories(\n    category_type: CategoryType\n\n    # Filter by whether category is internal\n    internal: Boolean = false\n    size: Int\n  ): [PartnerCategory]\n\n  # A PartnerCategory\n  partner_category(\n    # The slug or ID of the PartnerCategory\n    id: String!\n  ): PartnerCategory\n\n  # A Partner Show\n  partner_show(\n    # The slug or ID of the PartnerShow\n    id: String!\n  ): PartnerShow\n\n  # A list of PartnerShows\n  partner_shows(\n    at_a_fair: Boolean\n    displayable: Boolean = true\n    fair_id: String\n    featured: Boolean\n\n    #\n    #         Only return shows matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n    near: Near\n    partner_id: String\n    size: Int\n    sort: PartnerShowSorts\n    status: EventStatus\n  ): [PartnerShow]\n\n  # A list of Partners\n  partners(\n    default_profile_public: Boolean\n    eligible_for_carousel: Boolean\n\n    # Indicates an active subscription\n    eligible_for_listing: Boolean\n\n    # Indicates tier 1/2 for gallery, 1 for institution\n    eligible_for_primary_bucket: Boolean\n\n    # Indicates tier 3/4 for gallery, 2 for institution\n    eligible_for_secondary_bucket: Boolean\n    ids: [String]\n    has_full_profile: Boolean\n\n    # Coordinates to find partners closest to\n    near: String\n    page: Int\n\n    #\n    #         Only return partners of the specified partner categories.\n    #         Accepts list of slugs.\n    #\n    partner_categories: [String]\n    size: Int\n    sort: PartnersSortType\n\n    # term used for searching Partners\n    term: String\n    type: [PartnerClassification]\n  ): [Partner]\n\n  # A Profile\n  profile(\n    # The slug or ID of the Profile\n    id: String!\n  ): Profile\n\n  # A Sale\n  sale(\n    # The slug or ID of the Sale\n    id: String!\n  ): Sale\n\n  # A Sale Artwork\n  sale_artwork(\n    # The slug or ID of the SaleArtwork\n    id: String!\n  ): SaleArtwork\n\n  # Sale Artworks search results\n  sale_artworks(\n    aggregations: [SaleArtworkAggregation]\n    artist_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    live_sale: Boolean\n    is_auction: Boolean\n    gene_ids: [String]\n    estimate_range: String\n    page: Int\n    sale_id: ID\n    size: Int\n    sort: String\n    after: String\n    first: Int\n    before: String\n    last: Int\n  ): SaleArtworksConnection\n\n  # A list of Sales\n  sales(\n    # Limit by auction.\n    is_auction: Boolean = true\n\n    #\n    #         Only return sales matching specified ids.\n    #         Accepts list of ids.\n    #\n    ids: [String]\n\n    # Limit by live status.\n    live: Boolean = true\n\n    # Limit by published status.\n    published: Boolean = true\n    size: Int\n    sort: SaleSorts\n  ): [Sale]\n\n  # The schema for difference micro-service settings\n  services: Services\n\n  # A Show\n  show(\n    # The slug or ID of the Show\n    id: String!\n  ): Show\n  status: Status\n\n  # Fields related to internal systems.\n  system: System\n  tag(\n    # The slug or ID of the Tag\n    id: String!\n  ): Tag\n\n  # Trending artists\n  trending_artists(\n    # Fetch the top artists for each metric within double the base time period\n    double_time_period: Boolean = false\n\n    # Trending method\n    method: String = \"fetch\"\n\n    # Trending metric name\n    name: TrendingMetrics!\n\n    # Number of results to return\n    size: Int = 40\n  ): TrendingArtists\n  user(\n    # Email to search for user by\n    email: String\n  ): User\n\n  # A list of Users\n  users(ids: [String]): [User]\n\n  # Popular artists\n  popular_artists(\n    # If true, will exclude followed artists for the user\n    exclude_followed_artists: Boolean\n\n    # Exclude these ids from results, may result in all artists being excluded.\n    exclude_artist_ids: [String]\n\n    # Number of results to return\n    size: Int\n  ): PopularArtists\n}\n",
      "containsQueryType": true,
      "typesUndefined": [],
      "directivesUndefined": [
        "deprecated"
      ],
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 232,
      "containsCycle": true,
      "numDefinitions": 312
    },
    {
      "name": "gravity.graphql",
      "path": "src/schemas/gravity.graphql",
      "sha": "d425eea3cfaa01c44d898e6e3dfd8c6557a8e318",
      "url": "https://api.github.com/repositories/150362889/contents/src/schemas/gravity.graphql?ref=7e540236612ce3ef6bfb0f1b6c41b8712d365a9c",
      "git_url": "https://api.github.com/repositories/150362889/git/blobs/d425eea3cfaa01c44d898e6e3dfd8c6557a8e318",
      "html_url": "https://github.com/orta/incorporeal/blob/7e540236612ce3ef6bfb0f1b6c41b8712d365a9c/src/schemas/gravity.graphql",
      "content": "# Artwork creator\ntype Artist {\n  # Unique ID for this artist\n  id: ID!\n\n  # Full name\n  name: String!\n\n  # Unique, friendly identifier for this artist\n  slug: String!\n}\n\n# Artwork or design object\ntype Artwork {\n  # Creators of this work\n  artists: [Artist!]!\n\n  # Unique ID for this work\n  id: ID!\n\n  # Description of the work's medium\n  medium: String\n\n  # Unique, friendly identifier for this work\n  slug: String!\n\n  # A title, if any\n  title: String\n}\n\ntype Mutation {\n  recordArtworkView(input: RecordArtworkViewInput): RecordArtworkViewPayload\n}\n\n# Partner\ntype Partner {\n  artworks: [Artwork]\n\n  # Partners display name\n  display_name: String\n\n  # Partners given name\n  given_name: String\n\n  # Uniq ID for this partner\n  id: ID!\n  relative_size: Int\n\n  # Uniq, friendly identifier for this artist\n  slug: String!\n  subscription_state: String\n}\n\n# Query root for this schema\ntype Query {\n  # Find an artist by ID\n  artist(id: ID!): Artist\n\n  # Find artists by ID\n  artists(ids: [ID]!): [Artist]\n\n  # Find an artwork by ID\n  artwork(id: ID!): Artwork\n\n  # Find artworks by ID\n  artworks(ids: [ID]!): [Artwork]\n\n  # Autocomplete resolvers.\n  match_partners(\n    term: String\n    page: Int = 1\n    size: Int = 5\n    match_type: String\n  ): [Partner]\n\n  # Find partners by ID\n  partners(ids: [ID]!): [Partner]\n}\n\n# Autogenerated input type of RecordArtworkView\ninput RecordArtworkViewInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  artwork_id: String!\n}\n\n# Autogenerated return type of RecordArtworkView\ntype RecordArtworkViewPayload {\n  artwork_id: String!\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 7
    },
    {
      "name": "lewitt.graphql",
      "path": "src/schemas/lewitt.graphql",
      "sha": "e5e6b6a3157634c33013f3f2ddc1c6fbf1c4c951",
      "url": "https://api.github.com/repositories/150362889/contents/src/schemas/lewitt.graphql?ref=7e540236612ce3ef6bfb0f1b6c41b8712d365a9c",
      "git_url": "https://api.github.com/repositories/150362889/git/blobs/e5e6b6a3157634c33013f3f2ddc1c6fbf1c4c951",
      "html_url": "https://github.com/orta/incorporeal/blob/7e540236612ce3ef6bfb0f1b6c41b8712d365a9c/src/schemas/lewitt.graphql",
      "content": "schema {\n  query: RootQuery\n  mutation: Mutation\n}\n\n# An ArtworkGroup which has an artwork and its related line items\ntype ArtworkGroup {\n  artists: [String]\n  date: String\n  default_image_id: String\n  dimensions: Json\n  edition_set_id: String\n  id: ID!\n  images: Json\n  line_items: [LineItem]\n  price_in_cents: Int!\n  title: String\n}\n\n# Autogenerated input type of CreateInvoice\ninput CreateInvoiceInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: ID\n  partner_id: String!\n  payment_method: String\n  currency: Currencies\n  impulse_conversation_id: String\n}\n\nenum Currencies {\n  # US Dollar\n  usd\n}\n\n# An Invoice\ntype Invoice {\n  artwork_groups: [ArtworkGroup]\n  artwork_groups_count: Int\n  created_at: String\n  currency: String\n  discount_total_cents: Int\n  fee_in_cents: Int\n  id: ID!\n  impulse_conversation_id: Int\n  invoice_transactions_count: Int\n  line_items: [LineItem]\n  line_items_count: Int\n  merchant_account: [MerchantAccount]\n  merchant_account_id: Int\n  paid_at: String\n  partner_id: String\n  payment_method: String\n  refunded_at: String\n  sent_at: String\n  shipping_total_cents: Int\n  state: String\n  tax_total_cents: Int\n  token: String!\n  total_cents: Int\n  updated_at: String\n  voided_at: String\n}\n\nscalar Json\n\n# A LineItem\ntype LineItem {\n  amount_cents: Int!\n  description: String!\n  id: ID!\n  line_item_type: String!\n}\n\n# A MerchantAccount\ntype MerchantAccount {\n  # Checks if account is properly configured for credit card payments\n  credit_card_enabled: Boolean!\n  id: ID!\n  partner_id: String!\n}\n\ntype Mutation {\n  create_invoice(input: CreateInvoiceInput!): Invoice\n}\n\n# Root query\ntype RootQuery {\n  # Search Invoices\n  invoices(ids: [ID], partner_id: String!, token: String): [Invoice]\n  # Retrieve a Merchant Account\n  partner_product_merchant_account(partner_id: String!): MerchantAccount\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 10
    },
    {
      "name": "exchange.graphql",
      "path": "src/schemas/exchange.graphql",
      "sha": "ad3392d1416b7ba4c8cbf216eb6dcce0daa54824",
      "url": "https://api.github.com/repositories/150362889/contents/src/schemas/exchange.graphql?ref=7e540236612ce3ef6bfb0f1b6c41b8712d365a9c",
      "git_url": "https://api.github.com/repositories/150362889/git/blobs/ad3392d1416b7ba4c8cbf216eb6dcce0daa54824",
      "html_url": "https://github.com/orta/incorporeal/blob/7e540236612ce3ef6bfb0f1b6c41b8712d365a9c/src/schemas/exchange.graphql",
      "content": "# An generic error type for mutations\ntype ApplicationError {\n  # Code of this error\n  code: String!\n\n  # What caused the error\n  data: String\n\n  # Type of this error\n  type: String!\n}\n\n# Autogenerated input type of ApproveOrder\ninput ApproveOrderInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: ID!\n}\n\n# Autogenerated return type of ApproveOrder\ntype ApproveOrderPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # A union of success/failure\n  orderOrError: OrderOrFailureUnion!\n}\n\n# Autogenerated input type of CreateOrderWithArtwork\ninput CreateOrderWithArtworkInput {\n  # Artwork Id\n  artworkId: String!\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # EditionSet Id\n  editionSetId: String\n\n  # Number of items in the line item\n  quantity: Int\n}\n\n# Autogenerated return type of CreateOrderWithArtwork\ntype CreateOrderWithArtworkPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # A union of success/failure\n  orderOrError: OrderOrFailureUnion!\n}\n\n# Date in YYYY-MM-DD format\nscalar Date\n\n# An ISO 8601 datetime\nscalar DateTime\n\n# Autogenerated input type of FulfillAtOnce\ninput FulfillAtOnceInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  fulfillment: FulfillmentAttributes!\n  id: ID!\n}\n\n# Autogenerated return type of FulfillAtOnce\ntype FulfillAtOncePayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # A union of success/failure\n  orderOrError: OrderOrFailureUnion!\n}\n\n# A Fulfillment for an order\ntype Fulfillment {\n  courier: String!\n  createdAt: DateTime!\n  estimatedDelivery: Date\n  id: ID!\n  notes: String\n  trackingId: String\n  updatedAt: DateTime!\n}\n\n# Attributes of a Fulfillment\ninput FulfillmentAttributes {\n  courier: String!\n  estimatedDelivery: Date\n  notes: String\n  trackingId: String\n}\n\n# The connection type for Fulfillment.\ntype FulfillmentConnection {\n  # A list of edges.\n  edges: [FulfillmentEdge]\n\n  # A list of nodes.\n  nodes: [Fulfillment]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype FulfillmentEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Fulfillment\n}\n\n# A Line Item\ntype LineItem {\n  artworkId: String!\n  createdAt: DateTime!\n  editionSetId: String\n  fulfillments(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n  ): FulfillmentConnection\n  id: ID!\n  priceCents: Int!\n  quantity: Int!\n  updatedAt: DateTime!\n}\n\n# The connection type for LineItem.\ntype LineItemConnection {\n  # A list of edges.\n  edges: [LineItemEdge]\n\n  # A list of nodes.\n  nodes: [LineItem]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype LineItemEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: LineItem\n}\n\ntype Mutation {\n  approveOrder(input: ApproveOrderInput!): ApproveOrderPayload\n  createOrderWithArtwork(\n    input: CreateOrderWithArtworkInput!\n  ): CreateOrderWithArtworkPayload\n\n  # Fulfill an order with one Fulfillment, it sets this fulfillment to each line item in order\n  fulfillAtOnce(input: FulfillAtOnceInput!): FulfillAtOncePayload\n  rejectOrder(input: RejectOrderInput!): RejectOrderPayload\n  setPayment(input: SetPaymentInput!): SetPaymentPayload\n  setShipping(input: SetShippingInput!): SetShippingPayload\n  submitOrder(input: SubmitOrderInput!): SubmitOrderPayload\n}\n\n# An Order\ntype Order {\n  buyer: OrderPartyUnion!\n  buyerPhoneNumber: String\n  buyerTotalCents: Int\n  code: String!\n  commissionFeeCents: Int\n  createdAt: DateTime!\n  creditCardId: String\n  currencyCode: String!\n  id: ID!\n  itemsTotalCents: Int!\n  lastApprovedAt: DateTime\n  lastSubmittedAt: DateTime\n  lineItems(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n  ): LineItemConnection\n  requestedFulfillment: RequestedFulfillmentUnion\n  seller: OrderPartyUnion!\n  sellerTotalCents: Int\n  shippingTotalCents: Int\n  state: OrderStateEnum!\n  stateExpiresAt: DateTime\n  stateUpdatedAt: DateTime\n  taxTotalCents: Int\n  transactionFeeCents: Int\n  updatedAt: DateTime!\n}\n\n# Fields to sort by\nenum OrderConnectionSortEnum {\n  # Sort by the timestamp the state of order was last updated in ascending order\n  STATE_UPDATED_AT_ASC\n\n  # Sort by the timestamp the state of order was last updated in descending order\n  STATE_UPDATED_AT_DESC\n\n  # Sort by the timestamp the order was last updated in ascending order\n  UPDATED_AT_ASC\n\n  # Sort by the timestamp the order was last updated in descending order\n  UPDATED_AT_DESC\n}\n\n# The connection type for Order.\ntype OrderConnectionWithTotalCount {\n  # A list of edges.\n  edges: [OrderEdge]\n\n  # A list of nodes.\n  nodes: [Order]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\n# An edge in a connection.\ntype OrderEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Order\n}\n\nenum OrderFulfillmentTypeEnum {\n  # fulfillment type is: pickup\n  PICKUP\n\n  # fulfillment type is: ship\n  SHIP\n}\n\n# Represents either a resolved Order or a potential failure\nunion OrderOrFailureUnion = OrderWithMutationFailure | OrderWithMutationSuccess\n\n# Represents either a partner or a user\nunion OrderPartyUnion = Partner | User\n\nenum OrderStateEnum {\n  # order is abandoned by buyer and never submitted\n  ABANDONED\n\n  # order is approved by seller\n  APPROVED\n\n  # order is canceled\n  CANCELED\n\n  # order is fulfilled by seller\n  FULFILLED\n\n  # order is still pending submission by buyer\n  PENDING\n\n  # order is submitted by buyer\n  SUBMITTED\n}\n\n# An error response for changes to an order\ntype OrderWithMutationFailure {\n  error: ApplicationError!\n}\n\n# A successfully returned order type\ntype OrderWithMutationSuccess {\n  order: Order!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n}\n\ntype Partner {\n  id: String!\n}\n\ntype Pickup {\n  fulfillmentType: String!\n}\n\ntype Query {\n  # Find an order by ID\n  order(id: ID!): Order\n\n  # Find list of orders\n  orders(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n    buyerId: String\n    buyerType: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n    sellerId: String\n    sellerType: String\n    sort: OrderConnectionSortEnum\n    state: OrderStateEnum\n  ): OrderConnectionWithTotalCount\n}\n\n# Autogenerated input type of RejectOrder\ninput RejectOrderInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: ID!\n}\n\n# Autogenerated return type of RejectOrder\ntype RejectOrderPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # A union of success/failure\n  orderOrError: OrderOrFailureUnion!\n}\n\n# Represents either a shipping information or pickup\nunion RequestedFulfillmentUnion = Pickup | Ship\n\n# Autogenerated input type of SetPayment\ninput SetPaymentInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  creditCardId: String!\n  id: ID!\n}\n\n# Autogenerated return type of SetPayment\ntype SetPaymentPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # A union of success/failure\n  orderOrError: OrderOrFailureUnion!\n}\n\n# Autogenerated input type of SetShipping\ninput SetShippingInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  fulfillmentType: OrderFulfillmentTypeEnum!\n  id: ID!\n  shipping: ShippingAttributes\n}\n\n# Autogenerated return type of SetShipping\ntype SetShippingPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # A union of success/failure\n  orderOrError: OrderOrFailureUnion!\n}\n\ntype Ship {\n  addressLine1: String\n  addressLine2: String\n  city: String\n  country: String\n  name: String\n  phoneNumber: String\n  postalCode: String\n  region: String\n}\n\n# Shipping information\ninput ShippingAttributes {\n  addressLine1: String\n  addressLine2: String\n  city: String\n  country: String\n  name: String\n  phoneNumber: String!\n  postalCode: String\n  region: String\n}\n\n# Autogenerated input type of SubmitOrder\ninput SubmitOrderInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: ID!\n}\n\n# Autogenerated return type of SubmitOrder\ntype SubmitOrderPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # A union of success/failure\n  orderOrError: OrderOrFailureUnion!\n}\n\ntype User {\n  id: String!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 26,
      "containsCycle": false,
      "polynomialLevel": 3,
      "numDefinitions": 43
    }
  ],
  "metrics": {
    "created_at": "2018-09-26T03:22:11Z",
    "updated_at": "2019-05-29T21:13:17Z",
    "pushed_at": "2018-09-26T12:47:36Z",
    "issues": 1,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 7
  }
}