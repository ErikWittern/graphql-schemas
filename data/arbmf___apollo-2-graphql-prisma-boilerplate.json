{
  "repo_name": "apollo-2-graphql-prisma-boilerplate",
  "repo_full_name": "arbmf/apollo-2-graphql-prisma-boilerplate",
  "repo_owner": "arbmf",
  "repo_description": "Uses Apollo server 2 and prisma for mongoDB to provide the base boilerplate with authentication using JWT, authorization using graphql directives, tests using jest and a feature based architecture.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "prisma.graphql",
      "path": "database/generated/prisma-graphql/prisma.graphql",
      "sha": "b5ba8598504a1b3903539f9e8d0b3653964cd1ee",
      "url": "https://api.github.com/repositories/163713973/contents/database/generated/prisma-graphql/prisma.graphql?ref=233421f9547aad952ce6c13ee3ff94484abd4cb9",
      "git_url": "https://api.github.com/repositories/163713973/git/blobs/b5ba8598504a1b3903539f9e8d0b3653964cd1ee",
      "html_url": "https://github.com/arbmf/apollo-2-graphql-prisma-boilerplate/blob/233421f9547aad952ce6c13ee3ff94484abd4cb9/database/generated/prisma-graphql/prisma.graphql",
      "content": "type AggregateUser {\n  count: Int!\n}\n\ntype BatchPayload {\n  count: Long!\n}\n\nscalar Long\n\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  deleteUser(where: UserWhereUniqueInput!): User\n  deleteManyUsers(where: UserWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  user(where: UserWhereUniqueInput!): User\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  node(id: ID!): Node\n}\n\nenum Role {\n  ADMIN\n  USER\n  UNKNOWN\n}\n\ntype Subscription {\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n}\n\ntype User {\n  id: ID!\n  name: String!\n  role: Role!\n  username: String!\n  password: String!\n}\n\ntype UserConnection {\n  pageInfo: PageInfo!\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  name: String!\n  role: Role!\n  username: String!\n  password: String!\n}\n\ntype UserEdge {\n  node: User!\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  role_ASC\n  role_DESC\n  username_ASC\n  username_DESC\n  password_ASC\n  password_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  name: String!\n  role: Role!\n  username: String!\n  password: String!\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n  AND: [UserSubscriptionWhereInput!]\n  OR: [UserSubscriptionWhereInput!]\n  NOT: [UserSubscriptionWhereInput!]\n}\n\ninput UserUpdateInput {\n  name: String\n  role: Role\n  username: String\n  password: String\n}\n\ninput UserUpdateManyMutationInput {\n  name: String\n  role: Role\n  username: String\n  password: String\n}\n\ninput UserWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  role: Role\n  role_not: Role\n  role_in: [Role!]\n  role_not_in: [Role!]\n  username: String\n  username_not: String\n  username_in: [String!]\n  username_not_in: [String!]\n  username_lt: String\n  username_lte: String\n  username_gt: String\n  username_gte: String\n  username_contains: String\n  username_not_contains: String\n  username_starts_with: String\n  username_not_starts_with: String\n  username_ends_with: String\n  username_not_ends_with: String\n  password: String\n  password_not: String\n  password_in: [String!]\n  password_not_in: [String!]\n  password_lt: String\n  password_lte: String\n  password_gt: String\n  password_gte: String\n  password_contains: String\n  password_not_contains: String\n  password_starts_with: String\n  password_not_starts_with: String\n  password_ends_with: String\n  password_not_ends_with: String\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  NOT: [UserWhereInput!]\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n  username: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 11,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 22
    }
  ],
  "metrics": {
    "created_at": "2019-01-01T04:53:48Z",
    "updated_at": "2019-01-19T21:56:45Z",
    "pushed_at": "2019-01-01T05:11:42Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}