{
  "repo_name": "strapi-examples",
  "repo_full_name": "ninjavungve/strapi-examples",
  "repo_owner": "ninjavungve",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "cheesecakes/plugins/graphql/config/generated/schema.graphql",
      "sha": "7948d65c35b1f39d4ac0794fac0969a15b6c0266",
      "url": "https://api.github.com/repositories/135387841/contents/cheesecakes/plugins/graphql/config/generated/schema.graphql?ref=a53f5e309e722f2709fca0b9eb34f9fd6537d2ff",
      "git_url": "https://api.github.com/repositories/135387841/git/blobs/7948d65c35b1f39d4ac0794fac0969a15b6c0266",
      "html_url": "https://github.com/ninjavungve/strapi-examples/blob/a53f5e309e722f2709fca0b9eb34f9fd6537d2ff/cheesecakes/plugins/graphql/config/generated/schema.graphql",
      "content": "\"\"\"This is a cake collection\"\"\"\ntype Cake {\n  _id: String\n  name: String\n  description: String\n  price: String\n  picture: String\n  link: String\n  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]\n  comments(sort: String, limit: Int, start: Int, where: JSON): [Review]\n}\n\n\"\"\"Cakes category list\"\"\"\ntype Category {\n  _id: String\n  name: String\n  cakes(sort: String, limit: Int, start: Int, where: JSON): [Cake]\n}\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n\nunion Morph = Cake | Category | Review | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser\n\ntype Query {\n  cake(id: String!): Cake\n  cakes(sort: String, limit: Int, start: Int, where: JSON): [Cake]\n  category(id: String!): Category\n  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]\n  review(id: String!): Review\n  reviews(sort: String, limit: Int, start: Int, where: JSON): [Review]\n  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]\n  role(id: String!): UsersPermissionsRole\n\n  \"\"\"\n  Retrieve all the existing roles. You can't apply filters on this query.\n  \"\"\"\n  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]\n  user(id: String!): UsersPermissionsUser\n  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]\n}\n\ntype Review {\n  _id: String\n  content: String\n  approved: Boolean\n  cake: Cake\n  author: UsersPermissionsUser\n}\n\ntype UploadFile {\n  _id: String\n  created_at: String\n  updated_at: String\n  name: String\n  hash: String\n  ext: String\n  mime: String\n  size: Float\n  url: String\n  provider: String\n  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]\n}\n\ntype UsersPermissionsPermission {\n  _id: String\n  type: String\n  controller: String\n  action: String\n  enabled: Boolean\n  policy: String\n  role: UsersPermissionsRole\n}\n\ntype UsersPermissionsRole {\n  _id: String\n  name: String\n  description: String\n  type: String\n  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]\n  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]\n}\n\ntype UsersPermissionsUser {\n  _id: String\n  username: String\n  email: String\n  provider: String\n  password: String\n  resetPasswordToken: String\n  role: UsersPermissionsRole\n  comments(sort: String, limit: Int, start: Int, where: JSON): [Review]\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 8,
      "containsCycle": true,
      "numDefinitions": 10
    }
  ],
  "metrics": {
    "created_at": "2018-05-30T04:26:04Z",
    "updated_at": "2018-05-30T04:28:26Z",
    "pushed_at": "2018-05-30T04:27:54Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}