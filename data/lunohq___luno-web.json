{
  "repo_name": "luno-web",
  "repo_full_name": "lunohq/luno-web",
  "repo_owner": "lunohq",
  "repo_description": "luno web app",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "server/graphql/schema.graphql",
      "sha": "4bf780ee24e840765ed7b4aa8021ab1f07af6cae",
      "url": "https://api.github.com/repositories/55725540/contents/server/graphql/schema.graphql?ref=0de8dc216aad0d9448ccdb2c79285c3d7dc56917",
      "git_url": "https://api.github.com/repositories/55725540/git/blobs/4bf780ee24e840765ed7b4aa8021ab1f07af6cae",
      "html_url": "https://github.com/lunohq/luno-web/blob/0de8dc216aad0d9448ccdb2c79285c3d7dc56917/server/graphql/schema.graphql",
      "content": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ntype AnalyzeResult {\n  result: String\n}\n\ntype Attachment {\n  file: File\n}\n\ninput AttachmentInput {\n  file: FileInput!\n}\n\ntype Bot implements Node {\n  id: ID!\n  purpose: String\n  pointsOfContact: [ID]\n}\n\ntype BotConnection {\n  pageInfo: PageInfo!\n  edges: [BotEdge]\n}\n\ntype BotEdge {\n  node: Bot\n  cursor: String!\n}\n\ninput CancelFileInput {\n  name: String!\n  mutationId: String!\n  fileId: String\n}\n\ninput CancelFileUploadsInput {\n  uploads: [CancelFileInput]\n  clientMutationId: String!\n}\n\ntype CancelFileUploadsPayload {\n  mutationIds: [String]\n  clientMutationId: String!\n}\n\ninput CreateReplyInput {\n  title: String!\n  body: String!\n  keywords: String\n  topicId: ID!\n  attachments: [AttachmentInput]\n  clientMutationId: String!\n}\n\ntype CreateReplyPayload {\n  topic: Topic\n  replyEdge: ReplyEdge\n  clientMutationId: String!\n}\n\ninput CreateTopicInput {\n  name: String!\n  pointsOfContact: [String]\n  clientMutationId: String!\n}\n\ntype CreateTopicPayload {\n  viewer: User\n  topic: Topic\n  topicEdge: TopicEdge\n  clientMutationId: String!\n}\n\ninput DeleteFileInput {\n  fileId: String\n  clientMutationId: String!\n}\n\ntype DeleteFilePayload {\n  fileId: String\n  clientMutationId: String!\n}\n\ninput DeleteReplyInput {\n  id: ID!\n  topicId: ID!\n  clientMutationId: String!\n}\n\ntype DeleteReplyPayload {\n  topic: Topic\n  deletedId: ID\n  clientMutationId: String!\n}\n\ninput DeleteTopicInput {\n  id: ID!\n  clientMutationId: String!\n}\n\ntype DeleteTopicPayload {\n  viewer: User\n  deletedId: ID\n  clientMutationId: String!\n}\n\ntype ExplainResult {\n  matched: Boolean\n  explanation: String\n}\n\ntype File implements Node {\n  id: ID!\n  name: String\n  permalink: String\n  key: String\n  bucket: String\n  created: String\n}\n\ninput FileInput {\n  id: ID!\n  name: String!\n  permalink: String!\n}\n\ninput InviteUserInput {\n  userId: String!\n  role: UserRole!\n  username: String!\n  clientMutationId: String!\n}\n\ntype InviteUserPayload {\n  team: Team\n  user: User\n  userEdge: UserEdge\n  clientMutationId: String!\n}\n\ninput LogoutInput {\n  clientMutationId: String!\n}\n\ntype LogoutPayload {\n  viewer: User\n  clientMutationId: String!\n}\n\ntype MultiSearchResult {\n  responses: [SearchResultsV2]\n  requestTook: Int\n  analyzed: String\n}\n\ntype Mutation {\n  logout(input: LogoutInput!): LogoutPayload\n  updateBotPurpose(input: UpdateBotPurposeInput!): UpdateBotPurposePayload\n  updateBotPointsOfContact(input: UpdateBotPointsOfContactInput!): UpdateBotPointsOfContactPayload\n  updateUser(input: UpdateUserInput!): UpdateUserPayload\n  inviteUser(input: InviteUserInput!): InviteUserPayload\n  createReply(input: CreateReplyInput!): CreateReplyPayload\n  deleteReply(input: DeleteReplyInput!): DeleteReplyPayload\n  updateReply(input: UpdateReplyInput!): UpdateReplyPayload\n  createTopic(input: CreateTopicInput!): CreateTopicPayload\n  deleteTopic(input: DeleteTopicInput!): DeleteTopicPayload\n  updateTopic(input: UpdateTopicInput!): UpdateTopicPayload\n  uploadFile(input: UploadFileInput!): UploadFilePayload\n  cancelFileUploads(input: CancelFileUploadsInput!): CancelFileUploadsPayload\n  deleteFile(input: DeleteFileInput!): DeleteFilePayload\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  node(id: ID!): Node\n  viewer: User\n}\n\ntype Reply implements Node {\n  id: ID!\n  title: String\n  body: String\n  keywords: String\n  changed: String\n  updatedBy: User\n  topic: Topic\n  attachments: [Attachment]\n}\n\ntype ReplyConnection {\n  pageInfo: PageInfo!\n  edges: [ReplyEdge]\n}\n\ntype ReplyEdge {\n  node: Reply\n  cursor: String!\n}\n\ntype SearchResult {\n  score: Float\n  id: String\n  changed: String\n  body: String\n  displayTitle: String\n  title: String\n  explanation: String\n}\n\ntype SearchResults {\n  took: Int\n  requestTook: Int\n  totalResults: Int\n  maxScore: Float\n  results: [SearchResult]\n  query: String\n}\n\ntype SearchResultsV2 {\n  took: Int\n  totalResults: Int\n  maxScore: Float\n  results: [SearchResultV2]\n}\n\ntype SearchResultV2 {\n  score: Float\n  id: String\n  changed: String\n  body: String\n  title: String\n  keywords: String\n  topic: String\n  explanation: String\n}\n\ntype SlackMember implements Node {\n  id: ID!\n  userId: ID!\n  name: String\n  profile: SlackMemberProfile\n}\n\ntype SlackMemberConnection {\n  pageInfo: PageInfo!\n  edges: [SlackMemberEdge]\n}\n\ntype SlackMemberEdge {\n  node: SlackMember\n  cursor: String!\n}\n\ntype SlackMemberProfile {\n  realName: String\n  email: String\n}\n\ntype Team implements Node {\n  id: ID!\n  name: String\n  attachmentsEnabled: Boolean\n  createdBy: ID!\n  members(after: String, first: Int, before: String, last: Int): SlackMemberConnection\n  users(after: String, first: Int, before: String, last: Int): UserConnection\n  staff(after: String, first: Int, before: String, last: Int): UserConnection\n  admins(after: String, first: Int, before: String, last: Int): UserConnection\n}\n\ntype ThreadEvent {\n  created: String\n  message: ThreadEventMessage\n  type: ThreadEventType\n  meta: String\n}\n\ntype ThreadEventMessage {\n  event: String\n  type: String\n  user: String\n  ts: Float\n  text: String\n}\n\ntype ThreadEventsConnection {\n  pageInfo: PageInfo!\n  edges: [ThreadEventsEdge]\n}\n\ntype ThreadEventsEdge {\n  node: ThreadEvent\n  cursor: String!\n}\n\nenum ThreadEventType {\n  MESSAGE_RECEIVED\n  MESSAGE_SENT\n  GREETING_FLOW\n  HELP_FLOW\n  ANSWER_FLOW\n  FEEDBACK\n  SMART_REPLY\n  MULTIPLE_RESULTS\n  NO_RESULTS\n  CLARIFICATION\n  ESCALATION_FLOW\n}\n\ntype ThreadLog implements Node {\n  id: ID!\n  channelName: String\n  created: String\n  message: String\n  username: String\n  length: Int\n  status: Int\n  events(after: String, first: Int, before: String, last: Int): ThreadEventsConnection\n}\n\ntype ThreadLogConnection {\n  pageInfo: PageInfo!\n  edges: [ThreadLogEdge]\n}\n\ntype ThreadLogEdge {\n  node: ThreadLog\n  cursor: String!\n}\n\ntype Topic implements Node {\n  id: ID!\n  isDefault: Boolean\n  name: String\n  replies(after: String, first: Int, before: String, last: Int): ReplyConnection\n}\n\ntype TopicConnection {\n  pageInfo: PageInfo!\n  edges: [TopicEdge]\n}\n\ntype TopicEdge {\n  node: Topic\n  cursor: String!\n}\n\ninput UpdateBotPointsOfContactInput {\n  id: ID!\n  pointsOfContact: [String]\n  clientMutationId: String!\n}\n\ntype UpdateBotPointsOfContactPayload {\n  bot: Bot\n  clientMutationId: String!\n}\n\ninput UpdateBotPurposeInput {\n  id: ID!\n  purpose: String\n  clientMutationId: String!\n}\n\ntype UpdateBotPurposePayload {\n  bot: Bot\n  clientMutationId: String!\n}\n\ninput UpdateReplyInput {\n  id: ID!\n  title: String!\n  body: String!\n  keywords: String\n  attachments: [AttachmentInput]\n  deleteFileIds: [ID]\n  topicId: ID!\n  previousTopicId: ID!\n  clientMutationId: String!\n}\n\ntype UpdateReplyPayload {\n  reply: Reply\n  replyId: ID\n  replyEdge: ReplyEdge\n  previousTopic: Topic\n  topic: Topic\n  clientMutationId: String!\n}\n\ninput UpdateTopicInput {\n  id: ID!\n  name: String!\n  clientMutationId: String!\n}\n\ntype UpdateTopicPayload {\n  topic: Topic\n  clientMutationId: String!\n}\n\ninput UpdateUserInput {\n  id: ID!\n  role: UserRole!\n  clientMutationId: String!\n}\n\ntype UpdateUserPayload {\n  team: Team\n  user: User\n  clientMutationId: String!\n}\n\ninput UploadFileInput {\n  clientMutationId: String!\n}\n\ntype UploadFilePayload {\n  file: File\n  clientMutationId: String!\n}\n\ntype User implements Node {\n  id: ID!\n  username: String\n  team: Team\n  bots(after: String, first: Int, before: String, last: Int): BotConnection\n  search(query: String!): SearchResults\n  msearch(query: String!): MultiSearchResult\n  zsearch(domain: String!, query: String!): ZendeskSearchResults\n  analyze(query: String!, options: String): AnalyzeResult\n  validate(query: String!): ValidateResult\n  explain(query: String!, replyId: ID!, tier: Int!): ExplainResult\n  reply(id: ID!): Reply\n  topic(id: ID!): Topic\n  threadLog(id: ID!): ThreadLog\n  defaultTopic: Topic\n  topics(after: String, first: Int, before: String, last: Int): TopicConnection\n  threadLogs(after: String, first: Int, before: String, last: Int): ThreadLogConnection\n  anonymous: Boolean\n  assumed: Boolean\n  role: UserRole\n  isStaff: Boolean\n  isAdmin: Boolean\n  displayRole: String\n}\n\ntype UserConnection {\n  pageInfo: PageInfo!\n  edges: [UserEdge]\n}\n\ntype UserEdge {\n  node: User\n  cursor: String!\n}\n\nenum UserRole {\n  ADMIN\n  TRAINER\n  CONSUMER\n}\n\ntype ValidateResult {\n  query: String\n  result: String\n}\n\ntype ZendeskSearchResult {\n  url: String\n  title: String\n  labels: String\n}\n\ntype ZendeskSearchResults {\n  requestTook: Int\n  pages: Int\n  totalResults: Int\n  results: [ZendeskSearchResult]\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 53,
      "containsCycle": true,
      "numDefinitions": 74
    }
  ],
  "metrics": {
    "created_at": "2016-04-07T20:23:10Z",
    "updated_at": "2016-12-05T04:35:15Z",
    "pushed_at": "2016-12-05T05:01:25Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 13,
    "pull_requests_open": 0,
    "pull_requests_closed": 2,
    "pull_requests_merged": 11,
    "releases": 0,
    "stargazers": 0
  }
}