{
  "repo_name": "graphql-schema-flickr",
  "repo_full_name": "domjtalbot/graphql-schema-flickr",
  "repo_owner": "domjtalbot",
  "repo_description": ":camera: (beta) A GraphQL schema which wraps and tidies up the Flickr REST API.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "photo.graphql",
      "path": "src/type-defs/photo.graphql",
      "sha": "71adbe82aea43d54b132e2f33fdb0911370cf6f1",
      "url": "https://api.github.com/repositories/105125081/contents/src/type-defs/photo.graphql?ref=fd7c7d3fabb56b480c15f0ccfe2c39dd436cdf7e",
      "git_url": "https://api.github.com/repositories/105125081/git/blobs/71adbe82aea43d54b132e2f33fdb0911370cf6f1",
      "html_url": "https://github.com/domjtalbot/graphql-schema-flickr/blob/fd7c7d3fabb56b480c15f0ccfe2c39dd436cdf7e/src/type-defs/photo.graphql",
      "content": "# Flickr Photo Exif\ntype Exif {\n  clean: String\n  label: String!\n  raw: String!\n  tag: String\n  tagspace: String!\n  tagspaceid: String!\n}\n\ntype Tag {\n  author: String!\n  clean: String!\n  id: String!\n  machineTag: String!\n  tag: String!\n}\n\ntype Url {\n  type: String!\n  url: String!\n}\n\ntype PhotoSize {\n  label: String!\n  width: String!\n  height: String!\n  source: String!\n  url: String!\n  media: String!\n}\n\ntype License {\n  id: String!\n  name: String!\n  url: String\n}\n\ntype PhotoComment {\n  authorId: String!\n  authorIsDeleted: Int!\n  authorName: String!\n  commentText: String!\n  datePosted: String!\n  iconFarm: Int!\n  iconServer: String!\n  id: String!\n  realname: String!\n  url: String!\n  username: String\n}\n\ntype PhotoLocation {\n  accuracy: String!\n  context: String!\n  country: String!\n  county: String!\n  latitude: String!\n  locality: String!\n  longitude: String!\n  place_id: String!\n  region: String!\n  woeid: String!\n}\n\ntype Photo {\n  camera: String!\n  canBlog: Int!\n  canDownload: Int!\n  canPrint: Int!\n  canShare: Int!\n  commentCount: String!\n  comments: [PhotoComment!]!\n  dateTaken: String!\n  dateUploaded: String!\n  description: String!\n  exif: [Exif!]!\n  farm: Int!\n  id: String!\n  isFavorite: Int!\n  lastUpdated: String!\n  license: License\n  location: PhotoLocation!\n  media: String!\n  owner: String!\n  rotation: Int!\n  safetyLevel: String!\n  secret: String!\n  server: String!\n  sizes: [PhotoSize!]!\n  tags: [Tag!]\n  title: String!\n  urls: [Url!]!\n  views: String!\n}\n\ntype Query {\n  getPhoto(\n    photoId: String!\n  ): Photo!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 9,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 9
    },
    {
      "name": "people.graphql",
      "path": "src/type-defs/people.graphql",
      "sha": "328e45fb56a92d29a0eb7e557ae5b2d07ad01bac",
      "url": "https://api.github.com/repositories/105125081/contents/src/type-defs/people.graphql?ref=fd7c7d3fabb56b480c15f0ccfe2c39dd436cdf7e",
      "git_url": "https://api.github.com/repositories/105125081/git/blobs/328e45fb56a92d29a0eb7e557ae5b2d07ad01bac",
      "html_url": "https://github.com/domjtalbot/graphql-schema-flickr/blob/fd7c7d3fabb56b480c15f0ccfe2c39dd436cdf7e/src/type-defs/people.graphql",
      "content": "type User {\n  canBuyPro: Int!\n  description: String!\n  firstPhotoDate: String!\n  hasStats: String!\n  iconFarm: Int!\n  iconServer: String!\n  id: String!\n  isPro: Int!\n  joinedDate: String!\n  location: String!\n  mobileUrl: String!\n  nsid: String!\n  pathAlias: String!\n  photoCount: Int!\n  photosUrl: String!\n  profileUrl: String!\n  realname: String!\n  timezone: String\n  username: String!\n}\n\ntype Query {\n  # Get informtion about a user\n  findUser(\n    # The username of the user to lookup\n    username: String!\n  ): User!\n\n  # Return photos from the given user's photostream.\n  # Only photos visible to the calling user will be returned\n  # Authenticated\n  # photostream(\n  #   # The NSID of the user who's photos to return.\n  #   # A value of 'me' will return the calling user's photos.\n  #   userId: String!\n  #\n  #   # Safe search setting:\n  #   # 1 for safe, 2 for moderate, 3 for restricted\n  #   safe_search: Int\n  #\n  #   # Minimum upload date\n  #   # Photos with an upload date greater than or equal to this value will be returned.\n  #   # The date should be a unix timestamp\n  #   min_upload_date: Int\n  #\n  #   # Maximum upload date\n  #   # Photos with an upload date less than or equal to this value will be returned\n  #   # The date should be a unix timestamp\n  #   max_upload_date: Int\n  #\n  #   # Minimum taken date\n  #   #Â Photos with an taken date greater than or equal to this value will be returned\n  #   # The date should be a mysql datetime\n  #   min_taken_date: String\n  #\n  #   # Maximum taken date\n  #   # Photos with an taken date less than or equal to this value will be returned\n  #   # The date should be a mysql datetime\n  #   max_taken_date: String\n  #\n  #   # Content type setting:\n  #   # 1 for photos only, 2 for screenshots only, 3 for 'other' only, 4 for photos and screenshots\n  #   # 5 for screenshots and 'other'm 6 for photos and 'other',\n  #   # 7 for photos, screenshots, and 'other' (all)\n  #   content_type: Int\n  #\n  #   # Return photos only matching a certain privacy level.\n  #   # This only applies when making an authenticated call to view photos you own.\n  #   # Valid values are:\n  #   # 1 public photos, 2 private photos visible to friends, 3 private photos visible to family\n  #   # 4 private photos visible to friends & family, 5 completely private photos\n  #   privacy_filter: Int\n  #\n  #   # A comma-delimited list of extra information to fetch for each returned record.\n  #   # Currently supported fiels are:\n  #   # description, license, date_upload, date_taken, owner_name, icon_server, original_format,\n  #   # last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t,\n  #   # url_s, url_q, url_m, url_n, url_z, url_c, url_l, url_o\n  #   extras: [String!]\n  #\n  #   # Numer of photos to return per page\n  #   # Default 100\n  #   # Max 500\n  #   per_page: Int\n  #\n  #   # The page of results to return\n  #   # Default 1\n  #   page: Int\n  # ): [FlickrPhoto!]!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 2,
      "containsCycle": false,
      "polynomialLevel": 0,
      "numDefinitions": 2
    },
    {
      "name": "camera.graphql",
      "path": "src/type-defs/camera.graphql",
      "sha": "2bdd45ef5efbc27478c1c15d4b2815b4740ff44c",
      "url": "https://api.github.com/repositories/105125081/contents/src/type-defs/camera.graphql?ref=fd7c7d3fabb56b480c15f0ccfe2c39dd436cdf7e",
      "git_url": "https://api.github.com/repositories/105125081/git/blobs/2bdd45ef5efbc27478c1c15d4b2815b4740ff44c",
      "html_url": "https://github.com/domjtalbot/graphql-schema-flickr/blob/fd7c7d3fabb56b480c15f0ccfe2c39dd436cdf7e/src/type-defs/camera.graphql",
      "content": "# Camera brand\ntype CameraBrand {\n  # Brand ID\n  id: String!\n\n  # Brnad name\n  name: String!\n}\n\n# Camera model\ntype CameraModel {\n  # Model ID\n  id: String!\n\n  # Image of the camera\n  # Not all camera models have an image\n  image: String\n\n  # Size of camera screen\n  # Not all camera models have a screen\n  lcdScreenSize: String\n\n  # Number of megapixels camera model has\n  megapixels: String\n\n  # The type of memory the camera uses\n  memoryType: String\n\n  # Camera model name\n  name: String!\n}\n\ntype Query {\n  # All brands of camera that Flickr knows about\n  # Authentication: none\n  allCameraBrands: [CameraBrand!]!\n\n  # Get models of camera\n  cameraModels(\n    # Camera brand\n    brand: String!\n  ): [CameraModel!]!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 3,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 3
    }
  ],
  "metrics": {
    "created_at": "2017-09-28T08:51:07Z",
    "updated_at": "2019-04-05T09:47:13Z",
    "pushed_at": "2017-10-25T20:31:41Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": false,
    "license": "mit",
    "pull_requests": 4,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 4,
    "releases": 5,
    "stargazers": 0
  }
}