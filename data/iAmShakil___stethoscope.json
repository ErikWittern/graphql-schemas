{
  "repo_name": "stethoscope",
  "repo_full_name": "iamshakil/stethoscope",
  "repo_owner": "iAmShakil",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema.graphql",
      "sha": "99b9602167ebe7276031708da0374b1b6e50ff96",
      "url": "https://api.github.com/repositories/140136979/contents/schema.graphql?ref=636d9bc408fe19e1319e1b3529f40d6ac28d9946",
      "git_url": "https://api.github.com/repositories/140136979/git/blobs/99b9602167ebe7276031708da0374b1b6e50ff96",
      "html_url": "https://github.com/iAmShakil/stethoscope/blob/636d9bc408fe19e1319e1b3529f40d6ac28d9946/schema.graphql",
      "content": "# Semver string e.g. \"<=5.0.0\"\nscalar Semver\n\ntype Query {\n  device: Device\n  policy: Policy\n}\n\ntype Policy {\n  validate(policy:DevicePolicy): PolicyResult!\n}\n\n# Available information about user device\ntype Device {\n  # machine information\n  deviceId: String\n  # name of device\n  deviceName: String # system_info\n  # standard, less-friendly name of platform\n  platform: String\n  # friendly name of platform\n  platformName: String\n  # operating system version\n  osVersion: String\n  # os build\n  osBuild: String\n  # os name\n  osName: String\n  # device firmware version\n  firmwareVersion: String\n  # device model\n  hardwareModel: String\n  # friendly name of model\n  friendlyName: String\n  # device serial number\n  hardwareSerial: String\n  # installed applications\n  applications: [Application]\n  # current IP addresses\n  ipAddresses: [IpAddress]\n  # interface_details\n  macAddresses: [NetworkInterface]\n  # version of the stethoscope application\n  stethoscopeVersion: String\n  # osquery version (platform specific)\n  osqueryVersion: String\n  # available hard disks\n  disks: [Disk]\n  security(policy:DevicePolicy): SecurityInfo\n  policyResult: FeatureState\n}\n\ntype SecurityInfo {\n  osVersion: FeatureState\n  # current firewall state\n  firewall: FeatureState\n  # whether automatic updates are enabled\n  automaticUpdates: FeatureState\n  # if OS specific disk encryption is enabled\n  diskEncryption: FeatureState\n  # if screen lock is enabled\n  screenLock: FeatureState\n  # remote login setting\n  remoteLogin: FeatureState\n  # whether applications auto update\n  automaticAppUpdates: FeatureState\n  # whether automatic security updates are enabled\n  automaticSecurityUpdates: FeatureState\n  # whether OS Updates are automatically downloaded (Mac only)\n  automaticOsUpdates: FeatureState\n  # whether software updates are downloaded in background (Mac only)\n  automaticDownloadUpdates: FeatureState\n  # whether system config data is set to auto update\n  automaticConfigDataInstall: FeatureState\n  # Windows\n  publicFirewall: FeatureState\n  # Windows\n  privateFirewall: FeatureState\n  # Windows\n  domainFirewall: FeatureState\n}\n\ntype Application {\n  name: String!\n  displayName: String\n  version: String!\n  lastOpenedTime: String\n  installDate: String\n}\n\n# A DevicePolicy is a description of the desired state of a set of pre-selected device features\ninput DevicePolicy {\n  # current operation system version, use [semver](https://www.nodesource.com/blog/semver-a-primer/) strings to define requirement\n  osVersion: PlatformBracketRequirement\n  # whether or not software firewall is required\n  firewall: RequirementOption\n  # whether or not disk encryption is required (this is not a comprehensive check as users are free to employ encyption that isn't baked into the OS)\n  diskEncryption: RequirementOption\n  # whether or not automatic updates need to be enabled\n  automaticUpdates: RequirementOption\n  # whether or not screen lock is required (\"IF_SUPPORTED\" is recommended)\n  screenLock: RequirementOption\n  # remote login status\n  remoteLogin: RequirementOption\n  # require applications to be installed\n  requiredApplications: [AppRequirement]\n  # ban applications from being installed on user's machine\n  bannedApplications: [AppRequirement]\n  # placeholder for suggested applications\n  suggestedApplications: [AppRequirement]\n  # add extensions\n  stethoscopeVersion: Semver\n  # [WINDOWS ONLY] optional maximum screenlock timeout (in seconds)\n  windowsMaxScreenLockTimeout: Int\n}\n\n# Defines a requirement for an installed application\ninput AppRequirement {\n  # required application name\n  name: String!\n  # optional application version requirement\n  version: Semver\n  # optional platform if only required for specific OS\n  platform: PlatformStringRequirement\n  # controls whether regex or equality check is performed against application name\n  exactMatch: Boolean\n  # controls whether bin packages are checked (homebrew, chocolatey, etc)\n  includePackages: Boolean\n  # install URL\n  url: String\n  # explanation to show user\n  description: String\n}\n\ntype PolicyResult {\n  # overall policy result\n  status: FeatureState\n  # status indicating whether osVersion passed test\n  osVersion: FeatureState\n  # current firewall state\n  firewall: FeatureState\n  # whether automatic updates are enabled\n  automaticUpdates: FeatureState\n  # if OS specific disk encryption is enabled\n  diskEncryption: FeatureState\n  # if screen lock is enabled\n  screenLock: FeatureState\n  # remote login setting\n  remoteLogin: FeatureState\n  # whether or not all requiredApplications are installed\n  requiredApplications: [ApplicationFeatureState]\n  # whether or not any bannedApplications are installed\n  bannedApplications: [ApplicationFeatureState]\n  # placeholder for suggested applications\n  suggestedApplications: [ApplicationFeatureState]\n  # stethoscope is up-to-date\n  stethoscopeVersion: FeatureState\n}\n\ntype Security {\n  # operating system version requirement\n  osVersion(requirement: PlatformBracketRequirement!): Boolean!\n  firewall(requirement: RequirementOption!): Boolean!\n  diskEncryption(requirement: RequirementOption!): Boolean!\n  screenLock(requirement: RequirementOption!): Boolean!\n  remoteLogin(requirement: RequirementOption!): Boolean!\n  requiredApplications(requirement: RequirementOption!): [Boolean!]!\n  bannedApplications(requirement: RequirementOption!): [Boolean!]!\n  suggestedApplications(requirement: RequirementOption!): [Boolean!]!\n  stethoscopeVersion(requirement: Semver!): Boolean!\n  automaticUpdates(requirment: RequirementOption!): Boolean!\n  automaticOsUpdates(requirement: RequirementOption!): Boolean!\n  automaticSecurityUpdates(requirement: RequirementOption!): Boolean!\n  automaticAppUpdates(requirement: RequirementOption!): Boolean!\n  automaticDownloadUpdates(requirement: RequirementOption!): Boolean!\n  automaticConfigDataInstall(requirement: RequirementOption!): Boolean!\n  publicFirewall(requirement: RequirementOption!): Boolean!\n  privateFirewall(requirement: RequirementOption!): Boolean!\n  domainFirewall(requirement: RequirementOption!): Boolean!\n}\n\ntype IpAddress {\n  interface: String\n  address: String\n  mask: String\n  broadcast: String\n}\n\n# describes a network interface on a device\ntype NetworkInterface {\n  interface: String\n  type: String\n  mac: String\n  physicalAdapter: Boolean\n  # the last time network interface was updated\n  lastChange: String\n}\n\n# describes a hard disk on a device\ntype Disk {\n  name: String\n  uuid: String\n  label: String\n  encrypted: Boolean\n}\n\ntype ApplicationFeatureState {\n  name: String\n  status: FeatureState\n}\n\n# a platform string requirement defines a target string value for specific platforms\ninput PlatformStringRequirement {\n  darwin: Semver\n  win32: Semver\n  linux: Semver\n  all: Semver\n}\n\ninput PlatformBracketRequirement {\n  darwin: VersionBracket\n  win32: VersionBracket\n  linux: VersionBracket\n  all: VersionBracket\n}\n\n# a platform boolean requirement defines a target boolean value for specific platforms\ninput PlatformBoolRequirement {\n  darwin: Boolean\n  win32: Boolean\n  linux: Boolean\n  all: Boolean\n}\n\ninput VersionBracket {\n  ok: Semver\n  nudge: Semver\n}\n\n# possible states that a device 'feature' can be in\nenum FeatureState {\n  PASS\n  FAIL\n  NUDGE\n  ON\n  OFF\n  UNKNOWN\n}\n\n# valid values for a given policy requirement\nenum RequirementOption {\n  ALWAYS\n  SUGGESTED\n  IF_SUPPORTED\n  NEVER\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 11,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 20
    }
  ],
  "metrics": {
    "created_at": "2018-07-08T04:23:04Z",
    "updated_at": "2018-07-08T04:27:04Z",
    "pushed_at": "2018-07-08T04:26:50Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "apache-2.0",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}