{
  "repo_name": "cocktail-list-api",
  "repo_full_name": "watkinshughes/cocktail-list-api",
  "repo_owner": "watkinshughes",
  "repo_description": "Cocktail list API built with Strapi",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "plugins/graphql/config/generated/schema.graphql",
      "sha": "af8531d1b9c71b2d86d686e870bd9fc65435a828",
      "url": "https://api.github.com/repositories/173535268/contents/plugins/graphql/config/generated/schema.graphql?ref=46e49e70deafecb707892d54c86e827e9dbfd8fb",
      "git_url": "https://api.github.com/repositories/173535268/git/blobs/af8531d1b9c71b2d86d686e870bd9fc65435a828",
      "html_url": "https://github.com/watkinshughes/cocktail-list-api/blob/46e49e70deafecb707892d54c86e827e9dbfd8fb/plugins/graphql/config/generated/schema.graphql",
      "content": "type Cocktail {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  glass: String\n  category: String\n  garnish: String\n  preparation: String\n  ingredients: String!\n  image: UploadFile\n}\n\ntype CocktailAggregator {\n  count: Int\n}\n\ntype CocktailConnection {\n  values: [Cocktail]\n  groupBy: CocktailGroupBy\n  aggregate: CocktailAggregator\n}\n\ntype CocktailConnection_id {\n  key: ID\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionCategory {\n  key: String\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionCreatedAt {\n  key: DateTime\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionGarnish {\n  key: String\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionGlass {\n  key: String\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionImage {\n  key: ID\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionIngredients {\n  key: String\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionName {\n  key: String\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionPreparation {\n  key: String\n  connection: CocktailConnection\n}\n\ntype CocktailConnectionUpdatedAt {\n  key: DateTime\n  connection: CocktailConnection\n}\n\ntype CocktailGroupBy {\n  _id: [CocktailConnection_id]\n  createdAt: [CocktailConnectionCreatedAt]\n  updatedAt: [CocktailConnectionUpdatedAt]\n  name: [CocktailConnectionName]\n  glass: [CocktailConnectionGlass]\n  category: [CocktailConnectionCategory]\n  garnish: [CocktailConnectionGarnish]\n  preparation: [CocktailConnectionPreparation]\n  ingredients: [CocktailConnectionIngredients]\n  image: [CocktailConnectionImage]\n}\n\ninput CocktailInput {\n  name: String!\n  glass: String\n  category: String\n  garnish: String\n  preparation: String\n  ingredients: String!\n  image: ID\n}\n\ninput createCocktailInput {\n  data: CocktailInput\n}\n\ntype createCocktailPayload {\n  cocktail: Cocktail\n}\n\ninput createRoleInput {\n  data: RoleInput\n}\n\ntype createRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput createUserInput {\n  data: UserInput\n}\n\ntype createUserPayload {\n  user: UsersPermissionsUser\n}\n\n\"\"\"\nThe `DateTime` scalar represents a date and time following the ISO 8601 standard\n\"\"\"\nscalar DateTime\n\ninput deleteCocktailInput {\n  where: InputID\n}\n\ntype deleteCocktailPayload {\n  cocktail: Cocktail\n}\n\ninput deleteRoleInput {\n  where: InputID\n}\n\ntype deleteRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput deleteUserInput {\n  where: InputID\n}\n\ntype deleteUserPayload {\n  user: UsersPermissionsUser\n}\n\ninput FileInput {\n  name: String!\n  hash: String!\n  sha256: String\n  ext: String\n  mime: String!\n  size: String!\n  url: String!\n  provider: String!\n  public_id: String\n  related: [ID]\n}\n\ninput InputID {\n  id: ID!\n}\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n\nunion Morph = UsersPermissionsMe | UsersPermissionsMeRole | Cocktail | createCocktailPayload | updateCocktailPayload | deleteCocktailPayload | CocktailConnection | CocktailAggregator | CocktailGroupBy | CocktailConnection_id | CocktailConnectionCreatedAt | CocktailConnectionUpdatedAt | CocktailConnectionName | CocktailConnectionGlass | CocktailConnectionCategory | CocktailConnectionGarnish | CocktailConnectionPreparation | CocktailConnectionIngredients | CocktailConnectionImage | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole\n\ntype Mutation {\n  createCocktail(input: createCocktailInput): createCocktailPayload\n  updateCocktail(input: updateCocktailInput): updateCocktailPayload\n  deleteCocktail(input: deleteCocktailInput): deleteCocktailPayload\n\n  \"\"\"Create a new role\"\"\"\n  createRole(input: createRoleInput): createRolePayload\n\n  \"\"\"Update an existing role\"\"\"\n  updateRole(input: updateRoleInput): updateRolePayload\n\n  \"\"\"Delete an existing role\"\"\"\n  deleteRole(input: deleteRoleInput): deleteRolePayload\n  createUser(input: createUserInput): createUserPayload\n  updateUser(input: updateUserInput): updateUserPayload\n  deleteUser(input: deleteUserInput): deleteUserPayload\n  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!\n}\n\ntype Query {\n  cocktail(id: ID!): Cocktail\n  cocktails(sort: String, limit: Int, start: Int, where: JSON): [Cocktail]\n  cocktailsConnection(sort: String, limit: Int, start: Int, where: JSON): CocktailConnection\n  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]\n  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection\n  role(id: ID!): UsersPermissionsRole\n\n  \"\"\"\n  Retrieve all the existing roles. You can't apply filters on this query.\n  \"\"\"\n  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]\n  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection\n  user(id: ID!): UsersPermissionsUser\n  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]\n  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection\n  me: UsersPermissionsMe\n}\n\ninput RoleInput {\n  name: String!\n  description: String\n  type: String\n  permissions: [ID]\n  users: [ID]\n}\n\ninput updateCocktailInput {\n  where: InputID\n  data: CocktailInput\n}\n\ntype updateCocktailPayload {\n  cocktail: Cocktail\n}\n\ninput updateRoleInput {\n  where: InputID\n  data: RoleInput\n}\n\ntype updateRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput updateUserInput {\n  where: InputID\n  data: UserInput\n}\n\ntype updateUserPayload {\n  user: UsersPermissionsUser\n}\n\n\"\"\"The `Upload` scalar type represents a file upload.\"\"\"\nscalar Upload\n\ntype UploadFile {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  hash: String!\n  sha256: String\n  ext: String\n  mime: String!\n  size: String!\n  url: String!\n  provider: String!\n  public_id: String\n  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]\n}\n\ntype UploadFileAggregator {\n  count: Int\n}\n\ntype UploadFileConnection {\n  values: [UploadFile]\n  groupBy: UploadFileGroupBy\n  aggregate: UploadFileAggregator\n}\n\ntype UploadFileConnection_id {\n  key: ID\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionCreatedAt {\n  key: DateTime\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionExt {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionHash {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionMime {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionName {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionProvider {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionPublic_id {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionSha256 {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionSize {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionUpdatedAt {\n  key: DateTime\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionUrl {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileGroupBy {\n  _id: [UploadFileConnection_id]\n  createdAt: [UploadFileConnectionCreatedAt]\n  updatedAt: [UploadFileConnectionUpdatedAt]\n  name: [UploadFileConnectionName]\n  hash: [UploadFileConnectionHash]\n  sha256: [UploadFileConnectionSha256]\n  ext: [UploadFileConnectionExt]\n  mime: [UploadFileConnectionMime]\n  size: [UploadFileConnectionSize]\n  url: [UploadFileConnectionUrl]\n  provider: [UploadFileConnectionProvider]\n  public_id: [UploadFileConnectionPublic_id]\n}\n\ninput UserInput {\n  username: String!\n  email: String!\n  provider: String\n  confirmed: Boolean\n  blocked: Boolean\n  role: ID\n}\n\ntype UsersPermissionsMe {\n  _id: ID!\n  username: String!\n  email: String!\n  confirmed: Boolean\n  blocked: Boolean\n  role: UsersPermissionsMeRole\n}\n\ntype UsersPermissionsMeRole {\n  _id: ID!\n  name: String!\n  description: String\n  type: String\n}\n\ntype UsersPermissionsPermission {\n  _id: ID!\n  type: String!\n  controller: String!\n  action: String!\n  enabled: Boolean!\n  policy: String\n  role: UsersPermissionsRole\n}\n\ntype UsersPermissionsRole {\n  _id: ID!\n  name: String!\n  description: String\n  type: String\n  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]\n  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]\n}\n\ntype UsersPermissionsRoleAggregator {\n  count: Int\n}\n\ntype UsersPermissionsRoleConnection {\n  values: [UsersPermissionsRole]\n  groupBy: UsersPermissionsRoleGroupBy\n  aggregate: UsersPermissionsRoleAggregator\n}\n\ntype UsersPermissionsRoleConnection_id {\n  key: ID\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionDescription {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionName {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionType {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleGroupBy {\n  _id: [UsersPermissionsRoleConnection_id]\n  name: [UsersPermissionsRoleConnectionName]\n  description: [UsersPermissionsRoleConnectionDescription]\n  type: [UsersPermissionsRoleConnectionType]\n}\n\ntype UsersPermissionsUser {\n  _id: ID!\n  username: String!\n  email: String!\n  provider: String\n  confirmed: Boolean\n  blocked: Boolean\n  role: UsersPermissionsRole\n}\n\ntype UsersPermissionsUserAggregator {\n  count: Int\n}\n\ntype UsersPermissionsUserConnection {\n  values: [UsersPermissionsUser]\n  groupBy: UsersPermissionsUserGroupBy\n  aggregate: UsersPermissionsUserAggregator\n}\n\ntype UsersPermissionsUserConnection_id {\n  key: ID\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionBlocked {\n  key: Boolean\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionConfirmed {\n  key: Boolean\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionEmail {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionProvider {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionRole {\n  key: ID\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionUsername {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserGroupBy {\n  _id: [UsersPermissionsUserConnection_id]\n  username: [UsersPermissionsUserConnectionUsername]\n  email: [UsersPermissionsUserConnectionEmail]\n  provider: [UsersPermissionsUserConnectionProvider]\n  confirmed: [UsersPermissionsUserConnectionConfirmed]\n  blocked: [UsersPermissionsUserConnectionBlocked]\n  role: [UsersPermissionsUserConnectionRole]\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 63,
      "containsCycle": true,
      "numDefinitions": 81
    }
  ],
  "metrics": {
    "created_at": "2019-03-03T05:35:13Z",
    "updated_at": "2019-03-03T17:35:42Z",
    "pushed_at": "2019-03-03T05:36:02Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}