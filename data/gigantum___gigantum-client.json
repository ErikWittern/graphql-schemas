{
  "repo_name": "gigantum-client",
  "repo_full_name": "gigantum/gigantum-client",
  "repo_owner": "gigantum",
  "repo_description": "Source and build tools for the Gigantum Client",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "ui/schema.graphql",
      "sha": "56ee0069239cf6855b2f69b6c69aa32cf49342b8",
      "url": "https://api.github.com/repositories/148334831/contents/ui/schema.graphql?ref=f36ca92c7cd14e0f3a3c728ea697b97c045e40d3",
      "git_url": "https://api.github.com/repositories/148334831/git/blobs/56ee0069239cf6855b2f69b6c69aa32cf49342b8",
      "html_url": "https://github.com/gigantum/gigantum-client/blob/f36ca92c7cd14e0f3a3c728ea697b97c045e40d3/ui/schema.graphql",
      "content": "# source: http://localhost:10000/api/labbook/\n# timestamp: Tue Apr 09 2019 10:43:58 GMT-0400 (Eastern Daylight Time)\n\nschema {\n  query: LabbookQuery\n  mutation: LabbookMutations\n}\n\n\"\"\"Enumeration representing the modifiers on Activity Detail Records\"\"\"\nenum ActivityAction {\n  NOACTION\n  CREATE\n  EDIT\n  DELETE\n  EXECUTE\n}\n\n\"\"\"A Connection for paging through activity recrods\"\"\"\ntype ActivityConnection {\n  pageInfo: PageInfo!\n  edges: [ActivityEdge]!\n}\n\n\"\"\"Container for Activity Detail Records\"\"\"\ntype ActivityDetailObject implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  key: String!\n  data: [[String]]\n  type: ActivityDetailType\n  action: ActivityAction\n  show: Boolean\n  importance: Int\n  tags: [String]\n}\n\n\"\"\"Enumeration representing the type of Activity Detail Record\"\"\"\nenum ActivityDetailType {\n  DATASET\n  NOTE\n  LABBOOK\n  INPUT_DATA\n  CODE\n  CODE_EXECUTED\n  RESULT\n  OUTPUT_DATA\n  ENVIRONMENT\n}\n\ntype ActivityEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: ActivityRecordObject\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"Container for Activity Records\"\"\"\ntype ActivityRecordObject implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  commit: String!\n  linkedCommit: String\n  message: String\n  detailObjects: [ActivityDetailObject]\n  type: ActivityType\n  show: Boolean\n  importance: Int\n  tags: [String]\n  timestamp: DateTime\n  username: String\n  email: String\n}\n\n\"\"\"Enumeration representing the type of Activity Record\"\"\"\nenum ActivityType {\n  NOTE\n  ENVIRONMENT\n  CODE\n  INPUT_DATA\n  OUTPUT_DATA\n  MILESTONE\n  BRANCH\n  LABBOOK\n  DATASET\n}\n\ninput AddCustomDockerInput {\n  owner: String!\n  labbookName: String!\n  dockerContent: String!\n  clientMutationId: String\n}\n\ntype AddCustomDockerPayload {\n  updatedEnvironment: Environment\n  clientMutationId: String\n}\n\ninput AddDatasetCollaboratorInput {\n  owner: String!\n  datasetName: String!\n  username: String!\n  permissions: String!\n  clientMutationId: String\n}\n\ntype AddDatasetCollaboratorPayload {\n  updatedDataset: Dataset\n  clientMutationId: String\n}\n\ninput AddDatasetFileInput {\n  owner: String!\n  datasetName: String!\n  filePath: String!\n  chunkUploadParams: ChunkUploadInput!\n  transactionId: String!\n  clientMutationId: String\n}\n\n\"\"\"\nMutation to add a file to a labbook. File should be sent in the\n`uploadFile` key as a multi-part/form upload.\nfile_path is the relative path in the dataset.\n\"\"\"\ntype AddDatasetFilePayload {\n  newDatasetFileEdge: DatasetFileEdge\n  clientMutationId: String\n}\n\ninput AddLabbookCollaboratorInput {\n  owner: String!\n  labbookName: String!\n  username: String!\n  permissions: String!\n  clientMutationId: String\n}\n\ntype AddLabbookCollaboratorPayload {\n  updatedLabbook: Labbook\n  clientMutationId: String\n}\n\ninput AddLabbookFavoriteInput {\n  owner: String!\n  labbookName: String!\n  section: String!\n  key: String!\n  description: String\n  isDir: Boolean\n  clientMutationId: String\n}\n\ntype AddLabbookFavoritePayload {\n  newFavoriteEdge: LabbookFavoriteEdge\n  clientMutationId: String\n}\n\ninput AddLabbookFileInput {\n  owner: String!\n  labbookName: String!\n  section: String!\n  filePath: String!\n  chunkUploadParams: ChunkUploadInput!\n  transactionId: String!\n  clientMutationId: String\n}\n\n\"\"\"\nMutation to add a file to a labbook. File should be sent in the\n`uploadFile` key as a multi-part/form upload.\nfile_path is the relative path from the labbook section specified.\n\"\"\"\ntype AddLabbookFilePayload {\n  newLabbookFileEdge: LabbookFileEdge\n  clientMutationId: String\n}\n\ninput AddLabbookRemoteInput {\n  owner: String!\n  labbookName: String!\n  remoteName: String!\n  remoteUrl: String!\n  clientMutationId: String\n}\n\ntype AddLabbookRemotePayload {\n  success: Boolean\n  clientMutationId: String\n}\n\ninput AddPackageComponentsInput {\n  owner: String!\n  labbookName: String!\n  packages: [PackageComponentInput]\n  clientMutationId: String\n}\n\n\"\"\"\nMutation to add or update packages to labbook\n\nYou MUST have previously validated the package information or errors can occur at build time.\nYou MUST include a version, since auto-addition of a package version is done during validation.\n\"\"\"\ntype AddPackageComponentsPayload {\n  newPackageComponentEdges: [PackageComponentEdge]\n  clientMutationId: String\n}\n\n\"\"\"A type that represents a Base Image Environment Component\"\"\"\ntype BaseComponent implements Node {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  schema: Int\n  repository: String!\n  componentId: String!\n  revision: Int!\n  name: String\n  description: String\n  readme: String\n  tags: [String]\n  icon: String\n  osClass: String\n  osRelease: String\n  license: String\n  url: String\n  languages: [String]\n  developmentTools: [String]\n  packageManagers: [String]\n  installedPackages: [String]\n  dockerImageServer: String\n  dockerImageNamespace: String\n  dockerImageRepository: String\n  dockerImageTag: String\n  cudaVersion: String\n}\n\n\"\"\"A Connection for paging through Base components\"\"\"\ntype BaseComponentConnection {\n  pageInfo: PageInfo!\n  edges: [BaseComponentEdge]!\n}\n\ntype BaseComponentEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: BaseComponent\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"Represents a branch in the repo \"\"\"\ntype Branch implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  branchName: String!\n  isActive: Boolean\n  isLocal: Boolean\n  isRemote: Boolean\n  isMergeable: Boolean\n  commitsBehind: Int\n  commitsAhead: Int\n}\n\ninput BuildImageInput {\n  owner: String!\n  labbookName: String!\n  noCache: Boolean\n  clientMutationId: String\n}\n\n\"\"\"Mutator to build a LabBook's Docker Image\"\"\"\ntype BuildImagePayload {\n  environment: Environment\n  backgroundJobKey: String\n  clientMutationId: String\n}\n\ninput CancelBuildInput {\n  owner: String!\n  labbookName: String!\n  clientMutationId: String\n}\n\ntype CancelBuildPayload {\n  buildStopped: Boolean\n  message: String\n  clientMutationId: String\n}\n\n\"\"\"\nInput Object for params needed for a chunked upload\n\nTo use, add a field `chunk_upload_params` to your mutation input\n\"\"\"\ninput ChunkUploadInput {\n  fileSizeKb: Int!\n  chunkSize: Int!\n  totalChunks: Int!\n  chunkIndex: Int!\n  filename: String!\n  uploadId: String!\n}\n\ntype Collaborator implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  collaboratorUsername: String!\n  permission: String!\n}\n\ninput CompleteBatchUploadTransactionInput {\n  owner: String!\n  labbookName: String!\n  transactionId: String!\n  cancel: Boolean\n  rollback: Boolean\n  clientMutationId: String\n}\n\ntype CompleteBatchUploadTransactionPayload {\n  success: Boolean\n  clientMutationId: String\n}\n\ninput CompleteDatasetUploadTransactionInput {\n  owner: String!\n  datasetName: String!\n  transactionId: String!\n  cancel: Boolean\n  rollback: Boolean\n  clientMutationId: String\n}\n\ntype CompleteDatasetUploadTransactionPayload {\n  success: Boolean\n  clientMutationId: String\n}\n\n\"\"\"An enumeration for container image status\"\"\"\nenum ContainerStatus {\n  NOT_RUNNING\n  STARTING\n  RUNNING\n}\n\ninput CreateDatasetInput {\n  name: String!\n  description: String!\n  storageType: String!\n  clientMutationId: String\n}\n\n\"\"\"Mutation for creation of a new Dataset on disk\"\"\"\ntype CreateDatasetPayload {\n  dataset: Dataset\n  clientMutationId: String\n}\n\ninput CreateExperimentalBranchInput {\n  owner: String!\n  labbookName: String!\n  branchName: String!\n  revision: String\n  description: String\n  clientMutationId: String\n}\n\n\"\"\"Mutation to create a local experimental (or Rollback) branch. \"\"\"\ntype CreateExperimentalBranchPayload {\n  labbook: Labbook\n  clientMutationId: String\n}\n\ninput CreateLabbookInput {\n  name: String!\n  description: String!\n  repository: String!\n  baseId: String!\n  revision: Int!\n  isUntracked: Boolean\n  clientMutationId: String\n}\n\n\"\"\"Mutation for creation of a new Labbook on disk\"\"\"\ntype CreateLabbookPayload {\n  labbook: Labbook\n  clientMutationId: String\n}\n\ninput CreateUserNoteInput {\n  owner: String!\n  labbookName: String\n  datasetName: String\n  title: String!\n  body: String\n  tags: [String]\n  clientMutationId: String\n}\n\n\"\"\"\nMutation to create a new user note entry in the activity feed of lab book\n\nThe `linked_commit` is an empty string since there is no linked commit\n\"\"\"\ntype CreateUserNotePayload {\n  newActivityRecordEdge: ActivityEdge\n  clientMutationId: String\n}\n\n\"\"\"\nA type representing a Dataset and all of its contents\n\nDatasets are uniquely identified by both the \"owner\" and the \"name\" of the Dataset\n\"\"\"\ntype Dataset implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  description: String\n  datasetType: DatasetType\n  schemaVersion: Int\n  createdOnUtc: DateTime\n  collaborators: [Collaborator]\n  canManageCollaborators: Boolean\n  modifiedOnUtc: DateTime\n  activityRecords(before: String, after: String, first: Int, last: Int): ActivityConnection\n  allFiles(before: String, after: String, first: Int, last: Int): DatasetFileConnection\n  detailRecord(key: String): ActivityDetailObject\n  detailRecords(keys: [String]): [ActivityDetailObject]\n  visibility: String\n  defaultRemote: String\n  overview: DatasetOverview\n  commitsBehind: Int\n}\n\n\"\"\"A Connection for paging through datasets that exist locally. \"\"\"\ntype DatasetConnection {\n  pageInfo: PageInfo!\n  edges: [DatasetEdge]!\n}\n\ntype DatasetEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: Dataset\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"\nA type representing a file or directory inside the dataset file system.\n\"\"\"\ntype DatasetFile implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  key: String!\n  isDir: Boolean\n  isFavorite: Boolean\n  isLocal: Boolean\n  modifiedAt: Float\n  size: String\n}\n\n\"\"\"A connection for paging through labbook files. \"\"\"\ntype DatasetFileConnection {\n  pageInfo: PageInfo!\n  edges: [DatasetFileEdge]!\n}\n\ntype DatasetFileEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: DatasetFile\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"\nA type simply used as a container to group local and remote Datasets for better relay support\n\nDataset and RemoteDataset objects are uniquely identified by both the \"owner\" and the \"name\" of the Dataset\n\nNOTE: RemoteDatasets require all fields to be explicitly set as there is no current way to asynchronously retrieve\n      the data\n\"\"\"\ntype DatasetList implements Node {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  localById(ids: [String]): [Dataset]\n  localDatasets(orderBy: String = \"name\", sort: String = \"asc\", before: String, after: String, first: Int, last: Int): DatasetConnection\n  remoteDatasets(orderBy: String = \"name\", sort: String = \"asc\", before: String, after: String, first: Int, last: Int): RemoteDatasetConnection\n}\n\n\"\"\"\nA type representing the overview of a Dataset\n    \n\"\"\"\ntype DatasetOverview implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  numFiles: Int\n  totalBytes: String\n  localBytes: String\n  fileTypeDistribution: [String]\n  readme: String\n}\n\n\"\"\"A type that represents a type of Dataset that can be created\"\"\"\ntype DatasetType implements Node {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  name: String\n  storageType: String\n  isManaged: Boolean\n  description: String\n  readme: String\n  tags: [String]\n  icon: String\n  url: String\n}\n\n\"\"\"\nThe `DateTime` scalar type represents a DateTime\nvalue as specified by\n[iso8601](https://en.wikipedia.org/wiki/ISO_8601).\n\"\"\"\nscalar DateTime\n\ninput DeleteDatasetCollaboratorInput {\n  owner: String!\n  datasetName: String!\n  username: String!\n  clientMutationId: String\n}\n\ntype DeleteDatasetCollaboratorPayload {\n  updatedDataset: Dataset\n  clientMutationId: String\n}\n\ninput DeleteDatasetFilesInput {\n  datasetOwner: String!\n  datasetName: String!\n  keys: [String]!\n  clientMutationId: String\n}\n\ntype DeleteDatasetFilesPayload {\n  success: Boolean\n  clientMutationId: String\n}\n\ninput DeleteDatasetInput {\n  owner: String!\n  datasetName: String!\n  local: Boolean\n  remote: Boolean\n  clientMutationId: String\n}\n\n\"\"\"Delete a dataset.\"\"\"\ntype DeleteDatasetPayload {\n  localDeleted: Boolean\n  remoteDeleted: Boolean\n  clientMutationId: String\n}\n\ninput DeleteExperimentalBranchInput {\n  owner: String!\n  labbookName: String!\n  branchName: String!\n  deleteLocal: Boolean\n  deleteRemote: Boolean\n  clientMutationId: String\n}\n\n\"\"\"Delete a feature/rollback branch. Fails for any other attempt.\"\"\"\ntype DeleteExperimentalBranchPayload {\n  labbook: Labbook\n  clientMutationId: String\n}\n\ninput DeleteLabbookCollaboratorInput {\n  owner: String!\n  labbookName: String!\n  username: String!\n  clientMutationId: String\n}\n\ntype DeleteLabbookCollaboratorPayload {\n  updatedLabbook: Labbook\n  clientMutationId: String\n}\n\ninput DeleteLabbookFilesInput {\n  owner: String!\n  labbookName: String!\n  section: String!\n  filePaths: [String]!\n  clientMutationId: String\n}\n\ntype DeleteLabbookFilesPayload {\n  success: Boolean\n  clientMutationId: String\n}\n\ninput DeleteLabbookInput {\n  owner: String!\n  labbookName: String!\n  confirm: Boolean!\n  clientMutationId: String\n}\n\n\"\"\"Delete a labbook from disk. \"\"\"\ntype DeleteLabbookPayload {\n  success: Boolean\n  clientMutationId: String\n}\n\ninput DeleteRemoteLabbookInput {\n  owner: String!\n  labbookName: String!\n  confirm: Boolean!\n  clientMutationId: String\n}\n\n\"\"\"Delete a labbook from the remote repository.\"\"\"\ntype DeleteRemoteLabbookPayload {\n  success: Boolean\n  clientMutationId: String\n}\n\ninput DownloadDatasetFilesInput {\n  datasetOwner: String!\n  datasetName: String!\n  labbookOwner: String\n  labbookName: String\n  allKeys: Boolean\n  keys: [String]\n  clientMutationId: String\n}\n\ntype DownloadDatasetFilesPayload {\n  backgroundJobKey: String\n  clientMutationId: String\n}\n\n\"\"\"A type that represents the Environment for a LabBook\"\"\"\ntype Environment implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  imageStatus: ImageStatus\n  containerStatus: ContainerStatus\n  base: BaseComponent\n  packageDependencies(before: String, after: String, first: Int, last: Int): PackageComponentConnection\n  dockerSnippet: String\n}\n\ninput ExportDatasetInput {\n  owner: String!\n  datasetName: String!\n  clientMutationId: String\n}\n\ntype ExportDatasetPayload {\n  jobKey: String\n  clientMutationId: String\n}\n\ninput ExportLabbookInput {\n  owner: String!\n  labbookName: String!\n  clientMutationId: String\n}\n\ntype ExportLabbookPayload {\n  jobKey: String\n  clientMutationId: String\n}\n\ninput FetchDatasetEdgeInput {\n  owner: String!\n  datasetName: String!\n  clientMutationId: String\n}\n\ntype FetchDatasetEdgePayload {\n  newDatasetEdge: DatasetEdge\n  clientMutationId: String\n}\n\ninput FetchLabbookEdgeInput {\n  owner: String!\n  labbookName: String!\n  clientMutationId: String\n}\n\ntype FetchLabbookEdgePayload {\n  newLabbookEdge: LabbookEdge\n  clientMutationId: String\n}\n\n\"\"\"\nAn interface for Objects backended with git repositories (LabBook and Datasets)\n\"\"\"\ninterface GitRepository {\n  owner: String!\n  name: String!\n}\n\n\"\"\"An enumeration for Docker image status\"\"\"\nenum ImageStatus {\n  DOES_NOT_EXIST\n  BUILD_IN_PROGRESS\n  BUILD_QUEUED\n  EXISTS\n  STALE\n  BUILD_FAILED\n}\n\ninput ImportDatasetInput {\n  chunkUploadParams: ChunkUploadInput!\n  clientMutationId: String\n}\n\ntype ImportDatasetPayload {\n  importJobKey: String\n  clientMutationId: String\n}\n\ninput ImportLabbookInput {\n  chunkUploadParams: ChunkUploadInput!\n  clientMutationId: String\n}\n\ntype ImportLabbookPayload {\n  importJobKey: String\n  clientMutationId: String\n}\n\ninput ImportRemoteDatasetInput {\n  owner: String!\n  datasetName: String!\n  remoteUrl: String!\n  clientMutationId: String\n}\n\ntype ImportRemoteDatasetPayload {\n  newDatasetEdge: DatasetEdge\n  clientMutationId: String\n}\n\ninput ImportRemoteLabbookInput {\n  owner: String!\n  labbookName: String!\n  remoteUrl: String!\n  clientMutationId: String\n}\n\ntype ImportRemoteLabbookPayload {\n  jobKey: String\n  clientMutationId: String\n}\n\n\"\"\"\nA query to get the status of a background task launched with the Dispatcher\n\"\"\"\ntype JobStatus implements Node {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  jobKey: String\n  status: String\n  jobMetadata: String\n  failureMessage: String\n  startedAt: String\n  finishedAt: String\n  result: String\n}\n\n\"\"\"\nA Connection for paging through all background jobs the system is aware of. \n\"\"\"\ntype JobStatusConnection {\n  pageInfo: PageInfo!\n  edges: [JobStatusEdge]!\n}\n\ntype JobStatusEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: JobStatus\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"\nA type representing a LabBook and all of its contents\n\nLabBooks are uniquely identified by both the \"owner\" and the \"name\" of the LabBook\n\"\"\"\ntype Labbook implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  description: String\n  schemaVersion: Int\n  isDeprecated: Boolean\n  shouldMigrate: Boolean\n  sizeBytes: String\n  activeBranchName: String\n  workspaceBranchName: String\n  branches: [Branch]\n  defaultRemote: String\n  creationDateUtc: DateTime\n  modifiedOnUtc: DateTime\n  collaborators: [Collaborator]\n  canManageCollaborators: Boolean\n  isRepoClean: Boolean\n  environment: Environment\n  overview: LabbookOverview\n  code: LabbookSection\n  input: LabbookSection\n  output: LabbookSection\n  activityRecords(before: String, after: String, first: Int, last: Int): ActivityConnection\n  detailRecord(key: String): ActivityDetailObject\n  detailRecords(keys: [String]): [ActivityDetailObject]\n  backgroundJobs: [JobStatus]\n  packages(packageInput: [PackageComponentInput]): [PackageComponent]\n  visibility: String\n  linkedDatasets: [Dataset]\n}\n\n\"\"\"A Connection for paging through labbooks that exist locally. \"\"\"\ntype LabbookConnection {\n  pageInfo: PageInfo!\n  edges: [LabbookEdge]!\n}\n\ntype LabbookEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: Labbook\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"\nA type representing a file or directory that has been favorited in the labbook file system.\n\"\"\"\ntype LabbookFavorite implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  section: String!\n  key: String!\n  index: Int\n  description: String\n  associatedLabbookFileId: String\n  isDir: Boolean\n}\n\n\"\"\"A connection for paging through labbook favorites. \"\"\"\ntype LabbookFavoriteConnection {\n  pageInfo: PageInfo!\n  edges: [LabbookFavoriteEdge]!\n}\n\ntype LabbookFavoriteEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: LabbookFavorite\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"\nA type representing a file or directory inside the labbook file system.\n\"\"\"\ntype LabbookFile implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  section: String!\n  key: String!\n  isDir: Boolean\n  isFavorite: Boolean\n  modifiedAt: Float\n  size: String\n}\n\n\"\"\"A connection for paging through labbook files. \"\"\"\ntype LabbookFileConnection {\n  pageInfo: PageInfo!\n  edges: [LabbookFileEdge]!\n}\n\ntype LabbookFileEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: LabbookFile\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"\nA type simply used as a container to group local and remote LabBooks for better relay support\n\nLabbook and RemoteLabbook objects are uniquely identified by both the \"owner\" and the \"name\" of the LabBook\n\nNOTE: RemoteLabbooks require all fields to be explicitly set as there is no current way to asynchronously retrieve\n      the data\n\"\"\"\ntype LabbookList implements Node {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  localById(ids: [String]): [Labbook]\n  localLabbooks(orderBy: String = \"name\", sort: String = \"asc\", before: String, after: String, first: Int, last: Int): LabbookConnection\n  remoteLabbooks(orderBy: String = \"name\", sort: String = \"asc\", before: String, after: String, first: Int, last: Int): RemoteLabbookConnection\n}\n\n\"\"\"Entry point for all graphql mutations\"\"\"\ntype LabbookMutations {\n  buildImage(input: BuildImageInput!): BuildImagePayload\n  cancelBuild(input: CancelBuildInput!): CancelBuildPayload\n  startContainer(input: StartContainerInput!): StartContainerPayload\n  stopContainer(input: StopContainerInput!): StopContainerPayload\n  startDevTool(input: StartDevToolInput!): StartDevToolPayload\n  addPackageComponents(input: AddPackageComponentsInput!): AddPackageComponentsPayload\n  removePackageComponents(input: RemovePackageComponentsInput!): RemovePackageComponentsPayload\n  addCustomDocker(input: AddCustomDockerInput!): AddCustomDockerPayload\n  removeCustomDocker(input: RemoveCustomDockerInput!): RemoveCustomDockerPayload\n  importLabbook(input: ImportLabbookInput!): ImportLabbookPayload\n  exportLabbook(input: ExportLabbookInput!): ExportLabbookPayload\n  importRemoteLabbook(input: ImportRemoteLabbookInput!): ImportRemoteLabbookPayload\n  deleteRemoteLabbook(input: DeleteRemoteLabbookInput!): DeleteRemoteLabbookPayload\n  syncLabbook(input: SyncLabbookInput!): SyncLabbookPayload\n  publishLabbook(input: PublishLabbookInput!): PublishLabbookPayload\n  setVisibility(input: SetVisibilityInput!): SetVisibilityPayload\n  addLabbookRemote(input: AddLabbookRemoteInput!): AddLabbookRemotePayload\n  addCollaborator(input: AddLabbookCollaboratorInput!): AddLabbookCollaboratorPayload\n  deleteCollaborator(input: DeleteLabbookCollaboratorInput!): DeleteLabbookCollaboratorPayload\n  migrateLabbookSchema(input: MigrateLabbookSchemaInput!): MigrateLabbookSchemaPayload\n  createExperimentalBranch(input: CreateExperimentalBranchInput!): CreateExperimentalBranchPayload\n  deleteExperimentalBranch(input: DeleteExperimentalBranchInput!): DeleteExperimentalBranchPayload\n  mergeFromBranch(input: MergeFromBranchInput!): MergeFromBranchPayload\n  workonExperimentalBranch(input: WorkonBranchInput!): WorkonBranchPayload\n  importRemoteDataset(input: ImportRemoteDatasetInput!): ImportRemoteDatasetPayload\n  importDataset(input: ImportDatasetInput!): ImportDatasetPayload\n  exportDataset(input: ExportDatasetInput!): ExportDatasetPayload\n  createLabbook(input: CreateLabbookInput!): CreateLabbookPayload\n  deleteLabbook(input: DeleteLabbookInput!): DeleteLabbookPayload\n  setLabbookDescription(input: SetLabbookDescriptionInput!): SetLabbookDescriptionPayload\n  publishDataset(input: PublishDatasetInput!): PublishDatasetPayload\n  resetBranchToRemote(input: ResetBranchToRemoteInput!): ResetBranchToRemotePayload\n  createUserNote(input: CreateUserNoteInput!): CreateUserNotePayload\n  addLabbookFile(input: AddLabbookFileInput!): AddLabbookFilePayload\n  completeBatchUploadTransaction(input: CompleteBatchUploadTransactionInput!): CompleteBatchUploadTransactionPayload\n  moveLabbookFile(input: MoveLabbookFileInput!): MoveLabbookFilePayload\n  deleteLabbookFiles(input: DeleteLabbookFilesInput!): DeleteLabbookFilesPayload\n  makeLabbookDirectory(input: MakeLabbookDirectoryInput!): MakeLabbookDirectoryPayload\n  removeUserIdentity(input: RemoveUserIdentityInput!): RemoveUserIdentityPayload\n  addFavorite(input: AddLabbookFavoriteInput!): AddLabbookFavoritePayload\n  updateFavorite(input: UpdateLabbookFavoriteInput!): UpdateLabbookFavoritePayload\n  removeFavorite(input: RemoveLabbookFavoriteInput!): RemoveLabbookFavoritePayload\n  addDatasetCollaborator(input: AddDatasetCollaboratorInput!): AddDatasetCollaboratorPayload\n  deleteDatasetCollaborator(input: DeleteDatasetCollaboratorInput!): DeleteDatasetCollaboratorPayload\n  writeLabbookReadme(input: WriteLabbookReadmeInput!): WriteLabbookReadmePayload\n  fetchLabbookEdge(input: FetchLabbookEdgeInput!): FetchLabbookEdgePayload\n  createDataset(input: CreateDatasetInput!): CreateDatasetPayload\n  deleteDataset(input: DeleteDatasetInput!): DeleteDatasetPayload\n  addDatasetFile(input: AddDatasetFileInput!): AddDatasetFilePayload\n  completeDatasetUploadTransaction(input: CompleteDatasetUploadTransactionInput!): CompleteDatasetUploadTransactionPayload\n  fetchDatasetEdge(input: FetchDatasetEdgeInput!): FetchDatasetEdgePayload\n  setDatasetVisibility(input: SetDatasetVisibilityInput!): SetDatasetVisibilityPayload\n  syncDataset(input: SyncDatasetInput!): SyncDatasetPayload\n  downloadDatasetFiles(input: DownloadDatasetFilesInput!): DownloadDatasetFilesPayload\n  modifyDatasetLink(input: ModifyDatasetLinkInput!): ModifyDatasetLinkPayload\n  deleteDatasetFiles(input: DeleteDatasetFilesInput!): DeleteDatasetFilesPayload\n  moveDatasetFile(input: MoveDatasetFileInput!): MoveDatasetFilePayload\n  makeDatasetDirectory(input: MakeDatasetDirectoryInput!): MakeDatasetDirectoryPayload\n  writeDatasetReadme(input: WriteDatasetReadmeInput!): WriteDatasetReadmePayload\n  setDatasetDescription(input: SetDatasetDescriptionInput!): SetDatasetDescriptionPayload\n}\n\n\"\"\"\nA type representing the overview of a LabBook\n\nIt contains counts for all package managers, the last 3 activity records with show=True\n\"\"\"\ntype LabbookOverview implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  numAptPackages: Int\n  numConda2Packages: Int\n  numConda3Packages: Int\n  numPipPackages: Int\n  numCustomDependencies: Int\n  recentActivity: [ActivityRecordObject]\n  remoteUrl: String\n  readme: String\n}\n\n\"\"\"Entry point for all LabBook queryable fields\"\"\"\ntype LabbookQuery {\n  buildInfo: String\n  cudaAvailable: Boolean\n  currentLabbookSchemaVersion: Int\n  jobStatus(jobId: String): JobStatus\n  backgroundJobs(before: String, after: String, first: Int, last: Int): JobStatusConnection\n  userIdentity: UserIdentity\n\n  \"\"\"The ID of the object\"\"\"\n  node(id: ID!): Node\n  nodes(ids: [String]): [Node]\n  labbook(owner: String, name: String): Labbook\n  dataset(owner: String, name: String): Dataset\n  labbookList: LabbookList\n  datasetList: DatasetList\n  availableBases(before: String, after: String, first: Int, last: Int): BaseComponentConnection\n  availableDatasetTypes: [DatasetType]\n  package(manager: String, package: String, version: String = \"\"): PackageComponent\n}\n\n\"\"\"\nA type representing a section within a LabBook (i.e., code, input, output)\n    \n\"\"\"\ntype LabbookSection implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  section: String\n  files(rootDir: String, before: String, after: String, first: Int, last: Int): LabbookFileConnection\n  allFiles(before: String, after: String, first: Int, last: Int): LabbookFileConnection\n  favorites(before: String, after: String, first: Int, last: Int): LabbookFavoriteConnection\n  isUntracked: Boolean\n  hasFiles: Boolean\n  hasFavorites: Boolean\n}\n\ninput MakeDatasetDirectoryInput {\n  datasetOwner: String!\n  datasetName: String!\n  key: String!\n  clientMutationId: String\n}\n\ntype MakeDatasetDirectoryPayload {\n  newDatasetFileEdge: DatasetFileEdge\n  clientMutationId: String\n}\n\ninput MakeLabbookDirectoryInput {\n  owner: String!\n  labbookName: String!\n  section: String!\n  directory: String!\n  clientMutationId: String\n}\n\ntype MakeLabbookDirectoryPayload {\n  newLabbookFileEdge: LabbookFileEdge\n  clientMutationId: String\n}\n\ninput MergeFromBranchInput {\n  owner: String!\n  labbookName: String!\n  otherBranchName: String!\n  overrideMethod: String\n  clientMutationId: String\n}\n\n\"\"\"\nMerge from another branch into the current active branch. Force if necessary. \n\"\"\"\ntype MergeFromBranchPayload {\n  labbook: Labbook\n  clientMutationId: String\n}\n\ninput MigrateLabbookSchemaInput {\n  owner: String!\n  labbookName: String!\n  clientMutationId: String\n}\n\ntype MigrateLabbookSchemaPayload {\n  labbook: Labbook\n  clientMutationId: String\n}\n\ninput ModifyDatasetLinkInput {\n  \"\"\"Owner of the labbook\"\"\"\n  labbookOwner: String!\n\n  \"\"\"Name of the labbook\"\"\"\n  labbookName: String!\n\n  \"\"\"Owner of the dataset to link\"\"\"\n  datasetOwner: String!\n\n  \"\"\"Name of the dataset to link\"\"\"\n  datasetName: String!\n\n  \"\"\"Action to perform, either `link` or `unlink`\"\"\"\n  action: String!\n\n  \"\"\"URL to the Dataset to link. Only required when `action=link`\"\"\"\n  datasetUrl: String\n  clientMutationId: String\n}\n\n\"\"\"\"Mutation to link and unlink Datasets from a Project\"\"\"\ntype ModifyDatasetLinkPayload {\n  newLabbookEdge: LabbookEdge\n  clientMutationId: String\n}\n\ninput MoveDatasetFileInput {\n  datasetOwner: String!\n  datasetName: String!\n  srcPath: String!\n  dstPath: String!\n  clientMutationId: String\n}\n\ntype MoveDatasetFilePayload {\n  updatedEdges: [DatasetFileEdge]\n  clientMutationId: String\n}\n\ninput MoveLabbookFileInput {\n  owner: String!\n  labbookName: String!\n  section: String!\n  srcPath: String!\n  dstPath: String!\n  clientMutationId: String\n}\n\n\"\"\"\nMethod to move/rename a file or directory. If file, both src_path and dst_path should contain the file name.\nIf a directory, be sure to include the trailing slash\n\"\"\"\ntype MoveLabbookFilePayload {\n  updatedEdges: [LabbookFileEdge]\n  clientMutationId: String\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"A type that represents a Package Manager based Environment Component\"\"\"\ntype PackageComponent implements Node {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  schema: Int\n  manager: String!\n  package: String!\n  version: String!\n  latestVersion: String\n  fromBase: Boolean\n  isValid: Boolean\n}\n\n\"\"\"A Connection for paging through Package components\"\"\"\ntype PackageComponentConnection {\n  pageInfo: PageInfo!\n  edges: [PackageComponentEdge]!\n}\n\ntype PackageComponentEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: PackageComponent\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"An input type to support Batch interfaces that use Package Components\"\"\"\ninput PackageComponentInput {\n  manager: String!\n  package: String!\n  version: String\n}\n\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\ninput PublishDatasetInput {\n  owner: String!\n  datasetName: String!\n  setPublic: Boolean\n  clientMutationId: String\n}\n\ntype PublishDatasetPayload {\n  jobKey: String\n  clientMutationId: String\n}\n\ninput PublishLabbookInput {\n  owner: String!\n  labbookName: String!\n  setPublic: Boolean\n  clientMutationId: String\n}\n\ntype PublishLabbookPayload {\n  jobKey: String\n  clientMutationId: String\n}\n\n\"\"\"\nA type representing a Dataset stored on a remote server\n\nRemoteDatasets are uniquely identified by both the \"owner\" and the \"name\" of the Dataset\n\nNOTE: RemoteDatasets require all fields to be explicitly set as there is no current way to asynchronously retrieve\n      the data\n\"\"\"\ntype RemoteDataset implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  description: String\n  visibility: String\n  creationDateUtc: String\n  modifiedDateUtc: String\n  isLocal: Boolean\n}\n\n\"\"\"\nA Connection for paging through remote datasets.\n\nThis is a remote call, so should be fetched on its own and only when needed. The user must have a valid\nsession for data to be returned.\n\nSupported sorting modes:\n    - az: naturally sort\n    - created_on: sort by creation date, newest first\n    - modified_on: sort by modification date, newest first\n\"\"\"\ntype RemoteDatasetConnection {\n  pageInfo: PageInfo!\n  edges: [RemoteDatasetEdge]!\n}\n\ntype RemoteDatasetEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: RemoteDataset\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\n\"\"\"\nA type representing a LabBook stored on a remote server\n\nRemoteLabbooks are uniquely identified by both the \"owner\" and the \"name\" of the LabBook\n\nNOTE: RemoteLabbooks require all fields to be explicitly set as there is no current way to asynchronously retrieve\n      the data\n\"\"\"\ntype RemoteLabbook implements Node & GitRepository {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  owner: String!\n  name: String!\n  description: String\n  visibility: String\n  creationDateUtc: String\n  modifiedDateUtc: String\n  isLocal: Boolean\n}\n\n\"\"\"\nA Connection for paging through remote labbooks.\n\nThis is a remote call, so should be fetched on its own and only when needed. The user must have a valid\nsession for data to be returned.\n\nSupported sorting modes:\n    - az: naturally sort\n    - created_on: sort by creation date, newest first\n    - modified_on: sort by modification date, newest first\n\"\"\"\ntype RemoteLabbookConnection {\n  pageInfo: PageInfo!\n  edges: [RemoteLabbookEdge]!\n}\n\ntype RemoteLabbookEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: RemoteLabbook\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n\ninput RemoveCustomDockerInput {\n  owner: String!\n  labbookName: String!\n  clientMutationId: String\n}\n\ntype RemoveCustomDockerPayload {\n  updatedEnvironment: Environment\n  clientMutationId: String\n}\n\ninput RemoveLabbookFavoriteInput {\n  owner: String!\n  labbookName: String!\n  section: String!\n  key: String!\n  clientMutationId: String\n}\n\ntype RemoveLabbookFavoritePayload {\n  success: Boolean\n  removedNodeId: String\n  clientMutationId: String\n}\n\ninput RemovePackageComponentsInput {\n  owner: String!\n  labbookName: String!\n  manager: String!\n  packages: [String]!\n  clientMutationId: String\n}\n\n\"\"\"Mutation to remove packages from labbook\"\"\"\ntype RemovePackageComponentsPayload {\n  success: Boolean\n  clientMutationId: String\n}\n\ninput RemoveUserIdentityInput {\n  clientMutationId: String\n}\n\n\"\"\"\nMutation to remove a locally stored user identity (no-op if not running in local mode)\n\"\"\"\ntype RemoveUserIdentityPayload {\n  userIdentityEdge: UserIdentity\n  clientMutationId: String\n}\n\ninput ResetBranchToRemoteInput {\n  owner: String!\n  labbookName: String!\n  clientMutationId: String\n}\n\n\"\"\"\nUndo all local history and then set current branch tip to match remote.\n\nVery useful when changes are made to master that cannot be pushed. \n\"\"\"\ntype ResetBranchToRemotePayload {\n  labbook: Labbook\n  clientMutationId: String\n}\n\ninput SetDatasetDescriptionInput {\n  owner: String!\n  datasetName: String!\n  description: String!\n  clientMutationId: String\n}\n\ntype SetDatasetDescriptionPayload {\n  updatedDataset: Dataset\n  clientMutationId: String\n}\n\ninput SetDatasetVisibilityInput {\n  owner: String!\n  datasetName: String!\n  visibility: String!\n  clientMutationId: String\n}\n\ntype SetDatasetVisibilityPayload {\n  newDatasetEdge: DatasetEdge\n  clientMutationId: String\n}\n\ninput SetLabbookDescriptionInput {\n  owner: String!\n  labbookName: String!\n  descriptionContent: String!\n  clientMutationId: String\n}\n\ntype SetLabbookDescriptionPayload {\n  success: Boolean\n  clientMutationId: String\n}\n\ninput SetVisibilityInput {\n  owner: String!\n  labbookName: String!\n  visibility: String!\n  clientMutationId: String\n}\n\ntype SetVisibilityPayload {\n  newLabbookEdge: LabbookEdge\n  clientMutationId: String\n}\n\ninput StartContainerInput {\n  owner: String!\n  labbookName: String!\n  clientMutationId: String\n}\n\n\"\"\"Mutator to start a LabBook's Docker Image in a container\"\"\"\ntype StartContainerPayload {\n  environment: Environment\n  clientMutationId: String\n}\n\ninput StartDevToolInput {\n  owner: String!\n  labbookName: String!\n  devTool: String!\n  containerOverrideId: String\n  clientMutationId: String\n}\n\ntype StartDevToolPayload {\n  path: String\n  clientMutationId: String\n}\n\ninput StopContainerInput {\n  owner: String!\n  labbookName: String!\n  clientMutationId: String\n}\n\n\"\"\"Mutation to stop a Docker container. \"\"\"\ntype StopContainerPayload {\n  environment: Environment\n  clientMutationId: String\n}\n\ninput SyncDatasetInput {\n  owner: String!\n  datasetName: String!\n  pullOnly: Boolean\n  overrideMethod: String\n  clientMutationId: String\n}\n\ntype SyncDatasetPayload {\n  jobKey: String\n  clientMutationId: String\n}\n\ninput SyncLabbookInput {\n  owner: String!\n  labbookName: String!\n  pullOnly: Boolean\n  overrideMethod: String\n  clientMutationId: String\n}\n\ntype SyncLabbookPayload {\n  jobKey: String\n  clientMutationId: String\n}\n\ninput UpdateLabbookFavoriteInput {\n  owner: String!\n  labbookName: String!\n  section: String!\n  key: String!\n  updatedIndex: Int\n  updatedDescription: String\n  clientMutationId: String\n}\n\ntype UpdateLabbookFavoritePayload {\n  updatedFavoriteEdge: LabbookFavoriteEdge\n  clientMutationId: String\n}\n\n\"\"\"Interface representing a user in the system\"\"\"\ninterface User {\n  username: String\n  email: String\n  givenName: String\n  familyName: String\n}\n\n\"\"\"A type representing the identity of the logged in user\"\"\"\ntype UserIdentity implements Node & User {\n  \"\"\"The ID of the object.\"\"\"\n  id: ID!\n  username: String\n  email: String\n  givenName: String\n  familyName: String\n  isSessionValid: Boolean\n}\n\ninput WorkonBranchInput {\n  owner: String!\n  labbookName: String!\n  branchName: String!\n  revision: String\n  clientMutationId: String\n}\n\n\"\"\"Work on another branch (perform a git checkout).\"\"\"\ntype WorkonBranchPayload {\n  labbook: Labbook\n  clientMutationId: String\n}\n\ninput WriteDatasetReadmeInput {\n  owner: String!\n  datasetName: String!\n  content: String!\n  clientMutationId: String\n}\n\ntype WriteDatasetReadmePayload {\n  updatedDataset: Dataset\n  clientMutationId: String\n}\n\ninput WriteLabbookReadmeInput {\n  owner: String!\n  labbookName: String!\n  content: String!\n  clientMutationId: String\n}\n\ntype WriteLabbookReadmePayload {\n  updatedLabbook: Labbook\n  clientMutationId: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 107,
      "containsCycle": false,
      "polynomialLevel": 4,
      "numDefinitions": 179
    }
  ],
  "metrics": {
    "created_at": "2018-09-11T14:58:08Z",
    "updated_at": "2019-07-15T19:42:41Z",
    "pushed_at": "2019-07-18T20:52:50Z",
    "issues": 632,
    "watchers": 6,
    "fork_count": 3,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 295,
    "pull_requests_open": 5,
    "pull_requests_closed": 24,
    "pull_requests_merged": 266,
    "releases": 10,
    "stargazers": 27
  }
}