{
  "repo_name": "tartiflette",
  "repo_full_name": "dailymotion/tartiflette",
  "repo_owner": "dailymotion",
  "repo_description": "GraphQL Engine built with Python 3.6+ / asyncio",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "github.graphql",
      "path": "tests/unit/language/parsers/lark/fixtures/github.graphql",
      "sha": "d0406655a2c18b283299db81efad397327c8b68c",
      "url": "https://api.github.com/repositories/119035565/contents/tests/unit/language/parsers/lark/fixtures/github.graphql?ref=4ed8278ce114b017d098b2ce741f27feb07d11f0",
      "git_url": "https://api.github.com/repositories/119035565/git/blobs/d0406655a2c18b283299db81efad397327c8b68c",
      "html_url": "https://github.com/dailymotion/tartiflette/blob/4ed8278ce114b017d098b2ce741f27feb07d11f0/tests/unit/language/parsers/lark/fixtures/github.graphql",
      "content": " \"\"\"Autogenerated input type of AcceptTopicSuggestion\"\"\"\ninput AcceptTopicSuggestionInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the repository.\"\"\"\n  repositoryId: ID!\n\n  \"\"\"The name of the suggested topic.\"\"\"\n  name: String!\n}\n\n\"\"\"Autogenerated return type of AcceptTopicSuggestion\"\"\"\ntype AcceptTopicSuggestionPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The accepted topic.\"\"\"\n  topic: Topic!\n}\n\n\"\"\"\nRepresents an object which can take actions on GitHub. Typically a User or Bot.\n\"\"\"\ninterface Actor {\n  \"\"\"A URL pointing to the actor's public avatar.\"\"\"\n  avatarUrl(\n    \"\"\"The size of the resulting square image.\"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"The username of the actor.\"\"\"\n  login: String!\n\n  \"\"\"The HTTP path for this actor.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The HTTP URL for this actor.\"\"\"\n  url: URI!\n}\n\n\"\"\"Autogenerated input type of AddComment\"\"\"\ninput AddCommentInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the subject to modify.\"\"\"\n  subjectId: ID!\n\n  \"\"\"The contents of the comment.\"\"\"\n  body: String!\n}\n\n\"\"\"Autogenerated return type of AddComment\"\"\"\ntype AddCommentPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The edge from the subject's comment connection.\"\"\"\n  commentEdge: IssueCommentEdge!\n\n  \"\"\"The subject\"\"\"\n  subject: Node!\n\n  \"\"\"The edge from the subject's timeline connection.\"\"\"\n  timelineEdge: IssueTimelineItemEdge!\n}\n\n\"\"\"\nRepresents a 'added_to_project' event on a given issue or pull request.\n\"\"\"\ntype AddedToProjectEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n}\n\n\"\"\"Autogenerated input type of AddProjectCard\"\"\"\ninput AddProjectCardInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the ProjectColumn.\"\"\"\n  projectColumnId: ID!\n\n  \"\"\"\n  The content of the card. Must be a member of the ProjectCardItem union\n  \"\"\"\n  contentId: ID\n\n  \"\"\"The note on the card.\"\"\"\n  note: String\n}\n\n\"\"\"Autogenerated return type of AddProjectCard\"\"\"\ntype AddProjectCardPayload {\n  \"\"\"The edge from the ProjectColumn's card connection.\"\"\"\n  cardEdge: ProjectCardEdge!\n\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The ProjectColumn\"\"\"\n  projectColumn: Project!\n}\n\n\"\"\"Autogenerated input type of AddProjectColumn\"\"\"\ninput AddProjectColumnInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the project.\"\"\"\n  projectId: ID!\n\n  \"\"\"The name of the column.\"\"\"\n  name: String!\n}\n\n\"\"\"Autogenerated return type of AddProjectColumn\"\"\"\ntype AddProjectColumnPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The edge from the project's column connection.\"\"\"\n  columnEdge: ProjectColumnEdge!\n\n  \"\"\"The project\"\"\"\n  project: Project!\n}\n\n\"\"\"Autogenerated input type of AddPullRequestReviewComment\"\"\"\ninput AddPullRequestReviewCommentInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the review to modify.\"\"\"\n  pullRequestReviewId: ID!\n\n  \"\"\"The SHA of the commit to comment on.\"\"\"\n  commitOID: GitObjectID\n\n  \"\"\"The text of the comment.\"\"\"\n  body: String!\n\n  \"\"\"The relative path of the file to comment on.\"\"\"\n  path: String\n\n  \"\"\"The line index in the diff to comment on.\"\"\"\n  position: Int\n\n  \"\"\"The comment id to reply to.\"\"\"\n  inReplyTo: ID\n}\n\n\"\"\"Autogenerated return type of AddPullRequestReviewComment\"\"\"\ntype AddPullRequestReviewCommentPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The newly created comment.\"\"\"\n  comment: PullRequestReviewComment!\n\n  \"\"\"The edge from the review's comment connection.\"\"\"\n  commentEdge: PullRequestReviewCommentEdge!\n}\n\n\"\"\"Autogenerated input type of AddPullRequestReview\"\"\"\ninput AddPullRequestReviewInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the pull request to modify.\"\"\"\n  pullRequestId: ID!\n\n  \"\"\"The commit OID the review pertains to.\"\"\"\n  commitOID: GitObjectID\n\n  \"\"\"The contents of the review body comment.\"\"\"\n  body: String\n\n  \"\"\"The event to perform on the pull request review.\"\"\"\n  event: PullRequestReviewEvent\n\n  \"\"\"The review line comments.\"\"\"\n  comments: [DraftPullRequestReviewComment]\n}\n\n\"\"\"Autogenerated return type of AddPullRequestReview\"\"\"\ntype AddPullRequestReviewPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The newly created pull request review.\"\"\"\n  pullRequestReview: PullRequestReview!\n\n  \"\"\"The edge from the pull request's review connection.\"\"\"\n  reviewEdge: PullRequestReviewEdge!\n}\n\n\"\"\"Autogenerated input type of AddReaction\"\"\"\ninput AddReactionInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the subject to modify.\"\"\"\n  subjectId: ID!\n\n  \"\"\"The name of the emoji to react with.\"\"\"\n  content: ReactionContent!\n}\n\n\"\"\"Autogenerated return type of AddReaction\"\"\"\ntype AddReactionPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The reaction object.\"\"\"\n  reaction: Reaction!\n\n  \"\"\"The reactable subject.\"\"\"\n  subject: Reactable!\n}\n\n\"\"\"Autogenerated input type of AddStar\"\"\"\ninput AddStarInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Starrable ID to star.\"\"\"\n  starrableId: ID!\n}\n\n\"\"\"Autogenerated return type of AddStar\"\"\"\ntype AddStarPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The starrable.\"\"\"\n  starrable: Starrable!\n}\n\n\"\"\"An object that can have users assigned to it.\"\"\"\ninterface Assignable {\n  \"\"\"A list of Users assigned to this object.\"\"\"\n  assignees(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n}\n\n\"\"\"Represents an 'assigned' event on any assignable object.\"\"\"\ntype AssignedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the assignable associated with the event.\"\"\"\n  assignable: Assignable!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Identifies the user who was assigned.\"\"\"\n  user: User\n}\n\n\"\"\"\nRepresents a 'base_ref_changed' event on a given issue or pull request.\n\"\"\"\ntype BaseRefChangedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n}\n\n\"\"\"Represents a 'base_ref_force_pushed' event on a given pull request.\"\"\"\ntype BaseRefForcePushedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the after commit SHA for the 'base_ref_force_pushed' event.\n  \"\"\"\n  afterCommit: Commit\n\n  \"\"\"\n  Identifies the before commit SHA for the 'base_ref_force_pushed' event.\n  \"\"\"\n  beforeCommit: Commit\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.\n  \"\"\"\n  ref: Ref\n}\n\n\"\"\"Represents a Git blame.\"\"\"\ntype Blame {\n  \"\"\"The list of ranges from a Git blame.\"\"\"\n  ranges: [BlameRange!]!\n}\n\n\"\"\"Represents a range of information from a Git blame.\"\"\"\ntype BlameRange {\n  \"\"\"\n  Identifies the recency of the change, from 1 (new) to 10 (old). This is\n  calculated as a 2-quantile and determines the length of distance between the\n  median age of all the changes in the file and the recency of the current\n  range's change.\n  \"\"\"\n  age: Int!\n\n  \"\"\"Identifies the line author\"\"\"\n  commit: Commit!\n\n  \"\"\"The ending line for the range\"\"\"\n  endingLine: Int!\n\n  \"\"\"The starting line for the range\"\"\"\n  startingLine: Int!\n}\n\n\"\"\"Represents a Git blob.\"\"\"\ntype Blob implements Node & GitObject {\n  \"\"\"An abbreviated version of the Git object ID\"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"Byte size of Blob object\"\"\"\n  byteSize: Int!\n\n  \"\"\"The HTTP path for this Git object\"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"The HTTP URL for this Git object\"\"\"\n  commitUrl: URI!\n  id: ID!\n\n  \"\"\"Indicates whether the Blob is binary or text\"\"\"\n  isBinary: Boolean!\n\n  \"\"\"Indicates whether the contents is truncated\"\"\"\n  isTruncated: Boolean!\n\n  \"\"\"The Git object ID\"\"\"\n  oid: GitObjectID!\n\n  \"\"\"The Repository the Git object belongs to\"\"\"\n  repository: Repository!\n\n  \"\"\"UTF8 text data or null if the Blob is binary\"\"\"\n  text: String\n}\n\n\"\"\"A special type of user which takes actions on behalf of GitHub Apps.\"\"\"\ntype Bot implements Node & Actor & UniformResourceLocatable {\n  \"\"\"A URL pointing to the GitHub App's public avatar.\"\"\"\n  avatarUrl(\n    \"\"\"The size of the resulting square image.\"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n\n  \"\"\"The username of the actor.\"\"\"\n  login: String!\n\n  \"\"\"The HTTP path for this bot\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this bot\"\"\"\n  url: URI!\n}\n\n\"\"\"An object that can be closed\"\"\"\ninterface Closable {\n  \"\"\"\n  `true` if the object is closed (definition of closed may depend on type)\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"Identifies the date and time when the object was closed.\"\"\"\n  closedAt: DateTime\n}\n\n\"\"\"Represents a 'closed' event on any `Closable`.\"\"\"\ntype ClosedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Object that was closed.\"\"\"\n  closable: Closable!\n\n  \"\"\"Identifies the commit associated with the 'closed' event.\"\"\"\n  commit: Commit\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n}\n\n\"\"\"The Code of Conduct for a repository\"\"\"\ntype CodeOfConduct {\n  \"\"\"The body of the CoC\"\"\"\n  body: String\n\n  \"\"\"The key for the CoC\"\"\"\n  key: String!\n\n  \"\"\"The formal name of the CoC\"\"\"\n  name: String!\n\n  \"\"\"The path to the CoC\"\"\"\n  url: URI\n}\n\n\"\"\"Collaborators affiliation level with a repository.\"\"\"\nenum CollaboratorAffiliation {\n  \"\"\"All outside collaborators of an organization-owned repository.\"\"\"\n  OUTSIDE\n\n  \"\"\"\n  All collaborators with permissions to an organization-owned repository, regardless of organization membership status.\n  \"\"\"\n  DIRECT\n\n  \"\"\"All collaborators the authenticated user can see.\"\"\"\n  ALL\n}\n\n\"\"\"Represents a comment.\"\"\"\ninterface Comment {\n  \"\"\"The actor who authored the comment.\"\"\"\n  author: Actor\n\n  \"\"\"Author's association with the subject of the comment.\"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"The comment body as Markdown.\"\"\"\n  body: String!\n\n  \"\"\"The comment body rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Check if this comment was created via an email reply.\"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"The actor who edited the comment.\"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"The moment the editor made the last edit\"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"Identifies when the comment was published at.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"Did the viewer author this comment.\"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"A comment author association with repository.\"\"\"\nenum CommentAuthorAssociation {\n  \"\"\"Author is a member of the organization that owns the repository.\"\"\"\n  MEMBER\n\n  \"\"\"Author is the owner of the repository.\"\"\"\n  OWNER\n\n  \"\"\"Author has been invited to collaborate on the repository.\"\"\"\n  COLLABORATOR\n\n  \"\"\"Author has previously committed to the repository.\"\"\"\n  CONTRIBUTOR\n\n  \"\"\"Author has not previously committed to the repository.\"\"\"\n  FIRST_TIME_CONTRIBUTOR\n\n  \"\"\"Author has not previously committed to GitHub.\"\"\"\n  FIRST_TIMER\n\n  \"\"\"Author has no association with the repository.\"\"\"\n  NONE\n}\n\n\"\"\"The possible errors that will prevent a user from updating a comment.\"\"\"\nenum CommentCannotUpdateReason {\n  \"\"\"\n  You must be the author or have write access to this repository to update this comment.\n  \"\"\"\n  INSUFFICIENT_ACCESS\n\n  \"\"\"Unable to create comment because issue is locked.\"\"\"\n  LOCKED\n\n  \"\"\"You must be logged in to update this comment.\"\"\"\n  LOGIN_REQUIRED\n\n  \"\"\"Repository is under maintenance.\"\"\"\n  MAINTENANCE\n\n  \"\"\"At least one email address must be verified to update this comment.\"\"\"\n  VERIFIED_EMAIL_REQUIRED\n}\n\n\"\"\"\nRepresents a 'comment_deleted' event on a given issue or pull request.\n\"\"\"\ntype CommentDeletedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n}\n\n\"\"\"Represents a Git commit.\"\"\"\ntype Commit implements Node & GitObject & Subscribable {\n  \"\"\"An abbreviated version of the Git object ID\"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"The number of additions in this commit.\"\"\"\n  additions: Int!\n\n  \"\"\"Authorship details of the commit.\"\"\"\n  author: GitActor\n\n  \"\"\"Check if the committer and the author match.\"\"\"\n  authoredByCommitter: Boolean!\n\n  \"\"\"The datetime when this commit was authored.\"\"\"\n  authoredDate: DateTime!\n\n  \"\"\"Fetches `git blame` information.\"\"\"\n  blame(\n    \"\"\"The file whose Git blame information you want.\"\"\"\n    path: String!\n  ): Blame!\n\n  \"\"\"The number of changed files in this commit.\"\"\"\n  changedFiles: Int!\n\n  \"\"\"Comments made on the commit.\"\"\"\n  comments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): CommitCommentConnection!\n\n  \"\"\"The HTTP path for this Git object\"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"The HTTP URL for this Git object\"\"\"\n  commitUrl: URI!\n\n  \"\"\"The datetime when this commit was committed.\"\"\"\n  committedDate: DateTime!\n\n  \"\"\"Check if commited via GitHub web UI.\"\"\"\n  committedViaWeb: Boolean!\n\n  \"\"\"Committership details of the commit.\"\"\"\n  committer: GitActor\n\n  \"\"\"The number of deletions in this commit.\"\"\"\n  deletions: Int!\n\n  \"\"\"\n  The linear commit history starting from (and including) this commit, in the same order as `git log`.\n  \"\"\"\n  history(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    If non-null, filters history to only show commits touching files under this path.\n    \"\"\"\n    path: String\n\n    \"\"\"\n    If non-null, filters history to only show commits with matching authorship.\n    \"\"\"\n    author: CommitAuthor\n\n    \"\"\"Allows specifying a beginning time or date for fetching commits.\"\"\"\n    since: GitTimestamp\n\n    \"\"\"Allows specifying an ending time or date for fetching commits.\"\"\"\n    until: GitTimestamp\n  ): CommitHistoryConnection!\n  id: ID!\n\n  \"\"\"The Git commit message\"\"\"\n  message: String!\n\n  \"\"\"The Git commit message body\"\"\"\n  messageBody: String!\n\n  \"\"\"The commit message body rendered to HTML.\"\"\"\n  messageBodyHTML: HTML!\n\n  \"\"\"The Git commit message headline\"\"\"\n  messageHeadline: String!\n\n  \"\"\"The commit message headline rendered to HTML.\"\"\"\n  messageHeadlineHTML: HTML!\n\n  \"\"\"The Git object ID\"\"\"\n  oid: GitObjectID!\n\n  \"\"\"The parents of a commit.\"\"\"\n  parents(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): CommitConnection!\n\n  \"\"\"The datetime when this commit was pushed.\"\"\"\n  pushedDate: DateTime\n\n  \"\"\"The Repository this commit belongs to\"\"\"\n  repository: Repository!\n\n  \"\"\"The HTTP path for this commit\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Commit signing information, if present.\"\"\"\n  signature: GitSignature\n\n  \"\"\"Status information for this commit\"\"\"\n  status: Status\n\n  \"\"\"\n  Returns a URL to download a tarball archive for a repository.\n      Note: For private repositories, these links are temporary and expire after five minutes.\n  \"\"\"\n  tarballUrl: URI!\n\n  \"\"\"Commit's root Tree\"\"\"\n  tree: Tree!\n\n  \"\"\"The HTTP path for the tree of this commit\"\"\"\n  treeResourcePath: URI!\n\n  \"\"\"The HTTP URL for the tree of this commit\"\"\"\n  treeUrl: URI!\n\n  \"\"\"The HTTP URL for this commit\"\"\"\n  url: URI!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState!\n\n  \"\"\"\n  Returns a URL to download a zipball archive for a repository.\n      Note: For private repositories, these links are temporary and expire after five minutes.\n  \"\"\"\n  zipballUrl: URI!\n}\n\n\"\"\"Specifies an author for filtering Git commits.\"\"\"\ninput CommitAuthor {\n  \"\"\"\n  ID of a User to filter by. If non-null, only commits authored by this user\n  will be returned. This field takes precedence over emails.\n  \"\"\"\n  id: ID\n\n  \"\"\"\n  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.\n  \"\"\"\n  emails: [String!]\n}\n\n\"\"\"Represents a comment on a given Commit.\"\"\"\ntype CommitComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {\n  \"\"\"The actor who authored the comment.\"\"\"\n  author: Actor\n\n  \"\"\"Author's association with the subject of the comment.\"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"Identifies the comment body.\"\"\"\n  body: String!\n\n  \"\"\"Identifies the comment body rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  Identifies the commit associated with the comment, if the commit exists.\n  \"\"\"\n  commit: Commit\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Check if this comment was created via an email reply.\"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The actor who edited the comment.\"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"The moment the editor made the last edit\"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"Identifies the file path associated with the comment.\"\"\"\n  path: String\n\n  \"\"\"Identifies the line position associated with the comment.\"\"\"\n  position: Int\n\n  \"\"\"Identifies when the comment was published at.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"A list of reactions grouped by content left on the subject.\"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"A list of Reactions left on the Issue.\"\"\"\n  reactions(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Allows filtering Reactions by emoji.\"\"\"\n    content: ReactionContent\n\n    \"\"\"Allows specifying the order in which reactions are returned.\"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"The repository associated with this node.\"\"\"\n  repository: Repository!\n\n  \"\"\"The HTTP path permalink for this commit comment.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL permalink for this commit comment.\"\"\"\n  url: URI!\n\n  \"\"\"Check if the current viewer can delete this object.\"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"Can user react to this subject\"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"Reasons why the current viewer can not update this comment.\"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"Did the viewer author this comment.\"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"The connection type for CommitComment.\"\"\"\ntype CommitCommentConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [CommitCommentEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [CommitComment]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype CommitCommentEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: CommitComment\n}\n\n\"\"\"A thread of comments on a commit.\"\"\"\ntype CommitCommentThread implements Node & RepositoryNode {\n  \"\"\"The comments that exist in this thread.\"\"\"\n  comments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): CommitCommentConnection!\n\n  \"\"\"The commit the comments were made on.\"\"\"\n  commit: Commit!\n  id: ID!\n\n  \"\"\"The file the comments were made on.\"\"\"\n  path: String\n\n  \"\"\"The position in the diff for the commit that the comment was made on.\"\"\"\n  position: Int\n\n  \"\"\"The repository associated with this node.\"\"\"\n  repository: Repository!\n}\n\n\"\"\"The connection type for Commit.\"\"\"\ntype CommitConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [CommitEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Commit]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype CommitEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Commit\n}\n\n\"\"\"The connection type for Commit.\"\"\"\ntype CommitHistoryConnection {\n  edges: [CommitEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Commit]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nRepresents a 'converted_note_to_issue' event on a given issue or pull request.\n\"\"\"\ntype ConvertedNoteToIssueEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n}\n\n\"\"\"Autogenerated input type of CreateProject\"\"\"\ninput CreateProjectInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The owner ID to create the project under.\"\"\"\n  ownerId: ID!\n\n  \"\"\"The name of project.\"\"\"\n  name: String!\n\n  \"\"\"The description of project.\"\"\"\n  body: String\n}\n\n\"\"\"Autogenerated return type of CreateProject\"\"\"\ntype CreateProjectPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The new project.\"\"\"\n  project: Project!\n}\n\n\"\"\"Represents a mention made by one issue or pull request to another.\"\"\"\ntype CrossReferencedEvent implements Node & UniformResourceLocatable {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Reference originated in a different repository.\"\"\"\n  isCrossRepository: Boolean!\n\n  \"\"\"Identifies when the reference was made.\"\"\"\n  referencedAt: DateTime!\n\n  \"\"\"The HTTP path for this pull request.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Issue or pull request that made the reference.\"\"\"\n  source: ReferencedSubject!\n\n  \"\"\"Issue or pull request to which the reference was made.\"\"\"\n  target: ReferencedSubject!\n\n  \"\"\"The HTTP URL for this pull request.\"\"\"\n  url: URI!\n\n  \"\"\"Checks if the target will be closed when the source is merged.\"\"\"\n  willCloseTarget: Boolean!\n}\n\n\"\"\"An ISO-8601 encoded date string.\"\"\"\nscalar Date\n\n\"\"\"An ISO-8601 encoded UTC date string.\"\"\"\nscalar DateTime\n\n\"\"\"Autogenerated input type of DeclineTopicSuggestion\"\"\"\ninput DeclineTopicSuggestionInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the repository.\"\"\"\n  repositoryId: ID!\n\n  \"\"\"The name of the suggested topic.\"\"\"\n  name: String!\n\n  \"\"\"The reason why the suggested topic is declined.\"\"\"\n  reason: TopicSuggestionDeclineReason!\n}\n\n\"\"\"Autogenerated return type of DeclineTopicSuggestion\"\"\"\ntype DeclineTopicSuggestionPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The declined topic.\"\"\"\n  topic: Topic!\n}\n\n\"\"\"The possible default permissions for organization-owned repositories.\"\"\"\nenum DefaultRepositoryPermissionField {\n  \"\"\"Members have read access to org repos by default\"\"\"\n  READ\n\n  \"\"\"Members have read and write access to org repos by default\"\"\"\n  WRITE\n\n  \"\"\"Members have read, write, and admin access to org repos by default\"\"\"\n  ADMIN\n}\n\n\"\"\"Entities that can be deleted.\"\"\"\ninterface Deletable {\n  \"\"\"Check if the current viewer can delete this object.\"\"\"\n  viewerCanDelete: Boolean!\n}\n\n\"\"\"Autogenerated input type of DeleteProjectCard\"\"\"\ninput DeleteProjectCardInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The id of the card to delete.\"\"\"\n  cardId: ID!\n}\n\n\"\"\"Autogenerated return type of DeleteProjectCard\"\"\"\ntype DeleteProjectCardPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The column the deleted card was in.\"\"\"\n  column: ProjectColumn!\n\n  \"\"\"The deleted card ID.\"\"\"\n  deletedCardId: ID!\n}\n\n\"\"\"Autogenerated input type of DeleteProjectColumn\"\"\"\ninput DeleteProjectColumnInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The id of the column to delete.\"\"\"\n  columnId: ID!\n}\n\n\"\"\"Autogenerated return type of DeleteProjectColumn\"\"\"\ntype DeleteProjectColumnPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The deleted column ID.\"\"\"\n  deletedColumnId: ID!\n\n  \"\"\"The project the deleted column was in.\"\"\"\n  project: Project!\n}\n\n\"\"\"Autogenerated input type of DeleteProject\"\"\"\ninput DeleteProjectInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Project ID to update.\"\"\"\n  projectId: ID!\n}\n\n\"\"\"Autogenerated return type of DeleteProject\"\"\"\ntype DeleteProjectPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The repository or organization the project was removed from.\"\"\"\n  owner: ProjectOwner!\n}\n\n\"\"\"Autogenerated input type of DeletePullRequestReview\"\"\"\ninput DeletePullRequestReviewInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the pull request review to delete.\"\"\"\n  pullRequestReviewId: ID!\n}\n\n\"\"\"Autogenerated return type of DeletePullRequestReview\"\"\"\ntype DeletePullRequestReviewPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The deleted pull request review.\"\"\"\n  pullRequestReview: PullRequestReview!\n}\n\n\"\"\"Represents a 'demilestoned' event on a given issue or pull request.\"\"\"\ntype DemilestonedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the milestone title associated with the 'demilestoned' event.\n  \"\"\"\n  milestoneTitle: String!\n\n  \"\"\"Object referenced by event.\"\"\"\n  subject: MilestoneItem!\n}\n\n\"\"\"Represents a 'deployed' event on a given pull request.\"\"\"\ntype DeployedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The deployment associated with the 'deployed' event.\"\"\"\n  deployment: Deployment!\n  id: ID!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"The ref associated with the 'deployed' event.\"\"\"\n  ref: Ref\n}\n\n\"\"\"A repository deploy key.\"\"\"\ntype DeployKey implements Node {\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"The deploy key.\"\"\"\n  key: String!\n\n  \"\"\"Whether or not the deploy key is read only.\"\"\"\n  readOnly: Boolean!\n\n  \"\"\"The deploy key title.\"\"\"\n  title: String!\n\n  \"\"\"Whether or not the deploy key has been verified.\"\"\"\n  verified: Boolean!\n}\n\n\"\"\"The connection type for DeployKey.\"\"\"\ntype DeployKeyConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [DeployKeyEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [DeployKey]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype DeployKeyEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: DeployKey\n}\n\n\"\"\"Represents triggered deployment instance.\"\"\"\ntype Deployment implements Node {\n  \"\"\"Identifies the commit sha of the deployment.\"\"\"\n  commit: Commit\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the actor who triggered the deployment.\"\"\"\n  creator: Actor\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The environment to which this deployment was made.\"\"\"\n  environment: String\n  id: ID!\n\n  \"\"\"The latest status of this deployment.\"\"\"\n  latestStatus: DeploymentStatus\n\n  \"\"\"Extra information that a deployment system might need.\"\"\"\n  payload: String\n\n  \"\"\"Identifies the repository associated with the deployment.\"\"\"\n  repository: Repository!\n\n  \"\"\"The current state of the deployment.\"\"\"\n  state: DeploymentState\n\n  \"\"\"A list of statuses associated with the deployment.\"\"\"\n  statuses(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): DeploymentStatusConnection\n}\n\n\"\"\"The connection type for Deployment.\"\"\"\ntype DeploymentConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [DeploymentEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Deployment]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype DeploymentEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Deployment\n}\n\n\"\"\"The possible states in which a deployment can be.\"\"\"\nenum DeploymentState {\n  \"\"\"The pending deployment was not updated after 30 minutes.\"\"\"\n  ABANDONED\n\n  \"\"\"The deployment is currently active.\"\"\"\n  ACTIVE\n\n  \"\"\"An inactive transient deployment.\"\"\"\n  DESTROYED\n\n  \"\"\"The deployment experienced an error.\"\"\"\n  ERROR\n\n  \"\"\"The deployment has failed.\"\"\"\n  FAILURE\n\n  \"\"\"The deployment is inactive.\"\"\"\n  INACTIVE\n\n  \"\"\"The deployment is pending.\"\"\"\n  PENDING\n}\n\n\"\"\"Describes the status of a given deployment attempt.\"\"\"\ntype DeploymentStatus implements Node {\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the actor who triggered the deployment.\"\"\"\n  creator: Actor\n\n  \"\"\"Identifies the deployment associated with status.\"\"\"\n  deployment: Deployment!\n\n  \"\"\"Identifies the description of the deployment.\"\"\"\n  description: String\n\n  \"\"\"Identifies the environment URL of the deployment.\"\"\"\n  environmentUrl: URI\n  id: ID!\n\n  \"\"\"Identifies the log URL of the deployment.\"\"\"\n  logUrl: URI\n\n  \"\"\"Identifies the current state of the deployment.\"\"\"\n  state: DeploymentStatusState!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n}\n\n\"\"\"The connection type for DeploymentStatus.\"\"\"\ntype DeploymentStatusConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [DeploymentStatusEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [DeploymentStatus]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype DeploymentStatusEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: DeploymentStatus\n}\n\n\"\"\"The possible states for a deployment status.\"\"\"\nenum DeploymentStatusState {\n  \"\"\"The deployment is pending.\"\"\"\n  PENDING\n\n  \"\"\"The deployment was successful.\"\"\"\n  SUCCESS\n\n  \"\"\"The deployment has failed.\"\"\"\n  FAILURE\n\n  \"\"\"The deployment is inactive.\"\"\"\n  INACTIVE\n\n  \"\"\"The deployment experienced an error.\"\"\"\n  ERROR\n}\n\n\"\"\"Autogenerated input type of DismissPullRequestReview\"\"\"\ninput DismissPullRequestReviewInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the pull request review to modify.\"\"\"\n  pullRequestReviewId: ID!\n\n  \"\"\"The contents of the pull request review dismissal message.\"\"\"\n  message: String!\n}\n\n\"\"\"Autogenerated return type of DismissPullRequestReview\"\"\"\ntype DismissPullRequestReviewPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The dismissed pull request review.\"\"\"\n  pullRequestReview: PullRequestReview!\n}\n\n\"\"\"Specifies a review comment to be left with a Pull Request Review.\"\"\"\ninput DraftPullRequestReviewComment {\n  \"\"\"Path to the file being commented on.\"\"\"\n  path: String!\n\n  \"\"\"Position in the file to leave a comment on.\"\"\"\n  position: Int!\n\n  \"\"\"Body of the comment to leave.\"\"\"\n  body: String!\n}\n\n\"\"\"An external identity provisioned by SAML SSO or SCIM.\"\"\"\ntype ExternalIdentity implements Node {\n  \"\"\"The GUID for this identity\"\"\"\n  guid: String!\n  id: ID!\n\n  \"\"\"Organization invitation for this SCIM-provisioned external identity\"\"\"\n  organizationInvitation: OrganizationInvitation\n\n  \"\"\"SAML Identity attributes\"\"\"\n  samlIdentity: ExternalIdentitySamlAttributes\n\n  \"\"\"SCIM Identity attributes\"\"\"\n  scimIdentity: ExternalIdentityScimAttributes\n\n  \"\"\"User linked to this external identity\"\"\"\n  user: User\n}\n\n\"\"\"The connection type for ExternalIdentity.\"\"\"\ntype ExternalIdentityConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ExternalIdentityEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [ExternalIdentity]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ExternalIdentityEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: ExternalIdentity\n}\n\n\"\"\"SAML attributes for the External Identity\"\"\"\ntype ExternalIdentitySamlAttributes {\n  \"\"\"The NameID of the SAML identity\"\"\"\n  nameId: String\n}\n\n\"\"\"SCIM attributes for the External Identity\"\"\"\ntype ExternalIdentityScimAttributes {\n  \"\"\"The userName of the SCIM identity\"\"\"\n  username: String\n}\n\n\"\"\"The connection type for User.\"\"\"\ntype FollowerConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [UserEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [User]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"The connection type for User.\"\"\"\ntype FollowingConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [UserEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [User]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"A Gist.\"\"\"\ntype Gist implements Node & Starrable {\n  \"\"\"A list of comments associated with the gist\"\"\"\n  comments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): GistCommentConnection!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The gist description.\"\"\"\n  description: String\n  id: ID!\n\n  \"\"\"Whether the gist is public or not.\"\"\"\n  isPublic: Boolean!\n\n  \"\"\"The gist name.\"\"\"\n  name: String!\n\n  \"\"\"The gist owner.\"\"\"\n  owner: RepositoryOwner\n\n  \"\"\"Identifies when the gist was last pushed to.\"\"\"\n  pushedAt: DateTime\n\n  \"\"\"A list of users who have starred this starrable.\"\"\"\n  stargazers(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Order for connection\"\"\"\n    orderBy: StarOrder\n  ): StargazerConnection!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  \"\"\"\n  viewerHasStarred: Boolean!\n}\n\n\"\"\"Represents a comment on an Gist.\"\"\"\ntype GistComment implements Node & Comment & Deletable & Updatable & UpdatableComment {\n  \"\"\"The actor who authored the comment.\"\"\"\n  author: Actor\n\n  \"\"\"Author's association with the gist.\"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"Identifies the comment body.\"\"\"\n  body: String!\n\n  \"\"\"The comment body rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Check if this comment was created via an email reply.\"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"The actor who edited the comment.\"\"\"\n  editor: Actor\n\n  \"\"\"The associated gist.\"\"\"\n  gist: Gist!\n  id: ID!\n\n  \"\"\"The moment the editor made the last edit\"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"Identifies when the comment was published at.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"Check if the current viewer can delete this object.\"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"Reasons why the current viewer can not update this comment.\"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"Did the viewer author this comment.\"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"The connection type for GistComment.\"\"\"\ntype GistCommentConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [GistCommentEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [GistComment]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype GistCommentEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: GistComment\n}\n\n\"\"\"The connection type for Gist.\"\"\"\ntype GistConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [GistEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Gist]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype GistEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Gist\n}\n\n\"\"\"Ordering options for gist connections\"\"\"\ninput GistOrder {\n  \"\"\"The field to order repositories by.\"\"\"\n  field: GistOrderField!\n\n  \"\"\"The ordering direction.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which gist connections can be ordered.\"\"\"\nenum GistOrderField {\n  \"\"\"Order gists by creation time\"\"\"\n  CREATED_AT\n\n  \"\"\"Order gists by update time\"\"\"\n  UPDATED_AT\n\n  \"\"\"Order gists by push time\"\"\"\n  PUSHED_AT\n}\n\n\"\"\"The privacy of a Gist\"\"\"\nenum GistPrivacy {\n  \"\"\"Public\"\"\"\n  PUBLIC\n\n  \"\"\"Secret\"\"\"\n  SECRET\n\n  \"\"\"Gists that are public and secret\"\"\"\n  ALL\n}\n\n\"\"\"Represents an actor in a Git commit (ie. an author or committer).\"\"\"\ntype GitActor {\n  \"\"\"A URL pointing to the author's public avatar.\"\"\"\n  avatarUrl(\n    \"\"\"The size of the resulting square image.\"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"The timestamp of the Git action (authoring or committing).\"\"\"\n  date: GitTimestamp\n\n  \"\"\"The email in the Git commit.\"\"\"\n  email: String\n\n  \"\"\"The name in the Git commit.\"\"\"\n  name: String\n\n  \"\"\"\n  The GitHub user corresponding to the email field. Null if no such user exists.\n  \"\"\"\n  user: User\n}\n\n\"\"\"Represents information about the GitHub instance.\"\"\"\ntype GitHubMetadata {\n  \"\"\"Returns a String that's a SHA of `github-services`\"\"\"\n  gitHubServicesSha: String!\n\n  \"\"\"IP addresses that users connect to for git operations\"\"\"\n  gitIpAddresses: [String!]\n\n  \"\"\"IP addresses that service hooks are sent from\"\"\"\n  hookIpAddresses: [String!]\n\n  \"\"\"IP addresses that the importer connects from\"\"\"\n  importerIpAddresses: [String!]\n\n  \"\"\"Whether or not users are verified\"\"\"\n  isPasswordAuthenticationVerifiable: Boolean!\n\n  \"\"\"IP addresses for GitHub Pages' A records\"\"\"\n  pagesIpAddresses: [String!]\n}\n\n\"\"\"Represents a Git object.\"\"\"\ninterface GitObject {\n  \"\"\"An abbreviated version of the Git object ID\"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"The HTTP path for this Git object\"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"The HTTP URL for this Git object\"\"\"\n  commitUrl: URI!\n  id: ID!\n\n  \"\"\"The Git object ID\"\"\"\n  oid: GitObjectID!\n\n  \"\"\"The Repository the Git object belongs to\"\"\"\n  repository: Repository!\n}\n\n\"\"\"A Git object ID.\"\"\"\nscalar GitObjectID\n\n\"\"\"Information about a signature (GPG or S/MIME) on a Commit or Tag.\"\"\"\ninterface GitSignature {\n  \"\"\"Email used to sign this object.\"\"\"\n  email: String!\n\n  \"\"\"True if the signature is valid and verified by GitHub.\"\"\"\n  isValid: Boolean!\n\n  \"\"\"\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  \"\"\"\n  payload: String!\n\n  \"\"\"ASCII-armored signature header from object.\"\"\"\n  signature: String!\n\n  \"\"\"GitHub user corresponding to the email signing this commit.\"\"\"\n  signer: User\n\n  \"\"\"\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  \"\"\"\n  state: GitSignatureState!\n}\n\n\"\"\"The state of a Git signature.\"\"\"\nenum GitSignatureState {\n  \"\"\"Valid signature and verified by GitHub.\"\"\"\n  VALID\n\n  \"\"\"Invalid signature.\"\"\"\n  INVALID\n\n  \"\"\"Malformed signature.\"\"\"\n  MALFORMED_SIG\n\n  \"\"\"Key used for signing not known to GitHub.\"\"\"\n  UNKNOWN_KEY\n\n  \"\"\"Invalid email used for signing.\"\"\"\n  BAD_EMAIL\n\n  \"\"\"Email used for signing unverified on GitHub.\"\"\"\n  UNVERIFIED_EMAIL\n\n  \"\"\"Email used for signing not known to GitHub.\"\"\"\n  NO_USER\n\n  \"\"\"Unknown signature type.\"\"\"\n  UNKNOWN_SIG_TYPE\n\n  \"\"\"Unsigned.\"\"\"\n  UNSIGNED\n\n  \"\"\"\n  Internal error - the GPG verification service is unavailable at the moment.\n  \"\"\"\n  GPGVERIFY_UNAVAILABLE\n\n  \"\"\"Internal error - the GPG verification service misbehaved.\"\"\"\n  GPGVERIFY_ERROR\n\n  \"\"\"The usage flags for the key that signed this don't allow signing.\"\"\"\n  NOT_SIGNING_KEY\n\n  \"\"\"Signing key expired.\"\"\"\n  EXPIRED_KEY\n}\n\n\"\"\"Git SSH string\"\"\"\nscalar GitSSHRemote\n\n\"\"\"\nAn ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.\n\"\"\"\nscalar GitTimestamp\n\n\"\"\"Represents a GPG signature on a Commit or Tag.\"\"\"\ntype GpgSignature implements GitSignature {\n  \"\"\"Email used to sign this object.\"\"\"\n  email: String!\n\n  \"\"\"True if the signature is valid and verified by GitHub.\"\"\"\n  isValid: Boolean!\n\n  \"\"\"Hex-encoded ID of the key that signed this object.\"\"\"\n  keyId: String\n\n  \"\"\"\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  \"\"\"\n  payload: String!\n\n  \"\"\"ASCII-armored signature header from object.\"\"\"\n  signature: String!\n\n  \"\"\"GitHub user corresponding to the email signing this commit.\"\"\"\n  signer: User\n\n  \"\"\"\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  \"\"\"\n  state: GitSignatureState!\n}\n\n\"\"\"Represents a 'head_ref_deleted' event on a given pull request.\"\"\"\ntype HeadRefDeletedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the Ref associated with the `head_ref_deleted` event.\"\"\"\n  headRef: Ref\n\n  \"\"\"\n  Identifies the name of the Ref associated with the `head_ref_deleted` event.\n  \"\"\"\n  headRefName: String!\n  id: ID!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n}\n\n\"\"\"Represents a 'head_ref_force_pushed' event on a given pull request.\"\"\"\ntype HeadRefForcePushedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the after commit SHA for the 'head_ref_force_pushed' event.\n  \"\"\"\n  afterCommit: Commit\n\n  \"\"\"\n  Identifies the before commit SHA for the 'head_ref_force_pushed' event.\n  \"\"\"\n  beforeCommit: Commit\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.\n  \"\"\"\n  ref: Ref\n}\n\n\"\"\"Represents a 'head_ref_restored' event on a given pull request.\"\"\"\ntype HeadRefRestoredEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n}\n\n\"\"\"A string containing HTML code.\"\"\"\nscalar HTML\n\n\"\"\"\nAn Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.\n\"\"\"\ntype Issue implements Node & Assignable & Closable & Comment & Updatable & UpdatableComment & Labelable & Lockable & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable {\n  \"\"\"A list of Users assigned to this object.\"\"\"\n  assignees(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n\n  \"\"\"The actor who authored the comment.\"\"\"\n  author: Actor\n\n  \"\"\"Author's association with the subject of the comment.\"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"Identifies the body of the issue.\"\"\"\n  body: String!\n\n  \"\"\"Identifies the body of the issue rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"Identifies the body of the issue rendered to text.\"\"\"\n  bodyText: String!\n\n  \"\"\"\n  `true` if the object is closed (definition of closed may depend on type)\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"Identifies the date and time when the object was closed.\"\"\"\n  closedAt: DateTime\n\n  \"\"\"A list of comments associated with the Issue.\"\"\"\n  comments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): IssueCommentConnection!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Check if this comment was created via an email reply.\"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The actor who edited the comment.\"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"A list of labels associated with the object.\"\"\"\n  labels(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): LabelConnection\n\n  \"\"\"The moment the editor made the last edit\"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"`true` if the object is locked\"\"\"\n  locked: Boolean!\n\n  \"\"\"Identifies the milestone associated with the issue.\"\"\"\n  milestone: Milestone\n\n  \"\"\"Identifies the issue number.\"\"\"\n  number: Int!\n\n  \"\"\"A list of Users that are participating in the Issue conversation.\"\"\"\n  participants(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n\n  \"\"\"List of project cards associated with this issue.\"\"\"\n  projectCards(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ProjectCardConnection!\n\n  \"\"\"Identifies when the comment was published at.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"A list of reactions grouped by content left on the subject.\"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"A list of Reactions left on the Issue.\"\"\"\n  reactions(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Allows filtering Reactions by emoji.\"\"\"\n    content: ReactionContent\n\n    \"\"\"Allows specifying the order in which reactions are returned.\"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"The repository associated with this node.\"\"\"\n  repository: Repository!\n\n  \"\"\"The HTTP path for this issue\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies the state of the issue.\"\"\"\n  state: IssueState!\n\n  \"\"\"A list of events, comments, commits, etc. associated with the issue.\"\"\"\n  timeline(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Allows filtering timeline events by a `since` timestamp.\"\"\"\n    since: DateTime\n  ): IssueTimelineConnection!\n\n  \"\"\"Identifies the issue title.\"\"\"\n  title: String!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this issue\"\"\"\n  url: URI!\n\n  \"\"\"Can user react to this subject\"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"Reasons why the current viewer can not update this comment.\"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"Did the viewer author this comment.\"\"\"\n  viewerDidAuthor: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState!\n}\n\n\"\"\"Represents a comment on an Issue.\"\"\"\ntype IssueComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {\n  \"\"\"The actor who authored the comment.\"\"\"\n  author: Actor\n\n  \"\"\"Author's association with the subject of the comment.\"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"Identifies the comment body.\"\"\"\n  body: String!\n\n  \"\"\"The comment body rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"Identifies the body of the issue rendered to text.\"\"\"\n  bodyText: String!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Check if this comment was created via an email reply.\"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The actor who edited the comment.\"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"Identifies the issue associated with the comment.\"\"\"\n  issue: Issue!\n\n  \"\"\"The moment the editor made the last edit\"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"Identifies when the comment was published at.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  Returns the pull request associated with the comment, if this comment was made on a\n  pull request.\n\n  \"\"\"\n  pullRequest: PullRequest\n\n  \"\"\"A list of reactions grouped by content left on the subject.\"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"A list of Reactions left on the Issue.\"\"\"\n  reactions(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Allows filtering Reactions by emoji.\"\"\"\n    content: ReactionContent\n\n    \"\"\"Allows specifying the order in which reactions are returned.\"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"The repository associated with this node.\"\"\"\n  repository: Repository!\n\n  \"\"\"The HTTP path for this issue comment\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this issue comment\"\"\"\n  url: URI!\n\n  \"\"\"Check if the current viewer can delete this object.\"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"Can user react to this subject\"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"Reasons why the current viewer can not update this comment.\"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"Did the viewer author this comment.\"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"The connection type for IssueComment.\"\"\"\ntype IssueCommentConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [IssueCommentEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [IssueComment]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype IssueCommentEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: IssueComment\n}\n\n\"\"\"The connection type for Issue.\"\"\"\ntype IssueConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [IssueEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Issue]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype IssueEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Issue\n}\n\n\"\"\"Ways in which lists of issues can be ordered upon return.\"\"\"\ninput IssueOrder {\n  \"\"\"The field in which to order issues by.\"\"\"\n  field: IssueOrderField!\n\n  \"\"\"The direction in which to order issues by the specified field.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which issue connections can be ordered.\"\"\"\nenum IssueOrderField {\n  \"\"\"Order issues by creation time\"\"\"\n  CREATED_AT\n\n  \"\"\"Order issues by update time\"\"\"\n  UPDATED_AT\n\n  \"\"\"Order issues by comment count\"\"\"\n  COMMENTS\n}\n\n\"\"\"Used for return value of Repository.issueOrPullRequest.\"\"\"\nunion IssueOrPullRequest = Issue | PullRequest\n\n\"\"\"The possible PubSub channels for an issue.\"\"\"\nenum IssuePubSubTopic {\n  \"\"\"The channel ID for observing issue updates.\"\"\"\n  UPDATED\n\n  \"\"\"The channel ID for marking an issue as read.\"\"\"\n  MARKASREAD\n}\n\n\"\"\"The possible states of an issue.\"\"\"\nenum IssueState {\n  \"\"\"An issue that is still open\"\"\"\n  OPEN\n\n  \"\"\"An issue that has been closed\"\"\"\n  CLOSED\n}\n\n\"\"\"The connection type for IssueTimelineItem.\"\"\"\ntype IssueTimelineConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [IssueTimelineItemEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [IssueTimelineItem]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An item in an issue timeline\"\"\"\nunion IssueTimelineItem = Commit | IssueComment | CrossReferencedEvent | ClosedEvent | ReopenedEvent | SubscribedEvent | UnsubscribedEvent | ReferencedEvent | AssignedEvent | UnassignedEvent | LabeledEvent | UnlabeledEvent | MilestonedEvent | DemilestonedEvent | RenamedTitleEvent | LockedEvent | UnlockedEvent\n\n\"\"\"An edge in a connection.\"\"\"\ntype IssueTimelineItemEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: IssueTimelineItem\n}\n\n\"\"\"\nA label for categorizing Issues or Milestones with a given Repository.\n\"\"\"\ntype Label implements Node {\n  \"\"\"Identifies the label color.\"\"\"\n  color: String!\n  id: ID!\n\n  \"\"\"A list of issues associated with this label.\"\"\"\n  issues(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of label names to filter the pull requests by.\"\"\"\n    labels: [String!]\n\n    \"\"\"Ordering options for issues returned from the connection.\"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"A list of states to filter the issues by.\"\"\"\n    states: [IssueState!]\n  ): IssueConnection!\n\n  \"\"\"Identifies the label name.\"\"\"\n  name: String!\n\n  \"\"\"A list of pull requests associated with this label.\"\"\"\n  pullRequests(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of states to filter the pull requests by.\"\"\"\n    states: [PullRequestState!]\n\n    \"\"\"A list of label names to filter the pull requests by.\"\"\"\n    labels: [String!]\n\n    \"\"\"The head ref name to filter the pull requests by.\"\"\"\n    headRefName: String\n\n    \"\"\"The base ref name to filter the pull requests by.\"\"\"\n    baseRefName: String\n\n    \"\"\"Ordering options for pull requests returned from the connection.\"\"\"\n    orderBy: IssueOrder\n  ): PullRequestConnection!\n\n  \"\"\"The repository associated with this label.\"\"\"\n  repository: Repository!\n}\n\n\"\"\"An object that can have labels assigned to it.\"\"\"\ninterface Labelable {\n  \"\"\"A list of labels associated with the object.\"\"\"\n  labels(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): LabelConnection\n}\n\n\"\"\"The connection type for Label.\"\"\"\ntype LabelConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [LabelEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Label]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents a 'labeled' event on a given issue or pull request.\"\"\"\ntype LabeledEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Identifies the label associated with the 'labeled' event.\"\"\"\n  label: Label!\n\n  \"\"\"Identifies the `Labelable` associated with the event.\"\"\"\n  labelable: Labelable!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype LabelEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Label\n}\n\n\"\"\"Represents a given language found in repositories.\"\"\"\ntype Language implements Node {\n  \"\"\"The color defined for the current language.\"\"\"\n  color: String\n  id: ID!\n\n  \"\"\"The name of the current language.\"\"\"\n  name: String!\n}\n\n\"\"\"A list of languages associated with the parent.\"\"\"\ntype LanguageConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [LanguageEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Language]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n\n  \"\"\"The total size in bytes of files written in that language.\"\"\"\n  totalSize: Int!\n}\n\n\"\"\"Represents the language of a repository.\"\"\"\ntype LanguageEdge {\n  cursor: String!\n  node: Language!\n\n  \"\"\"The number of bytes of code written in the language.\"\"\"\n  size: Int!\n}\n\n\"\"\"Ordering options for language connections.\"\"\"\ninput LanguageOrder {\n  \"\"\"The field to order languages by.\"\"\"\n  field: LanguageOrderField!\n\n  \"\"\"The ordering direction.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which language connections can be ordered.\"\"\"\nenum LanguageOrderField {\n  \"\"\"Order languages by the size of all files containing the language\"\"\"\n  SIZE\n}\n\n\"\"\"A respository's open source license\"\"\"\ntype License {\n  \"\"\"The full text of the license\"\"\"\n  body: String!\n\n  \"\"\"The conditions set by the license\"\"\"\n  conditions: [LicenseRule]!\n\n  \"\"\"A human-readable description of the license\"\"\"\n  description: String\n\n  \"\"\"Whether the license should be featured\"\"\"\n  featured: Boolean!\n\n  \"\"\"Whether the license should be displayed in license pickers\"\"\"\n  hidden: Boolean!\n  id: ID!\n\n  \"\"\"Instructions on how to implement the license\"\"\"\n  implementation: String\n\n  \"\"\"The lowercased SPDX ID of the license\"\"\"\n  key: String!\n\n  \"\"\"The limitations set by the license\"\"\"\n  limitations: [LicenseRule]!\n\n  \"\"\"The license full name specified by <https://spdx.org/licenses>\"\"\"\n  name: String!\n\n  \"\"\"Customary short name if applicable (e.g, GPLv3)\"\"\"\n  nickname: String\n\n  \"\"\"The permissions set by the license\"\"\"\n  permissions: [LicenseRule]!\n\n  \"\"\"Short identifier specified by <https://spdx.org/licenses>\"\"\"\n  spdxId: String\n\n  \"\"\"URL to the license on <https://choosealicense.com>\"\"\"\n  url: URI\n}\n\n\"\"\"Describes a License's conditions, permissions, and limitations\"\"\"\ntype LicenseRule {\n  \"\"\"A description of the rule\"\"\"\n  description: String!\n\n  \"\"\"The machine-readable rule key\"\"\"\n  key: String!\n\n  \"\"\"The human-readable rule label\"\"\"\n  label: String!\n}\n\n\"\"\"An object that can be locked.\"\"\"\ninterface Lockable {\n  \"\"\"`true` if the object is locked\"\"\"\n  locked: Boolean!\n}\n\n\"\"\"Represents a 'locked' event on a given issue or pull request.\"\"\"\ntype LockedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Object that was locked.\"\"\"\n  lockable: Lockable!\n}\n\n\"\"\"A public description of a Marketplace category.\"\"\"\ntype MarketplaceCategory {\n  \"\"\"The category's description.\"\"\"\n  description: String\n\n  \"\"\"\n  The technical description of how apps listed in this category work with GitHub.\n  \"\"\"\n  howItWorks: String\n\n  \"\"\"The category's name.\"\"\"\n  name: String!\n\n  \"\"\"How many Marketplace listings have this as their primary category.\"\"\"\n  primaryListingCount: Int!\n\n  \"\"\"The HTTP path for this Marketplace category.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"How many Marketplace listings have this as their secondary category.\"\"\"\n  secondaryListingCount: Int!\n\n  \"\"\"The short name of the category used in its URL.\"\"\"\n  slug: String!\n\n  \"\"\"The HTTP URL for this Marketplace category.\"\"\"\n  url: URI!\n}\n\n\"\"\"A listing in the GitHub integration marketplace.\"\"\"\ntype MarketplaceListing implements Node {\n  \"\"\"URL to the listing owner's company site.\"\"\"\n  companyUrl: URI\n\n  \"\"\"\n  The HTTP path for configuring access to the listing's integration or OAuth app\n  \"\"\"\n  configurationResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for configuring access to the listing's integration or OAuth app\n  \"\"\"\n  configurationUrl: URI!\n\n  \"\"\"URL to the listing's documentation.\"\"\"\n  documentationUrl: URI\n\n  \"\"\"The listing's detailed description.\"\"\"\n  extendedDescription: String\n\n  \"\"\"The listing's detailed description rendered to HTML.\"\"\"\n  extendedDescriptionHTML: HTML!\n\n  \"\"\"The listing's introductory description.\"\"\"\n  fullDescription: String!\n\n  \"\"\"The listing's introductory description rendered to HTML.\"\"\"\n  fullDescriptionHTML: HTML!\n\n  \"\"\"\n  Whether this listing has been submitted for review from GitHub for approval to be displayed in the Marketplace.\n  \"\"\"\n  hasApprovalBeenRequested: Boolean!\n\n  \"\"\"Does this listing have any plans with a free trial?\"\"\"\n  hasPublishedFreeTrialPlans: Boolean!\n\n  \"\"\"Does this listing have a terms of service link?\"\"\"\n  hasTermsOfService: Boolean!\n\n  \"\"\"A technical description of how this app works with GitHub.\"\"\"\n  howItWorks: String\n\n  \"\"\"The listing's technical description rendered to HTML.\"\"\"\n  howItWorksHTML: HTML!\n  id: ID!\n\n  \"\"\"URL to install the product to the viewer's account or organization.\"\"\"\n  installationUrl: URI\n\n  \"\"\"Whether this listing's app has been installed for the current viewer\"\"\"\n  installedForViewer: Boolean!\n\n  \"\"\"\n  Whether this listing has been approved for display in the Marketplace.\n  \"\"\"\n  isApproved: Boolean!\n\n  \"\"\"Whether this listing has been removed from the Marketplace.\"\"\"\n  isDelisted: Boolean!\n\n  \"\"\"\n  Whether this listing is still an editable draft that has not been submitted\n  for review and is not publicly visible in the Marketplace.\n  \"\"\"\n  isDraft: Boolean!\n\n  \"\"\"\n  Whether the product this listing represents is available as part of a paid plan.\n  \"\"\"\n  isPaid: Boolean!\n\n  \"\"\"\n  Whether this listing has been rejected by GitHub for display in the Marketplace.\n  \"\"\"\n  isRejected: Boolean!\n\n  \"\"\"The hex color code, without the leading '#', for the logo background.\"\"\"\n  logoBackgroundColor: String!\n\n  \"\"\"URL for the listing's logo image.\"\"\"\n  logoUrl(\n    \"\"\"The size in pixels of the resulting square image.\"\"\"\n    size: Int = 400\n  ): URI\n\n  \"\"\"The listing's full name.\"\"\"\n  name: String!\n\n  \"\"\"\n  The listing's very short description without a trailing period or ampersands.\n  \"\"\"\n  normalizedShortDescription: String!\n\n  \"\"\"URL to the listing's detailed pricing.\"\"\"\n  pricingUrl: URI\n\n  \"\"\"The category that best describes the listing.\"\"\"\n  primaryCategory: MarketplaceCategory!\n\n  \"\"\"URL to the listing's privacy policy.\"\"\"\n  privacyPolicyUrl: URI!\n\n  \"\"\"The HTTP path for the Marketplace listing.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The URLs for the listing's screenshots.\"\"\"\n  screenshotUrls: [String]!\n\n  \"\"\"An alternate category that describes the listing.\"\"\"\n  secondaryCategory: MarketplaceCategory\n\n  \"\"\"The listing's very short description.\"\"\"\n  shortDescription: String!\n\n  \"\"\"The short name of the listing used in its URL.\"\"\"\n  slug: String!\n\n  \"\"\"URL to the listing's status page.\"\"\"\n  statusUrl: URI\n\n  \"\"\"An email address for support for this listing's app.\"\"\"\n  supportEmail: String\n\n  \"\"\"Either a URL or an email address for support for this listing's app.\"\"\"\n  supportUrl: URI!\n\n  \"\"\"URL to the listing's terms of service.\"\"\"\n  termsOfServiceUrl: URI\n\n  \"\"\"The HTTP URL for the Marketplace listing.\"\"\"\n  url: URI!\n\n  \"\"\"Can the current viewer add plans for this Marketplace listing.\"\"\"\n  viewerCanAddPlans: Boolean!\n\n  \"\"\"Can the current viewer approve this Marketplace listing.\"\"\"\n  viewerCanApprove: Boolean!\n\n  \"\"\"Can the current viewer delist this Marketplace listing.\"\"\"\n  viewerCanDelist: Boolean!\n\n  \"\"\"Can the current viewer edit this Marketplace listing.\"\"\"\n  viewerCanEdit: Boolean!\n\n  \"\"\"\n  Can the current viewer edit the primary and secondary category of this\n  Marketplace listing.\n\n  \"\"\"\n  viewerCanEditCategories: Boolean!\n\n  \"\"\"Can the current viewer edit the plans for this Marketplace listing.\"\"\"\n  viewerCanEditPlans: Boolean!\n\n  \"\"\"\n  Can the current viewer return this Marketplace listing to draft state\n  so it becomes editable again.\n\n  \"\"\"\n  viewerCanRedraft: Boolean!\n\n  \"\"\"\n  Can the current viewer reject this Marketplace listing by returning it to\n  an editable draft state or rejecting it entirely.\n\n  \"\"\"\n  viewerCanReject: Boolean!\n\n  \"\"\"\n  Can the current viewer request this listing be reviewed for display in\n  the Marketplace.\n\n  \"\"\"\n  viewerCanRequestApproval: Boolean!\n\n  \"\"\"\n  Indicates whether the current user has an active subscription to this Marketplace listing.\n\n  \"\"\"\n  viewerHasPurchased: Boolean!\n\n  \"\"\"\n  Indicates if the current user has purchased a subscription to this Marketplace listing\n  for all of the organizations the user owns.\n\n  \"\"\"\n  viewerHasPurchasedForAllOrganizations: Boolean!\n\n  \"\"\"\n  Does the current viewer role allow them to administer this Marketplace listing.\n\n  \"\"\"\n  viewerIsListingAdmin: Boolean!\n}\n\n\"\"\"Look up Marketplace Listings\"\"\"\ntype MarketplaceListingConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [MarketplaceListingEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [MarketplaceListing]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype MarketplaceListingEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: MarketplaceListing\n}\n\n\"\"\"Represents a 'mentioned' event on a given issue or pull request.\"\"\"\ntype MentionedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n}\n\n\"\"\"Whether or not a PullRequest can be merged.\"\"\"\nenum MergeableState {\n  \"\"\"The pull request can be merged.\"\"\"\n  MERGEABLE\n\n  \"\"\"The pull request cannot be merged due to merge conflicts.\"\"\"\n  CONFLICTING\n\n  \"\"\"The mergeability of the pull request is still being calculated.\"\"\"\n  UNKNOWN\n}\n\n\"\"\"Represents a 'merged' event on a given pull request.\"\"\"\ntype MergedEvent implements Node & UniformResourceLocatable {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the commit associated with the `merge` event.\"\"\"\n  commit: Commit\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Identifies the Ref associated with the `merge` event.\"\"\"\n  mergeRef: Ref\n\n  \"\"\"Identifies the name of the Ref associated with the `merge` event.\"\"\"\n  mergeRefName: String!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"The HTTP path for this merged event.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The HTTP URL for this merged event.\"\"\"\n  url: URI!\n}\n\n\"\"\"Represents a Milestone object on a given repository.\"\"\"\ntype Milestone implements Node & Closable & UniformResourceLocatable {\n  \"\"\"\n  `true` if the object is closed (definition of closed may depend on type)\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"Identifies the date and time when the object was closed.\"\"\"\n  closedAt: DateTime\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the actor who created the milestone.\"\"\"\n  creator: Actor\n\n  \"\"\"Identifies the description of the milestone.\"\"\"\n  description: String\n\n  \"\"\"Identifies the due date of the milestone.\"\"\"\n  dueOn: DateTime\n  id: ID!\n\n  \"\"\"A list of issues associated with the milestone.\"\"\"\n  issues(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of label names to filter the pull requests by.\"\"\"\n    labels: [String!]\n\n    \"\"\"Ordering options for issues returned from the connection.\"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"A list of states to filter the issues by.\"\"\"\n    states: [IssueState!]\n  ): IssueConnection!\n\n  \"\"\"Identifies the number of the milestone.\"\"\"\n  number: Int!\n\n  \"\"\"The repository associated with this milestone.\"\"\"\n  repository: Repository!\n\n  \"\"\"The HTTP path for this milestone\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies the state of the milestone.\"\"\"\n  state: MilestoneState!\n\n  \"\"\"Identifies the title of the milestone.\"\"\"\n  title: String!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this milestone\"\"\"\n  url: URI!\n}\n\n\"\"\"The connection type for Milestone.\"\"\"\ntype MilestoneConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [MilestoneEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Milestone]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents a 'milestoned' event on a given issue or pull request.\"\"\"\ntype MilestonedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the milestone title associated with the 'milestoned' event.\n  \"\"\"\n  milestoneTitle: String!\n\n  \"\"\"Object referenced by event.\"\"\"\n  subject: MilestoneItem!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype MilestoneEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Milestone\n}\n\n\"\"\"Types that can be inside a Milestone.\"\"\"\nunion MilestoneItem = Issue | PullRequest\n\n\"\"\"The possible states of a milestone.\"\"\"\nenum MilestoneState {\n  \"\"\"A milestone that is still open.\"\"\"\n  OPEN\n\n  \"\"\"A milestone that has been closed.\"\"\"\n  CLOSED\n}\n\n\"\"\"\nRepresents a 'moved_columns_in_project' event on a given issue or pull request.\n\"\"\"\ntype MovedColumnsInProjectEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n}\n\n\"\"\"Autogenerated input type of MoveProjectCard\"\"\"\ninput MoveProjectCardInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The id of the card to move.\"\"\"\n  cardId: ID!\n\n  \"\"\"The id of the column to move it into.\"\"\"\n  columnId: ID!\n\n  \"\"\"\n  Place the new card after the card with this id. Pass null to place it at the top.\n  \"\"\"\n  afterCardId: ID\n}\n\n\"\"\"Autogenerated return type of MoveProjectCard\"\"\"\ntype MoveProjectCardPayload {\n  \"\"\"The new edge of the moved card.\"\"\"\n  cardEdge: ProjectCardEdge!\n\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n}\n\n\"\"\"Autogenerated input type of MoveProjectColumn\"\"\"\ninput MoveProjectColumnInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The id of the column to move.\"\"\"\n  columnId: ID!\n\n  \"\"\"\n  Place the new column after the column with this id. Pass null to place it at the front.\n  \"\"\"\n  afterColumnId: ID\n}\n\n\"\"\"Autogenerated return type of MoveProjectColumn\"\"\"\ntype MoveProjectColumnPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The new edge of the moved column.\"\"\"\n  columnEdge: ProjectColumnEdge!\n}\n\n\"\"\"The root query for implementing GraphQL mutations.\"\"\"\ntype Mutation {\n  \"\"\"Applies a suggested topic to the repository.\"\"\"\n  acceptTopicSuggestion(input: AcceptTopicSuggestionInput!): AcceptTopicSuggestionPayload\n\n  \"\"\"Adds a comment to an Issue or Pull Request.\"\"\"\n  addComment(input: AddCommentInput!): AddCommentPayload\n\n  \"\"\"\n  Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.\n  \"\"\"\n  addProjectCard(input: AddProjectCardInput!): AddProjectCardPayload\n\n  \"\"\"Adds a column to a Project.\"\"\"\n  addProjectColumn(input: AddProjectColumnInput!): AddProjectColumnPayload\n\n  \"\"\"Adds a review to a Pull Request.\"\"\"\n  addPullRequestReview(input: AddPullRequestReviewInput!): AddPullRequestReviewPayload\n\n  \"\"\"Adds a comment to a review.\"\"\"\n  addPullRequestReviewComment(input: AddPullRequestReviewCommentInput!): AddPullRequestReviewCommentPayload\n\n  \"\"\"Adds a reaction to a subject.\"\"\"\n  addReaction(input: AddReactionInput!): AddReactionPayload\n\n  \"\"\"Adds a star to a Starrable.\"\"\"\n  addStar(input: AddStarInput!): AddStarPayload\n\n  \"\"\"Creates a new project.\"\"\"\n  createProject(input: CreateProjectInput!): CreateProjectPayload\n\n  \"\"\"Rejects a suggested topic for the repository.\"\"\"\n  declineTopicSuggestion(input: DeclineTopicSuggestionInput!): DeclineTopicSuggestionPayload\n\n  \"\"\"Deletes a project.\"\"\"\n  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload\n\n  \"\"\"Deletes a project card.\"\"\"\n  deleteProjectCard(input: DeleteProjectCardInput!): DeleteProjectCardPayload\n\n  \"\"\"Deletes a project column.\"\"\"\n  deleteProjectColumn(input: DeleteProjectColumnInput!): DeleteProjectColumnPayload\n\n  \"\"\"Deletes a pull request review.\"\"\"\n  deletePullRequestReview(input: DeletePullRequestReviewInput!): DeletePullRequestReviewPayload\n\n  \"\"\"Dismisses an approved or rejected pull request review.\"\"\"\n  dismissPullRequestReview(input: DismissPullRequestReviewInput!): DismissPullRequestReviewPayload\n\n  \"\"\"Moves a project card to another place.\"\"\"\n  moveProjectCard(input: MoveProjectCardInput!): MoveProjectCardPayload\n\n  \"\"\"Moves a project column to another place.\"\"\"\n  moveProjectColumn(input: MoveProjectColumnInput!): MoveProjectColumnPayload\n\n  \"\"\"\n  Removes outside collaborator from all repositories in an organization.\n  \"\"\"\n  removeOutsideCollaborator(input: RemoveOutsideCollaboratorInput!): RemoveOutsideCollaboratorPayload\n\n  \"\"\"Removes a reaction from a subject.\"\"\"\n  removeReaction(input: RemoveReactionInput!): RemoveReactionPayload\n\n  \"\"\"Removes a star from a Starrable.\"\"\"\n  removeStar(input: RemoveStarInput!): RemoveStarPayload\n\n  \"\"\"Set review requests on a pull request.\"\"\"\n  requestReviews(input: RequestReviewsInput!): RequestReviewsPayload\n\n  \"\"\"Submits a pending pull request review.\"\"\"\n  submitPullRequestReview(input: SubmitPullRequestReviewInput!): SubmitPullRequestReviewPayload\n\n  \"\"\"Updates an existing project.\"\"\"\n  updateProject(input: UpdateProjectInput!): UpdateProjectPayload\n\n  \"\"\"Updates an existing project card.\"\"\"\n  updateProjectCard(input: UpdateProjectCardInput!): UpdateProjectCardPayload\n\n  \"\"\"Updates an existing project column.\"\"\"\n  updateProjectColumn(input: UpdateProjectColumnInput!): UpdateProjectColumnPayload\n\n  \"\"\"Updates the body of a pull request review.\"\"\"\n  updatePullRequestReview(input: UpdatePullRequestReviewInput!): UpdatePullRequestReviewPayload\n\n  \"\"\"Updates a pull request review comment.\"\"\"\n  updatePullRequestReviewComment(input: UpdatePullRequestReviewCommentInput!): UpdatePullRequestReviewCommentPayload\n\n  \"\"\"Updates viewers repository subscription state.\"\"\"\n  updateSubscription(input: UpdateSubscriptionInput!): UpdateSubscriptionPayload\n\n  \"\"\"Replaces the repository's topics with the given topics.\"\"\"\n  updateTopics(input: UpdateTopicsInput!): UpdateTopicsPayload\n}\n\n\"\"\"An object with an ID.\"\"\"\ninterface Node {\n  \"\"\"ID of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"\nPossible directions in which to order a list of items when provided an `orderBy` argument.\n\"\"\"\nenum OrderDirection {\n  \"\"\"Specifies an ascending order for a given `orderBy` argument.\"\"\"\n  ASC\n\n  \"\"\"Specifies a descending order for a given `orderBy` argument.\"\"\"\n  DESC\n}\n\n\"\"\"\nAn account on GitHub, with one or more owners, that has repositories, members and teams.\n\"\"\"\ntype Organization implements Node & Actor & ProjectOwner & RepositoryOwner & UniformResourceLocatable {\n  \"\"\"A URL pointing to the organization's public avatar.\"\"\"\n  avatarUrl(\n    \"\"\"The size of the resulting square image.\"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The organization's public profile description.\"\"\"\n  description: String\n\n  \"\"\"The organization's public email.\"\"\"\n  email: String\n  id: ID!\n\n  \"\"\"The organization's public profile location.\"\"\"\n  location: String\n\n  \"\"\"The organization's login name.\"\"\"\n  login: String!\n\n  \"\"\"A list of users who are members of this organization.\"\"\"\n  members(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n\n  \"\"\"The organization's public profile name.\"\"\"\n  name: String\n\n  \"\"\"The HTTP path creating a new team\"\"\"\n  newTeamResourcePath: URI!\n\n  \"\"\"The HTTP URL creating a new team\"\"\"\n  newTeamUrl: URI!\n\n  \"\"\"The billing email for the organization.\"\"\"\n  organizationBillingEmail: String\n\n  \"\"\"A list of repositories this user has pinned to their profile\"\"\"\n  pinnedRepositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n  ): RepositoryConnection!\n\n  \"\"\"Find project by number.\"\"\"\n  project(\n    \"\"\"The project number to find.\"\"\"\n    number: Int!\n  ): Project\n\n  \"\"\"A list of projects under the owner.\"\"\"\n  projects(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Ordering options for projects returned from the connection\"\"\"\n    orderBy: ProjectOrder\n\n    \"\"\"Query to search projects by, currently only searching by name.\"\"\"\n    search: String\n\n    \"\"\"A list of states to filter the projects by.\"\"\"\n    states: [ProjectState!]\n  ): ProjectConnection!\n\n  \"\"\"The HTTP path listing organization's projects\"\"\"\n  projectsResourcePath: URI!\n\n  \"\"\"The HTTP URL listing organization's projects\"\"\"\n  projectsUrl: URI!\n\n  \"\"\"A list of repositories that the user owns.\"\"\"\n  repositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    If non-null, filters repositories according to whether they are forks of another repository\n    \"\"\"\n    isFork: Boolean\n  ): RepositoryConnection!\n\n  \"\"\"Find Repository.\"\"\"\n  repository(\n    \"\"\"Name of Repository to find.\"\"\"\n    name: String!\n  ): Repository\n\n  \"\"\"The HTTP path for this user\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The Organization's SAML Identity Providers\"\"\"\n  samlIdentityProvider: OrganizationIdentityProvider\n\n  \"\"\"Find an organization's team by its slug.\"\"\"\n  team(\n    \"\"\"The name or slug of the team to find.\"\"\"\n    slug: String!\n  ): Team\n\n  \"\"\"A list of teams in this organization.\"\"\"\n  teams(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters teams according to privacy\"\"\"\n    privacy: TeamPrivacy\n\n    \"\"\"\n    If non-null, filters teams according to whether the viewer is an admin or member on team\n    \"\"\"\n    role: TeamRole\n\n    \"\"\"If non-null, filters teams with query on team name and team slug\"\"\"\n    query: String\n\n    \"\"\"User logins to filter by\"\"\"\n    userLogins: [String!]\n\n    \"\"\"Ordering options for teams returned from the connection\"\"\"\n    orderBy: TeamOrder\n\n    \"\"\"\n    If true, filters teams that are mapped to an LDAP Group (Enterprise only)\n    \"\"\"\n    ldapMapped: Boolean\n\n    \"\"\"If true, restrict to only root teams\"\"\"\n    rootTeamsOnly: Boolean = false\n  ): TeamConnection!\n\n  \"\"\"The HTTP path listing organization's teams\"\"\"\n  teamsResourcePath: URI!\n\n  \"\"\"The HTTP URL listing organization's teams\"\"\"\n  teamsUrl: URI!\n\n  \"\"\"The HTTP URL for this user\"\"\"\n  url: URI!\n\n  \"\"\"Organization is adminable by the viewer.\"\"\"\n  viewerCanAdminister: Boolean!\n\n  \"\"\"Can the current viewer create new projects on this owner.\"\"\"\n  viewerCanCreateProjects: Boolean!\n\n  \"\"\"Viewer can create repositories on this organization\"\"\"\n  viewerCanCreateRepositories: Boolean!\n\n  \"\"\"Viewer can create teams on this organization.\"\"\"\n  viewerCanCreateTeams: Boolean!\n\n  \"\"\"Viewer is a member of this organization.\"\"\"\n  viewerIsAMember: Boolean!\n\n  \"\"\"The organization's public profile URL.\"\"\"\n  websiteUrl: URI\n}\n\n\"\"\"The connection type for Organization.\"\"\"\ntype OrganizationConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [OrganizationEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Organization]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype OrganizationEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Organization\n}\n\n\"\"\"\nAn Identity Provider configured to provision SAML and SCIM identities for Organizations\n\"\"\"\ntype OrganizationIdentityProvider implements Node {\n  \"\"\"\n  The digest algorithm used to sign SAML requests for the Identity Provider.\n  \"\"\"\n  digestMethod: URI\n\n  \"\"\"External Identities provisioned by this Identity Provider\"\"\"\n  externalIdentities(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ExternalIdentityConnection!\n  id: ID!\n\n  \"\"\"\n  The x509 certificate used by the Identity Provder to sign assertions and responses.\n  \"\"\"\n  idpCertificate: X509Certificate\n\n  \"\"\"The Issuer Entity ID for the SAML Identity Provider\"\"\"\n  issuer: String\n\n  \"\"\"Organization this Identity Provider belongs to\"\"\"\n  organization: Organization\n\n  \"\"\"\n  The signature algorithm used to sign SAML requests for the Identity Provider.\n  \"\"\"\n  signatureMethod: URI\n\n  \"\"\"The URL endpoint for the Identity Provider's SAML SSO.\"\"\"\n  ssoUrl: URI\n}\n\n\"\"\"An Invitation for a user to an organization.\"\"\"\ntype OrganizationInvitation implements Node {\n  \"\"\"The email address of the user invited to the organization.\"\"\"\n  email: String\n  id: ID!\n\n  \"\"\"The type of invitation that was sent (e.g. email, user).\"\"\"\n  invitationType: OrganizationInvitationType!\n\n  \"\"\"The user who was invited to the organization.\"\"\"\n  invitee: User\n\n  \"\"\"The user who created the invitation.\"\"\"\n  inviter: User!\n\n  \"\"\"The user's pending role in the organization (e.g. member, owner).\"\"\"\n  role: OrganizationInvitationRole!\n}\n\n\"\"\"The connection type for OrganizationInvitation.\"\"\"\ntype OrganizationInvitationConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [OrganizationInvitationEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [OrganizationInvitation]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype OrganizationInvitationEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: OrganizationInvitation\n}\n\n\"\"\"The possible organization invitation roles.\"\"\"\nenum OrganizationInvitationRole {\n  \"\"\"The user is invited to be a direct member of the organization.\"\"\"\n  DIRECT_MEMBER\n\n  \"\"\"The user is invited to be an admin of the organization.\"\"\"\n  ADMIN\n\n  \"\"\"The user is invited to be a billing manager of the organization.\"\"\"\n  BILLING_MANAGER\n\n  \"\"\"The user's previous role will be reinstated.\"\"\"\n  REINSTATE\n}\n\n\"\"\"The possible organization invitation types.\"\"\"\nenum OrganizationInvitationType {\n  \"\"\"The invitation was to an existing user.\"\"\"\n  USER\n\n  \"\"\"The invitation was to an email address.\"\"\"\n  EMAIL\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n}\n\n\"\"\"\nProjects manage issues, pull requests and notes within a project owner.\n\"\"\"\ntype Project implements Node & Closable & Updatable {\n  \"\"\"The project's description body.\"\"\"\n  body: String\n\n  \"\"\"The projects description body rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  `true` if the object is closed (definition of closed may depend on type)\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"Identifies the date and time when the object was closed.\"\"\"\n  closedAt: DateTime\n\n  \"\"\"List of columns in the project\"\"\"\n  columns(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ProjectColumnConnection!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The actor who originally created the project.\"\"\"\n  creator: Actor\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n\n  \"\"\"The project's name.\"\"\"\n  name: String!\n\n  \"\"\"The project's number.\"\"\"\n  number: Int!\n\n  \"\"\"\n  The project's owner. Currently limited to repositories and organizations.\n  \"\"\"\n  owner: ProjectOwner!\n\n  \"\"\"List of pending cards in this project\"\"\"\n  pendingCards(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ProjectCardConnection!\n\n  \"\"\"The HTTP path for this project\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Whether the project is open or closed.\"\"\"\n  state: ProjectState!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this project\"\"\"\n  url: URI!\n\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n}\n\n\"\"\"A card in a project.\"\"\"\ntype ProjectCard implements Node {\n  \"\"\"\n  The project column this card is associated under. A card may only belong to one\n  project column at a time. The column field will be null if the card is created\n  in a pending state and has yet to be associated with a column. Once cards are\n  associated with a column, they will not become pending in the future.\n\n  \"\"\"\n  column: ProjectColumn\n\n  \"\"\"The card content item\"\"\"\n  content: ProjectCardItem\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The actor who created this card\"\"\"\n  creator: Actor\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n\n  \"\"\"The card note\"\"\"\n  note: String\n\n  \"\"\"The project that contains this card.\"\"\"\n  project: Project!\n\n  \"\"\"The column that contains this card.\"\"\"\n  projectColumn: ProjectColumn! @deprecated(reason: \"Use ProjectCard.column instead. The associated column will be null if the card is in a pending state.\")\n\n  \"\"\"The HTTP path for this card\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The state of ProjectCard\"\"\"\n  state: ProjectCardState\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this card\"\"\"\n  url: URI!\n}\n\n\"\"\"The connection type for ProjectCard.\"\"\"\ntype ProjectCardConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ProjectCardEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [ProjectCard]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ProjectCardEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: ProjectCard\n}\n\n\"\"\"Types that can be inside Project Cards.\"\"\"\nunion ProjectCardItem = Issue | PullRequest\n\n\"\"\"Various content states of a ProjectCard\"\"\"\nenum ProjectCardState {\n  \"\"\"The card has content only.\"\"\"\n  CONTENT_ONLY\n\n  \"\"\"The card has a note only.\"\"\"\n  NOTE_ONLY\n\n  \"\"\"The card is redacted.\"\"\"\n  REDACTED\n}\n\n\"\"\"A column inside a project.\"\"\"\ntype ProjectColumn implements Node {\n  \"\"\"List of cards in the column\"\"\"\n  cards(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ProjectCardConnection!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n\n  \"\"\"The project column's name.\"\"\"\n  name: String!\n\n  \"\"\"The project that contains this column.\"\"\"\n  project: Project!\n\n  \"\"\"The HTTP path for this project column\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this project column\"\"\"\n  url: URI!\n}\n\n\"\"\"The connection type for ProjectColumn.\"\"\"\ntype ProjectColumnConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ProjectColumnEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [ProjectColumn]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ProjectColumnEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: ProjectColumn\n}\n\n\"\"\"A list of projects associated with the owner.\"\"\"\ntype ProjectConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ProjectEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Project]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ProjectEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Project\n}\n\n\"\"\"Ways in which lists of projects can be ordered upon return.\"\"\"\ninput ProjectOrder {\n  \"\"\"The field in which to order projects by.\"\"\"\n  field: ProjectOrderField!\n\n  \"\"\"The direction in which to order projects by the specified field.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which project connections can be ordered.\"\"\"\nenum ProjectOrderField {\n  \"\"\"Order projects by creation time\"\"\"\n  CREATED_AT\n\n  \"\"\"Order projects by update time\"\"\"\n  UPDATED_AT\n\n  \"\"\"Order projects by name\"\"\"\n  NAME\n}\n\n\"\"\"Represents an owner of a Project.\"\"\"\ninterface ProjectOwner {\n  id: ID!\n\n  \"\"\"Find project by number.\"\"\"\n  project(\n    \"\"\"The project number to find.\"\"\"\n    number: Int!\n  ): Project\n\n  \"\"\"A list of projects under the owner.\"\"\"\n  projects(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Ordering options for projects returned from the connection\"\"\"\n    orderBy: ProjectOrder\n\n    \"\"\"Query to search projects by, currently only searching by name.\"\"\"\n    search: String\n\n    \"\"\"A list of states to filter the projects by.\"\"\"\n    states: [ProjectState!]\n  ): ProjectConnection!\n\n  \"\"\"The HTTP path listing owners projects\"\"\"\n  projectsResourcePath: URI!\n\n  \"\"\"The HTTP URL listing owners projects\"\"\"\n  projectsUrl: URI!\n\n  \"\"\"Can the current viewer create new projects on this owner.\"\"\"\n  viewerCanCreateProjects: Boolean!\n}\n\n\"\"\"State of the project; either 'open' or 'closed'\"\"\"\nenum ProjectState {\n  \"\"\"The project is open.\"\"\"\n  OPEN\n\n  \"\"\"The project is closed.\"\"\"\n  CLOSED\n}\n\n\"\"\"A repository protected branch.\"\"\"\ntype ProtectedBranch implements Node {\n  \"\"\"The actor who created this protected branch.\"\"\"\n  creator: Actor\n\n  \"\"\"\n  Will new commits pushed to this branch dismiss pull request review approvals.\n  \"\"\"\n  hasDismissableStaleReviews: Boolean!\n\n  \"\"\"Are reviews required to update this branch.\"\"\"\n  hasRequiredReviews: Boolean!\n\n  \"\"\"Are status checks required to update this branch.\"\"\"\n  hasRequiredStatusChecks: Boolean!\n\n  \"\"\"Is pushing to this branch restricted.\"\"\"\n  hasRestrictedPushes: Boolean!\n\n  \"\"\"Is dismissal of pull request reviews restricted.\"\"\"\n  hasRestrictedReviewDismissals: Boolean!\n\n  \"\"\"Are branches required to be up to date before merging.\"\"\"\n  hasStrictRequiredStatusChecks: Boolean!\n  id: ID!\n\n  \"\"\"Can admins overwrite branch protection.\"\"\"\n  isAdminEnforced: Boolean!\n\n  \"\"\"Identifies the name of the protected branch.\"\"\"\n  name: String!\n\n  \"\"\"A list push allowances for this protected branch.\"\"\"\n  pushAllowances(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): PushAllowanceConnection!\n\n  \"\"\"The repository associated with this protected branch.\"\"\"\n  repository: Repository!\n\n  \"\"\"\n  List of required status check contexts that must pass for commits to be accepted to this branch.\n  \"\"\"\n  requiredStatusCheckContexts: [String]\n\n  \"\"\"A list review dismissal allowances for this protected branch.\"\"\"\n  reviewDismissalAllowances(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ReviewDismissalAllowanceConnection!\n}\n\n\"\"\"The connection type for ProtectedBranch.\"\"\"\ntype ProtectedBranchConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ProtectedBranchEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [ProtectedBranch]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ProtectedBranchEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: ProtectedBranch\n}\n\n\"\"\"A user's public key.\"\"\"\ntype PublicKey implements Node {\n  id: ID!\n\n  \"\"\"The public key string\"\"\"\n  key: String!\n}\n\n\"\"\"The connection type for PublicKey.\"\"\"\ntype PublicKeyConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [PublicKeyEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [PublicKey]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PublicKeyEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: PublicKey\n}\n\n\"\"\"A repository pull request.\"\"\"\ntype PullRequest implements Node & Assignable & Closable & Comment & Updatable & UpdatableComment & Labelable & Lockable & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable {\n  \"\"\"The number of additions in this pull request.\"\"\"\n  additions: Int!\n\n  \"\"\"A list of Users assigned to this object.\"\"\"\n  assignees(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n\n  \"\"\"The actor who authored the comment.\"\"\"\n  author: Actor\n\n  \"\"\"Author's association with the subject of the comment.\"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"Identifies the base Ref associated with the pull request.\"\"\"\n  baseRef: Ref\n\n  \"\"\"\n  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.\n  \"\"\"\n  baseRefName: String!\n\n  \"\"\"Identifies the body of the pull request.\"\"\"\n  body: String!\n\n  \"\"\"Identifies the body of the pull request rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"Identifies the body of the pull request rendered to text.\"\"\"\n  bodyText: String!\n\n  \"\"\"The number of changed files in this pull request.\"\"\"\n  changedFiles: Int!\n\n  \"\"\"`true` if the pull request is closed\"\"\"\n  closed: Boolean!\n\n  \"\"\"Identifies the date and time when the object was closed.\"\"\"\n  closedAt: DateTime\n\n  \"\"\"A list of comments associated with the pull request.\"\"\"\n  comments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): IssueCommentConnection!\n\n  \"\"\"\n  A list of commits present in this pull request's head branch not present in the base branch.\n  \"\"\"\n  commits(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): PullRequestCommitConnection!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Check if this comment was created via an email reply.\"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The number of deletions in this pull request.\"\"\"\n  deletions: Int!\n\n  \"\"\"The actor who edited this pull request's body.\"\"\"\n  editor: Actor\n\n  \"\"\"Identifies the head Ref associated with the pull request.\"\"\"\n  headRef: Ref\n\n  \"\"\"\n  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.\n  \"\"\"\n  headRefName: String!\n\n  \"\"\"The repository associated with this pull request's head Ref.\"\"\"\n  headRepository: Repository\n\n  \"\"\"\n  The owner of the repository associated with this pull request's head Ref.\n  \"\"\"\n  headRepositoryOwner: RepositoryOwner\n  id: ID!\n\n  \"\"\"The head and base repositories are different.\"\"\"\n  isCrossRepository: Boolean!\n\n  \"\"\"A list of labels associated with the object.\"\"\"\n  labels(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): LabelConnection\n\n  \"\"\"The moment the editor made the last edit\"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"`true` if the pull request is locked\"\"\"\n  locked: Boolean!\n\n  \"\"\"The commit that was created when this pull request was merged.\"\"\"\n  mergeCommit: Commit\n\n  \"\"\"\n  Whether or not the pull request can be merged based on the existence of merge conflicts.\n  \"\"\"\n  mergeable: MergeableState!\n\n  \"\"\"Whether or not the pull request was merged.\"\"\"\n  merged: Boolean!\n\n  \"\"\"The date and time that the pull request was merged.\"\"\"\n  mergedAt: DateTime\n\n  \"\"\"Identifies the milestone associated with the pull request.\"\"\"\n  milestone: Milestone\n\n  \"\"\"Identifies the pull request number.\"\"\"\n  number: Int!\n\n  \"\"\"\n  A list of Users that are participating in the Pull Request conversation.\n  \"\"\"\n  participants(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n\n  \"\"\"\n  The commit that GitHub automatically generated to test if this pull request\n  could be merged. This field will not return a value if the pull request is\n  merged, or if the test merge commit is still being generated. See the\n  `mergeable` field for more details on the mergeability of the pull request.\n  \"\"\"\n  potentialMergeCommit: Commit\n\n  \"\"\"List of project cards associated with this pull request.\"\"\"\n  projectCards(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ProjectCardConnection!\n\n  \"\"\"Identifies when the comment was published at.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"A list of reactions grouped by content left on the subject.\"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"A list of Reactions left on the Issue.\"\"\"\n  reactions(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Allows filtering Reactions by emoji.\"\"\"\n    content: ReactionContent\n\n    \"\"\"Allows specifying the order in which reactions are returned.\"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"The repository associated with this node.\"\"\"\n  repository: Repository!\n\n  \"\"\"The HTTP path for this pull request.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The HTTP path for reverting this pull request.\"\"\"\n  revertResourcePath: URI!\n\n  \"\"\"The HTTP URL for reverting this pull request.\"\"\"\n  revertUrl: URI!\n\n  \"\"\"A list of review requests associated with the pull request.\"\"\"\n  reviewRequests(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ReviewRequestConnection\n\n  \"\"\"A list of reviews associated with the pull request.\"\"\"\n  reviews(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of states to filter the reviews.\"\"\"\n    states: [PullRequestReviewState!]\n\n    \"\"\"Filter by author of the review.\"\"\"\n    author: String\n  ): PullRequestReviewConnection\n\n  \"\"\"Identifies the state of the pull request.\"\"\"\n  state: PullRequestState!\n\n  \"\"\"\n  A list of reviewer suggestions based on commit history and past review comments.\n  \"\"\"\n  suggestedReviewers: [SuggestedReviewer]!\n\n  \"\"\"\n  A list of events, comments, commits, etc. associated with the pull request.\n  \"\"\"\n  timeline(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Allows filtering timeline events by a `since` timestamp.\"\"\"\n    since: DateTime\n  ): PullRequestTimelineConnection!\n\n  \"\"\"Identifies the pull request title.\"\"\"\n  title: String!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this pull request.\"\"\"\n  url: URI!\n\n  \"\"\"Can user react to this subject\"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"Reasons why the current viewer can not update this comment.\"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"Did the viewer author this comment.\"\"\"\n  viewerDidAuthor: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState!\n}\n\n\"\"\"Represents a Git commit part of a pull request.\"\"\"\ntype PullRequestCommit implements Node & UniformResourceLocatable {\n  \"\"\"The Git commit object\"\"\"\n  commit: Commit!\n  id: ID!\n\n  \"\"\"The pull request this commit belongs to\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"The HTTP path for this pull request commit\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The HTTP URL for this pull request commit\"\"\"\n  url: URI!\n}\n\n\"\"\"The connection type for PullRequestCommit.\"\"\"\ntype PullRequestCommitConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [PullRequestCommitEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [PullRequestCommit]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PullRequestCommitEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: PullRequestCommit\n}\n\n\"\"\"The connection type for PullRequest.\"\"\"\ntype PullRequestConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [PullRequestEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [PullRequest]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PullRequestEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: PullRequest\n}\n\n\"\"\"The possible PubSub channels for a pull request.\"\"\"\nenum PullRequestPubSubTopic {\n  \"\"\"The channel ID for observing pull request updates.\"\"\"\n  UPDATED\n\n  \"\"\"The channel ID for marking an pull request as read.\"\"\"\n  MARKASREAD\n\n  \"\"\"The channel ID for observing head ref updates.\"\"\"\n  HEAD_REF\n}\n\n\"\"\"A review object for a given pull request.\"\"\"\ntype PullRequestReview implements Node & Comment & Deletable & Updatable & UpdatableComment & RepositoryNode {\n  \"\"\"The actor who authored the comment.\"\"\"\n  author: Actor\n\n  \"\"\"Author's association with the subject of the comment.\"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"Identifies the pull request review body.\"\"\"\n  body: String!\n\n  \"\"\"The body of this review rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"The body of this review rendered as plain text.\"\"\"\n  bodyText: String!\n\n  \"\"\"A list of review comments for the current pull request review.\"\"\"\n  comments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): PullRequestReviewCommentConnection!\n\n  \"\"\"Identifies the commit associated with this pull request review.\"\"\"\n  commit: Commit\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Check if this comment was created via an email reply.\"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The actor who edited the comment.\"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"The moment the editor made the last edit\"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"Identifies when the comment was published at.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"Identifies the pull request associated with this pull request review.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"The repository associated with this node.\"\"\"\n  repository: Repository!\n\n  \"\"\"The HTTP path permalink for this PullRequestReview.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies the current state of the pull request review.\"\"\"\n  state: PullRequestReviewState!\n\n  \"\"\"Identifies when the Pull Request Review was submitted\"\"\"\n  submittedAt: DateTime\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL permalink for this PullRequestReview.\"\"\"\n  url: URI!\n\n  \"\"\"Check if the current viewer can delete this object.\"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"Reasons why the current viewer can not update this comment.\"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"Did the viewer author this comment.\"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"A review comment associated with a given repository pull request.\"\"\"\ntype PullRequestReviewComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {\n  \"\"\"The actor who authored the comment.\"\"\"\n  author: Actor\n\n  \"\"\"Author's association with the subject of the comment.\"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"The comment body of this review comment.\"\"\"\n  body: String!\n\n  \"\"\"The comment body of this review comment rendered to HTML.\"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"The comment body of this review comment rendered as plain text.\"\"\"\n  bodyText: String!\n\n  \"\"\"Identifies the commit associated with the comment.\"\"\"\n  commit: Commit!\n\n  \"\"\"Identifies when the comment was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Check if this comment was created via an email reply.\"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The diff hunk to which the comment applies.\"\"\"\n  diffHunk: String!\n\n  \"\"\"Identifies when the comment was created in a draft state.\"\"\"\n  draftedAt: DateTime!\n\n  \"\"\"The actor who edited the comment.\"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"The moment the editor made the last edit\"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"Identifies the original commit associated with the comment.\"\"\"\n  originalCommit: Commit\n\n  \"\"\"The original line index in the diff to which the comment applies.\"\"\"\n  originalPosition: Int!\n\n  \"\"\"The path to which the comment applies.\"\"\"\n  path: String!\n\n  \"\"\"The line index in the diff to which the comment applies.\"\"\"\n  position: Int\n\n  \"\"\"Identifies when the comment was published at.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"The pull request associated with this review comment.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"The pull request review associated with this review comment.\"\"\"\n  pullRequestReview: PullRequestReview\n\n  \"\"\"A list of reactions grouped by content left on the subject.\"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"A list of Reactions left on the Issue.\"\"\"\n  reactions(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Allows filtering Reactions by emoji.\"\"\"\n    content: ReactionContent\n\n    \"\"\"Allows specifying the order in which reactions are returned.\"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"The comment this is a reply to.\"\"\"\n  replyTo: PullRequestReviewComment\n\n  \"\"\"The repository associated with this node.\"\"\"\n  repository: Repository!\n\n  \"\"\"The HTTP path permalink for this review comment.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies when the comment was last updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The HTTP URL permalink for this review comment.\"\"\"\n  url: URI!\n\n  \"\"\"Check if the current viewer can delete this object.\"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"Can user react to this subject\"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"Reasons why the current viewer can not update this comment.\"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"Did the viewer author this comment.\"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"The connection type for PullRequestReviewComment.\"\"\"\ntype PullRequestReviewCommentConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [PullRequestReviewCommentEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [PullRequestReviewComment]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PullRequestReviewCommentEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: PullRequestReviewComment\n}\n\n\"\"\"The connection type for PullRequestReview.\"\"\"\ntype PullRequestReviewConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [PullRequestReviewEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [PullRequestReview]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PullRequestReviewEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: PullRequestReview\n}\n\n\"\"\"The possible events to perform on a pull request review.\"\"\"\nenum PullRequestReviewEvent {\n  \"\"\"Submit general feedback without explicit approval.\"\"\"\n  COMMENT\n\n  \"\"\"Submit feedback and approve merging these changes.\"\"\"\n  APPROVE\n\n  \"\"\"Submit feedback that must be addressed before merging.\"\"\"\n  REQUEST_CHANGES\n\n  \"\"\"Dismiss review so it now longer effects merging.\"\"\"\n  DISMISS\n}\n\n\"\"\"The possible states of a pull request review.\"\"\"\nenum PullRequestReviewState {\n  \"\"\"A review that has not yet been submitted.\"\"\"\n  PENDING\n\n  \"\"\"An informational review.\"\"\"\n  COMMENTED\n\n  \"\"\"A review allowing the pull request to merge.\"\"\"\n  APPROVED\n\n  \"\"\"A review blocking the pull request from merging.\"\"\"\n  CHANGES_REQUESTED\n\n  \"\"\"A review that has been dismissed.\"\"\"\n  DISMISSED\n}\n\n\"\"\"A threaded list of comments for a given pull request.\"\"\"\ntype PullRequestReviewThread implements Node {\n  \"\"\"A list of pull request comments associated with the thread.\"\"\"\n  comments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): PullRequestReviewCommentConnection!\n  id: ID!\n\n  \"\"\"Identifies the pull request associated with this thread.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"Identifies the repository associated with this thread.\"\"\"\n  repository: Repository!\n}\n\n\"\"\"The possible states of a pull request.\"\"\"\nenum PullRequestState {\n  \"\"\"A pull request that is still open.\"\"\"\n  OPEN\n\n  \"\"\"A pull request that has been closed without being merged.\"\"\"\n  CLOSED\n\n  \"\"\"A pull request that has been closed by being merged.\"\"\"\n  MERGED\n}\n\n\"\"\"The connection type for PullRequestTimelineItem.\"\"\"\ntype PullRequestTimelineConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [PullRequestTimelineItemEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [PullRequestTimelineItem]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An item in an pull request timeline\"\"\"\nunion PullRequestTimelineItem = Commit | CommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestReviewComment | IssueComment | ClosedEvent | ReopenedEvent | SubscribedEvent | UnsubscribedEvent | MergedEvent | ReferencedEvent | CrossReferencedEvent | AssignedEvent | UnassignedEvent | LabeledEvent | UnlabeledEvent | MilestonedEvent | DemilestonedEvent | RenamedTitleEvent | LockedEvent | UnlockedEvent | DeployedEvent | HeadRefDeletedEvent | HeadRefRestoredEvent | HeadRefForcePushedEvent | BaseRefForcePushedEvent | ReviewRequestedEvent | ReviewRequestRemovedEvent | ReviewDismissedEvent\n\n\"\"\"An edge in a connection.\"\"\"\ntype PullRequestTimelineItemEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: PullRequestTimelineItem\n}\n\n\"\"\"A team or user who has the ability to push to a protected branch.\"\"\"\ntype PushAllowance implements Node {\n  \"\"\"The actor that can push.\"\"\"\n  actor: PushAllowanceActor\n  id: ID!\n\n  \"\"\"\n  Identifies the protected branch associated with the allowed user or team.\n  \"\"\"\n  protectedBranch: ProtectedBranch!\n}\n\n\"\"\"Types that can be an actor.\"\"\"\nunion PushAllowanceActor = User | Team\n\n\"\"\"The connection type for PushAllowance.\"\"\"\ntype PushAllowanceConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [PushAllowanceEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [PushAllowance]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PushAllowanceEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: PushAllowance\n}\n\n\"\"\"The query root of GitHub's GraphQL interface.\"\"\"\ntype Query {\n  \"\"\"Look up a code of conduct by its key\"\"\"\n  codeOfConduct(\n    \"\"\"The code of conduct's key\"\"\"\n    key: String!\n  ): CodeOfConduct\n\n  \"\"\"Look up a code of conduct by its key\"\"\"\n  codesOfConduct: [CodeOfConduct]\n\n  \"\"\"Look up an open source license by its key\"\"\"\n  license(\n    \"\"\"The license's downcased SPDX ID\"\"\"\n    key: String!\n  ): License\n\n  \"\"\"Return a list of known open source licenses\"\"\"\n  licenses: [License]!\n\n  \"\"\"Get alphabetically sorted list of Marketplace categories\"\"\"\n  marketplaceCategories(\n    \"\"\"Exclude categories with no listings.\"\"\"\n    excludeEmpty: Boolean\n  ): [MarketplaceCategory!]!\n\n  \"\"\"Look up a Marketplace category by its slug.\"\"\"\n  marketplaceCategory(\n    \"\"\"The URL slug of the category.\"\"\"\n    slug: String!\n  ): MarketplaceCategory\n\n  \"\"\"Look up a single Marketplace listing\"\"\"\n  marketplaceListing(\n    \"\"\"\n    Select the listing that matches this slug. It's the short name of the listing used in its URL.\n    \"\"\"\n    slug: String!\n  ): MarketplaceListing\n\n  \"\"\"Look up Marketplace listings\"\"\"\n  marketplaceListings(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Select only listings with the given category.\"\"\"\n    categorySlug: String\n\n    \"\"\"\n    Select listings to which user has admin access. If omitted, listings visible to the\n    viewer are returned.\n\n    \"\"\"\n    viewerCanAdmin: Boolean\n\n    \"\"\"Select listings that can be administered by the specified user.\"\"\"\n    adminId: ID\n\n    \"\"\"Select listings for products owned by the specified organization.\"\"\"\n    organizationId: ID\n\n    \"\"\"\n    Select listings visible to the viewer even if they are not approved. If omitted or\n    false, only approved listings will be returned.\n\n    \"\"\"\n    allStates: Boolean\n\n    \"\"\"\n    Select the listings with these slugs, if they are visible to the viewer.\n    \"\"\"\n    slugs: [String]\n\n    \"\"\"\n    Select only listings where the primary category matches the given category slug.\n    \"\"\"\n    primaryCategoryOnly: Boolean = false\n\n    \"\"\"Select only listings that offer a free trial.\"\"\"\n    withFreeTrialsOnly: Boolean = false\n  ): MarketplaceListingConnection!\n\n  \"\"\"Return information about the GitHub instance\"\"\"\n  meta: GitHubMetadata!\n\n  \"\"\"Fetches an object given its ID.\"\"\"\n  node(\n    \"\"\"ID of the object.\"\"\"\n    id: ID!\n  ): Node\n\n  \"\"\"Lookup nodes by a list of IDs.\"\"\"\n  nodes(\n    \"\"\"The list of node IDs.\"\"\"\n    ids: [ID!]!\n  ): [Node]!\n\n  \"\"\"Lookup a organization by login.\"\"\"\n  organization(\n    \"\"\"The organization's login.\"\"\"\n    login: String!\n  ): Organization\n\n  \"\"\"The client's rate limit information.\"\"\"\n  rateLimit(\n    \"\"\"If true, calculate the cost for the query without evaluating it\"\"\"\n    dryRun: Boolean = false\n  ): RateLimit\n\n  \"\"\"\n  Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object\n  \"\"\"\n  relay: Query!\n\n  \"\"\"Lookup a given repository by the owner and repository name.\"\"\"\n  repository(\n    \"\"\"The login field of a user or organization\"\"\"\n    owner: String!\n\n    \"\"\"The name of the repository\"\"\"\n    name: String!\n  ): Repository\n\n  \"\"\"\n  Lookup a repository owner (ie. either a User or an Organization) by login.\n  \"\"\"\n  repositoryOwner(\n    \"\"\"The username to lookup the owner by.\"\"\"\n    login: String!\n  ): RepositoryOwner\n\n  \"\"\"Lookup resource by a URL.\"\"\"\n  resource(\n    \"\"\"The URL.\"\"\"\n    url: URI!\n  ): UniformResourceLocatable\n\n  \"\"\"Perform a search across resources.\"\"\"\n  search(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"The search string to look for.\"\"\"\n    query: String!\n\n    \"\"\"The types of search items to search within.\"\"\"\n    type: SearchType!\n  ): SearchResultItemConnection!\n\n  \"\"\"Look up a topic by name.\"\"\"\n  topic(\n    \"\"\"The topic's name.\"\"\"\n    name: String!\n  ): Topic\n\n  \"\"\"Lookup a user by login.\"\"\"\n  user(\n    \"\"\"The user's login.\"\"\"\n    login: String!\n  ): User\n\n  \"\"\"The currently authenticated user.\"\"\"\n  viewer: User!\n}\n\n\"\"\"Represents the client's rate limit.\"\"\"\ntype RateLimit {\n  \"\"\"The point cost for the current query counting against the rate limit.\"\"\"\n  cost: Int!\n\n  \"\"\"\n  The maximum number of points the client is permitted to consume in a 60 minute window.\n  \"\"\"\n  limit: Int!\n\n  \"\"\"The maximum number of nodes this query may return\"\"\"\n  nodeCount: Int!\n\n  \"\"\"The number of points remaining in the current rate limit window.\"\"\"\n  remaining: Int!\n\n  \"\"\"\n  The time at which the current rate limit window resets in UTC epoch seconds.\n  \"\"\"\n  resetAt: DateTime!\n}\n\n\"\"\"Represents a subject that can be reacted on.\"\"\"\ninterface Reactable {\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n\n  \"\"\"A list of reactions grouped by content left on the subject.\"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"A list of Reactions left on the Issue.\"\"\"\n  reactions(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Allows filtering Reactions by emoji.\"\"\"\n    content: ReactionContent\n\n    \"\"\"Allows specifying the order in which reactions are returned.\"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"Can user react to this subject\"\"\"\n  viewerCanReact: Boolean!\n}\n\n\"\"\"The connection type for User.\"\"\"\ntype ReactingUserConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ReactingUserEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [User]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents a user that's made a reaction.\"\"\"\ntype ReactingUserEdge {\n  cursor: String!\n  node: User!\n\n  \"\"\"The moment when the user made the reaction.\"\"\"\n  reactedAt: DateTime!\n}\n\n\"\"\"An emoji reaction to a particular piece of content.\"\"\"\ntype Reaction implements Node {\n  \"\"\"Identifies the emoji reaction.\"\"\"\n  content: ReactionContent!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n\n  \"\"\"The reactable piece of content\"\"\"\n  reactable: Reactable!\n\n  \"\"\"Identifies the user who created this reaction.\"\"\"\n  user: User\n}\n\n\"\"\"A list of reactions that have been left on the subject.\"\"\"\ntype ReactionConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ReactionEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Reaction]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n\n  \"\"\"\n  Whether or not the authenticated user has left a reaction on the subject.\n  \"\"\"\n  viewerHasReacted: Boolean!\n}\n\n\"\"\"Emojis that can be attached to Issues, Pull Requests and Comments.\"\"\"\nenum ReactionContent {\n  \"\"\"Represents the 👍 emoji.\"\"\"\n  THUMBS_UP\n\n  \"\"\"Represents the 👎 emoji.\"\"\"\n  THUMBS_DOWN\n\n  \"\"\"Represents the 😄 emoji.\"\"\"\n  LAUGH\n\n  \"\"\"Represents the 🎉 emoji.\"\"\"\n  HOORAY\n\n  \"\"\"Represents the 😕 emoji.\"\"\"\n  CONFUSED\n\n  \"\"\"Represents the ❤️ emoji.\"\"\"\n  HEART\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ReactionEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Reaction\n}\n\n\"\"\"A group of emoji reactions to a particular piece of content.\"\"\"\ntype ReactionGroup {\n  \"\"\"Identifies the emoji reaction.\"\"\"\n  content: ReactionContent!\n\n  \"\"\"Identifies when the reaction was created.\"\"\"\n  createdAt: DateTime\n\n  \"\"\"The subject that was reacted to.\"\"\"\n  subject: Reactable!\n\n  \"\"\"\n  Users who have reacted to the reaction subject with the emotion represented by this reaction group\n  \"\"\"\n  users(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ReactingUserConnection!\n\n  \"\"\"\n  Whether or not the authenticated user has left a reaction on the subject.\n  \"\"\"\n  viewerHasReacted: Boolean!\n}\n\n\"\"\"Ways in which lists of reactions can be ordered upon return.\"\"\"\ninput ReactionOrder {\n  \"\"\"The field in which to order reactions by.\"\"\"\n  field: ReactionOrderField!\n\n  \"\"\"The direction in which to order reactions by the specified field.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"A list of fields that reactions can be ordered by.\"\"\"\nenum ReactionOrderField {\n  \"\"\"Allows ordering a list of reactions by when they were created.\"\"\"\n  CREATED_AT\n}\n\n\"\"\"Represents a Git reference.\"\"\"\ntype Ref implements Node {\n  \"\"\"A list of pull requests with this ref as the head ref.\"\"\"\n  associatedPullRequests(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of states to filter the pull requests by.\"\"\"\n    states: [PullRequestState!]\n\n    \"\"\"A list of label names to filter the pull requests by.\"\"\"\n    labels: [String!]\n\n    \"\"\"The head ref name to filter the pull requests by.\"\"\"\n    headRefName: String\n\n    \"\"\"The base ref name to filter the pull requests by.\"\"\"\n    baseRefName: String\n\n    \"\"\"Ordering options for pull requests returned from the connection.\"\"\"\n    orderBy: IssueOrder\n  ): PullRequestConnection!\n  id: ID!\n\n  \"\"\"The ref name.\"\"\"\n  name: String!\n\n  \"\"\"The ref's prefix, such as `refs/heads/` or `refs/tags/`.\"\"\"\n  prefix: String!\n\n  \"\"\"The repository the ref belongs to.\"\"\"\n  repository: Repository!\n\n  \"\"\"The object the ref points to.\"\"\"\n  target: GitObject!\n}\n\n\"\"\"The connection type for Ref.\"\"\"\ntype RefConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [RefEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Ref]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype RefEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Ref\n}\n\n\"\"\"Represents a 'referenced' event on a given `ReferencedSubject`.\"\"\"\ntype ReferencedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the commit associated with the 'referenced' event.\"\"\"\n  commit: Commit\n\n  \"\"\"Identifies the repository associated with the 'referenced' event.\"\"\"\n  commitRepository: Repository!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Reference originated in a different repository.\"\"\"\n  isCrossReference: Boolean! @deprecated(reason: \"Use ReferencedEvent.isCrossRepository instead.\")\n\n  \"\"\"Reference originated in a different repository.\"\"\"\n  isCrossRepository: Boolean!\n\n  \"\"\"\n  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.\n  \"\"\"\n  isDirectReference: Boolean!\n\n  \"\"\"Object referenced by event.\"\"\"\n  subject: ReferencedSubject!\n}\n\n\"\"\"Any referencable object\"\"\"\nunion ReferencedSubject = Issue | PullRequest\n\n\"\"\"Ways in which lists of git refs can be ordered upon return.\"\"\"\ninput RefOrder {\n  \"\"\"The field in which to order refs by.\"\"\"\n  field: RefOrderField!\n\n  \"\"\"The direction in which to order refs by the specified field.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which ref connections can be ordered.\"\"\"\nenum RefOrderField {\n  \"\"\"Order refs by underlying commit date if the ref prefix is refs/tags/\"\"\"\n  TAG_COMMIT_DATE\n\n  \"\"\"Order refs by their alphanumeric name\"\"\"\n  ALPHABETICAL\n}\n\n\"\"\"A release contains the content for a release.\"\"\"\ntype Release implements Node & UniformResourceLocatable {\n  \"\"\"The author of the release\"\"\"\n  author: User\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the description of the release.\"\"\"\n  description: String\n  id: ID!\n\n  \"\"\"Whether or not the release is a draft\"\"\"\n  isDraft: Boolean!\n\n  \"\"\"Whether or not the release is a prerelease\"\"\"\n  isPrerelease: Boolean!\n\n  \"\"\"Identifies the title of the release.\"\"\"\n  name: String\n\n  \"\"\"Identifies the date and time when the release was created.\"\"\"\n  publishedAt: DateTime\n\n  \"\"\"List of releases assets which are dependent on this release.\"\"\"\n  releaseAssets(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of names to filter the assets by.\"\"\"\n    name: String\n  ): ReleaseAssetConnection!\n\n  \"\"\"The HTTP path for this issue\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The Git tag the release points to\"\"\"\n  tag: Ref\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this issue\"\"\"\n  url: URI!\n}\n\n\"\"\"A release asset contains the content for a release asset.\"\"\"\ntype ReleaseAsset implements Node {\n  \"\"\"The asset's content-type\"\"\"\n  contentType: String!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The number of times this asset was downloaded\"\"\"\n  downloadCount: Int!\n\n  \"\"\"\n  Identifies the URL where you can download the release asset via the browser.\n  \"\"\"\n  downloadUrl: URI!\n  id: ID!\n\n  \"\"\"Identifies the title of the release asset.\"\"\"\n  name: String!\n\n  \"\"\"Release that the asset is associated with\"\"\"\n  release: Release\n\n  \"\"\"The size (in bytes) of the asset\"\"\"\n  size: Int!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The user that performed the upload\"\"\"\n  uploadedBy: User!\n\n  \"\"\"Identifies the URL of the release asset.\"\"\"\n  url: URI!\n}\n\n\"\"\"The connection type for ReleaseAsset.\"\"\"\ntype ReleaseAssetConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ReleaseAssetEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [ReleaseAsset]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ReleaseAssetEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: ReleaseAsset\n}\n\n\"\"\"The connection type for Release.\"\"\"\ntype ReleaseConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ReleaseEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Release]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ReleaseEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Release\n}\n\n\"\"\"Ways in which lists of releases can be ordered upon return.\"\"\"\ninput ReleaseOrder {\n  \"\"\"The field in which to order releases by.\"\"\"\n  field: ReleaseOrderField!\n\n  \"\"\"The direction in which to order releases by the specified field.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which release connections can be ordered.\"\"\"\nenum ReleaseOrderField {\n  \"\"\"Order releases by creation time\"\"\"\n  CREATED_AT\n\n  \"\"\"Order releases alphabetically by name\"\"\"\n  NAME\n}\n\n\"\"\"\nRepresents a 'removed_from_project' event on a given issue or pull request.\n\"\"\"\ntype RemovedFromProjectEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n}\n\n\"\"\"Autogenerated input type of RemoveOutsideCollaborator\"\"\"\ninput RemoveOutsideCollaboratorInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The ID of the outside collaborator to remove.\"\"\"\n  userId: ID!\n\n  \"\"\"The ID of the organization to remove the outside collaborator from.\"\"\"\n  organizationId: ID!\n}\n\n\"\"\"Autogenerated return type of RemoveOutsideCollaborator\"\"\"\ntype RemoveOutsideCollaboratorPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The user that was removed as an outside collaborator.\"\"\"\n  removedUser: User!\n}\n\n\"\"\"Autogenerated input type of RemoveReaction\"\"\"\ninput RemoveReactionInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the subject to modify.\"\"\"\n  subjectId: ID!\n\n  \"\"\"The name of the emoji to react with.\"\"\"\n  content: ReactionContent!\n}\n\n\"\"\"Autogenerated return type of RemoveReaction\"\"\"\ntype RemoveReactionPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The reaction object.\"\"\"\n  reaction: Reaction!\n\n  \"\"\"The reactable subject.\"\"\"\n  subject: Reactable!\n}\n\n\"\"\"Autogenerated input type of RemoveStar\"\"\"\ninput RemoveStarInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Starrable ID to unstar.\"\"\"\n  starrableId: ID!\n}\n\n\"\"\"Autogenerated return type of RemoveStar\"\"\"\ntype RemoveStarPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The starrable.\"\"\"\n  starrable: Starrable!\n}\n\n\"\"\"Represents a 'renamed' event on a given issue or pull request\"\"\"\ntype RenamedTitleEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the current title of the issue or pull request.\"\"\"\n  currentTitle: String!\n  id: ID!\n\n  \"\"\"Identifies the previous title of the issue or pull request.\"\"\"\n  previousTitle: String!\n\n  \"\"\"Subject that was renamed.\"\"\"\n  subject: RenamedTitleSubject!\n}\n\n\"\"\"An object which has a renamable title\"\"\"\nunion RenamedTitleSubject = Issue | PullRequest\n\n\"\"\"Represents a 'reopened' event on any `Closable`.\"\"\"\ntype ReopenedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Object that was reopened.\"\"\"\n  closable: Closable!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n}\n\n\"\"\"A repository contains the content for a project.\"\"\"\ntype Repository implements Node & ProjectOwner & Subscribable & Starrable & UniformResourceLocatable & RepositoryInfo {\n  \"\"\"A list of users that can be assigned to issues in this repository.\"\"\"\n  assignableUsers(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n\n  \"\"\"Returns the code of conduct for this repository\"\"\"\n  codeOfConduct: CodeOfConduct\n\n  \"\"\"A list of collaborators associated with the repository.\"\"\"\n  collaborators(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Collaborators affiliation level with a repository.\"\"\"\n    affiliation: CollaboratorAffiliation\n  ): RepositoryCollaboratorConnection\n\n  \"\"\"A list of commit comments associated with the repository.\"\"\"\n  commitComments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): CommitCommentConnection!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The Ref associated with the repository's default branch.\"\"\"\n  defaultBranchRef: Ref\n\n  \"\"\"A list of protected branches that are on this repository.\"\"\"\n  deployKeys(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): DeployKeyConnection!\n\n  \"\"\"Deployments associated with the repository\"\"\"\n  deployments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Environments to list deployments for\"\"\"\n    environments: [String!]\n  ): DeploymentConnection!\n\n  \"\"\"The description of the repository.\"\"\"\n  description: String\n\n  \"\"\"The description of the repository rendered to HTML.\"\"\"\n  descriptionHTML: HTML!\n\n  \"\"\"The number of kilobytes this repository occupies on disk.\"\"\"\n  diskUsage: Int\n\n  \"\"\"\n  Returns how many forks there are of this repository in the whole network.\n  \"\"\"\n  forkCount: Int!\n\n  \"\"\"A list of direct forked repositories.\"\"\"\n  forks(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n  ): RepositoryConnection!\n\n  \"\"\"Indicates if the repository has issues feature enabled.\"\"\"\n  hasIssuesEnabled: Boolean!\n\n  \"\"\"Indicates if the repository has wiki feature enabled.\"\"\"\n  hasWikiEnabled: Boolean!\n\n  \"\"\"The repository's URL.\"\"\"\n  homepageUrl: URI\n  id: ID!\n\n  \"\"\"Indicates if the repository is unmaintained.\"\"\"\n  isArchived: Boolean!\n\n  \"\"\"Identifies if the repository is a fork.\"\"\"\n  isFork: Boolean!\n\n  \"\"\"Indicates if the repository has been locked or not.\"\"\"\n  isLocked: Boolean!\n\n  \"\"\"Identifies if the repository is a mirror.\"\"\"\n  isMirror: Boolean!\n\n  \"\"\"Identifies if the repository is private.\"\"\"\n  isPrivate: Boolean!\n\n  \"\"\"Returns a single issue from the current repository by number.\"\"\"\n  issue(\n    \"\"\"The number for the issue to be returned.\"\"\"\n    number: Int!\n  ): Issue\n\n  \"\"\"\n  Returns a single issue-like object from the current repository by number.\n  \"\"\"\n  issueOrPullRequest(\n    \"\"\"The number for the issue to be returned.\"\"\"\n    number: Int!\n  ): IssueOrPullRequest\n\n  \"\"\"A list of issues that have been opened in the repository.\"\"\"\n  issues(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of label names to filter the pull requests by.\"\"\"\n    labels: [String!]\n\n    \"\"\"Ordering options for issues returned from the connection.\"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"A list of states to filter the issues by.\"\"\"\n    states: [IssueState!]\n  ): IssueConnection!\n\n  \"\"\"Returns a single label by name\"\"\"\n  label(\n    \"\"\"Label name\"\"\"\n    name: String!\n  ): Label\n\n  \"\"\"A list of labels associated with the repository.\"\"\"\n  labels(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): LabelConnection\n\n  \"\"\"\n  A list containing a breakdown of the language composition of the repository.\n  \"\"\"\n  languages(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Order for connection\"\"\"\n    orderBy: LanguageOrder\n  ): LanguageConnection\n\n  \"\"\"The license associated with the repository\"\"\"\n  license: String @deprecated(reason: \"Use Repository.licenseInfo instead.\")\n\n  \"\"\"The license associated with the repository\"\"\"\n  licenseInfo: License\n\n  \"\"\"The reason the repository has been locked.\"\"\"\n  lockReason: RepositoryLockReason\n\n  \"\"\"\n  A list of Users that can be mentioned in the context of the repository.\n  \"\"\"\n  mentionableUsers(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n\n  \"\"\"Returns a single milestone from the current repository by number.\"\"\"\n  milestone(\n    \"\"\"The number for the milestone to be returned.\"\"\"\n    number: Int!\n  ): Milestone\n\n  \"\"\"A list of milestones associated with the repository.\"\"\"\n  milestones(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): MilestoneConnection\n\n  \"\"\"The repository's original mirror URL.\"\"\"\n  mirrorUrl: URI\n\n  \"\"\"The name of the repository.\"\"\"\n  name: String!\n\n  \"\"\"The repository's name with owner.\"\"\"\n  nameWithOwner: String!\n\n  \"\"\"A Git object in the repository\"\"\"\n  object(\n    \"\"\"The Git object ID\"\"\"\n    oid: GitObjectID\n\n    \"\"\"A Git revision expression suitable for rev-parse\"\"\"\n    expression: String\n  ): GitObject\n\n  \"\"\"The User owner of the repository.\"\"\"\n  owner: RepositoryOwner!\n\n  \"\"\"The repository parent, if this is a fork.\"\"\"\n  parent: Repository\n\n  \"\"\"The primary language of the repository's code.\"\"\"\n  primaryLanguage: Language\n\n  \"\"\"Find project by number.\"\"\"\n  project(\n    \"\"\"The project number to find.\"\"\"\n    number: Int!\n  ): Project\n\n  \"\"\"A list of projects under the owner.\"\"\"\n  projects(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Ordering options for projects returned from the connection\"\"\"\n    orderBy: ProjectOrder\n\n    \"\"\"Query to search projects by, currently only searching by name.\"\"\"\n    search: String\n\n    \"\"\"A list of states to filter the projects by.\"\"\"\n    states: [ProjectState!]\n  ): ProjectConnection!\n\n  \"\"\"The HTTP path listing repository's projects\"\"\"\n  projectsResourcePath: URI!\n\n  \"\"\"The HTTP URL listing repository's projects\"\"\"\n  projectsUrl: URI!\n\n  \"\"\"A list of protected branches that are on this repository.\"\"\"\n  protectedBranches(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): ProtectedBranchConnection!\n\n  \"\"\"Returns a single pull request from the current repository by number.\"\"\"\n  pullRequest(\n    \"\"\"The number for the pull request to be returned.\"\"\"\n    number: Int!\n  ): PullRequest\n\n  \"\"\"A list of pull requests that have been opened in the repository.\"\"\"\n  pullRequests(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of states to filter the pull requests by.\"\"\"\n    states: [PullRequestState!]\n\n    \"\"\"A list of label names to filter the pull requests by.\"\"\"\n    labels: [String!]\n\n    \"\"\"The head ref name to filter the pull requests by.\"\"\"\n    headRefName: String\n\n    \"\"\"The base ref name to filter the pull requests by.\"\"\"\n    baseRefName: String\n\n    \"\"\"Ordering options for pull requests returned from the connection.\"\"\"\n    orderBy: IssueOrder\n  ): PullRequestConnection!\n\n  \"\"\"Identifies when the repository was last pushed to.\"\"\"\n  pushedAt: DateTime\n\n  \"\"\"Fetch a given ref from the repository\"\"\"\n  ref(\n    \"\"\"\n    The ref to retrieve.Fully qualified matches are checked in order\n    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).\n    \"\"\"\n    qualifiedName: String!\n  ): Ref\n\n  \"\"\"Fetch a list of refs from the repository\"\"\"\n  refs(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A ref name prefix like `refs/heads/`, `refs/tags/`, etc.\"\"\"\n    refPrefix: String!\n\n    \"\"\"DEPRECATED: use orderBy. The ordering direction.\"\"\"\n    direction: OrderDirection\n\n    \"\"\"Ordering options for refs returned from the connection.\"\"\"\n    orderBy: RefOrder\n  ): RefConnection\n\n  \"\"\"Lookup a single release given various criteria.\"\"\"\n  release(\n    \"\"\"The name of the Tag the Release was created from\"\"\"\n    tagName: String!\n  ): Release\n\n  \"\"\"List of releases which are dependent on this repository.\"\"\"\n  releases(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Order for connection\"\"\"\n    orderBy: ReleaseOrder\n  ): ReleaseConnection!\n\n  \"\"\"A list of applied repository-topic associations for this repository.\"\"\"\n  repositoryTopics(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): RepositoryTopicConnection!\n\n  \"\"\"The HTTP path for this repository\"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  A description of the repository, rendered to HTML without any links in it.\n  \"\"\"\n  shortDescriptionHTML(\n    \"\"\"How many characters to return.\"\"\"\n    limit: Int = 200\n  ): HTML!\n\n  \"\"\"The SSH URL to clone this repository\"\"\"\n  sshUrl: GitSSHRemote!\n\n  \"\"\"A list of users who have starred this starrable.\"\"\"\n  stargazers(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Order for connection\"\"\"\n    orderBy: StarOrder\n  ): StargazerConnection!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this repository\"\"\"\n  url: URI!\n\n  \"\"\"\n  Indicates whether the viewer has admin permissions on this repository.\n  \"\"\"\n  viewerCanAdminister: Boolean!\n\n  \"\"\"Can the current viewer create new projects on this owner.\"\"\"\n  viewerCanCreateProjects: Boolean!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Indicates whether the viewer can update the topics of this repository.\n  \"\"\"\n  viewerCanUpdateTopics: Boolean!\n\n  \"\"\"\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  \"\"\"\n  viewerHasStarred: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState!\n\n  \"\"\"A list of users watching the repository.\"\"\"\n  watchers(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): UserConnection!\n}\n\n\"\"\"The affiliation of a user to a repository\"\"\"\nenum RepositoryAffiliation {\n  \"\"\"Repositories that are owned by the authenticated user.\"\"\"\n  OWNER\n\n  \"\"\"Repositories that the user has been added to as a collaborator.\"\"\"\n  COLLABORATOR\n\n  \"\"\"\n  Repositories that the user has access to through being a member of an\n  organization. This includes every repository on every team that the user is on.\n  \"\"\"\n  ORGANIZATION_MEMBER\n}\n\n\"\"\"The affiliation type between collaborator and repository.\"\"\"\nenum RepositoryCollaboratorAffiliation {\n  \"\"\"All collaborators of the repository.\"\"\"\n  ALL\n\n  \"\"\"All outside collaborators of an organization-owned repository.\"\"\"\n  OUTSIDE\n}\n\n\"\"\"The connection type for User.\"\"\"\ntype RepositoryCollaboratorConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [RepositoryCollaboratorEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [User]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents a user who is a collaborator of a repository.\"\"\"\ntype RepositoryCollaboratorEdge {\n  cursor: String!\n  node: User!\n\n  \"\"\"The permission the user has on the repository.\"\"\"\n  permission: RepositoryPermission!\n}\n\n\"\"\"A list of repositories owned by the subject.\"\"\"\ntype RepositoryConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [RepositoryEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Repository]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n\n  \"\"\"The total size in kilobytes of all repositories in the connection.\"\"\"\n  totalDiskUsage: Int!\n}\n\n\"\"\"The reason a repository is listed as 'contributed'.\"\"\"\nenum RepositoryContributionType {\n  \"\"\"Created a commit\"\"\"\n  COMMIT\n\n  \"\"\"Created an issue\"\"\"\n  ISSUE\n\n  \"\"\"Created a pull request\"\"\"\n  PULL_REQUEST\n\n  \"\"\"Created the repository\"\"\"\n  REPOSITORY\n\n  \"\"\"Reviewed a pull request\"\"\"\n  PULL_REQUEST_REVIEW\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype RepositoryEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Repository\n}\n\n\"\"\"A subset of repository info.\"\"\"\ninterface RepositoryInfo {\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The description of the repository.\"\"\"\n  description: String\n\n  \"\"\"The description of the repository rendered to HTML.\"\"\"\n  descriptionHTML: HTML!\n\n  \"\"\"\n  Returns how many forks there are of this repository in the whole network.\n  \"\"\"\n  forkCount: Int!\n\n  \"\"\"Indicates if the repository has issues feature enabled.\"\"\"\n  hasIssuesEnabled: Boolean!\n\n  \"\"\"Indicates if the repository has wiki feature enabled.\"\"\"\n  hasWikiEnabled: Boolean!\n\n  \"\"\"The repository's URL.\"\"\"\n  homepageUrl: URI\n\n  \"\"\"Indicates if the repository is unmaintained.\"\"\"\n  isArchived: Boolean!\n\n  \"\"\"Identifies if the repository is a fork.\"\"\"\n  isFork: Boolean!\n\n  \"\"\"Indicates if the repository has been locked or not.\"\"\"\n  isLocked: Boolean!\n\n  \"\"\"Identifies if the repository is a mirror.\"\"\"\n  isMirror: Boolean!\n\n  \"\"\"Identifies if the repository is private.\"\"\"\n  isPrivate: Boolean!\n\n  \"\"\"The license associated with the repository\"\"\"\n  license: String @deprecated(reason: \"Use Repository.licenseInfo instead.\")\n\n  \"\"\"The license associated with the repository\"\"\"\n  licenseInfo: License\n\n  \"\"\"The reason the repository has been locked.\"\"\"\n  lockReason: RepositoryLockReason\n\n  \"\"\"The repository's original mirror URL.\"\"\"\n  mirrorUrl: URI\n\n  \"\"\"The name of the repository.\"\"\"\n  name: String!\n\n  \"\"\"The repository's name with owner.\"\"\"\n  nameWithOwner: String!\n\n  \"\"\"The User owner of the repository.\"\"\"\n  owner: RepositoryOwner!\n\n  \"\"\"Identifies when the repository was last pushed to.\"\"\"\n  pushedAt: DateTime\n\n  \"\"\"The HTTP path for this repository\"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  A description of the repository, rendered to HTML without any links in it.\n  \"\"\"\n  shortDescriptionHTML(\n    \"\"\"How many characters to return.\"\"\"\n    limit: Int = 200\n  ): HTML!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this repository\"\"\"\n  url: URI!\n}\n\n\"\"\"An invitation for a user to be added to a repository.\"\"\"\ntype RepositoryInvitation implements Node {\n  id: ID!\n\n  \"\"\"The user who received the invitation.\"\"\"\n  invitee: User!\n\n  \"\"\"The user who created the invitation.\"\"\"\n  inviter: User!\n\n  \"\"\"The Repository the user is invited to.\"\"\"\n  repository: RepositoryInvitationRepository\n}\n\n\"\"\"A subset of repository info shared with potential collaborators.\"\"\"\ntype RepositoryInvitationRepository implements RepositoryInfo {\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The description of the repository.\"\"\"\n  description: String\n\n  \"\"\"The description of the repository rendered to HTML.\"\"\"\n  descriptionHTML: HTML!\n\n  \"\"\"\n  Returns how many forks there are of this repository in the whole network.\n  \"\"\"\n  forkCount: Int!\n\n  \"\"\"Indicates if the repository has issues feature enabled.\"\"\"\n  hasIssuesEnabled: Boolean!\n\n  \"\"\"Indicates if the repository has wiki feature enabled.\"\"\"\n  hasWikiEnabled: Boolean!\n\n  \"\"\"The repository's URL.\"\"\"\n  homepageUrl: URI\n\n  \"\"\"Indicates if the repository is unmaintained.\"\"\"\n  isArchived: Boolean!\n\n  \"\"\"Identifies if the repository is a fork.\"\"\"\n  isFork: Boolean!\n\n  \"\"\"Indicates if the repository has been locked or not.\"\"\"\n  isLocked: Boolean!\n\n  \"\"\"Identifies if the repository is a mirror.\"\"\"\n  isMirror: Boolean!\n\n  \"\"\"Identifies if the repository is private.\"\"\"\n  isPrivate: Boolean!\n\n  \"\"\"The license associated with the repository\"\"\"\n  license: String @deprecated(reason: \"Use Repository.licenseInfo instead.\")\n\n  \"\"\"The license associated with the repository\"\"\"\n  licenseInfo: License\n\n  \"\"\"The reason the repository has been locked.\"\"\"\n  lockReason: RepositoryLockReason\n\n  \"\"\"The repository's original mirror URL.\"\"\"\n  mirrorUrl: URI\n\n  \"\"\"The name of the repository.\"\"\"\n  name: String!\n\n  \"\"\"The repository's name with owner.\"\"\"\n  nameWithOwner: String!\n\n  \"\"\"\n  The owner of the repository associated with this invitation repository.\n  \"\"\"\n  owner: RepositoryOwner!\n\n  \"\"\"Identifies when the repository was last pushed to.\"\"\"\n  pushedAt: DateTime\n\n  \"\"\"The HTTP path for this repository\"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  A description of the repository, rendered to HTML without any links in it.\n  \"\"\"\n  shortDescriptionHTML(\n    \"\"\"How many characters to return.\"\"\"\n    limit: Int = 200\n  ): HTML!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this repository\"\"\"\n  url: URI!\n}\n\n\"\"\"The possible reasons a given repository could be in a locked state.\"\"\"\nenum RepositoryLockReason {\n  \"\"\"The repository is locked due to a move.\"\"\"\n  MOVING\n\n  \"\"\"The repository is locked due to a billing related reason.\"\"\"\n  BILLING\n\n  \"\"\"The repository is locked due to a rename.\"\"\"\n  RENAME\n\n  \"\"\"The repository is locked due to a migration.\"\"\"\n  MIGRATING\n}\n\n\"\"\"Represents a object that belongs to a repository.\"\"\"\ninterface RepositoryNode {\n  \"\"\"The repository associated with this node.\"\"\"\n  repository: Repository!\n}\n\n\"\"\"Ordering options for repository connections\"\"\"\ninput RepositoryOrder {\n  \"\"\"The field to order repositories by.\"\"\"\n  field: RepositoryOrderField!\n\n  \"\"\"The ordering direction.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which repository connections can be ordered.\"\"\"\nenum RepositoryOrderField {\n  \"\"\"Order repositories by creation time\"\"\"\n  CREATED_AT\n\n  \"\"\"Order repositories by update time\"\"\"\n  UPDATED_AT\n\n  \"\"\"Order repositories by push time\"\"\"\n  PUSHED_AT\n\n  \"\"\"Order repositories by name\"\"\"\n  NAME\n\n  \"\"\"Order repositories by number of stargazers\"\"\"\n  STARGAZERS\n}\n\n\"\"\"Represents an owner of a Repository.\"\"\"\ninterface RepositoryOwner {\n  \"\"\"A URL pointing to the owner's public avatar.\"\"\"\n  avatarUrl(\n    \"\"\"The size of the resulting square image.\"\"\"\n    size: Int\n  ): URI!\n  id: ID!\n\n  \"\"\"The username used to login.\"\"\"\n  login: String!\n\n  \"\"\"A list of repositories this user has pinned to their profile\"\"\"\n  pinnedRepositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n  ): RepositoryConnection!\n\n  \"\"\"A list of repositories that the user owns.\"\"\"\n  repositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    If non-null, filters repositories according to whether they are forks of another repository\n    \"\"\"\n    isFork: Boolean\n  ): RepositoryConnection!\n\n  \"\"\"Find Repository.\"\"\"\n  repository(\n    \"\"\"Name of Repository to find.\"\"\"\n    name: String!\n  ): Repository\n\n  \"\"\"The HTTP URL for the owner.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The HTTP URL for the owner.\"\"\"\n  url: URI!\n}\n\n\"\"\"The access level to a repository\"\"\"\nenum RepositoryPermission {\n  \"\"\"Can read, clone, push, and add collaborators\"\"\"\n  ADMIN\n\n  \"\"\"Can read, clone and push\"\"\"\n  WRITE\n\n  \"\"\"Can read and clone\"\"\"\n  READ\n}\n\n\"\"\"The privacy of a repository\"\"\"\nenum RepositoryPrivacy {\n  \"\"\"Public\"\"\"\n  PUBLIC\n\n  \"\"\"Private\"\"\"\n  PRIVATE\n}\n\n\"\"\"A repository-topic connects a repository to a topic.\"\"\"\ntype RepositoryTopic implements Node & UniformResourceLocatable {\n  id: ID!\n\n  \"\"\"The HTTP path for this repository-topic.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The topic.\"\"\"\n  topic: Topic!\n\n  \"\"\"The HTTP URL for this repository-topic.\"\"\"\n  url: URI!\n}\n\n\"\"\"The connection type for RepositoryTopic.\"\"\"\ntype RepositoryTopicConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [RepositoryTopicEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [RepositoryTopic]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype RepositoryTopicEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: RepositoryTopic\n}\n\n\"\"\"Types that can be requested reviewers.\"\"\"\nunion RequestedReviewer = User | Team\n\n\"\"\"Autogenerated input type of RequestReviews\"\"\"\ninput RequestReviewsInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the pull request to modify.\"\"\"\n  pullRequestId: ID!\n\n  \"\"\"The Node IDs of the user to request.\"\"\"\n  userIds: [ID!]\n\n  \"\"\"The Node IDs of the team to request.\"\"\"\n  teamIds: [ID!]\n\n  \"\"\"Add users to the set rather than replace.\"\"\"\n  union: Boolean\n}\n\n\"\"\"Autogenerated return type of RequestReviews\"\"\"\ntype RequestReviewsPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The pull request that is getting requests.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"The edge from the pull request to the requested reviewers.\"\"\"\n  requestedReviewersEdge: UserEdge!\n}\n\n\"\"\"\nA team or user who has the ability to dismiss a review on a protected branch.\n\"\"\"\ntype ReviewDismissalAllowance implements Node {\n  \"\"\"The actor that can dismiss.\"\"\"\n  actor: ReviewDismissalAllowanceActor\n  id: ID!\n\n  \"\"\"\n  Identifies the protected branch associated with the allowed user or team.\n  \"\"\"\n  protectedBranch: ProtectedBranch!\n}\n\n\"\"\"Types that can be an actor.\"\"\"\nunion ReviewDismissalAllowanceActor = User | Team\n\n\"\"\"The connection type for ReviewDismissalAllowance.\"\"\"\ntype ReviewDismissalAllowanceConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ReviewDismissalAllowanceEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [ReviewDismissalAllowance]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ReviewDismissalAllowanceEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: ReviewDismissalAllowance\n}\n\n\"\"\"\nRepresents a 'review_dismissed' event on a given issue or pull request.\n\"\"\"\ntype ReviewDismissedEvent implements Node & UniformResourceLocatable {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n\n  \"\"\"Identifies the message associated with the 'review_dismissed' event.\"\"\"\n  message: String!\n\n  \"\"\"The message associated with the event, rendered to HTML.\"\"\"\n  messageHtml: HTML!\n\n  \"\"\"\n  Identifies the previous state of the review with the 'review_dismissed' event.\n  \"\"\"\n  previousReviewState: PullRequestReviewState!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"Identifies the commit which caused the review to become stale.\"\"\"\n  pullRequestCommit: PullRequestCommit\n\n  \"\"\"The HTTP path for this review dismissed event.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Identifies the review associated with the 'review_dismissed' event.\"\"\"\n  review: PullRequestReview\n\n  \"\"\"The HTTP URL for this review dismissed event.\"\"\"\n  url: URI!\n}\n\n\"\"\"A request for a user to review a pull request.\"\"\"\ntype ReviewRequest implements Node {\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n  id: ID!\n\n  \"\"\"Identifies the pull request associated with this review request.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"The reviewer that is requested.\"\"\"\n  requestedReviewer: RequestedReviewer\n\n  \"\"\"Identifies the author associated with this review request.\"\"\"\n  reviewer: User @deprecated(reason: \"Use `ReviewRequest.requestedReviewer` instead.\")\n}\n\n\"\"\"The connection type for ReviewRequest.\"\"\"\ntype ReviewRequestConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [ReviewRequestEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [ReviewRequest]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents an 'review_requested' event on a given pull request.\"\"\"\ntype ReviewRequestedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"Identifies the reviewer whose review was requested.\"\"\"\n  requestedReviewer: RequestedReviewer\n\n  \"\"\"Identifies the user whose review was requested.\"\"\"\n  subject: User @deprecated(reason: \"Use `ReviewRequestedEvent.requestedReviewer` instead.\")\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ReviewRequestEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: ReviewRequest\n}\n\n\"\"\"Represents an 'review_request_removed' event on a given pull request.\"\"\"\ntype ReviewRequestRemovedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"PullRequest referenced by event.\"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"Identifies the reviewer whose review request was removed.\"\"\"\n  requestedReviewer: RequestedReviewer\n\n  \"\"\"Identifies the user whose review request was removed.\"\"\"\n  subject: User @deprecated(reason: \"Use ReviewRequestRemovedEvent.requestedReviewer instead.\")\n}\n\n\"\"\"The results of a search.\"\"\"\nunion SearchResultItem = Issue | PullRequest | Repository | User | Organization | MarketplaceListing\n\n\"\"\"A list of results that matched against a search query.\"\"\"\ntype SearchResultItemConnection {\n  \"\"\"The number of pieces of code that matched the search query.\"\"\"\n  codeCount: Int!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [SearchResultItemEdge]\n\n  \"\"\"The number of issues that matched the search query.\"\"\"\n  issueCount: Int!\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [SearchResultItem]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The number of repositories that matched the search query.\"\"\"\n  repositoryCount: Int!\n\n  \"\"\"The number of users that matched the search query.\"\"\"\n  userCount: Int!\n\n  \"\"\"The number of wiki pages that matched the search query.\"\"\"\n  wikiCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype SearchResultItemEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: SearchResultItem\n}\n\n\"\"\"Represents the individual results of a search.\"\"\"\nenum SearchType {\n  \"\"\"Returns results matching issues in repositories.\"\"\"\n  ISSUE\n\n  \"\"\"Returns results matching repositories.\"\"\"\n  REPOSITORY\n\n  \"\"\"Returns results matching users and organizations on GitHub.\"\"\"\n  USER\n}\n\n\"\"\"Represents an S/MIME signature on a Commit or Tag.\"\"\"\ntype SmimeSignature implements GitSignature {\n  \"\"\"Email used to sign this object.\"\"\"\n  email: String!\n\n  \"\"\"True if the signature is valid and verified by GitHub.\"\"\"\n  isValid: Boolean!\n\n  \"\"\"\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  \"\"\"\n  payload: String!\n\n  \"\"\"ASCII-armored signature header from object.\"\"\"\n  signature: String!\n\n  \"\"\"GitHub user corresponding to the email signing this commit.\"\"\"\n  signer: User\n\n  \"\"\"\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  \"\"\"\n  state: GitSignatureState!\n}\n\n\"\"\"The connection type for User.\"\"\"\ntype StargazerConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [StargazerEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [User]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents a user that's starred a repository.\"\"\"\ntype StargazerEdge {\n  cursor: String!\n  node: User!\n\n  \"\"\"Identifies when the item was starred.\"\"\"\n  starredAt: DateTime!\n}\n\n\"\"\"Ways in which star connections can be ordered.\"\"\"\ninput StarOrder {\n  \"\"\"The field in which to order nodes by.\"\"\"\n  field: StarOrderField!\n\n  \"\"\"The direction in which to order nodes.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which star connections can be ordered.\"\"\"\nenum StarOrderField {\n  \"\"\"Allows ordering a list of stars by when they were created.\"\"\"\n  STARRED_AT\n}\n\n\"\"\"Things that can be starred.\"\"\"\ninterface Starrable {\n  id: ID!\n\n  \"\"\"A list of users who have starred this starrable.\"\"\"\n  stargazers(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Order for connection\"\"\"\n    orderBy: StarOrder\n  ): StargazerConnection!\n\n  \"\"\"\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  \"\"\"\n  viewerHasStarred: Boolean!\n}\n\n\"\"\"The connection type for Repository.\"\"\"\ntype StarredRepositoryConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [StarredRepositoryEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Repository]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents a starred repository.\"\"\"\ntype StarredRepositoryEdge {\n  cursor: String!\n  node: Repository!\n\n  \"\"\"Identifies when the item was starred.\"\"\"\n  starredAt: DateTime!\n}\n\n\"\"\"Represents a commit status.\"\"\"\ntype Status implements Node {\n  \"\"\"The commit this status is attached to.\"\"\"\n  commit: Commit\n\n  \"\"\"Looks up an individual status context by context name.\"\"\"\n  context(\n    \"\"\"The context name.\"\"\"\n    name: String!\n  ): StatusContext\n\n  \"\"\"The individual status contexts for this commit.\"\"\"\n  contexts: [StatusContext!]!\n  id: ID!\n\n  \"\"\"The combined commit status.\"\"\"\n  state: StatusState!\n}\n\n\"\"\"Represents an individual commit status context\"\"\"\ntype StatusContext implements Node {\n  \"\"\"This commit this status context is attached to.\"\"\"\n  commit: Commit\n\n  \"\"\"The name of this status context.\"\"\"\n  context: String!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The actor who created this status context.\"\"\"\n  creator: Actor\n\n  \"\"\"The description for this status context.\"\"\"\n  description: String\n  id: ID!\n\n  \"\"\"The state of this status context.\"\"\"\n  state: StatusState!\n\n  \"\"\"The URL for this status context.\"\"\"\n  targetUrl: URI\n}\n\n\"\"\"The possible commit status states.\"\"\"\nenum StatusState {\n  \"\"\"Status is expected.\"\"\"\n  EXPECTED\n\n  \"\"\"Status is errored.\"\"\"\n  ERROR\n\n  \"\"\"Status is failing.\"\"\"\n  FAILURE\n\n  \"\"\"Status is pending.\"\"\"\n  PENDING\n\n  \"\"\"Status is successful.\"\"\"\n  SUCCESS\n}\n\n\"\"\"Autogenerated input type of SubmitPullRequestReview\"\"\"\ninput SubmitPullRequestReviewInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Pull Request Review ID to submit.\"\"\"\n  pullRequestReviewId: ID!\n\n  \"\"\"The event to send to the Pull Request Review.\"\"\"\n  event: PullRequestReviewEvent!\n\n  \"\"\"The text field to set on the Pull Request Review.\"\"\"\n  body: String\n}\n\n\"\"\"Autogenerated return type of SubmitPullRequestReview\"\"\"\ntype SubmitPullRequestReviewPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The submitted pull request review.\"\"\"\n  pullRequestReview: PullRequestReview!\n}\n\n\"\"\"Entities that can be subscribed to for web and email notifications.\"\"\"\ninterface Subscribable {\n  id: ID!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState!\n}\n\n\"\"\"Represents a 'subscribed' event on a given `Subscribable`.\"\"\"\ntype SubscribedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Object referenced by event.\"\"\"\n  subscribable: Subscribable!\n}\n\n\"\"\"The possible states of a subscription.\"\"\"\nenum SubscriptionState {\n  \"\"\"The User is only notified when particpating or @mentioned.\"\"\"\n  UNSUBSCRIBED\n\n  \"\"\"The User is notified of all conversations.\"\"\"\n  SUBSCRIBED\n\n  \"\"\"The User is never notified.\"\"\"\n  IGNORED\n\n  \"\"\"Subscriptions are currently unavailable\"\"\"\n  UNAVAILABLE\n}\n\n\"\"\"\nA suggestion to review a pull request based on a user's commit history and review comments.\n\"\"\"\ntype SuggestedReviewer {\n  \"\"\"Is this suggestion based on past commits?\"\"\"\n  isAuthor: Boolean!\n\n  \"\"\"Is this suggestion based on past review comments?\"\"\"\n  isCommenter: Boolean!\n\n  \"\"\"Identifies the user suggested to review the pull request.\"\"\"\n  reviewer: User!\n}\n\n\"\"\"Represents a Git tag.\"\"\"\ntype Tag implements Node & GitObject {\n  \"\"\"An abbreviated version of the Git object ID\"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"The HTTP path for this Git object\"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"The HTTP URL for this Git object\"\"\"\n  commitUrl: URI!\n  id: ID!\n\n  \"\"\"The Git tag message.\"\"\"\n  message: String\n\n  \"\"\"The Git tag name.\"\"\"\n  name: String!\n\n  \"\"\"The Git object ID\"\"\"\n  oid: GitObjectID!\n\n  \"\"\"The Repository the Git object belongs to\"\"\"\n  repository: Repository!\n\n  \"\"\"Details about the tag author.\"\"\"\n  tagger: GitActor\n\n  \"\"\"The Git object the tag points to.\"\"\"\n  target: GitObject!\n}\n\n\"\"\"A team of users in an organization.\"\"\"\ntype Team implements Node & Subscribable {\n  \"\"\"A list of teams that are ancestors of this team.\"\"\"\n  ancestors(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): TeamConnection!\n\n  \"\"\"List of child teams belonging to this team\"\"\"\n  childTeams(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Order for connection\"\"\"\n    orderBy: TeamOrder\n\n    \"\"\"User logins to filter by\"\"\"\n    userLogins: [String!]\n\n    \"\"\"Whether to list immediate child teams or all descendant child teams.\"\"\"\n    immediateOnly: Boolean = true\n  ): TeamConnection!\n\n  \"\"\"The slug corresponding to the organization and team.\"\"\"\n  combinedSlug: String!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The description of the team.\"\"\"\n  description: String\n\n  \"\"\"The HTTP path for editing this team\"\"\"\n  editTeamResourcePath: URI!\n\n  \"\"\"The HTTP URL for editing this team\"\"\"\n  editTeamUrl: URI!\n  id: ID!\n\n  \"\"\"A list of pending invitations for users to this team\"\"\"\n  invitations(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): OrganizationInvitationConnection\n\n  \"\"\"A list of users who are members of this team.\"\"\"\n  members(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"The search string to look for.\"\"\"\n    query: String\n\n    \"\"\"Filter by membership type\"\"\"\n    membership: TeamMembershipType = ALL\n\n    \"\"\"Filter by team member role\"\"\"\n    role: TeamMemberRole\n  ): TeamMemberConnection!\n\n  \"\"\"The HTTP path for the team' members\"\"\"\n  membersResourcePath: URI!\n\n  \"\"\"The HTTP URL for the team' members\"\"\"\n  membersUrl: URI!\n\n  \"\"\"The name of the team.\"\"\"\n  name: String!\n\n  \"\"\"The HTTP path creating a new team\"\"\"\n  newTeamResourcePath: URI!\n\n  \"\"\"The HTTP URL creating a new team\"\"\"\n  newTeamUrl: URI!\n\n  \"\"\"The organization that owns this team.\"\"\"\n  organization: Organization!\n\n  \"\"\"The parent team of the team.\"\"\"\n  parentTeam: Team\n\n  \"\"\"The level of privacy the team has.\"\"\"\n  privacy: TeamPrivacy!\n\n  \"\"\"A list of repositories this team has access to.\"\"\"\n  repositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"The search string to look for.\"\"\"\n    query: String\n\n    \"\"\"Order for the connection.\"\"\"\n    orderBy: TeamRepositoryOrder\n  ): TeamRepositoryConnection!\n\n  \"\"\"The HTTP path for this team's repositories\"\"\"\n  repositoriesResourcePath: URI!\n\n  \"\"\"The HTTP URL for this team's repositories\"\"\"\n  repositoriesUrl: URI!\n\n  \"\"\"The HTTP path for this team\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The slug corresponding to the team.\"\"\"\n  slug: String!\n\n  \"\"\"The HTTP path for this team's teams\"\"\"\n  teamsResourcePath: URI!\n\n  \"\"\"The HTTP URL for this team's teams\"\"\"\n  teamsUrl: URI!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this team\"\"\"\n  url: URI!\n\n  \"\"\"Team is adminable by the viewer.\"\"\"\n  viewerCanAdminister: Boolean!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState!\n}\n\n\"\"\"The connection type for Team.\"\"\"\ntype TeamConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [TeamEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Team]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype TeamEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Team\n}\n\n\"\"\"The connection type for User.\"\"\"\ntype TeamMemberConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [TeamMemberEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [User]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents a user who is a member of a team.\"\"\"\ntype TeamMemberEdge {\n  cursor: String!\n\n  \"\"\"The HTTP path to the organization's member access page.\"\"\"\n  memberAccessResourcePath: URI!\n\n  \"\"\"The HTTP URL to the organization's member access page.\"\"\"\n  memberAccessUrl: URI!\n  node: User!\n\n  \"\"\"The role the member has on the team.\"\"\"\n  role: TeamMemberRole!\n}\n\n\"\"\"The possible team member roles; either 'maintainer' or 'member'.\"\"\"\nenum TeamMemberRole {\n  \"\"\"A team maintainer has permission to add and remove team members.\"\"\"\n  MAINTAINER\n\n  \"\"\"A team member has no administrative permissions on the team.\"\"\"\n  MEMBER\n}\n\n\"\"\"\nDefines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.\n\"\"\"\nenum TeamMembershipType {\n  \"\"\"Includes only immediate members of the team.\"\"\"\n  IMMEDIATE\n\n  \"\"\"Includes only child team members for the team.\"\"\"\n  CHILD_TEAM\n\n  \"\"\"Includes immediate and child team members for the team.\"\"\"\n  ALL\n}\n\n\"\"\"Ways in which team connections can be ordered.\"\"\"\ninput TeamOrder {\n  \"\"\"The field in which to order nodes by.\"\"\"\n  field: TeamOrderField!\n\n  \"\"\"The direction in which to order nodes.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which team connections can be ordered.\"\"\"\nenum TeamOrderField {\n  \"\"\"Allows ordering a list of teams by name.\"\"\"\n  NAME\n}\n\n\"\"\"The possible team privacy values.\"\"\"\nenum TeamPrivacy {\n  \"\"\"A secret team can only be seen by its members.\"\"\"\n  SECRET\n\n  \"\"\"\n  A visible team can be seen and @mentioned by every member of the organization.\n  \"\"\"\n  VISIBLE\n}\n\n\"\"\"The connection type for Repository.\"\"\"\ntype TeamRepositoryConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [TeamRepositoryEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Repository]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"Represents a team repository.\"\"\"\ntype TeamRepositoryEdge {\n  cursor: String!\n  node: Repository!\n\n  \"\"\"The permission level the team has on the repository\"\"\"\n  permission: RepositoryPermission!\n}\n\n\"\"\"Ordering options for team repository connections\"\"\"\ninput TeamRepositoryOrder {\n  \"\"\"The field to order repositories by.\"\"\"\n  field: TeamRepositoryOrderField!\n\n  \"\"\"The ordering direction.\"\"\"\n  direction: OrderDirection!\n}\n\n\"\"\"Properties by which team repository connections can be ordered.\"\"\"\nenum TeamRepositoryOrderField {\n  \"\"\"Order repositories by creation time\"\"\"\n  CREATED_AT\n\n  \"\"\"Order repositories by update time\"\"\"\n  UPDATED_AT\n\n  \"\"\"Order repositories by push time\"\"\"\n  PUSHED_AT\n\n  \"\"\"Order repositories by name\"\"\"\n  NAME\n\n  \"\"\"Order repositories by permission\"\"\"\n  PERMISSION\n\n  \"\"\"Order repositories by number of stargazers\"\"\"\n  STARGAZERS\n}\n\n\"\"\"The role of a user on a team.\"\"\"\nenum TeamRole {\n  \"\"\"User has admin rights on the team.\"\"\"\n  ADMIN\n\n  \"\"\"User is a member of the team.\"\"\"\n  MEMBER\n}\n\n\"\"\"A topic aggregates entities that are related to a subject.\"\"\"\ntype Topic implements Node {\n  id: ID!\n\n  \"\"\"The topic's name.\"\"\"\n  name: String!\n\n  \"\"\"\n  A list of related topics, including aliases of this topic, sorted with the most relevant\n  first.\n\n  \"\"\"\n  relatedTopics: [Topic!]!\n}\n\n\"\"\"The connection type for Topic.\"\"\"\ntype TopicConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [TopicEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [Topic]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype TopicEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Topic\n}\n\n\"\"\"Reason that the suggested topic is declined.\"\"\"\nenum TopicSuggestionDeclineReason {\n  \"\"\"The suggested topic is not relevant to the repository.\"\"\"\n  NOT_RELEVANT\n\n  \"\"\"\n  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).\n  \"\"\"\n  TOO_SPECIFIC\n\n  \"\"\"The viewer does not like the suggested topic.\"\"\"\n  PERSONAL_PREFERENCE\n\n  \"\"\"The suggested topic is too general for the repository.\"\"\"\n  TOO_GENERAL\n}\n\n\"\"\"Represents a Git tree.\"\"\"\ntype Tree implements Node & GitObject {\n  \"\"\"An abbreviated version of the Git object ID\"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"The HTTP path for this Git object\"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"The HTTP URL for this Git object\"\"\"\n  commitUrl: URI!\n\n  \"\"\"A list of tree entries.\"\"\"\n  entries: [TreeEntry!]\n  id: ID!\n\n  \"\"\"The Git object ID\"\"\"\n  oid: GitObjectID!\n\n  \"\"\"The Repository the Git object belongs to\"\"\"\n  repository: Repository!\n}\n\n\"\"\"Represents a Git tree entry.\"\"\"\ntype TreeEntry {\n  \"\"\"Entry file mode.\"\"\"\n  mode: Int!\n\n  \"\"\"Entry file name.\"\"\"\n  name: String!\n\n  \"\"\"Entry file object.\"\"\"\n  object: GitObject\n\n  \"\"\"Entry file Git object ID.\"\"\"\n  oid: GitObjectID!\n\n  \"\"\"The Repository the tree entry belongs to\"\"\"\n  repository: Repository!\n\n  \"\"\"Entry file type.\"\"\"\n  type: String!\n}\n\n\"\"\"Represents an 'unassigned' event on any assignable object.\"\"\"\ntype UnassignedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the assignable associated with the event.\"\"\"\n  assignable: Assignable!\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Identifies the subject (user) who was unassigned.\"\"\"\n  user: User\n}\n\n\"\"\"Represents a type that can be retrieved by a URL.\"\"\"\ninterface UniformResourceLocatable {\n  \"\"\"The HTML path to this resource.\"\"\"\n  resourcePath: URI!\n\n  \"\"\"The URL to this resource.\"\"\"\n  url: URI!\n}\n\n\"\"\"Represents an unknown signature on a Commit or Tag.\"\"\"\ntype UnknownSignature implements GitSignature {\n  \"\"\"Email used to sign this object.\"\"\"\n  email: String!\n\n  \"\"\"True if the signature is valid and verified by GitHub.\"\"\"\n  isValid: Boolean!\n\n  \"\"\"\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  \"\"\"\n  payload: String!\n\n  \"\"\"ASCII-armored signature header from object.\"\"\"\n  signature: String!\n\n  \"\"\"GitHub user corresponding to the email signing this commit.\"\"\"\n  signer: User\n\n  \"\"\"\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  \"\"\"\n  state: GitSignatureState!\n}\n\n\"\"\"Represents an 'unlabeled' event on a given issue or pull request.\"\"\"\ntype UnlabeledEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Identifies the label associated with the 'unlabeled' event.\"\"\"\n  label: Label!\n\n  \"\"\"Identifies the `Labelable` associated with the event.\"\"\"\n  labelable: Labelable!\n}\n\n\"\"\"Represents an 'unlocked' event on a given issue or pull request.\"\"\"\ntype UnlockedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Object that was unlocked.\"\"\"\n  lockable: Lockable!\n}\n\n\"\"\"Represents an 'unsubscribed' event on a given `Subscribable`.\"\"\"\ntype UnsubscribedEvent implements Node {\n  \"\"\"Identifies the actor who performed the event.\"\"\"\n  actor: Actor\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"Object referenced by event.\"\"\"\n  subscribable: Subscribable!\n}\n\n\"\"\"Entities that can be updated.\"\"\"\ninterface Updatable {\n  \"\"\"Check if the current viewer can update this object.\"\"\"\n  viewerCanUpdate: Boolean!\n}\n\n\"\"\"Comments that can be updated.\"\"\"\ninterface UpdatableComment {\n  \"\"\"Reasons why the current viewer can not update this comment.\"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n}\n\n\"\"\"Autogenerated input type of UpdateProjectCard\"\"\"\ninput UpdateProjectCardInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The ProjectCard ID to update.\"\"\"\n  projectCardId: ID!\n\n  \"\"\"The note of ProjectCard.\"\"\"\n  note: String!\n}\n\n\"\"\"Autogenerated return type of UpdateProjectCard\"\"\"\ntype UpdateProjectCardPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The updated ProjectCard.\"\"\"\n  projectCard: ProjectCard!\n}\n\n\"\"\"Autogenerated input type of UpdateProjectColumn\"\"\"\ninput UpdateProjectColumnInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The ProjectColumn ID to update.\"\"\"\n  projectColumnId: ID!\n\n  \"\"\"The name of project column.\"\"\"\n  name: String!\n}\n\n\"\"\"Autogenerated return type of UpdateProjectColumn\"\"\"\ntype UpdateProjectColumnPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The updated project column.\"\"\"\n  projectColumn: ProjectColumn!\n}\n\n\"\"\"Autogenerated input type of UpdateProject\"\"\"\ninput UpdateProjectInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Project ID to update.\"\"\"\n  projectId: ID!\n\n  \"\"\"The name of project.\"\"\"\n  name: String\n\n  \"\"\"The description of project.\"\"\"\n  body: String\n\n  \"\"\"Whether the project is open or closed.\"\"\"\n  state: ProjectState\n\n  \"\"\"Whether the project is public or not.\"\"\"\n  public: Boolean\n}\n\n\"\"\"Autogenerated return type of UpdateProject\"\"\"\ntype UpdateProjectPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The updated project.\"\"\"\n  project: Project!\n}\n\n\"\"\"Autogenerated input type of UpdatePullRequestReviewComment\"\"\"\ninput UpdatePullRequestReviewCommentInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the comment to modify.\"\"\"\n  pullRequestReviewCommentId: ID!\n\n  \"\"\"The text of the comment.\"\"\"\n  body: String!\n}\n\n\"\"\"Autogenerated return type of UpdatePullRequestReviewComment\"\"\"\ntype UpdatePullRequestReviewCommentPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The updated comment.\"\"\"\n  pullRequestReviewComment: PullRequestReviewComment!\n}\n\n\"\"\"Autogenerated input type of UpdatePullRequestReview\"\"\"\ninput UpdatePullRequestReviewInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the pull request review to modify.\"\"\"\n  pullRequestReviewId: ID!\n\n  \"\"\"The contents of the pull request review body.\"\"\"\n  body: String!\n}\n\n\"\"\"Autogenerated return type of UpdatePullRequestReview\"\"\"\ntype UpdatePullRequestReviewPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The updated pull request review.\"\"\"\n  pullRequestReview: PullRequestReview!\n}\n\n\"\"\"Autogenerated input type of UpdateSubscription\"\"\"\ninput UpdateSubscriptionInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the subscribable object to modify.\"\"\"\n  subscribableId: ID!\n\n  \"\"\"The new state of the subscription.\"\"\"\n  state: SubscriptionState!\n}\n\n\"\"\"Autogenerated return type of UpdateSubscription\"\"\"\ntype UpdateSubscriptionPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The input subscribable entity.\"\"\"\n  subscribable: Subscribable!\n}\n\n\"\"\"Autogenerated input type of UpdateTopics\"\"\"\ninput UpdateTopicsInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"The Node ID of the repository.\"\"\"\n  repositoryId: ID!\n\n  \"\"\"An array of topic names.\"\"\"\n  topicNames: [String!]!\n}\n\n\"\"\"Autogenerated return type of UpdateTopics\"\"\"\ntype UpdateTopicsPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"Names of the provided topics that are not valid.\"\"\"\n  invalidTopicNames: [String!]\n\n  \"\"\"The updated repository.\"\"\"\n  repository: Repository!\n}\n\n\"\"\"An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.\"\"\"\nscalar URI\n\n\"\"\"\nA user is an individual's account on GitHub that owns repositories and can make new content.\n\"\"\"\ntype User implements Node & Actor & RepositoryOwner & UniformResourceLocatable {\n  \"\"\"A URL pointing to the user's public avatar.\"\"\"\n  avatarUrl(\n    \"\"\"The size of the resulting square image.\"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"The user's public profile bio.\"\"\"\n  bio: String\n\n  \"\"\"The user's public profile bio as HTML.\"\"\"\n  bioHTML: HTML!\n\n  \"\"\"A list of commit comments made by this user.\"\"\"\n  commitComments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): CommitCommentConnection!\n\n  \"\"\"The user's public profile company.\"\"\"\n  company: String\n\n  \"\"\"The user's public profile company as HTML.\"\"\"\n  companyHTML: HTML!\n\n  \"\"\"A list of repositories that the user recently contributed to.\"\"\"\n  contributedRepositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n  ): RepositoryConnection! @deprecated(reason: \"Use repositoriesContributedTo instead.\")\n\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Identifies the primary key from the database.\"\"\"\n  databaseId: Int @deprecated(reason: \"Exposed database IDs will eventually be removed in favor of global Relay IDs.\")\n\n  \"\"\"The user's publicly visible profile email.\"\"\"\n  email: String!\n\n  \"\"\"A list of users the given user is followed by.\"\"\"\n  followers(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): FollowerConnection!\n\n  \"\"\"A list of users the given user is following.\"\"\"\n  following(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): FollowingConnection!\n\n  \"\"\"Find gist by repo name.\"\"\"\n  gist(\n    \"\"\"The gist name to find.\"\"\"\n    name: String!\n  ): Gist\n\n  \"\"\"A list of gist comments made by this user.\"\"\"\n  gistComments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): GistCommentConnection!\n\n  \"\"\"A list of the Gists the user has created.\"\"\"\n  gists(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"Filters Gists according to privacy.\"\"\"\n    privacy: GistPrivacy\n\n    \"\"\"Ordering options for gists returned from the connection\"\"\"\n    orderBy: GistOrder\n  ): GistConnection!\n  id: ID!\n\n  \"\"\"\n  Whether or not this user is a participant in the GitHub Security Bug Bounty.\n  \"\"\"\n  isBountyHunter: Boolean!\n\n  \"\"\"\n  Whether or not this user is a participant in the GitHub Campus Experts Program.\n  \"\"\"\n  isCampusExpert: Boolean!\n\n  \"\"\"Whether or not this user is a GitHub Developer Program member.\"\"\"\n  isDeveloperProgramMember: Boolean!\n\n  \"\"\"Whether or not this user is a GitHub employee.\"\"\"\n  isEmployee: Boolean!\n\n  \"\"\"Whether or not the user has marked themselves as for hire.\"\"\"\n  isHireable: Boolean!\n\n  \"\"\"Whether or not this user is a site administrator.\"\"\"\n  isSiteAdmin: Boolean!\n\n  \"\"\"Whether or not this user is the viewing user.\"\"\"\n  isViewer: Boolean!\n\n  \"\"\"A list of issue comments made by this user.\"\"\"\n  issueComments(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): IssueCommentConnection!\n\n  \"\"\"A list of issues assocated with this user.\"\"\"\n  issues(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of label names to filter the pull requests by.\"\"\"\n    labels: [String!]\n\n    \"\"\"Ordering options for issues returned from the connection.\"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"A list of states to filter the issues by.\"\"\"\n    states: [IssueState!]\n  ): IssueConnection!\n\n  \"\"\"The user's public profile location.\"\"\"\n  location: String\n\n  \"\"\"The username used to login.\"\"\"\n  login: String!\n\n  \"\"\"The user's public profile name.\"\"\"\n  name: String\n\n  \"\"\"Find an organization by its login that the user belongs to.\"\"\"\n  organization(\n    \"\"\"The login of the organization to find.\"\"\"\n    login: String!\n  ): Organization\n\n  \"\"\"A list of organizations the user belongs to.\"\"\"\n  organizations(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): OrganizationConnection!\n\n  \"\"\"A list of repositories this user has pinned to their profile\"\"\"\n  pinnedRepositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n  ): RepositoryConnection!\n\n  \"\"\"A list of public keys associated with this user.\"\"\"\n  publicKeys(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n  ): PublicKeyConnection!\n\n  \"\"\"A list of pull requests assocated with this user.\"\"\"\n  pullRequests(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"A list of states to filter the pull requests by.\"\"\"\n    states: [PullRequestState!]\n\n    \"\"\"A list of label names to filter the pull requests by.\"\"\"\n    labels: [String!]\n\n    \"\"\"The head ref name to filter the pull requests by.\"\"\"\n    headRefName: String\n\n    \"\"\"The base ref name to filter the pull requests by.\"\"\"\n    baseRefName: String\n\n    \"\"\"Ordering options for pull requests returned from the connection.\"\"\"\n    orderBy: IssueOrder\n  ): PullRequestConnection!\n\n  \"\"\"A list of repositories that the user owns.\"\"\"\n  repositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    If non-null, filters repositories according to whether they are forks of another repository\n    \"\"\"\n    isFork: Boolean\n  ): RepositoryConnection!\n\n  \"\"\"A list of repositories that the user recently contributed to.\"\"\"\n  repositoriesContributedTo(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"If true, include user repositories\"\"\"\n    includeUserRepositories: Boolean\n\n    \"\"\"\n    If non-null, include only the specified types of contributions. The\n    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]\n    \"\"\"\n    contributionTypes: [RepositoryContributionType]\n  ): RepositoryConnection!\n\n  \"\"\"Find Repository.\"\"\"\n  repository(\n    \"\"\"Name of Repository to find.\"\"\"\n    name: String!\n  ): Repository\n\n  \"\"\"The HTTP path for this user\"\"\"\n  resourcePath: URI!\n\n  \"\"\"Repositories the user has starred.\"\"\"\n  starredRepositories(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Filters starred repositories to only return repositories owned by the viewer.\n    \"\"\"\n    ownedByViewer: Boolean\n\n    \"\"\"Order for connection\"\"\"\n    orderBy: StarOrder\n  ): StarredRepositoryConnection!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n\n  \"\"\"The HTTP URL for this user\"\"\"\n  url: URI!\n\n  \"\"\"Whether or not the viewer is able to follow the user.\"\"\"\n  viewerCanFollow: Boolean!\n\n  \"\"\"Whether or not this user is followed by the viewer.\"\"\"\n  viewerIsFollowing: Boolean!\n\n  \"\"\"A list of repositories the given user is watching.\"\"\"\n  watching(\n    \"\"\"Returns the first _n_ elements from the list.\"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the elements in the list that come after the specified global ID.\n    \"\"\"\n    after: String\n\n    \"\"\"Returns the last _n_ elements from the list.\"\"\"\n    last: Int\n\n    \"\"\"\n    Returns the elements in the list that come before the specified global ID.\n    \"\"\"\n    before: String\n\n    \"\"\"If non-null, filters repositories according to privacy\"\"\"\n    privacy: RepositoryPrivacy\n\n    \"\"\"Ordering options for repositories returned from the connection\"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"Affiliation options for repositories returned from the connection\"\"\"\n    affiliations: [RepositoryAffiliation]\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n  ): RepositoryConnection!\n\n  \"\"\"A URL pointing to the user's public website/blog.\"\"\"\n  websiteUrl: URI\n}\n\n\"\"\"The connection type for User.\"\"\"\ntype UserConnection {\n  \"\"\"A list of edges.\"\"\"\n  edges: [UserEdge]\n\n  \"\"\"A list of nodes.\"\"\"\n  nodes: [User]\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"Identifies the total count of items in the connection.\"\"\"\n  totalCount: Int!\n}\n\n\"\"\"An edit on user content\"\"\"\ntype UserContentEdit {\n  \"\"\"Identifies the date and time when the object was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The actor who edited this content,\"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"Identifies the date and time when the object was last updated.\"\"\"\n  updatedAt: DateTime! @deprecated(reason: \"General type updated timestamps will eventually be replaced by other field specific timestamps.\")\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype UserContentEditEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: UserContentEdit\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype UserEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: User\n}\n\n\"\"\"A valid x509 certificate string\"\"\"\nscalar X509Certificate\n",
      "containsQueryType": true,
      "typesUndefined": [],
      "directivesUndefined": [
        "deprecated"
      ],
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 353
    }
  ],
  "metrics": {
    "created_at": "2018-01-26T09:56:10Z",
    "updated_at": "2019-07-19T06:50:16Z",
    "pushed_at": "2019-07-19T07:39:43Z",
    "issues": 86,
    "watchers": 29,
    "fork_count": 16,
    "has_wiki_enabled": false,
    "license": "mit",
    "pull_requests": 178,
    "pull_requests_open": 2,
    "pull_requests_closed": 6,
    "pull_requests_merged": 170,
    "releases": 28,
    "stargazers": 379
  }
}