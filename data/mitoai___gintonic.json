{
  "repo_name": "gintonic",
  "repo_full_name": "mitoai/gintonic",
  "repo_owner": "mitoai",
  "repo_description": "A declarative transformation language for GraphQL üç∏",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "public.graphql",
      "path": "packages/gintonic/__tests__/resources/public.graphql",
      "sha": "1980e3646399409e7ab48e59e66ec419e7bfa684",
      "url": "https://api.github.com/repositories/158833852/contents/packages/gintonic/__tests__/resources/public.graphql?ref=f845e227561a93e656bae136cbcce40f24755b39",
      "git_url": "https://api.github.com/repositories/158833852/git/blobs/1980e3646399409e7ab48e59e66ec419e7bfa684",
      "html_url": "https://github.com/mitoai/gintonic/blob/f845e227561a93e656bae136cbcce40f24755b39/packages/gintonic/__tests__/resources/public.graphql",
      "content": "\"\"\"\nThis usually represents a news article which has been analyzed and linked by Mito.\n\"\"\"\ntype Article {\n  \"\"\"The title of the news article.\"\"\"\n  title: String!\n\n  \"\"\"\n  The abstract is a sentence describing the content of the article. This is not\n  contextual to anything other thant the article itself.\n  \"\"\"\n  abstract: String!\n\n  \"\"\"\n  Time of publication of the article in combined date and time [ISO\n  8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.\n  \"\"\"\n  timestamp: String!\n\n  \"\"\"\n  The publisher of the article. Usually this is the website of the publicist.\n  \"\"\"\n  publisher: String!\n}\n\n\"\"\"\n\nAn object representing a company. From here you may currently access the base information, such as title,\nand stories related to the company.\n\n\"\"\"\ntype Company {\n  \"\"\"\n\n  The internal Mito ID of the company. Save this for fetching this object without searching for a company.\n  This can be done with the [Query.companyById](#Query.companyById) field.\n\n  \"\"\"\n  id: ID!\n\n  \"\"\"The name of the company.\"\"\"\n  name: String!\n\n  \"\"\"\n\n  The official website of the company.\n\n  \"\"\"\n  website: String\n\n  \"\"\"\n\n  The official twitter username. The corresponding twitter page should be `https://twitter.com/{twitterUsername}`.\n\n  \"\"\"\n  twitterUsername: String\n\n  \"\"\"\n\n  The official facebook profile ID. The corresponding facebook page should be `https://facebook.com/{facebookProfileId}`.\n\n  \"\"\"\n  facebookProfileId: String\n\n  \"\"\"\n\n  Stories related to this company. Depending on your `selection` and `language`, this may\n  contain stories mentioning the company directly or something affiliated with the company. Read\n  more about the different selections under the [story selection enum](#StorySelection).\n\n  \"\"\"\n  stories(\n    \"\"\"Story selection.\"\"\"\n    selection: StorySelection = RECENT\n\n    \"\"\"Story language.\"\"\"\n    language: StoryLanguage = ENGLISH\n\n    \"\"\"Page size.\"\"\"\n    first: Int = 10\n  ): StoryConnection!\n}\n\n\"\"\"\n\nA connection of companies facilitating pagination of companies. To read more about connections,\nsee the pagination documentation on [graphql.org/learn/pagination/](https://graphql.org/learn/pagination/).\n\n\"\"\"\ntype CompanyConnection {\n  \"\"\"A list of edges containing the companies as nodes.\"\"\"\n  edges: [CompanyConnectionEdge!]!\n\n  \"\"\"Page information, which can be used for page traversal.\"\"\"\n  pageInfo: PageInfo!\n}\n\n\"\"\"\n\nAn edge in a company connection. To read more about connections,\nsee the pagination documentation on [graphql.org/learn/pagination/](https://graphql.org/learn/pagination/).\n\n\"\"\"\ntype CompanyConnectionEdge {\n  \"\"\"Cursor used for page traversal.\"\"\"\n  cursor: String!\n\n  \"\"\"The node containing a compny.\"\"\"\n  node: Company!\n}\n\n\"\"\"\n\nAn object representing a cryptocurrency. From here you may currently access the base information, such as stories\nrelated to the cryptocurrency.\n\n\"\"\"\ntype Cryptocurrency {\n  \"\"\"\n\n  The internal Mito ID of the cryptocurrency. Save this for fetching this object without searching for a cryptocurrency.\n  This can be done with the [Query.cryptocurrencyById](#Query.cryptocurrencyById) field.\n\n  \"\"\"\n  id: ID!\n\n  \"\"\"The name of the cryptocurrency.\"\"\"\n  name: String!\n\n  \"\"\"\n\n  The official website of the cryptocurrency.\n\n  \"\"\"\n  website: String\n\n  \"\"\"\n\n  The subreddit of the cryptocurrency.\n\n  \"\"\"\n  reddit: String\n\n  \"\"\"\n\n  The official twitter username. The corresponding twitter page should be `https://twitter.com/{twitterUsername}`.\n\n  \"\"\"\n  twitterUsername: String\n\n  \"\"\"\n\n  Stories related to this cryptocurrency. Depending on your `selection` and `language`, this may\n  contain stories mentioning the cryptocurrency directly or something affiliated with the cryptocurrency. Read\n  more about the different selections under the [story selection enum](#StorySelection).\n\n  \"\"\"\n  stories(\n    \"\"\"Story selection.\"\"\"\n    selection: StorySelection = RECENT\n\n    \"\"\"Story language.\"\"\"\n    language: StoryLanguage = ENGLISH\n\n    \"\"\"Page size.\"\"\"\n    first: Int = 10\n  ): StoryConnection!\n}\n\n\"\"\"\n\nA connection of cryptocurrencies facilitating pagination of cryptocurrencies. To read more about connections,\nsee the pagination documentation on [graphql.org/learn/pagination/](https://graphql.org/learn/pagination/).\n\n\"\"\"\ntype CryptocurrencyConnection {\n  \"\"\"A list of edges containing the cryptocurrencies as nodes.\"\"\"\n  edges: [CryptocurrencyConnectionEdge!]!\n\n  \"\"\"Page information, which can be used for page traversal.\"\"\"\n  pageInfo: PageInfo!\n}\n\n\"\"\"\n\nAn edge in a cryptocurrency connection. To read more about connections,\nsee the pagination documentation on [graphql.org/learn/pagination/](https://graphql.org/learn/pagination/).\n\n\"\"\"\ntype CryptocurrencyConnectionEdge {\n  \"\"\"Cursor used for page traversal.\"\"\"\n  cursor: String!\n\n  \"\"\"The node containing a compny.\"\"\"\n  node: Cryptocurrency!\n}\n\n\"\"\"An enum containing the currently supported cryptocurrency indices.\"\"\"\nenum CryptoIndex {\n  \"\"\"\n\n  The Coinbase index fund containing four major cryptocurrencies.\n\n  Read more on [Coinbase](https://am.coinbase.com/documents/info.pdf)\n\n  \"\"\"\n  COINBASE\n}\n\n\"\"\"An enum containing the currently supported market indices.\"\"\"\nenum Index {\n  \"\"\"\n\n  The DAX stock market index consisting of 30 major stocks traded on Frankfurt Stock Exchange.\n\n  Read more on [wikipedia](https://en.wikipedia.org/wiki/DAX)\n\n  \"\"\"\n  DAX\n\n  \"\"\"\n\n  The CAC 40 stock market index based on 40 of the highest market caps listed on Euronext Paris.\n\n  Read more on [wikipedia](https://en.wikipedia.org/wiki/CAC_40)\n\n  \"\"\"\n  CAC\n\n  \"\"\"\n\n  The OMX Copenhagen 20 stock market index based on the 20 most-traded stocks on Copenhagen Stock Exchange.\n\n  Read more on [wikipedia](https://en.wikipedia.org/wiki/OMX_Copenhagen_20)\n\n  \"\"\"\n  OMXC\n\n  \"\"\"\n\n  The OMX Stockholm 30 stock market index based on the market capitalizations of the 30 most-traded stocks\n  on Stockholm Stock Exchange.\n\n  Read more on [wikipedia](https://en.wikipedia.org/wiki/OMX_Stockholm_30)\n\n  \"\"\"\n  OMXS\n\n  \"\"\"\n\n  THE OBX stock market index based on the 25 most liquid companies listed on Oslo Stock Exchange.\n\n  Read more on [wikipedia](https://en.wikipedia.org/wiki/OBX_Index)\n\n  \"\"\"\n  OBX\n\n  \"\"\"\n\n  The Dow Jones Industrial Average (DJIA) stock market index based on the performance of 30 large\n  companies on NYSE and NASDAQ.\n\n  Read more on [wikipedia](https://en.wikipedia.org/wiki/Dow_Jones_Industrial_Average)\n\n  \"\"\"\n  DJIA\n}\n\n\"\"\"Page info contains booleans which can be used for pagination.\"\"\"\ntype PageInfo {\n  \"\"\"\n  This is `true` if backwards pagination is supported and there are more preceding pages.\n  \"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"Indicates if the last page has been reached.\"\"\"\n  hasNextPage: Boolean!\n}\n\n\"\"\"\nThis is the root query type and as such will be your main entry-point to the Mito API when fetching data.\n\"\"\"\ntype Query {\n  \"\"\"\n\n  Given an internal Mito ID, you may retrieve a company at this field. If no matching company is found\n  this field is `null`.  The ID's can be found by using the other fields, such\n  as [Query.findCompanies](#Query.findCompanies).\n\n  \"\"\"\n  companyById(\n    \"\"\"Company ID.\"\"\"\n    id: ID!\n  ): Company\n\n  \"\"\"\n\n  Search for companies given a query string as the `q` argument. The number of potential companies\n  returned is limited by the `first` argument, which is not required and defaulted to `10`.\n\n  \"\"\"\n  findCompanies(\n    \"\"\"Query string.\"\"\"\n    q: String!\n\n    \"\"\"Page size.\"\"\"\n    first: Int = 10\n  ): CompanyConnection!\n\n  \"\"\"\n\n  Find currently trending companies on a given market index. The indices are\n  added on demand. The number of potential companies\n  returned is limited by the `first` argument, which is not required and defaulted to `10`.\n\n  \"\"\"\n  trendingCompaniesByIndex(\n    \"\"\"Market index.\"\"\"\n    index: Index!\n\n    \"\"\"Page size.\"\"\"\n    first: Int = 10\n  ): CompanyConnection!\n\n  \"\"\"\n\n  Find currently trending companies in a give sector based in the [IPTC Media\n  Topics](https://iptc.org/standards/media-topics/).\n  New sectors are added lazily on demand.\n  The number of potential companies returned is limited by the `first` argument,\n  which is not required and defaulted to `10`.\n\n  \"\"\"\n  trendingCompaniesBySector(\n    \"\"\"Industry sector.\"\"\"\n    sector: Sector!\n\n    \"\"\"Page size.\"\"\"\n    first: Int = 10\n  ): CompanyConnection!\n\n  \"\"\"\n\n  Given an internal Mito ID, you may retrieve a cryptocurrency at this field. If no matching cryptocurrency is found\n  this field is `null`.  The ID's can be found by using the other fields, such\n  as [Query.findCryptocurrencies](#Query.findCryptocurrencies).\n\n  \"\"\"\n  cryptocurrencyById(\n    \"\"\"Cryptocurrency ID.\"\"\"\n    id: ID!\n  ): Cryptocurrency\n\n  \"\"\"\n\n  Search for cryptocurrencies given a query string as the `q` argument. The number of potential cryptocurrencies\n  returned is limited by the `first` argument, which is not required and defaulted to `10`.\n\n  \"\"\"\n  findCryptocurrencies(\n    \"\"\"Query string.\"\"\"\n    q: String!\n\n    \"\"\"Page size.\"\"\"\n    first: Int = 10\n  ): CryptocurrencyConnection!\n\n  \"\"\"\n\n  Find currently trending cryptocurrencies on a given market index. The indices are added on demand. The number of\n  potential companies returned is limited by the `first` argument, which is not required and defaulted to `10`.\n\n  \"\"\"\n  trendingCryptocurrenciesByIndex(\n    \"\"\"Crypto index.\"\"\"\n    cryptoIndex: CryptoIndex!\n\n    \"\"\"Page size.\"\"\"\n    first: Int = 10\n  ): CryptocurrencyConnection!\n}\n\n\"\"\"\nAn enum containing the currently supported sectors based on the [IPTC Media\nTopics](https://iptc.org/standards/media-topics/).\n\"\"\"\nenum Sector {\n  \"\"\"This sector corresponds to the IPTC media topic: \"pharmaceutical\".\"\"\"\n  PHARMA\n}\n\n  \"\"\"\n\n  A story is a collection of articles written about the same subject, i.e. a cluster of articles.\n  Working with stories rather than articles provides a better overview of the media landscape\n  by removing articles that, to some degree, are duplicates.\n\n  \"\"\"\n  type Story {\n    \"\"\"\n    The size is a number expressing how widely it has propagated the media. This\n    is an indicator on the number of articles written about this story.\n    \"\"\"\n    size: Int!\n\n    \"\"\"\n    A story consists of several articles. This is the \"best\" article representing the story.\n    \"\"\"\n    primaryArticle: Article!\n  }\n\n  \"\"\"\n\n  A connection of stories facilitating pagination of stories. To read more about connections,\n  see the pagination documentation on [graphql.org/learn/pagination/](https://graphql.org/learn/pagination/).\n\n\"\"\"\ntype StoryConnection {\n  \"\"\"\n  A list of edges containing the stories as nodes and contextual information.\n  \"\"\"\n  edges: [StoryConnectionEdge!]!\n\n  \"\"\"Page information, which can be used for page traversal.\"\"\"\n  pageInfo: PageInfo!\n}\n\n\"\"\"\n\nAn edge in an entity connection. To read more about connections,\nsee the pagination documentation on [graphql.org/learn/pagination/](https://graphql.org/learn/pagination/).\n\n\"\"\"\ntype StoryConnectionEdge {\n  \"\"\"Story as a node.\"\"\"\n  node: Story!\n\n  \"\"\"The current cursor. Use this for pagination.\"\"\"\n  cursor: String!\n\n  \"\"\"\n\n  An indicator of whether the story is \"relevant\" for the given entity or not.\n  A story can mention an entity, or related entity, without being relevant.\n\n  \"\"\"\n  relevant: Boolean!\n\n  \"\"\"\n\n  This is similar to the [Article.abstract](#Article.abstract) field, in that it is\n  a sentence deemed relevant for the article. The only difference being that it is relevant\n  in context of the parent entity.\n\n  \"\"\"\n  abstract: String!\n  }\n\n  \"\"\"An enum used to filter stories by language.\"\"\"\n  enum StoryLanguage {\n    \"\"\"Spanish.\"\"\"\n    SPANISH\n\n    \"\"\"French.\"\"\"\n    FRENCH\n\n    \"\"\"German.\"\"\"\n    GERMAN\n\n    \"\"\"Danish.\"\"\"\n    DANISH\n\n    \"\"\"Swedish.\"\"\"\n    SWEDISH\n\n    \"\"\"Norwegian.\"\"\"\n    NORWEGIAN\n\n    \"\"\"English.\"\"\"\n    ENGLISH\n  }\n\n  \"\"\"An enum used to filter stories.\"\"\"\n  enum StorySelection {\n    \"\"\"Only stories deemed relevant to the company is fetched.\"\"\"\n    RELEVANT\n\n    \"\"\"No filter is applied.\"\"\"\n    RECENT\n  }\n\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 12,
      "containsCycle": false,
      "polynomialLevel": 2,
      "numDefinitions": 17
    },
    {
      "name": "schema.graphql",
      "path": "packages/gintonic/__tests__/resources/schema.graphql",
      "sha": "06ca518b3fd04f1be41575d7b60eb70fe5dc7253",
      "url": "https://api.github.com/repositories/158833852/contents/packages/gintonic/__tests__/resources/schema.graphql?ref=a49a68848dd7ff21a867fbcbb31235c1d6bc8843",
      "git_url": "https://api.github.com/repositories/158833852/git/blobs/06ca518b3fd04f1be41575d7b60eb70fe5dc7253",
      "html_url": "https://github.com/mitoai/gintonic/blob/a49a68848dd7ff21a867fbcbb31235c1d6bc8843/packages/gintonic/__tests__/resources/schema.graphql",
      "content": "\"\"\"\n\nAn alias for an entity. This contains three fields: `value`, `color`, and `disabled`. These\nare used to determine the disambiguation strategy for the alias.\n  \n\"\"\"\ntype Alias {\n  \"\"\"The alias value.\"\"\"\n  value: String!\n\n  \"\"\"The alias color.\"\"\"\n  color: AliasColor!\n\n  \"\"\"Whether the alias is disabled.\"\"\"\n  disabled: Boolean!\n}\n\n\"\"\"An enum representing supported languages.\"\"\"\nenum AliasColor {\n  \"\"\"Indicates that the alias should never be trusted.\"\"\"\n  BLACK\n\n  \"\"\"\n  Indicates if the context should be used when disambiguating between choices.\n  \"\"\"\n  GREY\n\n  \"\"\"Indicates if the alias should be trusted uncritically.\"\"\"\n  WHITE\n}\n\n\"\"\"\n\nAn alias for an entity. This contains three fields: `value`, `color`, and `disabled`. These\nare used to determine the disambiguation strategy for the alias.\n  \n\"\"\"\ninput AliasInput {\n  \"\"\"The alias value.\"\"\"\n  value: String!\n\n  \"\"\"The alias color.\"\"\"\n  color: AliasColor!\n\n  \"\"\"Whether the alias is disabled.\"\"\"\n  disabled: Boolean!\n}\n\n\"\"\"Annotation\"\"\"\ntype Annotation {\n  \"\"\"Annotation phrase.\"\"\"\n  phrase: String!\n\n  \"\"\"Annotation offset.\"\"\"\n  offset: Offset!\n\n  \"\"\"Annotation length.\"\"\"\n  length: Int!\n\n  \"\"\"All annotation extractors.\"\"\"\n  extractors: [Extractor!]!\n\n  \"\"\"Annotation entity.\"\"\"\n  entity: EntityOrRef!\n}\n\n\"\"\"A body offset.\"\"\"\ntype BodyOffset implements Offset {\n  \"\"\"Offset relative to the body.\"\"\"\n  offset: Int!\n}\n\n\"\"\"A representation of categories.\"\"\"\ntype Category {\n  \"\"\"Category ID.\"\"\"\n  id: ID!\n\n  \"\"\"Category name.\"\"\"\n  name: String\n\n  \"\"\"Child categories.\"\"\"\n  children: [Category!]!\n\n  \"\"\"Parent category.\"\"\"\n  parent: Category\n\n  \"\"\"Path from root category to this category. Excluding self.\"\"\"\n  path: [Category!]!\n}\n\n\"\"\"A cursor used for fetching more news.\"\"\"\nscalar Cursor\n\n\"\"\"\n\nA default implementation of the [PropertyValue](#PropertyValue). If all else fails, this is the go-to property value.\n  \n\"\"\"\ntype DefaultPropertyValue implements PropertyValue {\n  \"\"\"The value.\"\"\"\n  value: String!\n}\n\n\"\"\"\n\nAn entity!\n  \n\"\"\"\ntype Entity {\n  \"\"\"Internal entity ID.\"\"\"\n  id: ID!\n\n  \"\"\"Will contain the link to the corresponding wikidata page, if present.\"\"\"\n  wikidataUrl: String\n\n  \"\"\"The entity score.\"\"\"\n  score(\n    \"\"\"The language to be used when resolving the field.\"\"\"\n    language: Language\n  ): Float!\n\n  \"\"\"Entity name.\"\"\"\n  name(\n    \"\"\"The language to be used when resolving the field.\"\"\"\n    language: Language\n  ): String!\n\n  \"\"\"Entity description.\"\"\"\n  description(\n    \"\"\"The language to be used when resolving the field.\"\"\"\n    language: Language\n  ): String!\n\n  \"\"\"Entity aliases.\"\"\"\n  aliases(\n    \"\"\"The language to be used when resolving the field.\"\"\"\n    language: Language\n  ): [Alias!]!\n\n  \"\"\"Entity properties.\"\"\"\n  properties(\n    \"\"\"The language to be used when resolving the field.\"\"\"\n    language: Language\n\n    \"\"\"\n    \n    A list of ID that, when supplied, will filter the returned edges.\n    All edges with a relationship that isn't in the provided list will not be returned.\n            \n    \"\"\"\n    relationshipFilter: [ID!]\n  ): PropertyConnection!\n\n  \"\"\"The relations to other entities.\"\"\"\n  relations(\n    \"\"\"The language to be used when resolving the field.\"\"\"\n    language: Language\n\n    \"\"\"Filter returned relations by id.\"\"\"\n    relationshipFilter: [ID!]\n  ): RelationConnection!\n\n  \"\"\"\n  \n  Fetch news-item, within a time-span, related to this entity.\n      \n  \"\"\"\n  news(\n    \"\"\"A timestamp indicating from\"\"\"\n    from: ISODateTime!\n\n    \"\"\"A timestamp indicating to\"\"\"\n    to: ISODateTime!\n\n    \"\"\"A cursor used to continue iteration\"\"\"\n    after: Cursor\n\n    \"\"\"Filter\"\"\"\n    filter: EntityNewsItemConnectionFilter\n\n    \"\"\"Only fetches news deemed relevant for the entity.\"\"\"\n    onlyRelevant: Boolean = false\n\n    \"\"\"\n    Provide a cluster score. This will remove news items based on the similarity score of similar items.\n    \"\"\"\n    clusterScore: Long\n\n    \"\"\"The number of items to fetch\"\"\"\n    first: Int = 10\n  ): EntityNewsItemConnection!\n}\n\n\"\"\"A connection used for iterating through news.\"\"\"\ntype EntityNewsItemConnection {\n  \"\"\"Edges containing the news data.\"\"\"\n  edges: [EntityNewsItemConnectionEdge!]!\n\n  \"\"\"Information regarding the results\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  \n  Generate a histogram of how often the entity has been mentioned, e.g. in the media.\n      \n  \"\"\"\n  histogram(\n    \"\"\"The interval of the values returned.\"\"\"\n    interval: HistogramInterval = DAY\n  ): Histogram!\n}\n\n\"\"\"\nAn edge containing relational information between entity and news item.\n\"\"\"\ntype EntityNewsItemConnectionEdge {\n  \"\"\"A cursor used for fetching of more data.\"\"\"\n  cursor: Cursor!\n\n  \"\"\"A summary in the context of the entity.\"\"\"\n  summary: Summary!\n\n  \"\"\"Indicates if the news-item is relevant to the entity.\"\"\"\n  relevant: Boolean!\n\n  \"\"\"The news item.\"\"\"\n  node: NewsItem!\n}\n\n\"\"\"Possible filters when fetching news.\"\"\"\nenum EntityNewsItemConnectionFilter {\n  \"\"\"Relevance filter.\"\"\"\n  RELEVANCE\n}\n\n\"\"\"An union type of external entity refs and entities.\"\"\"\nunion EntityOrRef = Entity | EntityRef\n\n\"\"\"A reference to an external entity\"\"\"\ntype EntityRef {\n  \"\"\"The entity ID.\"\"\"\n  id: ID!\n}\n\n\"\"\"Entity extractors used to find entities in text.\"\"\"\nenum Extractor {\n  \"\"\"The Mito matcher extractor.\"\"\"\n  MITO_META\n\n  \"\"\"The Mito annotation extractor.\"\"\"\n  MITO_ANNOTATION\n\n  \"\"\"The Mito matcher extractor.\"\"\"\n  MITO_MATCHER\n\n  \"\"\"The Mito unit extractor.\"\"\"\n  MITO_UNIT\n\n  \"\"\"The Mito company extractor.\"\"\"\n  MITO_COMPANY\n\n  \"\"\"The spotlight extractor.\"\"\"\n  SPOTLIGHT\n\n  \"\"\"The Mito default extractor.\"\"\"\n  MITO_DEFAULT\n}\n\n\"\"\"\n\nWhen the value is determined to be a facebook user-id, this implementation can be used to access relevant content.\n  \n\"\"\"\ntype FacebookProfileIdPropertyValue implements PropertyValue {\n  \"\"\"The value.\"\"\"\n  value: String!\n\n  \"\"\"A url to the facebook profile.\"\"\"\n  facebookProfileUrl: String!\n}\n\n\"\"\"A geo-coordinate.\"\"\"\ntype GeoCoordinate {\n  \"\"\"The latitude of the geo-coordinates\"\"\"\n  latitude: Float!\n\n  \"\"\"The longitude of the geo-coordinates\"\"\"\n  longitude: Float!\n}\n\n\"\"\"\n\nWhen the value is determined to be a geo-coordinate, this implementation can be used to access relevant content.\n  \n\"\"\"\ntype GeoCoordinatePropertyValue implements PropertyValue {\n  \"\"\"The value.\"\"\"\n  value: String!\n\n  \"\"\"The longitude of the geo-coordinates\"\"\"\n  location: GeoCoordinate!\n}\n\n\"\"\"\n\nA histogram showing trends over time.\n  \n\"\"\"\ntype Histogram {\n  \"\"\"The values of the histogram.\"\"\"\n  values: [HistogramEntry!]!\n}\n\n\"\"\"\n\nA single histogram value.\n  \n\"\"\"\ntype HistogramEntry {\n  \"\"\"The value.\"\"\"\n  value: Long!\n\n  \"\"\"The time.\"\"\"\n  time: ISODateTime!\n}\n\n\"\"\"An enum representing supported histogram interval.\"\"\"\nenum HistogramInterval {\n  \"\"\"Hour interval.\"\"\"\n  HOUR\n\n  \"\"\"Day interval\"\"\"\n  DAY\n\n  \"\"\"Week interval.\"\"\"\n  WEEK\n}\n\n\"\"\"A representation of an image.\"\"\"\ntype Image {\n  \"\"\"A URL where the image can be accessed.\"\"\"\n  url: String!\n}\n\n\"\"\"\n\nAn combined date-time representation according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.\n      \n\"\"\"\nscalar ISODateTime\n\n\"\"\"An enum representing supported languages.\"\"\"\nenum Language {\n  \"\"\"German.\"\"\"\n  GERMAN\n\n  \"\"\"French.\"\"\"\n  FRENCH\n\n  \"\"\"Spanish.\"\"\"\n  SPANISH\n\n  \"\"\"Swedish.\"\"\"\n  SWEDISH\n\n  \"\"\"English.\"\"\"\n  ENGLISH\n\n  \"\"\"Norwegian.\"\"\"\n  NORWEGIAN\n\n  \"\"\"Danish.\"\"\"\n  DANISH\n}\n\n\"\"\"\nThe `Long` scalar type represents non-fractional signed whole numeric values.\nLong can represent values between -(2^63) and 2^63 - 1.\n\"\"\"\nscalar Long\n\n\"\"\"\n\nThe root mutation object. From here you may update the Mito.ai Graph.\n  \n\"\"\"\ntype Mutation {\n  \"\"\"\n  \n  Update entities has never been so easy! By supplying an mandatory id, and optionally specifying which language the\n  changes should be made upon, you can update the `name`, `description`, and `aliases` on this field. Un-supplied arguments\n  will not be modified. This field will return the entity if found, else `null`.\n  \n  Notice that for adding properties and relations, you should use the\n  [Mutation.addPropertyToEntity](#Mutation.addPropertyToEntity),\n  [Mutation.removePropertyFromEntity](#Mutation.removePropertyFromEntity),\n  [Mutation.addRelationToEntity](#Mutation.addRelationToEntity), and\n  [Mutation.removeRelationFromEntity](#Mutation.removeRelationFromEntity), to\n  add a property, remove a property, add a relation, or remove a relation\n  respectively.\n      \n  \"\"\"\n  updateEntity(\n    \"\"\"ID of the entity to be updated.\"\"\"\n    id: ID!\n\n    \"\"\"The language to update.\"\"\"\n    language: Language\n\n    \"\"\"The new name.\"\"\"\n    name: String\n\n    \"\"\"The new description.\"\"\"\n    description: String\n\n    \"\"\"The new aliases.\"\"\"\n    aliases: [AliasInput!]\n  ): Entity\n\n  \"\"\"\n  \n  Create a new entity by supplying the name. This entity will get a unique ID and can subsequently be modified.\n  The name should be that of the default name, but can be modified later on.\n      \n  \"\"\"\n  createEntity(\n    \"\"\"The name of the entity.\"\"\"\n    name: String!\n  ): Entity!\n\n  \"\"\"\n  \n  Add a property to the entity. The `language` can be used to add a language specific property. This\n  field will return an entity if found, else `null`.\n      \n  \"\"\"\n  addPropertyToEntity(\n    \"\"\"The ID of the entity to update\"\"\"\n    id: ID!\n\n    \"\"\"The language to update.\"\"\"\n    language: Language\n\n    \"\"\"ID of the relationship.\"\"\"\n    relationship: ID!\n\n    \"\"\"The value.\"\"\"\n    value: String!\n  ): Entity\n\n  \"\"\"\n  \n  Remove a property from an entity. The `language` can be used to add a language specific property. This\n  field will return an entity if found, else `null`.\n      \n  \"\"\"\n  removePropertyFromEntity(\n    \"\"\"The ID of the entity to update\"\"\"\n    id: ID!\n\n    \"\"\"The language to update.\"\"\"\n    language: Language\n\n    \"\"\"ID of the relationship.\"\"\"\n    relationship: ID!\n\n    \"\"\"The value.\"\"\"\n    value: String!\n  ): Entity\n\n  \"\"\"\n  \n  Add a relation to the entity. The `language` can be used to add a language specific property. This\n  field will return an entity if found, else `null`.\n      \n  \"\"\"\n  addRelationToEntity(\n    \"\"\"The ID of the entity to update\"\"\"\n    id: ID!\n\n    \"\"\"The language to update.\"\"\"\n    language: Language\n\n    \"\"\"ID of the relationship.\"\"\"\n    relationship: ID!\n\n    \"\"\"The ID of the target entity\"\"\"\n    entity: ID!\n  ): Entity\n\n  \"\"\"\n  \n  Remove a relation from an entity. The `language` can be used to add a language specific property. This\n  field will return an entity if found, else `null`.\n      \n  \"\"\"\n  removeRelationFromEntity(\n    \"\"\"The ID of the entity to update\"\"\"\n    id: ID!\n\n    \"\"\"The language to update.\"\"\"\n    language: Language\n\n    \"\"\"ID of the relationship.\"\"\"\n    relationship: ID!\n\n    \"\"\"The ID of the target entity\"\"\"\n    entity: ID!\n  ): Entity\n\n  \"\"\"\n  \n  Add an entity to a portfolio.\n      \n  \"\"\"\n  addEntityToPortfolio(\n    \"\"\"The ID of the entity to add.\"\"\"\n    entity: ID!\n\n    \"\"\"The ID of the portfolio to add to.\"\"\"\n    portfolio: ID!\n  ): Portfolio\n\n  \"\"\"\n  \n  Remove an entity from a portfolio.\n      \n  \"\"\"\n  removeEntityFromPortfolio(\n    \"\"\"The ID of the entity to remove.\"\"\"\n    entity: ID!\n\n    \"\"\"The ID of the portfolio to remove from.\"\"\"\n    portfolio: ID!\n  ): Portfolio\n\n  \"\"\"\n  \n  Create an empty portfolio.\n      \n  \"\"\"\n  createPortfolio(\n    \"\"\"The name of the portfolio to create.\"\"\"\n    name: String!\n  ): Boolean!\n\n  \"\"\"\n  \n  Remove a portfolio.\n      \n  \"\"\"\n  removePortfolio(\n    \"\"\"The ID of the portfolio to remove.\"\"\"\n    portfolio: ID!\n  ): Boolean!\n}\n\n\"\"\"\n\nAn item representing e.g. news articles.\n  \n\"\"\"\ntype NewsItem {\n  \"\"\"News item id\"\"\"\n  id: ID!\n\n  \"\"\"Item title\"\"\"\n  title: String!\n\n  \"\"\"Item URL\"\"\"\n  url: String!\n\n  \"\"\"Images associated with the news item\"\"\"\n  images: [Image!]!\n\n  \"\"\"Published time.\"\"\"\n  published: ISODateTime!\n\n  \"\"\"The publisher.\"\"\"\n  publisher: String!\n\n  \"\"\"A summary of the article.\"\"\"\n  summary: Summary!\n\n  \"\"\"The rank of the news item.\"\"\"\n  rank: Int!\n\n  \"\"\"The body-text of the news item.\"\"\"\n  body: String!\n\n  \"\"\"The entity language.\"\"\"\n  language: Language\n\n  \"\"\"Some kind of measurement of news impact.\"\"\"\n  impact: Float!\n\n  \"\"\"The entities of the news items.\"\"\"\n  entities: NewsItemEntityConnection!\n\n  \"\"\"The news item categories.\"\"\"\n  categories: NewsItemCategoryConnection!\n\n  \"\"\"News item properties.\"\"\"\n  properties(\n    \"\"\"\n    \n    A list of ID that, when supplied, will filter the returned edges.\n    All edges with a relationship that isn't in the provided list will not be returned.\n                        \n    \"\"\"\n    relationshipFilter: [ID!]\n  ): PropertyConnection!\n\n  \"\"\"Similar news items.\"\"\"\n  similar(\n    \"\"\"Cursor when paginating.\"\"\"\n    after: Cursor\n\n    \"\"\"How many items to fetch pr. page\"\"\"\n    first: Int = 10\n  ): NewsItemNewsItemConnection!\n}\n\n\"\"\"News item and category relation.\"\"\"\ntype NewsItemCategoryConnection {\n  \"\"\"The edges of the connection\"\"\"\n  edges: [NewsItemCategoryConnectionEdge!]!\n}\n\n\"\"\"The news-item category connection edge.\"\"\"\ntype NewsItemCategoryConnectionEdge {\n  \"\"\"The category in question.\"\"\"\n  node: Category!\n}\n\n\"\"\"A connection between news items and entities.\"\"\"\ntype NewsItemEntityConnection {\n  \"\"\"The edges of the connection.\"\"\"\n  edges: [NewsItemEntityConnectionEdge!]!\n\n  \"\"\"Accumulated annotations across entities.\"\"\"\n  annotations: [Annotation!]!\n}\n\n\"\"\"An edge on a news-entity connection.\"\"\"\ntype NewsItemEntityConnectionEdge {\n  \"\"\"The annotations.\"\"\"\n  annotations: [Annotation!]!\n\n  \"\"\"All annotation extractors.\"\"\"\n  extractors: [Extractor!]!\n\n  \"\"\"Indicates if the entity is relevant for the news item.\"\"\"\n  relevant: Boolean!\n\n  \"\"\"The relevance measure of the entity.\"\"\"\n  relevance: Relevance!\n\n  \"\"\"News item summary in the context of the entity\"\"\"\n  summary: Summary!\n\n  \"\"\"The related entity.\"\"\"\n  node: EntityOrRef!\n}\n\n\"\"\"The connection between a news item and a similar news item.\"\"\"\ntype NewsItemNewsItemConnection {\n  \"\"\"The edges of the connection.\"\"\"\n  edges: [NewsItemNewsItemConnectionEdge!]!\n\n  \"\"\"Information regarding the results\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  \n  Generate a histogram of how often the entity has been mentioned, e.g. in the media.\n                        \n  \"\"\"\n  histogram(\n    \"\"\"The interval of the values returned.\"\"\"\n    interval: HistogramInterval = DAY\n  ): Histogram!\n}\n\n\"\"\"The edge of tne news-item news-item connection.\"\"\"\ntype NewsItemNewsItemConnectionEdge {\n  \"\"\"The news item.\"\"\"\n  node: NewsItem!\n\n  \"\"\"Cursor used for further pagination.\"\"\"\n  cursor: Cursor!\n\n  \"\"\"The similarity of the two connected news items.\"\"\"\n  similarityScore: Float!\n}\n\n\"\"\"An union type of external entity refs and entities.\"\"\"\ninterface Offset {\n  \"\"\"Some offset\"\"\"\n  offset: Int!\n}\n\n\"\"\"The filtered result.\"\"\"\ntype OverlappingResult {\n  \"\"\"The article in question\"\"\"\n  item: NewsItem!\n\n  \"\"\"If it's overlapping or not.\"\"\"\n  overlapping: Boolean!\n}\n\n\"\"\"Information regarding the current connection\"\"\"\ntype PageInfo {\n  \"\"\"Whether there is a next page\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"Whether backwards-pagination is enabled and there is a previous page\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"The total number of results found.\"\"\"\n  totalCount: Long!\n}\n\n\"\"\"An representation of portfolios, which are a collection of entities.\"\"\"\ntype Portfolio {\n  \"\"\"The ID of the portfolio.\"\"\"\n  id: ID!\n\n  \"\"\"The name of the portfolio.\"\"\"\n  name: String!\n\n  \"\"\"The entities in the portfolio.\"\"\"\n  entities: PortfolioEntityConnection!\n}\n\n\"\"\"A Connection containing entities.\"\"\"\ntype PortfolioEntityConnection {\n  \"\"\"The entities as edges.\"\"\"\n  edges: [PortfolioEntityConnectionEdge!]!\n}\n\n\"\"\"An edge containing the Entity\"\"\"\ntype PortfolioEntityConnectionEdge {\n  \"\"\"The entity.\"\"\"\n  node: Entity!\n}\n\n\"\"\"\n\nA connection containing properties.\n  \n\"\"\"\ntype PropertyConnection {\n  \"\"\"The properties as edges.\"\"\"\n  edges: [PropertyConnectionEdge!]!\n}\n\n\"\"\"\n\nAn edge containing the property and the corresponding relationship.\n  \n\"\"\"\ntype PropertyConnectionEdge {\n  \"\"\"The property value.\"\"\"\n  node: PropertyValue!\n\n  \"\"\"Indicating the relationship between the nodes of the edge.\"\"\"\n  relationship: Relationship!\n}\n\n\"\"\"\nAn interface for property values. The concrete types implement custom logic for handling the different type of values.\n\"\"\"\ninterface PropertyValue {\n  \"\"\"An string value, which is always present.\"\"\"\n  value: String!\n}\n\n\"\"\"\n\nThis is the root query type and as such will be your main entry-point to the\nMito API when fetching data.\n  \n\"\"\"\ntype Query {\n  \"\"\"\n  \n   Given a list of ids, this will lookup the corresponding entity. Order is preserved and\n   if an entity isn't found, the result will be omitted.\n      \n  \"\"\"\n  entitiesById(\n    \"\"\"A list of ID's\"\"\"\n    ids: [ID!]!\n  ): [Entity!]!\n\n  \"\"\"\n  \n  Find entity by ID. Retrieves the entity if found, else `null`.\n      \n  \"\"\"\n  entityById(\n    \"\"\"The internal entity ID\"\"\"\n    id: ID!\n  ): Entity\n\n  \"\"\"\n  \n  Find relationship by ID. Retrieves the relationship if found, else `null`.\n                        \n  \"\"\"\n  relationshipById(\n    \"\"\"The internal relationship ID\"\"\"\n    id: ID!\n  ): Relationship\n\n  \"\"\"\n  \n   Given a list of ids, this will lookup the corresponding relationship. Order is preserved and\n   if a relationship isn't found, the result will be omitted.\n      \n  \"\"\"\n  relationshipsById(\n    \"\"\"A list of ID's\"\"\"\n    ids: [ID!]!\n  ): [Relationship!]!\n\n  \"\"\"\n  \n  Filter duplicate news-items and return the filtered list. The order is preserved and\n  An item is deemed duplicate of the preceding items.\n                        \n  \"\"\"\n  findOverlappingNewsItems(\n    \"\"\"The ID's of the articles to be filtered\"\"\"\n    ids: [ID!]!\n  ): [OverlappingResult!]! @deprecated(reason: \"Use duplication logic when fetching articles.\")\n\n  \"\"\"\n  \n  Retrieve a news item by the internal GraphQL ID. If the item doesn't exists null is returned.\n      \n  \"\"\"\n  newsItemById(\n    \"\"\"ID of the news item to fetch.\"\"\"\n    id: ID!\n  ): NewsItem\n\n  \"\"\"\n  \n  Retrieve a news item by URL. If more items share the same url, the behaviour is undefined.\n      \n  \"\"\"\n  newsItemByUrl(\n    \"\"\"URL of the news item to fetch.\"\"\"\n    url: String!\n  ): NewsItem @deprecated(reason: \"Due the ambiguity by fetching news items by url, it is recommended to use [newsItemById](#Query.newsItemById).\")\n\n  \"\"\"\n  \n  Lists all portfolios.\n      \n  \"\"\"\n  portfolios: [Portfolio!]!\n}\n\n\"\"\"\n\nA connection containing entities.\n  \n\"\"\"\ntype RelationConnection {\n  \"\"\"The relation as edges.\"\"\"\n  edges: [RelationConnectionEdge!]!\n}\n\n\"\"\"\n\nAn edge containing the entity and the corresponding relationship.\n  \n\"\"\"\ntype RelationConnectionEdge {\n  \"\"\"Indicating the relationship between the nodes of the edge.\"\"\"\n  relationship: Relationship!\n\n  \"\"\"The related entity.\"\"\"\n  node: EntityOrRef!\n}\n\n\"\"\"\n\nRepresents a relationship between two nodes, e.g. between entities, or entities and values.\n  \n\"\"\"\ntype Relationship {\n  \"\"\"The relationship ID\"\"\"\n  id: ID!\n\n  \"\"\"Some name, if available.\"\"\"\n  name: String\n}\n\n\"\"\"\n\nRelevance is an internal measurement of how relevant the entity is wrt. the\nnews article.\n  \n\"\"\"\ntype Relevance {\n  \"\"\"The relevance score\"\"\"\n  score: Float!\n\n  \"\"\"An explanation of the relevance\"\"\"\n  description: RelevanceScore!\n}\n\n\"\"\"\n\nThe foundation of the relevance score.\n  \n\"\"\"\ntype RelevanceScore {\n  \"\"\"Content score\"\"\"\n  content: Float!\n\n  \"\"\"Meta score\"\"\"\n  meta: Float!\n\n  \"\"\"Offset score\"\"\"\n  offset: Float!\n\n  \"\"\"Mention score\"\"\"\n  mention: Float!\n\n  \"\"\"Context score\"\"\"\n  context: Float!\n}\n\n\"\"\"A summary of a news item.\"\"\"\ntype Summary {\n  \"\"\"Retrieve the summary text\"\"\"\n  text: String!\n}\n\n\"\"\"A title offset.\"\"\"\ntype TitleOffset implements Offset {\n  \"\"\"Offset relative to the title.\"\"\"\n  offset: Int!\n}\n\n\"\"\"\n\nWhen the value is determined to be a twitter handle, this implementation can be used to access relevant content.\n  \n\"\"\"\ntype TwitterHandlePropertyValue implements PropertyValue {\n  \"\"\"The value.\"\"\"\n  value: String!\n\n  \"\"\"A url to the twitter profile.\"\"\"\n  twitterProfileUrl: String!\n}\n\n\"\"\"\n\nWhen the value is determined to be a website, this implementation can be used to access relevant content.\n  \n\"\"\"\ntype WebsitePropertyValue implements PropertyValue {\n  \"\"\"The value.\"\"\"\n  value: String!\n\n  \"\"\"The coresponding url for the website.\"\"\"\n  url: String!\n}\n\n\"\"\"\n\nWhen the value is determined to be a WikiMedia image, this implementation can be used to access relevant content.\n  \n\"\"\"\ntype WikiMediaImagePropertyValue implements PropertyValue {\n  \"\"\"The value.\"\"\"\n  value: String!\n\n  \"\"\"An image representing the wiki-media hosted image.\"\"\"\n  image: Image!\n}\n\n",
      "containsQueryType": true,
      "typesUndefined": [],
      "directivesUndefined": [
        "deprecated"
      ],
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 41,
      "containsCycle": true,
      "numDefinitions": 53
    }
  ],
  "metrics": {
    "created_at": "2018-11-23T13:05:05Z",
    "updated_at": "2019-07-12T11:47:14Z",
    "pushed_at": "2019-07-12T09:42:11Z",
    "issues": 6,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 10,
    "pull_requests_open": 5,
    "pull_requests_closed": 0,
    "pull_requests_merged": 5,
    "releases": 0,
    "stargazers": 24
  }
}