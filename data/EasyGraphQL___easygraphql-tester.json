{
  "repo_name": "easygraphql-tester",
  "repo_full_name": "easygraphql/easygraphql-tester",
  "repo_owner": "EasyGraphQL",
  "repo_description": "Test GraphQL queries, mutations and schemas on an easy way! ðŸš€",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "gitHubSchema.gql",
      "path": "test/schema/gitHubSchema.gql",
      "sha": "f2aa57d352ec795c8a1a8609266578d3e8c8c679",
      "url": "https://api.github.com/repositories/144654952/contents/test/schema/gitHubSchema.gql?ref=110389225ab677e36559b65b2a5606ab8385cac7",
      "git_url": "https://api.github.com/repositories/144654952/git/blobs/f2aa57d352ec795c8a1a8609266578d3e8c8c679",
      "html_url": "https://github.com/EasyGraphQL/easygraphql-tester/blob/110389225ab677e36559b65b2a5606ab8385cac7/test/schema/gitHubSchema.gql",
      "content": "type Query {\n  viewer: User!\n  licenses: [License]!\n}\n\ntype License {\n  id: ID!\n  name: String!\n  repository(name: String!): Repository\n}\n\ntype User {\n  name: String\n  isHireable: Boolean!\n  repository(name: String!): Repository\n  issues(\n    orderBy: IssueOrder\n    labels: [String!]\n    states: [IssueState!]\n    after: String\n    before: String\n    first: Int\n    last: Int\n  ): IssueConnection!\n}\n\ntype Repository {\n  name: String!\n  issues(\n    orderBy: IssueOrder\n    labels: [String!]\n    states: [IssueState!]\n    after: String\n    before: String\n    first: Int\n    last: Int\n  ): IssueConnection!\n}\n\ninput IssueOrder {\n  direction: OrderDirection!\n  field: IssueOrderField!\n}\n\nenum OrderDirection {\n  ASC\n  DESC\n}\n\nenum IssueOrderField {\n  CREATED_AT\n  UPDATED_AT\n  COMMENTS\n}\n\nenum IssueState {\n  OPEN\n  CLOSED\n}\n\ntype IssueConnection {\n  edges: [IssueEdge]\n  nodes: [Issue]\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ntype IssueEdge {\n  cursor: String!\n  node: Issue\n}\n\ntype Issue {\n  id: ID!\n  title: String!\n  viewerDidAuthor: Boolean!\n  state: IssueState!\n  repository: Repository!\n}\n\ntype PageInfo {\n  endCursor: String\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n}",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 8,
      "containsCycle": true,
      "numDefinitions": 12
    },
    {
      "name": "schema.gql",
      "path": "examples/jest/schema/schema.gql",
      "sha": "593a6d6c2d8eb95c97a8ed262b7707d645ddf4c1",
      "url": "https://api.github.com/repositories/144654952/contents/examples/jest/schema/schema.gql?ref=9b4137421e3f258207b27822d8e4ac8fef815bd9",
      "git_url": "https://api.github.com/repositories/144654952/git/blobs/593a6d6c2d8eb95c97a8ed262b7707d645ddf4c1",
      "html_url": "https://github.com/EasyGraphQL/easygraphql-tester/blob/9b4137421e3f258207b27822d8e4ac8fef815bd9/examples/jest/schema/schema.gql",
      "content": "scalar JSON\n\ntype User {\n  email: String!\n  username: String!\n  fullName: String!\n}\n\ntype Me {\n  id: ID!\n  email: String!\n  username: String!\n  fullName: String!\n  addresses: [String]!\n  scores: [Int]!\n  age: Int\n  testResult: Float!\n  phone: [String]!\n  apiKey: String!\n  familyInfo: [FamilyInfo]!\n}\n\ntype FamilyInfo {\n  father: User!\n  mother: User!\n  brothers: [User]!\n  isLocal: Boolean!\n}\n\n# MUTATIONS\ninput UserInput {\n  email: String!\n  username: String!\n  fullName: String!\n  password: String!\n}\n\ninput IsAdminInput {\n  isAdmin: Boolean!\n}\n\ninput UpdatePasswordInput {\n  oldPassword: String!\n  newPassword: String!\n}\n\ninput UpdateUserAgeInput {\n  id: ID!\n  age: Int!\n}\n\ninput UpdateUserScoresInput {\n  scores: [Int]!\n}\n\ntype Query {\n  getMe: Me\n  getUserByUsername(username: String!, name: String!): User\n  getFamilyInfo: FamilyInfo\n  getFamilyInfoByIsLocal(isLocal: Boolean!): FamilyInfo\n  getMeByAge(age: Int!): Me\n  getMeByTestResult(result: Float!): Me\n  getMeByResults(results: [Int]!): Me\n}\n\ntype Mutation {\n  createUser(input: UserInput!): User\n  isAdmin(input: IsAdminInput!): User\n  updatePassword(input: UpdatePasswordInput!): Me\n  updateUserAge(input: UpdateUserAgeInput!): Me\n  updateUserScores(input: UpdateUserScoresInput!): Me\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 5,
      "containsCycle": false,
      "polynomialLevel": 2,
      "numDefinitions": 11
    },
    {
      "name": "schema.gql",
      "path": "examples/lab/schema/schema.gql",
      "sha": "593a6d6c2d8eb95c97a8ed262b7707d645ddf4c1",
      "url": "https://api.github.com/repositories/144654952/contents/examples/lab/schema/schema.gql?ref=9b4137421e3f258207b27822d8e4ac8fef815bd9",
      "git_url": "https://api.github.com/repositories/144654952/git/blobs/593a6d6c2d8eb95c97a8ed262b7707d645ddf4c1",
      "html_url": "https://github.com/EasyGraphQL/easygraphql-tester/blob/9b4137421e3f258207b27822d8e4ac8fef815bd9/examples/lab/schema/schema.gql",
      "content": "scalar JSON\n\ntype User {\n  email: String!\n  username: String!\n  fullName: String!\n}\n\ntype Me {\n  id: ID!\n  email: String!\n  username: String!\n  fullName: String!\n  addresses: [String]!\n  scores: [Int]!\n  age: Int\n  testResult: Float!\n  phone: [String]!\n  apiKey: String!\n  familyInfo: [FamilyInfo]!\n}\n\ntype FamilyInfo {\n  father: User!\n  mother: User!\n  brothers: [User]!\n  isLocal: Boolean!\n}\n\n# MUTATIONS\ninput UserInput {\n  email: String!\n  username: String!\n  fullName: String!\n  password: String!\n}\n\ninput IsAdminInput {\n  isAdmin: Boolean!\n}\n\ninput UpdatePasswordInput {\n  oldPassword: String!\n  newPassword: String!\n}\n\ninput UpdateUserAgeInput {\n  id: ID!\n  age: Int!\n}\n\ninput UpdateUserScoresInput {\n  scores: [Int]!\n}\n\ntype Query {\n  getMe: Me\n  getUserByUsername(username: String!, name: String!): User\n  getFamilyInfo: FamilyInfo\n  getFamilyInfoByIsLocal(isLocal: Boolean!): FamilyInfo\n  getMeByAge(age: Int!): Me\n  getMeByTestResult(result: Float!): Me\n  getMeByResults(results: [Int]!): Me\n}\n\ntype Mutation {\n  createUser(input: UserInput!): User\n  isAdmin(input: IsAdminInput!): User\n  updatePassword(input: UpdatePasswordInput!): Me\n  updateUserAge(input: UpdateUserAgeInput!): Me\n  updateUserScores(input: UpdateUserScoresInput!): Me\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 11
    },
    {
      "name": "schema.gql",
      "path": "examples/mocha/schema/schema.gql",
      "sha": "593a6d6c2d8eb95c97a8ed262b7707d645ddf4c1",
      "url": "https://api.github.com/repositories/144654952/contents/examples/mocha/schema/schema.gql?ref=9b4137421e3f258207b27822d8e4ac8fef815bd9",
      "git_url": "https://api.github.com/repositories/144654952/git/blobs/593a6d6c2d8eb95c97a8ed262b7707d645ddf4c1",
      "html_url": "https://github.com/EasyGraphQL/easygraphql-tester/blob/9b4137421e3f258207b27822d8e4ac8fef815bd9/examples/mocha/schema/schema.gql",
      "content": "scalar JSON\n\ntype User {\n  email: String!\n  username: String!\n  fullName: String!\n}\n\ntype Me {\n  id: ID!\n  email: String!\n  username: String!\n  fullName: String!\n  addresses: [String]!\n  scores: [Int]!\n  age: Int\n  testResult: Float!\n  phone: [String]!\n  apiKey: String!\n  familyInfo: [FamilyInfo]!\n}\n\ntype FamilyInfo {\n  father: User!\n  mother: User!\n  brothers: [User]!\n  isLocal: Boolean!\n}\n\n# MUTATIONS\ninput UserInput {\n  email: String!\n  username: String!\n  fullName: String!\n  password: String!\n}\n\ninput IsAdminInput {\n  isAdmin: Boolean!\n}\n\ninput UpdatePasswordInput {\n  oldPassword: String!\n  newPassword: String!\n}\n\ninput UpdateUserAgeInput {\n  id: ID!\n  age: Int!\n}\n\ninput UpdateUserScoresInput {\n  scores: [Int]!\n}\n\ntype Query {\n  getMe: Me\n  getUserByUsername(username: String!, name: String!): User\n  getFamilyInfo: FamilyInfo\n  getFamilyInfoByIsLocal(isLocal: Boolean!): FamilyInfo\n  getMeByAge(age: Int!): Me\n  getMeByTestResult(result: Float!): Me\n  getMeByResults(results: [Int]!): Me\n}\n\ntype Mutation {\n  createUser(input: UserInput!): User\n  isAdmin(input: IsAdminInput!): User\n  updatePassword(input: UpdatePasswordInput!): Me\n  updateUserAge(input: UpdateUserAgeInput!): Me\n  updateUserScores(input: UpdateUserScoresInput!): Me\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 11
    },
    {
      "name": "schema.gql",
      "path": "examples/jasmine/schema/schema.gql",
      "sha": "593a6d6c2d8eb95c97a8ed262b7707d645ddf4c1",
      "url": "https://api.github.com/repositories/144654952/contents/examples/jasmine/schema/schema.gql?ref=33fb93144b4175d248c3ab2abb9d6e01d607c862",
      "git_url": "https://api.github.com/repositories/144654952/git/blobs/593a6d6c2d8eb95c97a8ed262b7707d645ddf4c1",
      "html_url": "https://github.com/EasyGraphQL/easygraphql-tester/blob/33fb93144b4175d248c3ab2abb9d6e01d607c862/examples/jasmine/schema/schema.gql",
      "content": "scalar JSON\n\ntype User {\n  email: String!\n  username: String!\n  fullName: String!\n}\n\ntype Me {\n  id: ID!\n  email: String!\n  username: String!\n  fullName: String!\n  addresses: [String]!\n  scores: [Int]!\n  age: Int\n  testResult: Float!\n  phone: [String]!\n  apiKey: String!\n  familyInfo: [FamilyInfo]!\n}\n\ntype FamilyInfo {\n  father: User!\n  mother: User!\n  brothers: [User]!\n  isLocal: Boolean!\n}\n\n# MUTATIONS\ninput UserInput {\n  email: String!\n  username: String!\n  fullName: String!\n  password: String!\n}\n\ninput IsAdminInput {\n  isAdmin: Boolean!\n}\n\ninput UpdatePasswordInput {\n  oldPassword: String!\n  newPassword: String!\n}\n\ninput UpdateUserAgeInput {\n  id: ID!\n  age: Int!\n}\n\ninput UpdateUserScoresInput {\n  scores: [Int]!\n}\n\ntype Query {\n  getMe: Me\n  getUserByUsername(username: String!, name: String!): User\n  getFamilyInfo: FamilyInfo\n  getFamilyInfoByIsLocal(isLocal: Boolean!): FamilyInfo\n  getMeByAge(age: Int!): Me\n  getMeByTestResult(result: Float!): Me\n  getMeByResults(results: [Int]!): Me\n}\n\ntype Mutation {\n  createUser(input: UserInput!): User\n  isAdmin(input: IsAdminInput!): User\n  updatePassword(input: UpdatePasswordInput!): Me\n  updateUserAge(input: UpdateUserAgeInput!): Me\n  updateUserScores(input: UpdateUserScoresInput!): Me\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 11
    },
    {
      "name": "schema.gql",
      "path": "examples/yesno/src/schema.gql",
      "sha": "bfd0fb8250dfcf3dd84fb26812f073a253cd2190",
      "url": "https://api.github.com/repositories/144654952/contents/examples/yesno/src/schema.gql?ref=d752bc97f3eb937670de01f2d9af53e58b22c9f8",
      "git_url": "https://api.github.com/repositories/144654952/git/blobs/bfd0fb8250dfcf3dd84fb26812f073a253cd2190",
      "html_url": "https://github.com/EasyGraphQL/easygraphql-tester/blob/d752bc97f3eb937670de01f2d9af53e58b22c9f8/examples/yesno/src/schema.gql",
      "content": "type Me {\n  email: String!\n  username: String!\n  fullName: String!\n  apiKey: String!\n}\n\ntype User {\n  fullName: String!\n  age: Int!\n}\n\ntype Query {\n  getMe: Me!\n  getUsers: [User]!\n}",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 3,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 3
    },
    {
      "name": "customRootTypeNames.gql",
      "path": "test/schema/customRootTypeNames.gql",
      "sha": "3a7b4f897011fa46e57035fb38e00b489b78610e",
      "url": "https://api.github.com/repositories/144654952/contents/test/schema/customRootTypeNames.gql?ref=110389225ab677e36559b65b2a5606ab8385cac7",
      "git_url": "https://api.github.com/repositories/144654952/git/blobs/3a7b4f897011fa46e57035fb38e00b489b78610e",
      "html_url": "https://github.com/EasyGraphQL/easygraphql-tester/blob/110389225ab677e36559b65b2a5606ab8385cac7/test/schema/customRootTypeNames.gql",
      "content": "schema {\n  query: RootQuery\n  mutation: RootMutation\n  subscription: RootSubscription\n}\n\ntype Post {\n  content: String!\n}\n\ninput PostInput {\n  content: String!\n}\n\ntype RootQuery {\n  posts: [Post!]!\n}\n\ntype RootMutation {\n  appendPost(post: PostInput!): Post!\n}\n\ntype RootSubscription {\n  newPost: Post!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 4,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 6
    }
  ],
  "metrics": {
    "created_at": "2018-08-14T01:54:49Z",
    "updated_at": "2019-07-16T15:26:46Z",
    "pushed_at": "2019-07-18T23:03:57Z",
    "issues": 34,
    "watchers": 6,
    "fork_count": 13,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 83,
    "pull_requests_open": 1,
    "pull_requests_closed": 7,
    "pull_requests_merged": 75,
    "releases": 0,
    "stargazers": 145
  }
}