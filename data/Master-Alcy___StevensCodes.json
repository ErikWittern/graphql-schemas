{
  "repo_name": "StevensCodes",
  "repo_full_name": "master-alcy/stevenscodes",
  "repo_owner": "Master-Alcy",
  "repo_description": "Code for studying in Stevens",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "CS-554-2019S/OurBlog/code/server/graphql/schema.graphql",
      "sha": "9e005c877f0a7f34761c72389def3582aa89324b",
      "url": "https://api.github.com/repositories/151180375/contents/CS-554-2019S/OurBlog/code/server/graphql/schema.graphql?ref=9f81ba06ac373ad98b9e3f67314cca72dc9dc04a",
      "git_url": "https://api.github.com/repositories/151180375/git/blobs/9e005c877f0a7f34761c72389def3582aa89324b",
      "html_url": "https://github.com/Master-Alcy/StevensCodes/blob/9f81ba06ac373ad98b9e3f67314cca72dc9dc04a/CS-554-2019S/OurBlog/code/server/graphql/schema.graphql",
      "content": "scalar DateTime\n\ntype Query {\n  me: User\n  getUser(id: ID, email: String): User\n  allUsers: [User!]!\n  getBlog(id: ID, title: String): Blog\n  allBlogs: [Blog!]!\n  filterBlogsByString(searchString: String): [Blog!]!\n  filterBlogsByLikes(minLikes: Int): [Blog!]!\n  elasticSearch(searchString: String): [ESData]\n  getComment(id: ID!): Comment\n  allComments: [Comment!]!\n  filterCommentsByString(searchString: String): [Comment!]!\n  filterCommentsByLikes(minLikes: Int): [Comment!]!\n  getTag(id: ID, tag: String): Tag\n  allTags: [Tag!]!\n}\n\ntype Mutation {\n  signup(name: String!, password: String!, email: String!): AuthPayload\n  login(password: String!, email: String!): AuthPayload\n  postBlog(title: String!, article: String!): Blog!\n  postComment(content: String!, blogId: ID!): Comment!\n  postTag(tag: String!, blogId: ID!): Tag!\n  updateUser(email: String, name: String, password: String, newEmail: String, phone: String, address: String, interest: String): User\n  updateBlog(id: ID, title: String, newTitle: String, article: String, likes: Int): Blog\n  updateComment(id: ID!, content: String, likes: Int): Comment\n  likeBlog(id: ID, title: String): Blog\n  likeComment(id: ID!): Comment\n  addBlogToTagById(blogId: ID!, tagId: ID!): Tag\n  addBlogToTagByTitle(title: String!, tag: String!): Tag\n  deleteUser(id: ID, email: String): User\n  deleteBlog(id: ID, title: String): Blog\n  deleteComment(id: ID!): Comment\n  deleteTag(id: ID, tag: String): Tag\n}\n\ntype ESData {\n  id: ID\n  title: String\n  text: String\n}\n\ntype AuthPayload {\n  token: String!\n  user: User!\n}\n\ntype User {\n  id: ID!\n  createdAt: DateTime!\n  name: String!\n  password: String!\n  email: String!\n  phone: String\n  address: String\n  interest: String\n  blogs: [Blog!]!\n  comments: [Comment!]!\n}\n\ntype Blog {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  title: String! \n  article: String!\n  likes: Int\n  postedBy: User\n  comments: [Comment!]!\n  relatedTag: Tag\n}\n\ntype Comment {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  content: String!\n  likes: Int\n  postedBy: User\n  forBlog: Blog\n}\n\ntype Tag {\n  id: ID!\n  tag: String!\n  blogs: [Blog!]!\n}",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 9
    }
  ],
  "metrics": {
    "created_at": "2018-10-02T00:39:01Z",
    "updated_at": "2019-05-21T18:58:09Z",
    "pushed_at": "2019-05-21T18:58:07Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 2,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 4,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 4,
    "releases": 0,
    "stargazers": 3
  }
}