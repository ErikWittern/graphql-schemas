{
  "repo_name": "hifumi-bot",
  "repo_full_name": "moedevs/hifumi-bot",
  "repo_owner": "moedevs",
  "repo_description": "üõ†Ô∏è An imageboard bot for Discord",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "src/graphql/schema.graphql",
      "sha": "585467004bc10283277839ad2d5978af76f51f4e",
      "url": "https://api.github.com/repositories/168796445/contents/src/graphql/schema.graphql?ref=c109918234c010b284a64d35f254bb79aa53e340",
      "git_url": "https://api.github.com/repositories/168796445/git/blobs/585467004bc10283277839ad2d5978af76f51f4e",
      "html_url": "https://github.com/moedevs/hifumi-bot/blob/c109918234c010b284a64d35f254bb79aa53e340/src/graphql/schema.graphql",
      "content": "schema {\n  query: query_root\n  mutation: mutation_root\n  subscription: subscription_root\n}\n\n\"\"\"\ncolumns and relationships of \"auto_tags\"\n\"\"\"\ntype auto_tags {\n  channel_id: String!\n  id: Int!\n\n  \"\"\"\n  An object relationship\n  \"\"\"\n  image_channel: image_channels!\n  name: String!\n}\n\n\"\"\"\naggregated selection of \"auto_tags\"\n\"\"\"\ntype auto_tags_aggregate {\n  aggregate: auto_tags_aggregate_fields\n  nodes: [auto_tags!]!\n}\n\n\"\"\"\naggregate fields of \"auto_tags\"\n\"\"\"\ntype auto_tags_aggregate_fields {\n  avg: auto_tags_avg_fields\n  count(columns: [auto_tags_select_column!], distinct: Boolean): Int\n  max: auto_tags_max_fields\n  min: auto_tags_min_fields\n  stddev: auto_tags_stddev_fields\n  stddev_pop: auto_tags_stddev_pop_fields\n  stddev_samp: auto_tags_stddev_samp_fields\n  sum: auto_tags_sum_fields\n  var_pop: auto_tags_var_pop_fields\n  var_samp: auto_tags_var_samp_fields\n  variance: auto_tags_variance_fields\n}\n\n\"\"\"\norder by aggregate values of table \"auto_tags\"\n\"\"\"\ninput auto_tags_aggregate_order_by {\n  avg: auto_tags_avg_order_by\n  count: order_by\n  max: auto_tags_max_order_by\n  min: auto_tags_min_order_by\n  stddev: auto_tags_stddev_order_by\n  stddev_pop: auto_tags_stddev_pop_order_by\n  stddev_samp: auto_tags_stddev_samp_order_by\n  sum: auto_tags_sum_order_by\n  var_pop: auto_tags_var_pop_order_by\n  var_samp: auto_tags_var_samp_order_by\n  variance: auto_tags_variance_order_by\n}\n\n\"\"\"\ninput type for inserting array relation for remote table \"auto_tags\"\n\"\"\"\ninput auto_tags_arr_rel_insert_input {\n  data: [auto_tags_insert_input!]!\n  on_conflict: auto_tags_on_conflict\n}\n\n\"\"\"\naggregate avg on columns\n\"\"\"\ntype auto_tags_avg_fields {\n  id: Float\n}\n\n\"\"\"\norder by avg() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_avg_order_by {\n  id: order_by\n}\n\n\"\"\"\nBoolean expression to filter rows from the table \"auto_tags\". All fields are combined with a logical 'AND'.\n\"\"\"\ninput auto_tags_bool_exp {\n  _and: [auto_tags_bool_exp]\n  _not: auto_tags_bool_exp\n  _or: [auto_tags_bool_exp]\n  channel_id: text_comparison_exp\n  id: integer_comparison_exp\n  image_channel: image_channels_bool_exp\n  name: text_comparison_exp\n}\n\n\"\"\"\nunique or primary key constraints on table \"auto_tags\"\n\"\"\"\nenum auto_tags_constraint {\n  \"\"\"\n  unique or primary key constraint\n  \"\"\"\n  auto_tags_pkey\n}\n\n\"\"\"\ninput type for incrementing integer columne in table \"auto_tags\"\n\"\"\"\ninput auto_tags_inc_input {\n  id: Int\n}\n\n\"\"\"\ninput type for inserting data into table \"auto_tags\"\n\"\"\"\ninput auto_tags_insert_input {\n  channel_id: String\n  id: Int\n  image_channel: image_channels_obj_rel_insert_input\n  name: String\n}\n\n\"\"\"\naggregate max on columns\n\"\"\"\ntype auto_tags_max_fields {\n  channel_id: String\n  id: Int\n  name: String\n}\n\n\"\"\"\norder by max() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_max_order_by {\n  channel_id: order_by\n  id: order_by\n  name: order_by\n}\n\n\"\"\"\naggregate min on columns\n\"\"\"\ntype auto_tags_min_fields {\n  channel_id: String\n  id: Int\n  name: String\n}\n\n\"\"\"\norder by min() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_min_order_by {\n  channel_id: order_by\n  id: order_by\n  name: order_by\n}\n\n\"\"\"\nresponse of any mutation on the table \"auto_tags\"\n\"\"\"\ntype auto_tags_mutation_response {\n  \"\"\"\n  number of affected rows by the mutation\n  \"\"\"\n  affected_rows: Int!\n\n  \"\"\"\n  data of the affected rows by the mutation\n  \"\"\"\n  returning: [auto_tags!]!\n}\n\n\"\"\"\ninput type for inserting object relation for remote table \"auto_tags\"\n\"\"\"\ninput auto_tags_obj_rel_insert_input {\n  data: auto_tags_insert_input!\n  on_conflict: auto_tags_on_conflict\n}\n\n\"\"\"\non conflict condition type for table \"auto_tags\"\n\"\"\"\ninput auto_tags_on_conflict {\n  constraint: auto_tags_constraint!\n  update_columns: [auto_tags_update_column!]!\n}\n\n\"\"\"\nordering options when selecting data from \"auto_tags\"\n\"\"\"\ninput auto_tags_order_by {\n  channel_id: order_by\n  id: order_by\n  image_channel: image_channels_order_by\n  name: order_by\n}\n\n\"\"\"\nselect columns of table \"auto_tags\"\n\"\"\"\nenum auto_tags_select_column {\n  \"\"\"\n  column name\n  \"\"\"\n  channel_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  id\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n}\n\n\"\"\"\ninput type for updating data in table \"auto_tags\"\n\"\"\"\ninput auto_tags_set_input {\n  channel_id: String\n  id: Int\n  name: String\n}\n\n\"\"\"\naggregate stddev on columns\n\"\"\"\ntype auto_tags_stddev_fields {\n  id: Float\n}\n\n\"\"\"\norder by stddev() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_stddev_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate stddev_pop on columns\n\"\"\"\ntype auto_tags_stddev_pop_fields {\n  id: Float\n}\n\n\"\"\"\norder by stddev_pop() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_stddev_pop_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate stddev_samp on columns\n\"\"\"\ntype auto_tags_stddev_samp_fields {\n  id: Float\n}\n\n\"\"\"\norder by stddev_samp() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_stddev_samp_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate sum on columns\n\"\"\"\ntype auto_tags_sum_fields {\n  id: Int\n}\n\n\"\"\"\norder by sum() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_sum_order_by {\n  id: order_by\n}\n\n\"\"\"\nupdate columns of table \"auto_tags\"\n\"\"\"\nenum auto_tags_update_column {\n  \"\"\"\n  column name\n  \"\"\"\n  channel_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  id\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n}\n\n\"\"\"\naggregate var_pop on columns\n\"\"\"\ntype auto_tags_var_pop_fields {\n  id: Float\n}\n\n\"\"\"\norder by var_pop() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_var_pop_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate var_samp on columns\n\"\"\"\ntype auto_tags_var_samp_fields {\n  id: Float\n}\n\n\"\"\"\norder by var_samp() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_var_samp_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate variance on columns\n\"\"\"\ntype auto_tags_variance_fields {\n  id: Float\n}\n\n\"\"\"\norder by variance() on columns of table \"auto_tags\"\n\"\"\"\ninput auto_tags_variance_order_by {\n  id: order_by\n}\n\nscalar bigint\n\n\"\"\"\nexpression to compare columns of type bigint. All fields are combined with logical 'AND'.\n\"\"\"\ninput bigint_comparison_exp {\n  _eq: bigint\n  _gt: bigint\n  _gte: bigint\n  _in: [bigint]\n  _is_null: Boolean\n  _lt: bigint\n  _lte: bigint\n  _neq: bigint\n  _nin: [bigint]\n}\n\n\"\"\"\nexpression to compare columns of type boolean. All fields are combined with logical 'AND'.\n\"\"\"\ninput boolean_comparison_exp {\n  _eq: Boolean\n  _gt: Boolean\n  _gte: Boolean\n  _in: [Boolean]\n  _is_null: Boolean\n  _lt: Boolean\n  _lte: Boolean\n  _neq: Boolean\n  _nin: [Boolean]\n}\n\n\"\"\"\nconflict action\n\"\"\"\nenum conflict_action {\n  \"\"\"\n  ignore the insert on this row\n  \"\"\"\n  ignore\n\n  \"\"\"\n  update the row with the given values\n  \"\"\"\n  update\n}\n\n\"\"\"\ncolumns and relationships of \"guilds\"\n\"\"\"\ntype guilds {\n  enabled: Boolean\n  guild_id: String!\n\n  \"\"\"\n  An array relationship\n  \"\"\"\n  image_channels(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_channels_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_channels_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_channels_bool_exp\n  ): [image_channels!]!\n\n  \"\"\"\n  An aggregated array relationship\n  \"\"\"\n  image_channels_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_channels_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_channels_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_channels_bool_exp\n  ): image_channels_aggregate!\n\n  \"\"\"\n  An array relationship\n  \"\"\"\n  images(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [images_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [images_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: images_bool_exp\n  ): [images!]!\n\n  \"\"\"\n  An aggregated array relationship\n  \"\"\"\n  images_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [images_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [images_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: images_bool_exp\n  ): images_aggregate!\n  name: String!\n  welcome_channel: String\n}\n\n\"\"\"\naggregated selection of \"guilds\"\n\"\"\"\ntype guilds_aggregate {\n  aggregate: guilds_aggregate_fields\n  nodes: [guilds!]!\n}\n\n\"\"\"\naggregate fields of \"guilds\"\n\"\"\"\ntype guilds_aggregate_fields {\n  count(columns: [guilds_select_column!], distinct: Boolean): Int\n  max: guilds_max_fields\n  min: guilds_min_fields\n}\n\n\"\"\"\norder by aggregate values of table \"guilds\"\n\"\"\"\ninput guilds_aggregate_order_by {\n  count: order_by\n  max: guilds_max_order_by\n  min: guilds_min_order_by\n}\n\n\"\"\"\ninput type for inserting array relation for remote table \"guilds\"\n\"\"\"\ninput guilds_arr_rel_insert_input {\n  data: [guilds_insert_input!]!\n  on_conflict: guilds_on_conflict\n}\n\n\"\"\"\nBoolean expression to filter rows from the table \"guilds\". All fields are combined with a logical 'AND'.\n\"\"\"\ninput guilds_bool_exp {\n  _and: [guilds_bool_exp]\n  _not: guilds_bool_exp\n  _or: [guilds_bool_exp]\n  enabled: boolean_comparison_exp\n  guild_id: text_comparison_exp\n  image_channels: image_channels_bool_exp\n  images: images_bool_exp\n  name: text_comparison_exp\n  welcome_channel: text_comparison_exp\n}\n\n\"\"\"\nunique or primary key constraints on table \"guilds\"\n\"\"\"\nenum guilds_constraint {\n  \"\"\"\n  unique or primary key constraint\n  \"\"\"\n  guilds_pkey\n}\n\n\"\"\"\ninput type for inserting data into table \"guilds\"\n\"\"\"\ninput guilds_insert_input {\n  enabled: Boolean\n  guild_id: String\n  image_channels: image_channels_arr_rel_insert_input\n  images: images_arr_rel_insert_input\n  name: String\n  welcome_channel: String\n}\n\n\"\"\"\naggregate max on columns\n\"\"\"\ntype guilds_max_fields {\n  guild_id: String\n  name: String\n  welcome_channel: String\n}\n\n\"\"\"\norder by max() on columns of table \"guilds\"\n\"\"\"\ninput guilds_max_order_by {\n  guild_id: order_by\n  name: order_by\n  welcome_channel: order_by\n}\n\n\"\"\"\naggregate min on columns\n\"\"\"\ntype guilds_min_fields {\n  guild_id: String\n  name: String\n  welcome_channel: String\n}\n\n\"\"\"\norder by min() on columns of table \"guilds\"\n\"\"\"\ninput guilds_min_order_by {\n  guild_id: order_by\n  name: order_by\n  welcome_channel: order_by\n}\n\n\"\"\"\nresponse of any mutation on the table \"guilds\"\n\"\"\"\ntype guilds_mutation_response {\n  \"\"\"\n  number of affected rows by the mutation\n  \"\"\"\n  affected_rows: Int!\n\n  \"\"\"\n  data of the affected rows by the mutation\n  \"\"\"\n  returning: [guilds!]!\n}\n\n\"\"\"\ninput type for inserting object relation for remote table \"guilds\"\n\"\"\"\ninput guilds_obj_rel_insert_input {\n  data: guilds_insert_input!\n  on_conflict: guilds_on_conflict\n}\n\n\"\"\"\non conflict condition type for table \"guilds\"\n\"\"\"\ninput guilds_on_conflict {\n  constraint: guilds_constraint!\n  update_columns: [guilds_update_column!]!\n}\n\n\"\"\"\nordering options when selecting data from \"guilds\"\n\"\"\"\ninput guilds_order_by {\n  enabled: order_by\n  guild_id: order_by\n  image_channels_aggregate: image_channels_aggregate_order_by\n  images_aggregate: images_aggregate_order_by\n  name: order_by\n  welcome_channel: order_by\n}\n\n\"\"\"\nselect columns of table \"guilds\"\n\"\"\"\nenum guilds_select_column {\n  \"\"\"\n  column name\n  \"\"\"\n  enabled\n\n  \"\"\"\n  column name\n  \"\"\"\n  guild_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n\n  \"\"\"\n  column name\n  \"\"\"\n  welcome_channel\n}\n\n\"\"\"\ninput type for updating data in table \"guilds\"\n\"\"\"\ninput guilds_set_input {\n  enabled: Boolean\n  guild_id: String\n  name: String\n  welcome_channel: String\n}\n\n\"\"\"\nupdate columns of table \"guilds\"\n\"\"\"\nenum guilds_update_column {\n  \"\"\"\n  column name\n  \"\"\"\n  enabled\n\n  \"\"\"\n  column name\n  \"\"\"\n  guild_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n\n  \"\"\"\n  column name\n  \"\"\"\n  welcome_channel\n}\n\n\"\"\"\ncolumns and relationships of \"image_channels\"\n\"\"\"\ntype image_channels {\n  assigner_id: String!\n\n  \"\"\"\n  An array relationship\n  \"\"\"\n  auto_tags(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [auto_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [auto_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: auto_tags_bool_exp\n  ): [auto_tags!]!\n\n  \"\"\"\n  An aggregated array relationship\n  \"\"\"\n  auto_tags_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [auto_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [auto_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: auto_tags_bool_exp\n  ): auto_tags_aggregate!\n  channel_id: String!\n\n  \"\"\"\n  An object relationship\n  \"\"\"\n  guild: guilds!\n  guild_id: String!\n\n  \"\"\"\n  An object relationship\n  \"\"\"\n  user: users!\n}\n\n\"\"\"\naggregated selection of \"image_channels\"\n\"\"\"\ntype image_channels_aggregate {\n  aggregate: image_channels_aggregate_fields\n  nodes: [image_channels!]!\n}\n\n\"\"\"\naggregate fields of \"image_channels\"\n\"\"\"\ntype image_channels_aggregate_fields {\n  count(columns: [image_channels_select_column!], distinct: Boolean): Int\n  max: image_channels_max_fields\n  min: image_channels_min_fields\n}\n\n\"\"\"\norder by aggregate values of table \"image_channels\"\n\"\"\"\ninput image_channels_aggregate_order_by {\n  count: order_by\n  max: image_channels_max_order_by\n  min: image_channels_min_order_by\n}\n\n\"\"\"\ninput type for inserting array relation for remote table \"image_channels\"\n\"\"\"\ninput image_channels_arr_rel_insert_input {\n  data: [image_channels_insert_input!]!\n  on_conflict: image_channels_on_conflict\n}\n\n\"\"\"\nBoolean expression to filter rows from the table \"image_channels\". All fields are combined with a logical 'AND'.\n\"\"\"\ninput image_channels_bool_exp {\n  _and: [image_channels_bool_exp]\n  _not: image_channels_bool_exp\n  _or: [image_channels_bool_exp]\n  assigner_id: text_comparison_exp\n  auto_tags: auto_tags_bool_exp\n  channel_id: text_comparison_exp\n  guild: guilds_bool_exp\n  guild_id: text_comparison_exp\n  user: users_bool_exp\n}\n\n\"\"\"\nunique or primary key constraints on table \"image_channels\"\n\"\"\"\nenum image_channels_constraint {\n  \"\"\"\n  unique or primary key constraint\n  \"\"\"\n  image_channels_pkey\n}\n\n\"\"\"\ninput type for inserting data into table \"image_channels\"\n\"\"\"\ninput image_channels_insert_input {\n  assigner_id: String\n  auto_tags: auto_tags_arr_rel_insert_input\n  channel_id: String\n  guild: guilds_obj_rel_insert_input\n  guild_id: String\n  user: users_obj_rel_insert_input\n}\n\n\"\"\"\naggregate max on columns\n\"\"\"\ntype image_channels_max_fields {\n  assigner_id: String\n  channel_id: String\n  guild_id: String\n}\n\n\"\"\"\norder by max() on columns of table \"image_channels\"\n\"\"\"\ninput image_channels_max_order_by {\n  assigner_id: order_by\n  channel_id: order_by\n  guild_id: order_by\n}\n\n\"\"\"\naggregate min on columns\n\"\"\"\ntype image_channels_min_fields {\n  assigner_id: String\n  channel_id: String\n  guild_id: String\n}\n\n\"\"\"\norder by min() on columns of table \"image_channels\"\n\"\"\"\ninput image_channels_min_order_by {\n  assigner_id: order_by\n  channel_id: order_by\n  guild_id: order_by\n}\n\n\"\"\"\nresponse of any mutation on the table \"image_channels\"\n\"\"\"\ntype image_channels_mutation_response {\n  \"\"\"\n  number of affected rows by the mutation\n  \"\"\"\n  affected_rows: Int!\n\n  \"\"\"\n  data of the affected rows by the mutation\n  \"\"\"\n  returning: [image_channels!]!\n}\n\n\"\"\"\ninput type for inserting object relation for remote table \"image_channels\"\n\"\"\"\ninput image_channels_obj_rel_insert_input {\n  data: image_channels_insert_input!\n  on_conflict: image_channels_on_conflict\n}\n\n\"\"\"\non conflict condition type for table \"image_channels\"\n\"\"\"\ninput image_channels_on_conflict {\n  constraint: image_channels_constraint!\n  update_columns: [image_channels_update_column!]!\n}\n\n\"\"\"\nordering options when selecting data from \"image_channels\"\n\"\"\"\ninput image_channels_order_by {\n  assigner_id: order_by\n  auto_tags_aggregate: auto_tags_aggregate_order_by\n  channel_id: order_by\n  guild: guilds_order_by\n  guild_id: order_by\n  user: users_order_by\n}\n\n\"\"\"\nselect columns of table \"image_channels\"\n\"\"\"\nenum image_channels_select_column {\n  \"\"\"\n  column name\n  \"\"\"\n  assigner_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  channel_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  guild_id\n}\n\n\"\"\"\ninput type for updating data in table \"image_channels\"\n\"\"\"\ninput image_channels_set_input {\n  assigner_id: String\n  channel_id: String\n  guild_id: String\n}\n\n\"\"\"\nupdate columns of table \"image_channels\"\n\"\"\"\nenum image_channels_update_column {\n  \"\"\"\n  column name\n  \"\"\"\n  assigner_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  channel_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  guild_id\n}\n\n\"\"\"\ncolumns and relationships of \"image_tags\"\n\"\"\"\ntype image_tags {\n  id: Int!\n\n  \"\"\"\n  An object relationship\n  \"\"\"\n  image: images!\n  image_id: Int!\n  name: String!\n  tagger_id: String!\n\n  \"\"\"\n  An object relationship\n  \"\"\"\n  user: users!\n}\n\n\"\"\"\naggregated selection of \"image_tags\"\n\"\"\"\ntype image_tags_aggregate {\n  aggregate: image_tags_aggregate_fields\n  nodes: [image_tags!]!\n}\n\n\"\"\"\naggregate fields of \"image_tags\"\n\"\"\"\ntype image_tags_aggregate_fields {\n  avg: image_tags_avg_fields\n  count(columns: [image_tags_select_column!], distinct: Boolean): Int\n  max: image_tags_max_fields\n  min: image_tags_min_fields\n  stddev: image_tags_stddev_fields\n  stddev_pop: image_tags_stddev_pop_fields\n  stddev_samp: image_tags_stddev_samp_fields\n  sum: image_tags_sum_fields\n  var_pop: image_tags_var_pop_fields\n  var_samp: image_tags_var_samp_fields\n  variance: image_tags_variance_fields\n}\n\n\"\"\"\norder by aggregate values of table \"image_tags\"\n\"\"\"\ninput image_tags_aggregate_order_by {\n  avg: image_tags_avg_order_by\n  count: order_by\n  max: image_tags_max_order_by\n  min: image_tags_min_order_by\n  stddev: image_tags_stddev_order_by\n  stddev_pop: image_tags_stddev_pop_order_by\n  stddev_samp: image_tags_stddev_samp_order_by\n  sum: image_tags_sum_order_by\n  var_pop: image_tags_var_pop_order_by\n  var_samp: image_tags_var_samp_order_by\n  variance: image_tags_variance_order_by\n}\n\n\"\"\"\ninput type for inserting array relation for remote table \"image_tags\"\n\"\"\"\ninput image_tags_arr_rel_insert_input {\n  data: [image_tags_insert_input!]!\n  on_conflict: image_tags_on_conflict\n}\n\n\"\"\"\naggregate avg on columns\n\"\"\"\ntype image_tags_avg_fields {\n  id: Float\n  image_id: Float\n}\n\n\"\"\"\norder by avg() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_avg_order_by {\n  id: order_by\n  image_id: order_by\n}\n\n\"\"\"\nBoolean expression to filter rows from the table \"image_tags\". All fields are combined with a logical 'AND'.\n\"\"\"\ninput image_tags_bool_exp {\n  _and: [image_tags_bool_exp]\n  _not: image_tags_bool_exp\n  _or: [image_tags_bool_exp]\n  id: integer_comparison_exp\n  image: images_bool_exp\n  image_id: integer_comparison_exp\n  name: text_comparison_exp\n  tagger_id: text_comparison_exp\n  user: users_bool_exp\n}\n\n\"\"\"\nunique or primary key constraints on table \"image_tags\"\n\"\"\"\nenum image_tags_constraint {\n  \"\"\"\n  unique or primary key constraint\n  \"\"\"\n  image_tags_pkey\n}\n\n\"\"\"\ninput type for incrementing integer columne in table \"image_tags\"\n\"\"\"\ninput image_tags_inc_input {\n  id: Int\n  image_id: Int\n}\n\n\"\"\"\ninput type for inserting data into table \"image_tags\"\n\"\"\"\ninput image_tags_insert_input {\n  id: Int\n  image: images_obj_rel_insert_input\n  image_id: Int\n  name: String\n  tagger_id: String\n  user: users_obj_rel_insert_input\n}\n\n\"\"\"\naggregate max on columns\n\"\"\"\ntype image_tags_max_fields {\n  id: Int\n  image_id: Int\n  name: String\n  tagger_id: String\n}\n\n\"\"\"\norder by max() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_max_order_by {\n  id: order_by\n  image_id: order_by\n  name: order_by\n  tagger_id: order_by\n}\n\n\"\"\"\naggregate min on columns\n\"\"\"\ntype image_tags_min_fields {\n  id: Int\n  image_id: Int\n  name: String\n  tagger_id: String\n}\n\n\"\"\"\norder by min() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_min_order_by {\n  id: order_by\n  image_id: order_by\n  name: order_by\n  tagger_id: order_by\n}\n\n\"\"\"\nresponse of any mutation on the table \"image_tags\"\n\"\"\"\ntype image_tags_mutation_response {\n  \"\"\"\n  number of affected rows by the mutation\n  \"\"\"\n  affected_rows: Int!\n\n  \"\"\"\n  data of the affected rows by the mutation\n  \"\"\"\n  returning: [image_tags!]!\n}\n\n\"\"\"\ninput type for inserting object relation for remote table \"image_tags\"\n\"\"\"\ninput image_tags_obj_rel_insert_input {\n  data: image_tags_insert_input!\n  on_conflict: image_tags_on_conflict\n}\n\n\"\"\"\non conflict condition type for table \"image_tags\"\n\"\"\"\ninput image_tags_on_conflict {\n  constraint: image_tags_constraint!\n  update_columns: [image_tags_update_column!]!\n}\n\n\"\"\"\nordering options when selecting data from \"image_tags\"\n\"\"\"\ninput image_tags_order_by {\n  id: order_by\n  image: images_order_by\n  image_id: order_by\n  name: order_by\n  tagger_id: order_by\n  user: users_order_by\n}\n\n\"\"\"\nselect columns of table \"image_tags\"\n\"\"\"\nenum image_tags_select_column {\n  \"\"\"\n  column name\n  \"\"\"\n  id\n\n  \"\"\"\n  column name\n  \"\"\"\n  image_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n\n  \"\"\"\n  column name\n  \"\"\"\n  tagger_id\n}\n\n\"\"\"\ninput type for updating data in table \"image_tags\"\n\"\"\"\ninput image_tags_set_input {\n  id: Int\n  image_id: Int\n  name: String\n  tagger_id: String\n}\n\n\"\"\"\naggregate stddev on columns\n\"\"\"\ntype image_tags_stddev_fields {\n  id: Float\n  image_id: Float\n}\n\n\"\"\"\norder by stddev() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_stddev_order_by {\n  id: order_by\n  image_id: order_by\n}\n\n\"\"\"\naggregate stddev_pop on columns\n\"\"\"\ntype image_tags_stddev_pop_fields {\n  id: Float\n  image_id: Float\n}\n\n\"\"\"\norder by stddev_pop() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_stddev_pop_order_by {\n  id: order_by\n  image_id: order_by\n}\n\n\"\"\"\naggregate stddev_samp on columns\n\"\"\"\ntype image_tags_stddev_samp_fields {\n  id: Float\n  image_id: Float\n}\n\n\"\"\"\norder by stddev_samp() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_stddev_samp_order_by {\n  id: order_by\n  image_id: order_by\n}\n\n\"\"\"\naggregate sum on columns\n\"\"\"\ntype image_tags_sum_fields {\n  id: Int\n  image_id: Int\n}\n\n\"\"\"\norder by sum() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_sum_order_by {\n  id: order_by\n  image_id: order_by\n}\n\n\"\"\"\nupdate columns of table \"image_tags\"\n\"\"\"\nenum image_tags_update_column {\n  \"\"\"\n  column name\n  \"\"\"\n  id\n\n  \"\"\"\n  column name\n  \"\"\"\n  image_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n\n  \"\"\"\n  column name\n  \"\"\"\n  tagger_id\n}\n\n\"\"\"\naggregate var_pop on columns\n\"\"\"\ntype image_tags_var_pop_fields {\n  id: Float\n  image_id: Float\n}\n\n\"\"\"\norder by var_pop() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_var_pop_order_by {\n  id: order_by\n  image_id: order_by\n}\n\n\"\"\"\naggregate var_samp on columns\n\"\"\"\ntype image_tags_var_samp_fields {\n  id: Float\n  image_id: Float\n}\n\n\"\"\"\norder by var_samp() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_var_samp_order_by {\n  id: order_by\n  image_id: order_by\n}\n\n\"\"\"\naggregate variance on columns\n\"\"\"\ntype image_tags_variance_fields {\n  id: Float\n  image_id: Float\n}\n\n\"\"\"\norder by variance() on columns of table \"image_tags\"\n\"\"\"\ninput image_tags_variance_order_by {\n  id: order_by\n  image_id: order_by\n}\n\n\"\"\"\ncolumns and relationships of \"images\"\n\"\"\"\ntype images {\n  created_at: timestamptz!\n  file_name: String\n\n  \"\"\"\n  An object relationship\n  \"\"\"\n  guild: guilds\n  guild_id: String\n  id: Int!\n\n  \"\"\"\n  An array relationship\n  \"\"\"\n  image_tags(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_tags_bool_exp\n  ): [image_tags!]!\n\n  \"\"\"\n  An aggregated array relationship\n  \"\"\"\n  image_tags_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_tags_bool_exp\n  ): image_tags_aggregate!\n  message_id: String\n  url: String!\n\n  \"\"\"\n  An object relationship\n  \"\"\"\n  user: users\n  user_id: String\n}\n\n\"\"\"\naggregated selection of \"images\"\n\"\"\"\ntype images_aggregate {\n  aggregate: images_aggregate_fields\n  nodes: [images!]!\n}\n\n\"\"\"\naggregate fields of \"images\"\n\"\"\"\ntype images_aggregate_fields {\n  avg: images_avg_fields\n  count(columns: [images_select_column!], distinct: Boolean): Int\n  max: images_max_fields\n  min: images_min_fields\n  stddev: images_stddev_fields\n  stddev_pop: images_stddev_pop_fields\n  stddev_samp: images_stddev_samp_fields\n  sum: images_sum_fields\n  var_pop: images_var_pop_fields\n  var_samp: images_var_samp_fields\n  variance: images_variance_fields\n}\n\n\"\"\"\norder by aggregate values of table \"images\"\n\"\"\"\ninput images_aggregate_order_by {\n  avg: images_avg_order_by\n  count: order_by\n  max: images_max_order_by\n  min: images_min_order_by\n  stddev: images_stddev_order_by\n  stddev_pop: images_stddev_pop_order_by\n  stddev_samp: images_stddev_samp_order_by\n  sum: images_sum_order_by\n  var_pop: images_var_pop_order_by\n  var_samp: images_var_samp_order_by\n  variance: images_variance_order_by\n}\n\n\"\"\"\ninput type for inserting array relation for remote table \"images\"\n\"\"\"\ninput images_arr_rel_insert_input {\n  data: [images_insert_input!]!\n  on_conflict: images_on_conflict\n}\n\n\"\"\"\naggregate avg on columns\n\"\"\"\ntype images_avg_fields {\n  id: Float\n}\n\n\"\"\"\norder by avg() on columns of table \"images\"\n\"\"\"\ninput images_avg_order_by {\n  id: order_by\n}\n\n\"\"\"\nBoolean expression to filter rows from the table \"images\". All fields are combined with a logical 'AND'.\n\"\"\"\ninput images_bool_exp {\n  _and: [images_bool_exp]\n  _not: images_bool_exp\n  _or: [images_bool_exp]\n  created_at: timestamptz_comparison_exp\n  file_name: text_comparison_exp\n  guild: guilds_bool_exp\n  guild_id: text_comparison_exp\n  id: integer_comparison_exp\n  image_tags: image_tags_bool_exp\n  message_id: text_comparison_exp\n  url: text_comparison_exp\n  user: users_bool_exp\n  user_id: text_comparison_exp\n}\n\n\"\"\"\nunique or primary key constraints on table \"images\"\n\"\"\"\nenum images_constraint {\n  \"\"\"\n  unique or primary key constraint\n  \"\"\"\n  images_pkey\n}\n\n\"\"\"\ninput type for incrementing integer columne in table \"images\"\n\"\"\"\ninput images_inc_input {\n  id: Int\n}\n\n\"\"\"\ninput type for inserting data into table \"images\"\n\"\"\"\ninput images_insert_input {\n  created_at: timestamptz\n  file_name: String\n  guild: guilds_obj_rel_insert_input\n  guild_id: String\n  id: Int\n  image_tags: image_tags_arr_rel_insert_input\n  message_id: String\n  url: String\n  user: users_obj_rel_insert_input\n  user_id: String\n}\n\n\"\"\"\naggregate max on columns\n\"\"\"\ntype images_max_fields {\n  created_at: timestamptz\n  file_name: String\n  guild_id: String\n  id: Int\n  message_id: String\n  url: String\n  user_id: String\n}\n\n\"\"\"\norder by max() on columns of table \"images\"\n\"\"\"\ninput images_max_order_by {\n  created_at: order_by\n  file_name: order_by\n  guild_id: order_by\n  id: order_by\n  message_id: order_by\n  url: order_by\n  user_id: order_by\n}\n\n\"\"\"\naggregate min on columns\n\"\"\"\ntype images_min_fields {\n  created_at: timestamptz\n  file_name: String\n  guild_id: String\n  id: Int\n  message_id: String\n  url: String\n  user_id: String\n}\n\n\"\"\"\norder by min() on columns of table \"images\"\n\"\"\"\ninput images_min_order_by {\n  created_at: order_by\n  file_name: order_by\n  guild_id: order_by\n  id: order_by\n  message_id: order_by\n  url: order_by\n  user_id: order_by\n}\n\n\"\"\"\nresponse of any mutation on the table \"images\"\n\"\"\"\ntype images_mutation_response {\n  \"\"\"\n  number of affected rows by the mutation\n  \"\"\"\n  affected_rows: Int!\n\n  \"\"\"\n  data of the affected rows by the mutation\n  \"\"\"\n  returning: [images!]!\n}\n\n\"\"\"\ninput type for inserting object relation for remote table \"images\"\n\"\"\"\ninput images_obj_rel_insert_input {\n  data: images_insert_input!\n  on_conflict: images_on_conflict\n}\n\n\"\"\"\non conflict condition type for table \"images\"\n\"\"\"\ninput images_on_conflict {\n  constraint: images_constraint!\n  update_columns: [images_update_column!]!\n}\n\n\"\"\"\nordering options when selecting data from \"images\"\n\"\"\"\ninput images_order_by {\n  created_at: order_by\n  file_name: order_by\n  guild: guilds_order_by\n  guild_id: order_by\n  id: order_by\n  image_tags_aggregate: image_tags_aggregate_order_by\n  message_id: order_by\n  url: order_by\n  user: users_order_by\n  user_id: order_by\n}\n\n\"\"\"\nselect columns of table \"images\"\n\"\"\"\nenum images_select_column {\n  \"\"\"\n  column name\n  \"\"\"\n  created_at\n\n  \"\"\"\n  column name\n  \"\"\"\n  file_name\n\n  \"\"\"\n  column name\n  \"\"\"\n  guild_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  id\n\n  \"\"\"\n  column name\n  \"\"\"\n  message_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  url\n\n  \"\"\"\n  column name\n  \"\"\"\n  user_id\n}\n\n\"\"\"\ninput type for updating data in table \"images\"\n\"\"\"\ninput images_set_input {\n  created_at: timestamptz\n  file_name: String\n  guild_id: String\n  id: Int\n  message_id: String\n  url: String\n  user_id: String\n}\n\n\"\"\"\naggregate stddev on columns\n\"\"\"\ntype images_stddev_fields {\n  id: Float\n}\n\n\"\"\"\norder by stddev() on columns of table \"images\"\n\"\"\"\ninput images_stddev_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate stddev_pop on columns\n\"\"\"\ntype images_stddev_pop_fields {\n  id: Float\n}\n\n\"\"\"\norder by stddev_pop() on columns of table \"images\"\n\"\"\"\ninput images_stddev_pop_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate stddev_samp on columns\n\"\"\"\ntype images_stddev_samp_fields {\n  id: Float\n}\n\n\"\"\"\norder by stddev_samp() on columns of table \"images\"\n\"\"\"\ninput images_stddev_samp_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate sum on columns\n\"\"\"\ntype images_sum_fields {\n  id: Int\n}\n\n\"\"\"\norder by sum() on columns of table \"images\"\n\"\"\"\ninput images_sum_order_by {\n  id: order_by\n}\n\n\"\"\"\nupdate columns of table \"images\"\n\"\"\"\nenum images_update_column {\n  \"\"\"\n  column name\n  \"\"\"\n  created_at\n\n  \"\"\"\n  column name\n  \"\"\"\n  file_name\n\n  \"\"\"\n  column name\n  \"\"\"\n  guild_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  id\n\n  \"\"\"\n  column name\n  \"\"\"\n  message_id\n\n  \"\"\"\n  column name\n  \"\"\"\n  url\n\n  \"\"\"\n  column name\n  \"\"\"\n  user_id\n}\n\n\"\"\"\naggregate var_pop on columns\n\"\"\"\ntype images_var_pop_fields {\n  id: Float\n}\n\n\"\"\"\norder by var_pop() on columns of table \"images\"\n\"\"\"\ninput images_var_pop_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate var_samp on columns\n\"\"\"\ntype images_var_samp_fields {\n  id: Float\n}\n\n\"\"\"\norder by var_samp() on columns of table \"images\"\n\"\"\"\ninput images_var_samp_order_by {\n  id: order_by\n}\n\n\"\"\"\naggregate variance on columns\n\"\"\"\ntype images_variance_fields {\n  id: Float\n}\n\n\"\"\"\norder by variance() on columns of table \"images\"\n\"\"\"\ninput images_variance_order_by {\n  id: order_by\n}\n\n\"\"\"\nexpression to compare columns of type integer. All fields are combined with logical 'AND'.\n\"\"\"\ninput integer_comparison_exp {\n  _eq: Int\n  _gt: Int\n  _gte: Int\n  _in: [Int]\n  _is_null: Boolean\n  _lt: Int\n  _lte: Int\n  _neq: Int\n  _nin: [Int]\n}\n\n\"\"\"\nmutation root\n\"\"\"\ntype mutation_root {\n  \"\"\"\n  delete data from the table: \"auto_tags\"\n  \"\"\"\n  delete_auto_tags(\n    \"\"\"\n    filter the rows which have to be deleted\n    \"\"\"\n    where: auto_tags_bool_exp!\n  ): auto_tags_mutation_response\n\n  \"\"\"\n  delete data from the table: \"guilds\"\n  \"\"\"\n  delete_guilds(\n    \"\"\"\n    filter the rows which have to be deleted\n    \"\"\"\n    where: guilds_bool_exp!\n  ): guilds_mutation_response\n\n  \"\"\"\n  delete data from the table: \"image_channels\"\n  \"\"\"\n  delete_image_channels(\n    \"\"\"\n    filter the rows which have to be deleted\n    \"\"\"\n    where: image_channels_bool_exp!\n  ): image_channels_mutation_response\n\n  \"\"\"\n  delete data from the table: \"image_tags\"\n  \"\"\"\n  delete_image_tags(\n    \"\"\"\n    filter the rows which have to be deleted\n    \"\"\"\n    where: image_tags_bool_exp!\n  ): image_tags_mutation_response\n\n  \"\"\"\n  delete data from the table: \"images\"\n  \"\"\"\n  delete_images(\n    \"\"\"\n    filter the rows which have to be deleted\n    \"\"\"\n    where: images_bool_exp!\n  ): images_mutation_response\n\n  \"\"\"\n  delete data from the table: \"tag_counts\"\n  \"\"\"\n  delete_tag_counts(\n    \"\"\"\n    filter the rows which have to be deleted\n    \"\"\"\n    where: tag_counts_bool_exp!\n  ): tag_counts_mutation_response\n\n  \"\"\"\n  delete data from the table: \"users\"\n  \"\"\"\n  delete_users(\n    \"\"\"\n    filter the rows which have to be deleted\n    \"\"\"\n    where: users_bool_exp!\n  ): users_mutation_response\n\n  \"\"\"\n  insert data into the table: \"auto_tags\"\n  \"\"\"\n  insert_auto_tags(\n    \"\"\"\n    the rows to be inserted\n    \"\"\"\n    objects: [auto_tags_insert_input!]!\n\n    \"\"\"\n    on conflict condition\n    \"\"\"\n    on_conflict: auto_tags_on_conflict\n  ): auto_tags_mutation_response\n\n  \"\"\"\n  insert data into the table: \"guilds\"\n  \"\"\"\n  insert_guilds(\n    \"\"\"\n    the rows to be inserted\n    \"\"\"\n    objects: [guilds_insert_input!]!\n\n    \"\"\"\n    on conflict condition\n    \"\"\"\n    on_conflict: guilds_on_conflict\n  ): guilds_mutation_response\n\n  \"\"\"\n  insert data into the table: \"image_channels\"\n  \"\"\"\n  insert_image_channels(\n    \"\"\"\n    the rows to be inserted\n    \"\"\"\n    objects: [image_channels_insert_input!]!\n\n    \"\"\"\n    on conflict condition\n    \"\"\"\n    on_conflict: image_channels_on_conflict\n  ): image_channels_mutation_response\n\n  \"\"\"\n  insert data into the table: \"image_tags\"\n  \"\"\"\n  insert_image_tags(\n    \"\"\"\n    the rows to be inserted\n    \"\"\"\n    objects: [image_tags_insert_input!]!\n\n    \"\"\"\n    on conflict condition\n    \"\"\"\n    on_conflict: image_tags_on_conflict\n  ): image_tags_mutation_response\n\n  \"\"\"\n  insert data into the table: \"images\"\n  \"\"\"\n  insert_images(\n    \"\"\"\n    the rows to be inserted\n    \"\"\"\n    objects: [images_insert_input!]!\n\n    \"\"\"\n    on conflict condition\n    \"\"\"\n    on_conflict: images_on_conflict\n  ): images_mutation_response\n\n  \"\"\"\n  insert data into the table: \"tag_counts\"\n  \"\"\"\n  insert_tag_counts(\n    \"\"\"\n    the rows to be inserted\n    \"\"\"\n    objects: [tag_counts_insert_input!]!\n\n    \"\"\"\n    on conflict condition\n    \"\"\"\n    on_conflict: tag_counts_on_conflict\n  ): tag_counts_mutation_response\n\n  \"\"\"\n  insert data into the table: \"users\"\n  \"\"\"\n  insert_users(\n    \"\"\"\n    the rows to be inserted\n    \"\"\"\n    objects: [users_insert_input!]!\n\n    \"\"\"\n    on conflict condition\n    \"\"\"\n    on_conflict: users_on_conflict\n  ): users_mutation_response\n\n  \"\"\"\n  update data of the table: \"auto_tags\"\n  \"\"\"\n  update_auto_tags(\n    \"\"\"\n    increments the integer columns with given value of the filtered values\n    \"\"\"\n    _inc: auto_tags_inc_input\n\n    \"\"\"\n    sets the columns of the filtered rows to the given values\n    \"\"\"\n    _set: auto_tags_set_input\n\n    \"\"\"\n    filter the rows which have to be updated\n    \"\"\"\n    where: auto_tags_bool_exp!\n  ): auto_tags_mutation_response\n\n  \"\"\"\n  update data of the table: \"guilds\"\n  \"\"\"\n  update_guilds(\n    \"\"\"\n    sets the columns of the filtered rows to the given values\n    \"\"\"\n    _set: guilds_set_input\n\n    \"\"\"\n    filter the rows which have to be updated\n    \"\"\"\n    where: guilds_bool_exp!\n  ): guilds_mutation_response\n\n  \"\"\"\n  update data of the table: \"image_channels\"\n  \"\"\"\n  update_image_channels(\n    \"\"\"\n    sets the columns of the filtered rows to the given values\n    \"\"\"\n    _set: image_channels_set_input\n\n    \"\"\"\n    filter the rows which have to be updated\n    \"\"\"\n    where: image_channels_bool_exp!\n  ): image_channels_mutation_response\n\n  \"\"\"\n  update data of the table: \"image_tags\"\n  \"\"\"\n  update_image_tags(\n    \"\"\"\n    increments the integer columns with given value of the filtered values\n    \"\"\"\n    _inc: image_tags_inc_input\n\n    \"\"\"\n    sets the columns of the filtered rows to the given values\n    \"\"\"\n    _set: image_tags_set_input\n\n    \"\"\"\n    filter the rows which have to be updated\n    \"\"\"\n    where: image_tags_bool_exp!\n  ): image_tags_mutation_response\n\n  \"\"\"\n  update data of the table: \"images\"\n  \"\"\"\n  update_images(\n    \"\"\"\n    increments the integer columns with given value of the filtered values\n    \"\"\"\n    _inc: images_inc_input\n\n    \"\"\"\n    sets the columns of the filtered rows to the given values\n    \"\"\"\n    _set: images_set_input\n\n    \"\"\"\n    filter the rows which have to be updated\n    \"\"\"\n    where: images_bool_exp!\n  ): images_mutation_response\n\n  \"\"\"\n  update data of the table: \"tag_counts\"\n  \"\"\"\n  update_tag_counts(\n    \"\"\"\n    increments the integer columns with given value of the filtered values\n    \"\"\"\n    _inc: tag_counts_inc_input\n\n    \"\"\"\n    sets the columns of the filtered rows to the given values\n    \"\"\"\n    _set: tag_counts_set_input\n\n    \"\"\"\n    filter the rows which have to be updated\n    \"\"\"\n    where: tag_counts_bool_exp!\n  ): tag_counts_mutation_response\n\n  \"\"\"\n  update data of the table: \"users\"\n  \"\"\"\n  update_users(\n    \"\"\"\n    sets the columns of the filtered rows to the given values\n    \"\"\"\n    _set: users_set_input\n\n    \"\"\"\n    filter the rows which have to be updated\n    \"\"\"\n    where: users_bool_exp!\n  ): users_mutation_response\n}\n\n\"\"\"\ncolumn ordering options\n\"\"\"\nenum order_by {\n  \"\"\"\n  in the ascending order, nulls last\n  \"\"\"\n  asc\n\n  \"\"\"\n  in the ascending order, nulls first\n  \"\"\"\n  asc_nulls_first\n\n  \"\"\"\n  in the ascending order, nulls last\n  \"\"\"\n  asc_nulls_last\n\n  \"\"\"\n  in the descending order, nulls first\n  \"\"\"\n  desc\n\n  \"\"\"\n  in the descending order, nulls first\n  \"\"\"\n  desc_nulls_first\n\n  \"\"\"\n  in the descending order, nulls last\n  \"\"\"\n  desc_nulls_last\n}\n\n\"\"\"\nquery root\n\"\"\"\ntype query_root {\n  \"\"\"\n  fetch data from the table: \"auto_tags\"\n  \"\"\"\n  auto_tags(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [auto_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [auto_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: auto_tags_bool_exp\n  ): [auto_tags!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"auto_tags\"\n  \"\"\"\n  auto_tags_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [auto_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [auto_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: auto_tags_bool_exp\n  ): auto_tags_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"auto_tags\" using primary key columns\n  \"\"\"\n  auto_tags_by_pk(id: Int!): auto_tags\n\n  \"\"\"\n  fetch data from the table: \"guilds\"\n  \"\"\"\n  guilds(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [guilds_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [guilds_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: guilds_bool_exp\n  ): [guilds!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"guilds\"\n  \"\"\"\n  guilds_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [guilds_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [guilds_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: guilds_bool_exp\n  ): guilds_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"guilds\" using primary key columns\n  \"\"\"\n  guilds_by_pk(guild_id: String!): guilds\n\n  \"\"\"\n  fetch data from the table: \"image_channels\"\n  \"\"\"\n  image_channels(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_channels_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_channels_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_channels_bool_exp\n  ): [image_channels!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"image_channels\"\n  \"\"\"\n  image_channels_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_channels_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_channels_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_channels_bool_exp\n  ): image_channels_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"image_channels\" using primary key columns\n  \"\"\"\n  image_channels_by_pk(channel_id: String!): image_channels\n\n  \"\"\"\n  fetch data from the table: \"image_tags\"\n  \"\"\"\n  image_tags(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_tags_bool_exp\n  ): [image_tags!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"image_tags\"\n  \"\"\"\n  image_tags_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_tags_bool_exp\n  ): image_tags_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"image_tags\" using primary key columns\n  \"\"\"\n  image_tags_by_pk(id: Int!): image_tags\n\n  \"\"\"\n  fetch data from the table: \"images\"\n  \"\"\"\n  images(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [images_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [images_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: images_bool_exp\n  ): [images!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"images\"\n  \"\"\"\n  images_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [images_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [images_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: images_bool_exp\n  ): images_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"images\" using primary key columns\n  \"\"\"\n  images_by_pk(id: Int!): images\n\n  \"\"\"\n  execute function \"tag_count\" which returns \"tag_counts\"\n  \"\"\"\n  tag_count(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [tag_counts_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [tag_counts_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: tag_counts_bool_exp\n  ): [tag_counts!]!\n\n  \"\"\"\n  execute function \"tag_count\" and query aggregates on result of table type \"tag_counts\"\n  \"\"\"\n  tag_count_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [tag_counts_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [tag_counts_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: tag_counts_bool_exp\n  ): tag_counts_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"tag_counts\"\n  \"\"\"\n  tag_counts(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [tag_counts_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [tag_counts_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: tag_counts_bool_exp\n  ): [tag_counts!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"tag_counts\"\n  \"\"\"\n  tag_counts_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [tag_counts_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [tag_counts_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: tag_counts_bool_exp\n  ): tag_counts_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"tag_counts\" using primary key columns\n  \"\"\"\n  tag_counts_by_pk(name: String!): tag_counts\n\n  \"\"\"\n  fetch data from the table: \"users\"\n  \"\"\"\n  users(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [users_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [users_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: users_bool_exp\n  ): [users!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"users\"\n  \"\"\"\n  users_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [users_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [users_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: users_bool_exp\n  ): users_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"users\" using primary key columns\n  \"\"\"\n  users_by_pk(user_id: String!): users\n}\n\n\"\"\"\nsubscription root\n\"\"\"\ntype subscription_root {\n  \"\"\"\n  fetch data from the table: \"auto_tags\"\n  \"\"\"\n  auto_tags(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [auto_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [auto_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: auto_tags_bool_exp\n  ): [auto_tags!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"auto_tags\"\n  \"\"\"\n  auto_tags_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [auto_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [auto_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: auto_tags_bool_exp\n  ): auto_tags_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"auto_tags\" using primary key columns\n  \"\"\"\n  auto_tags_by_pk(id: Int!): auto_tags\n\n  \"\"\"\n  fetch data from the table: \"guilds\"\n  \"\"\"\n  guilds(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [guilds_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [guilds_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: guilds_bool_exp\n  ): [guilds!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"guilds\"\n  \"\"\"\n  guilds_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [guilds_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [guilds_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: guilds_bool_exp\n  ): guilds_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"guilds\" using primary key columns\n  \"\"\"\n  guilds_by_pk(guild_id: String!): guilds\n\n  \"\"\"\n  fetch data from the table: \"image_channels\"\n  \"\"\"\n  image_channels(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_channels_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_channels_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_channels_bool_exp\n  ): [image_channels!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"image_channels\"\n  \"\"\"\n  image_channels_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_channels_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_channels_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_channels_bool_exp\n  ): image_channels_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"image_channels\" using primary key columns\n  \"\"\"\n  image_channels_by_pk(channel_id: String!): image_channels\n\n  \"\"\"\n  fetch data from the table: \"image_tags\"\n  \"\"\"\n  image_tags(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_tags_bool_exp\n  ): [image_tags!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"image_tags\"\n  \"\"\"\n  image_tags_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_tags_bool_exp\n  ): image_tags_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"image_tags\" using primary key columns\n  \"\"\"\n  image_tags_by_pk(id: Int!): image_tags\n\n  \"\"\"\n  fetch data from the table: \"images\"\n  \"\"\"\n  images(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [images_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [images_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: images_bool_exp\n  ): [images!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"images\"\n  \"\"\"\n  images_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [images_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [images_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: images_bool_exp\n  ): images_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"images\" using primary key columns\n  \"\"\"\n  images_by_pk(id: Int!): images\n\n  \"\"\"\n  execute function \"tag_count\" which returns \"tag_counts\"\n  \"\"\"\n  tag_count(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [tag_counts_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [tag_counts_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: tag_counts_bool_exp\n  ): [tag_counts!]!\n\n  \"\"\"\n  execute function \"tag_count\" and query aggregates on result of table type \"tag_counts\"\n  \"\"\"\n  tag_count_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [tag_counts_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [tag_counts_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: tag_counts_bool_exp\n  ): tag_counts_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"tag_counts\"\n  \"\"\"\n  tag_counts(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [tag_counts_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [tag_counts_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: tag_counts_bool_exp\n  ): [tag_counts!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"tag_counts\"\n  \"\"\"\n  tag_counts_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [tag_counts_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [tag_counts_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: tag_counts_bool_exp\n  ): tag_counts_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"tag_counts\" using primary key columns\n  \"\"\"\n  tag_counts_by_pk(name: String!): tag_counts\n\n  \"\"\"\n  fetch data from the table: \"users\"\n  \"\"\"\n  users(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [users_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [users_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: users_bool_exp\n  ): [users!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"users\"\n  \"\"\"\n  users_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [users_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [users_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: users_bool_exp\n  ): users_aggregate!\n\n  \"\"\"\n  fetch data from the table: \"users\" using primary key columns\n  \"\"\"\n  users_by_pk(user_id: String!): users\n}\n\n\"\"\"\ncolumns and relationships of \"tag_counts\"\n\"\"\"\ntype tag_counts {\n  count: bigint!\n  name: String!\n}\n\n\"\"\"\naggregated selection of \"tag_counts\"\n\"\"\"\ntype tag_counts_aggregate {\n  aggregate: tag_counts_aggregate_fields\n  nodes: [tag_counts!]!\n}\n\n\"\"\"\naggregate fields of \"tag_counts\"\n\"\"\"\ntype tag_counts_aggregate_fields {\n  avg: tag_counts_avg_fields\n  count(columns: [tag_counts_select_column!], distinct: Boolean): Int\n  max: tag_counts_max_fields\n  min: tag_counts_min_fields\n  stddev: tag_counts_stddev_fields\n  stddev_pop: tag_counts_stddev_pop_fields\n  stddev_samp: tag_counts_stddev_samp_fields\n  sum: tag_counts_sum_fields\n  var_pop: tag_counts_var_pop_fields\n  var_samp: tag_counts_var_samp_fields\n  variance: tag_counts_variance_fields\n}\n\n\"\"\"\norder by aggregate values of table \"tag_counts\"\n\"\"\"\ninput tag_counts_aggregate_order_by {\n  avg: tag_counts_avg_order_by\n  count: order_by\n  max: tag_counts_max_order_by\n  min: tag_counts_min_order_by\n  stddev: tag_counts_stddev_order_by\n  stddev_pop: tag_counts_stddev_pop_order_by\n  stddev_samp: tag_counts_stddev_samp_order_by\n  sum: tag_counts_sum_order_by\n  var_pop: tag_counts_var_pop_order_by\n  var_samp: tag_counts_var_samp_order_by\n  variance: tag_counts_variance_order_by\n}\n\n\"\"\"\ninput type for inserting array relation for remote table \"tag_counts\"\n\"\"\"\ninput tag_counts_arr_rel_insert_input {\n  data: [tag_counts_insert_input!]!\n  on_conflict: tag_counts_on_conflict\n}\n\n\"\"\"\naggregate avg on columns\n\"\"\"\ntype tag_counts_avg_fields {\n  count: Float\n}\n\n\"\"\"\norder by avg() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_avg_order_by {\n  count: order_by\n}\n\n\"\"\"\nBoolean expression to filter rows from the table \"tag_counts\". All fields are combined with a logical 'AND'.\n\"\"\"\ninput tag_counts_bool_exp {\n  _and: [tag_counts_bool_exp]\n  _not: tag_counts_bool_exp\n  _or: [tag_counts_bool_exp]\n  count: bigint_comparison_exp\n  name: text_comparison_exp\n}\n\n\"\"\"\nunique or primary key constraints on table \"tag_counts\"\n\"\"\"\nenum tag_counts_constraint {\n  \"\"\"\n  unique or primary key constraint\n  \"\"\"\n  tag_counts_pkey\n}\n\n\"\"\"\ninput type for incrementing integer columne in table \"tag_counts\"\n\"\"\"\ninput tag_counts_inc_input {\n  count: bigint\n}\n\n\"\"\"\ninput type for inserting data into table \"tag_counts\"\n\"\"\"\ninput tag_counts_insert_input {\n  count: bigint\n  name: String\n}\n\n\"\"\"\naggregate max on columns\n\"\"\"\ntype tag_counts_max_fields {\n  count: bigint\n  name: String\n}\n\n\"\"\"\norder by max() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_max_order_by {\n  count: order_by\n  name: order_by\n}\n\n\"\"\"\naggregate min on columns\n\"\"\"\ntype tag_counts_min_fields {\n  count: bigint\n  name: String\n}\n\n\"\"\"\norder by min() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_min_order_by {\n  count: order_by\n  name: order_by\n}\n\n\"\"\"\nresponse of any mutation on the table \"tag_counts\"\n\"\"\"\ntype tag_counts_mutation_response {\n  \"\"\"\n  number of affected rows by the mutation\n  \"\"\"\n  affected_rows: Int!\n\n  \"\"\"\n  data of the affected rows by the mutation\n  \"\"\"\n  returning: [tag_counts!]!\n}\n\n\"\"\"\ninput type for inserting object relation for remote table \"tag_counts\"\n\"\"\"\ninput tag_counts_obj_rel_insert_input {\n  data: tag_counts_insert_input!\n  on_conflict: tag_counts_on_conflict\n}\n\n\"\"\"\non conflict condition type for table \"tag_counts\"\n\"\"\"\ninput tag_counts_on_conflict {\n  constraint: tag_counts_constraint!\n  update_columns: [tag_counts_update_column!]!\n}\n\n\"\"\"\nordering options when selecting data from \"tag_counts\"\n\"\"\"\ninput tag_counts_order_by {\n  count: order_by\n  name: order_by\n}\n\n\"\"\"\nselect columns of table \"tag_counts\"\n\"\"\"\nenum tag_counts_select_column {\n  \"\"\"\n  column name\n  \"\"\"\n  count\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n}\n\n\"\"\"\ninput type for updating data in table \"tag_counts\"\n\"\"\"\ninput tag_counts_set_input {\n  count: bigint\n  name: String\n}\n\n\"\"\"\naggregate stddev on columns\n\"\"\"\ntype tag_counts_stddev_fields {\n  count: Float\n}\n\n\"\"\"\norder by stddev() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_stddev_order_by {\n  count: order_by\n}\n\n\"\"\"\naggregate stddev_pop on columns\n\"\"\"\ntype tag_counts_stddev_pop_fields {\n  count: Float\n}\n\n\"\"\"\norder by stddev_pop() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_stddev_pop_order_by {\n  count: order_by\n}\n\n\"\"\"\naggregate stddev_samp on columns\n\"\"\"\ntype tag_counts_stddev_samp_fields {\n  count: Float\n}\n\n\"\"\"\norder by stddev_samp() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_stddev_samp_order_by {\n  count: order_by\n}\n\n\"\"\"\naggregate sum on columns\n\"\"\"\ntype tag_counts_sum_fields {\n  count: bigint\n}\n\n\"\"\"\norder by sum() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_sum_order_by {\n  count: order_by\n}\n\n\"\"\"\nupdate columns of table \"tag_counts\"\n\"\"\"\nenum tag_counts_update_column {\n  \"\"\"\n  column name\n  \"\"\"\n  count\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n}\n\n\"\"\"\naggregate var_pop on columns\n\"\"\"\ntype tag_counts_var_pop_fields {\n  count: Float\n}\n\n\"\"\"\norder by var_pop() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_var_pop_order_by {\n  count: order_by\n}\n\n\"\"\"\naggregate var_samp on columns\n\"\"\"\ntype tag_counts_var_samp_fields {\n  count: Float\n}\n\n\"\"\"\norder by var_samp() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_var_samp_order_by {\n  count: order_by\n}\n\n\"\"\"\naggregate variance on columns\n\"\"\"\ntype tag_counts_variance_fields {\n  count: Float\n}\n\n\"\"\"\norder by variance() on columns of table \"tag_counts\"\n\"\"\"\ninput tag_counts_variance_order_by {\n  count: order_by\n}\n\n\"\"\"\nexpression to compare columns of type text. All fields are combined with logical 'AND'.\n\"\"\"\ninput text_comparison_exp {\n  _eq: String\n  _gt: String\n  _gte: String\n  _ilike: String\n  _in: [String]\n  _is_null: Boolean\n  _like: String\n  _lt: String\n  _lte: String\n  _neq: String\n  _nilike: String\n  _nin: [String]\n  _nlike: String\n  _nsimilar: String\n  _similar: String\n}\n\nscalar timestamptz\n\n\"\"\"\nexpression to compare columns of type timestamptz. All fields are combined with logical 'AND'.\n\"\"\"\ninput timestamptz_comparison_exp {\n  _eq: timestamptz\n  _gt: timestamptz\n  _gte: timestamptz\n  _in: [timestamptz]\n  _is_null: Boolean\n  _lt: timestamptz\n  _lte: timestamptz\n  _neq: timestamptz\n  _nin: [timestamptz]\n}\n\n\"\"\"\ncolumns and relationships of \"users\"\n\"\"\"\ntype users {\n  avatar: String\n\n  \"\"\"\n  An array relationship\n  \"\"\"\n  image_channels(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_channels_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_channels_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_channels_bool_exp\n  ): [image_channels!]!\n\n  \"\"\"\n  An aggregated array relationship\n  \"\"\"\n  image_channels_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_channels_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_channels_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_channels_bool_exp\n  ): image_channels_aggregate!\n\n  \"\"\"\n  An array relationship\n  \"\"\"\n  image_tags(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_tags_bool_exp\n  ): [image_tags!]!\n\n  \"\"\"\n  An aggregated array relationship\n  \"\"\"\n  image_tags_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [image_tags_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [image_tags_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: image_tags_bool_exp\n  ): image_tags_aggregate!\n\n  \"\"\"\n  An array relationship\n  \"\"\"\n  images(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [images_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [images_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: images_bool_exp\n  ): [images!]!\n\n  \"\"\"\n  An aggregated array relationship\n  \"\"\"\n  images_aggregate(\n    \"\"\"\n    distinct select on columns\n    \"\"\"\n    distinct_on: [images_select_column!]\n\n    \"\"\"\n    limit the nuber of rows returned\n    \"\"\"\n    limit: Int\n\n    \"\"\"\n    skip the first n rows. Use only with order_by\n    \"\"\"\n    offset: Int\n\n    \"\"\"\n    sort the rows by one or more columns\n    \"\"\"\n    order_by: [images_order_by!]\n\n    \"\"\"\n    filter the rows returned\n    \"\"\"\n    where: images_bool_exp\n  ): images_aggregate!\n  name: String\n  user_id: String!\n}\n\n\"\"\"\naggregated selection of \"users\"\n\"\"\"\ntype users_aggregate {\n  aggregate: users_aggregate_fields\n  nodes: [users!]!\n}\n\n\"\"\"\naggregate fields of \"users\"\n\"\"\"\ntype users_aggregate_fields {\n  count(columns: [users_select_column!], distinct: Boolean): Int\n  max: users_max_fields\n  min: users_min_fields\n}\n\n\"\"\"\norder by aggregate values of table \"users\"\n\"\"\"\ninput users_aggregate_order_by {\n  count: order_by\n  max: users_max_order_by\n  min: users_min_order_by\n}\n\n\"\"\"\ninput type for inserting array relation for remote table \"users\"\n\"\"\"\ninput users_arr_rel_insert_input {\n  data: [users_insert_input!]!\n  on_conflict: users_on_conflict\n}\n\n\"\"\"\nBoolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'.\n\"\"\"\ninput users_bool_exp {\n  _and: [users_bool_exp]\n  _not: users_bool_exp\n  _or: [users_bool_exp]\n  avatar: text_comparison_exp\n  image_channels: image_channels_bool_exp\n  image_tags: image_tags_bool_exp\n  images: images_bool_exp\n  name: text_comparison_exp\n  user_id: text_comparison_exp\n}\n\n\"\"\"\nunique or primary key constraints on table \"users\"\n\"\"\"\nenum users_constraint {\n  \"\"\"\n  unique or primary key constraint\n  \"\"\"\n  users_pkey\n}\n\n\"\"\"\ninput type for inserting data into table \"users\"\n\"\"\"\ninput users_insert_input {\n  avatar: String\n  image_channels: image_channels_arr_rel_insert_input\n  image_tags: image_tags_arr_rel_insert_input\n  images: images_arr_rel_insert_input\n  name: String\n  user_id: String\n}\n\n\"\"\"\naggregate max on columns\n\"\"\"\ntype users_max_fields {\n  avatar: String\n  name: String\n  user_id: String\n}\n\n\"\"\"\norder by max() on columns of table \"users\"\n\"\"\"\ninput users_max_order_by {\n  avatar: order_by\n  name: order_by\n  user_id: order_by\n}\n\n\"\"\"\naggregate min on columns\n\"\"\"\ntype users_min_fields {\n  avatar: String\n  name: String\n  user_id: String\n}\n\n\"\"\"\norder by min() on columns of table \"users\"\n\"\"\"\ninput users_min_order_by {\n  avatar: order_by\n  name: order_by\n  user_id: order_by\n}\n\n\"\"\"\nresponse of any mutation on the table \"users\"\n\"\"\"\ntype users_mutation_response {\n  \"\"\"\n  number of affected rows by the mutation\n  \"\"\"\n  affected_rows: Int!\n\n  \"\"\"\n  data of the affected rows by the mutation\n  \"\"\"\n  returning: [users!]!\n}\n\n\"\"\"\ninput type for inserting object relation for remote table \"users\"\n\"\"\"\ninput users_obj_rel_insert_input {\n  data: users_insert_input!\n  on_conflict: users_on_conflict\n}\n\n\"\"\"\non conflict condition type for table \"users\"\n\"\"\"\ninput users_on_conflict {\n  constraint: users_constraint!\n  update_columns: [users_update_column!]!\n}\n\n\"\"\"\nordering options when selecting data from \"users\"\n\"\"\"\ninput users_order_by {\n  avatar: order_by\n  image_channels_aggregate: image_channels_aggregate_order_by\n  image_tags_aggregate: image_tags_aggregate_order_by\n  images_aggregate: images_aggregate_order_by\n  name: order_by\n  user_id: order_by\n}\n\n\"\"\"\nselect columns of table \"users\"\n\"\"\"\nenum users_select_column {\n  \"\"\"\n  column name\n  \"\"\"\n  avatar\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n\n  \"\"\"\n  column name\n  \"\"\"\n  user_id\n}\n\n\"\"\"\ninput type for updating data in table \"users\"\n\"\"\"\ninput users_set_input {\n  avatar: String\n  name: String\n  user_id: String\n}\n\n\"\"\"\nupdate columns of table \"users\"\n\"\"\"\nenum users_update_column {\n  \"\"\"\n  column name\n  \"\"\"\n  avatar\n\n  \"\"\"\n  column name\n  \"\"\"\n  name\n\n  \"\"\"\n  column name\n  \"\"\"\n  user_id\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 77,
      "containsCycle": true,
      "numDefinitions": 214
    }
  ],
  "metrics": {
    "created_at": "2019-02-02T05:05:40Z",
    "updated_at": "2019-07-16T10:27:03Z",
    "pushed_at": "2019-07-03T23:55:16Z",
    "issues": 0,
    "watchers": 4,
    "fork_count": 2,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 8,
    "pull_requests_open": 2,
    "pull_requests_closed": 0,
    "pull_requests_merged": 6,
    "releases": 0,
    "stargazers": 16
  }
}