{
  "repo_name": "fullstack-challenge",
  "repo_full_name": "gtkatakura/fullstack-challenge",
  "repo_owner": "gtkatakura",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "server/data/schema.graphql",
      "sha": "47a3cc6518e63694ff324db9dd10d7c6acd2ca33",
      "url": "https://api.github.com/repositories/141362613/contents/server/data/schema.graphql?ref=b5ff11f8bd3108f7c66634047ed2e0b40d2132ed",
      "git_url": "https://api.github.com/repositories/141362613/git/blobs/47a3cc6518e63694ff324db9dd10d7c6acd2ca33",
      "html_url": "https://github.com/gtkatakura/fullstack-challenge/blob/b5ff11f8bd3108f7c66634047ed2e0b40d2132ed/server/data/schema.graphql",
      "content": "input ChangePasswordInput {\n  oldPassword: String!\n\n  \"\"\"user new password\"\"\"\n  password: String!\n  clientMutationId: String\n}\n\ntype ChangePasswordPayload {\n  error: String\n  me: User\n  clientMutationId: String\n}\n\ninput LoginEmailInput {\n  email: String!\n  password: String!\n  clientMutationId: String\n}\n\ntype LoginEmailPayload {\n  token: String\n  error: String\n  clientMutationId: String\n}\n\ntype Mutation {\n  LoginEmail(input: LoginEmailInput!): LoginEmailPayload\n  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload\n  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\n\"\"\"The root of all... queries\"\"\"\ntype Query {\n  \"\"\"Fetches an object given its ID\"\"\"\n  node(\n    \"\"\"The ID of an object\"\"\"\n    id: ID!\n  ): Node\n  me: User\n  user(id: ID!): User\n  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection\n}\n\ninput RegisterEmailInput {\n  name: String!\n  email: String!\n  password: String!\n  clientMutationId: String\n}\n\ntype RegisterEmailPayload {\n  token: String\n  error: String\n  clientMutationId: String\n}\n\ntype Subscription {\n  UserAdded: UserAddedPayload\n}\n\n\"\"\"User data\"\"\"\ntype User implements Node {\n  \"\"\"The ID of an object\"\"\"\n  id: ID!\n  _id: String\n  name: String\n  email: String\n  active: Boolean\n}\n\ntype UserAddedPayload {\n  userEdge: UserEdge\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype UserConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [UserEdge]\n  count: Int\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype UserEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: User\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 15
    }
  ],
  "metrics": {
    "created_at": "2018-07-18T01:05:02Z",
    "updated_at": "2018-09-25T02:31:17Z",
    "pushed_at": "2018-09-04T02:21:24Z",
    "issues": 2,
    "watchers": 4,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 6
  }
}