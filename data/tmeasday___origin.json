{
  "repo_name": "origin",
  "repo_full_name": "tmeasday/origin",
  "repo_owner": "tmeasday",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "data/schema.graphql",
      "sha": "bc800023af79f73dedec660d8213ea4a56a23889",
      "url": "https://api.github.com/repositories/67103841/contents/data/schema.graphql?ref=42c5e6112ea9486375d56394103eaf33e7d45e4e",
      "git_url": "https://api.github.com/repositories/67103841/git/blobs/bc800023af79f73dedec660d8213ea4a56a23889",
      "html_url": "https://github.com/tmeasday/origin/blob/42c5e6112ea9486375d56394103eaf33e7d45e4e/data/schema.graphql",
      "content": "type Author {\n  id: Int! # the ! means that every author object _must_ have an id\n  firstName: String\n  lastName: String\n  posts: [Post] # the list of Posts by this author\n}\n\ntype Post {\n  id: Int!\n  title: String\n  author: Author\n  votes: Int\n}\n\n# the schema allows the following query:\ntype Query {\n  posts: [Post]\n}\n\n# this schema allows the following mutation:\ntype Mutation {\n  upvotePost (\n    postId: Int!\n  ): Post\n}\n\n# we need to tell the server which types represent the root query\n# and root mutation types. We call them RootQuery and RootMutation by convention.\nschema {\n  query: Query\n  mutation: Mutation\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 4,
      "containsCycle": true,
      "numDefinitions": 5
    }
  ],
  "metrics": {
    "created_at": "2016-09-01T06:20:11Z",
    "updated_at": "2019-07-06T12:13:39Z",
    "pushed_at": "2016-09-01T06:20:21Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}