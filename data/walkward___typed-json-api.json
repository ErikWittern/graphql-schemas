{
  "repo_name": "typed-json-api",
  "repo_full_name": "walkward/typed-json-api",
  "repo_owner": "walkward",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.gql",
      "path": "schema.gql",
      "sha": "aa378f1f6f9394e3514b484501c6fc05cdfe8f6d",
      "url": "https://api.github.com/repositories/152796024/contents/schema.gql?ref=244f842d1052bbe91402e7717ea76ce065a35445",
      "git_url": "https://api.github.com/repositories/152796024/git/blobs/aa378f1f6f9394e3514b484501c6fc05cdfe8f6d",
      "html_url": "https://github.com/walkward/typed-json-api/blob/244f842d1052bbe91402e7717ea76ce065a35445/schema.gql",
      "content": "# -----------------------------------------------\n# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!\n# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!\n# -----------------------------------------------\n\ntype Asset {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n  name: String!\n  location: String!\n  fileType: FileTypes!\n  success: Boolean!\n  collections(skip: Int, take: Int): [Collection!]!\n  folder: Folder!\n}\n\ninput AssetInput {\n  name: String!\n  location: String!\n  fileType: FileTypes!\n  success: Boolean!\n  folderId: ID!\n}\n\ntype Base {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n}\n\ntype Collection {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n  name: String!\n  assets(skip: Int, take: Int): [Asset!]\n  folder: Folder\n  user: User\n  group: Group\n}\n\ninput CollectionInput {\n  name: String!\n  folderId: ID\n  userId: ID\n  groupId: ID\n}\n\ntype Customer {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n  name: String!\n  users(skip: Int, take: Int): [User!]!\n  groups(skip: Int, take: Int): [Group!]\n  projects(skip: Int, take: Int): [Project!]\n}\n\ninput CustomerInput {\n  name: String!\n}\n\n# The javascript `Date` as string. Type represents date and time as the ISO Date string.\nscalar DateTime\n\n# Acceptable file type extensions\nenum FileTypes {\n  jpg\n  png\n  gif\n}\n\ntype Folder {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n  name: String!\n  collections: [Collection!]\n  project: Project\n  projectId: String!\n  children(skip: Int, take: Int): [Folder!]\n  parent: Folder\n  parentId: String!\n  childCount: Int!\n  assets: [Asset!]\n}\n\ninput FolderInput {\n  name: String!\n  parentId: ID\n  projectId: ID\n}\n\ntype Group {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n  name: String!\n  collections(skip: Int, take: Int): [Collection!]\n  users(skip: Int, take: Int): [User!]!\n  customer: Customer!\n}\n\ninput GroupInput {\n  name: String!\n  customerId: ID!\n}\n\ntype Mutation {\n  addAsset(asset: AssetInput!): Asset!\n  addUser(user: UserInput!): User!\n  addCustomer(customer: CustomerInput!): Customer!\n  addGroup(group: GroupInput!): Group!\n  addProject(project: ProjectInput!): Project!\n  addCollection(collection: CollectionInput!): Collection!\n  addFolder(folder: FolderInput!): Folder!\n  addNotification(notification: NotificationInput!): Boolean!\n}\n\ntype Notification {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n  message: String!\n  topic: String!\n}\n\ninput NotificationInput {\n  message: String!\n  topic: String!\n}\n\ntype Project {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n  name: String!\n  folder: Folder!\n  user: User\n  customer: Customer\n}\n\ninput ProjectInput {\n  name: String!\n  customerId: ID!\n}\n\ntype Query {\n  asset(assetId: String!): Asset\n  assets(skip: Int, take: Int): [Asset!]!\n  user(userId: String!): User\n  users(skip: Int, take: Int): [User!]!\n  customer(customerId: String!): Customer\n  customers(skip: Int, take: Int): [Customer!]!\n  group(groupId: String!): Group\n  groups(skip: Int, take: Int): [Group!]!\n  project(projectId: String!): Project\n  projects(skip: Int, take: Int): [Project!]!\n  collection(collectionId: String!): Collection\n  collections(skip: Int, take: Int): [Collection!]!\n  folder(folderId: String!): Folder\n  folders(skip: Int, take: Int): [Folder!]!\n  notification(notificationId: String!): Notification\n  notifications(skip: Int, take: Int): [Notification!]!\n}\n\ntype Subscription {\n  userSubscription(topic: String!): Notification!\n  newNotifications(topic: String!): Notification!\n}\n\ntype User {\n  id: ID!\n  created: DateTime!\n  modified: DateTime!\n  version: Float!\n  firstname: String!\n  lastname: String!\n  email: String!\n  password: String!\n  login: String!\n  groups(skip: Int, take: Int): [Group!]\n  customer: Customer!\n  collections(skip: Int, take: Int): [Collection!]\n  projects(skip: Int, take: Int): [Project!]\n}\n\ninput UserInput {\n  firstname: String!\n  lastname: String!\n  email: String!\n  password: String!\n  login: String!\n  customerId: ID!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 12,
      "containsCycle": true,
      "numDefinitions": 22
    }
  ],
  "metrics": {
    "created_at": "2018-10-12T19:03:02Z",
    "updated_at": "2018-10-29T16:49:20Z",
    "pushed_at": "2018-10-29T16:49:19Z",
    "issues": 0,
    "watchers": 2,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 2,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 2,
    "releases": 0,
    "stargazers": 0
  }
}