{
  "repo_name": "pdbeats",
  "repo_full_name": "elandamor/pdbeats",
  "repo_owner": "elandamor",
  "repo_description": "Music player",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "prisma.graphql",
      "path": "api/src/generated/prisma.graphql",
      "sha": "69cd05c2e9620dc1e2e81edf25ce227bfcdc6e73",
      "url": "https://api.github.com/repositories/155829707/contents/api/src/generated/prisma.graphql?ref=9d104ca8465815071c5cc8ea185a21d1fde82982",
      "git_url": "https://api.github.com/repositories/155829707/git/blobs/69cd05c2e9620dc1e2e81edf25ce227bfcdc6e73",
      "html_url": "https://github.com/elandamor/pdbeats/blob/9d104ca8465815071c5cc8ea185a21d1fde82982/api/src/generated/prisma.graphql",
      "content": "# source: https://eu1.prisma.sh/elandamor/pdbeats/dev\n# timestamp: Fri Nov 02 2018 23:15:43 GMT+0200 (CAT)\n\ntype AggregateAlbum {\n  count: Int!\n}\n\ntype AggregateArtist {\n  count: Int!\n}\n\ntype AggregateSong {\n  count: Int!\n}\n\ntype Album implements Node {\n  id: ID!\n  alias: String!\n  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]\n  name: String!\n  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song!]\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype AlbumConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [AlbumEdge]!\n  aggregate: AggregateAlbum!\n}\n\ninput AlbumCreateInput {\n  alias: String!\n  name: String!\n  artists: ArtistCreateManyInput\n  songs: SongCreateManyWithoutAlbumInput\n}\n\ninput AlbumCreateOneWithoutSongsInput {\n  create: AlbumCreateWithoutSongsInput\n  connect: AlbumWhereUniqueInput\n}\n\ninput AlbumCreateWithoutSongsInput {\n  alias: String!\n  name: String!\n  artists: ArtistCreateManyInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype AlbumEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Album!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum AlbumOrderByInput {\n  id_ASC\n  id_DESC\n  alias_ASC\n  alias_DESC\n  name_ASC\n  name_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype AlbumPreviousValues {\n  id: ID!\n  alias: String!\n  name: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype AlbumSubscriptionPayload {\n  mutation: MutationType!\n  node: Album\n  updatedFields: [String!]\n  previousValues: AlbumPreviousValues\n}\n\ninput AlbumSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [AlbumSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [AlbumSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [AlbumSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: AlbumWhereInput\n}\n\ninput AlbumUpdateInput {\n  alias: String\n  name: String\n  artists: ArtistUpdateManyInput\n  songs: SongUpdateManyWithoutAlbumInput\n}\n\ninput AlbumUpdateManyMutationInput {\n  alias: String\n  name: String\n}\n\ninput AlbumUpdateOneRequiredWithoutSongsInput {\n  create: AlbumCreateWithoutSongsInput\n  connect: AlbumWhereUniqueInput\n  update: AlbumUpdateWithoutSongsDataInput\n  upsert: AlbumUpsertWithoutSongsInput\n}\n\ninput AlbumUpdateWithoutSongsDataInput {\n  alias: String\n  name: String\n  artists: ArtistUpdateManyInput\n}\n\ninput AlbumUpsertWithoutSongsInput {\n  update: AlbumUpdateWithoutSongsDataInput!\n  create: AlbumCreateWithoutSongsInput!\n}\n\ninput AlbumWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [AlbumWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [AlbumWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [AlbumWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  alias: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  alias_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  alias_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  alias_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  alias_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  alias_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  alias_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  alias_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  alias_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  alias_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  alias_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  alias_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  alias_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  alias_not_ends_with: String\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  createdAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  createdAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  createdAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  createdAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  createdAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  createdAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  createdAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  updatedAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  updatedAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  updatedAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  updatedAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  updatedAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  updatedAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  updatedAt_gte: DateTime\n  artists_every: ArtistWhereInput\n  artists_some: ArtistWhereInput\n  artists_none: ArtistWhereInput\n  songs_every: SongWhereInput\n  songs_some: SongWhereInput\n  songs_none: SongWhereInput\n}\n\ninput AlbumWhereUniqueInput {\n  id: ID\n  alias: String\n}\n\ntype Artist implements Node {\n  id: ID!\n  alias: String!\n  featuredIn(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song!]\n  name: String!\n  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song!]\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype ArtistConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [ArtistEdge]!\n  aggregate: AggregateArtist!\n}\n\ninput ArtistCreateInput {\n  alias: String!\n  name: String!\n  featuredIn: SongCreateManyWithoutFeaturingInput\n  songs: SongCreateManyWithoutArtistsInput\n}\n\ninput ArtistCreateManyInput {\n  create: [ArtistCreateInput!]\n  connect: [ArtistWhereUniqueInput!]\n}\n\ninput ArtistCreateManyWithoutFeaturedInInput {\n  create: [ArtistCreateWithoutFeaturedInInput!]\n  connect: [ArtistWhereUniqueInput!]\n}\n\ninput ArtistCreateManyWithoutSongsInput {\n  create: [ArtistCreateWithoutSongsInput!]\n  connect: [ArtistWhereUniqueInput!]\n}\n\ninput ArtistCreateWithoutFeaturedInInput {\n  alias: String!\n  name: String!\n  songs: SongCreateManyWithoutArtistsInput\n}\n\ninput ArtistCreateWithoutSongsInput {\n  alias: String!\n  name: String!\n  featuredIn: SongCreateManyWithoutFeaturingInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ArtistEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Artist!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum ArtistOrderByInput {\n  id_ASC\n  id_DESC\n  alias_ASC\n  alias_DESC\n  name_ASC\n  name_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype ArtistPreviousValues {\n  id: ID!\n  alias: String!\n  name: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype ArtistSubscriptionPayload {\n  mutation: MutationType!\n  node: Artist\n  updatedFields: [String!]\n  previousValues: ArtistPreviousValues\n}\n\ninput ArtistSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [ArtistSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [ArtistSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [ArtistSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: ArtistWhereInput\n}\n\ninput ArtistUpdateDataInput {\n  alias: String\n  name: String\n  featuredIn: SongUpdateManyWithoutFeaturingInput\n  songs: SongUpdateManyWithoutArtistsInput\n}\n\ninput ArtistUpdateInput {\n  alias: String\n  name: String\n  featuredIn: SongUpdateManyWithoutFeaturingInput\n  songs: SongUpdateManyWithoutArtistsInput\n}\n\ninput ArtistUpdateManyInput {\n  create: [ArtistCreateInput!]\n  connect: [ArtistWhereUniqueInput!]\n  disconnect: [ArtistWhereUniqueInput!]\n  delete: [ArtistWhereUniqueInput!]\n  update: [ArtistUpdateWithWhereUniqueNestedInput!]\n  upsert: [ArtistUpsertWithWhereUniqueNestedInput!]\n}\n\ninput ArtistUpdateManyMutationInput {\n  alias: String\n  name: String\n}\n\ninput ArtistUpdateManyWithoutFeaturedInInput {\n  create: [ArtistCreateWithoutFeaturedInInput!]\n  connect: [ArtistWhereUniqueInput!]\n  disconnect: [ArtistWhereUniqueInput!]\n  delete: [ArtistWhereUniqueInput!]\n  update: [ArtistUpdateWithWhereUniqueWithoutFeaturedInInput!]\n  upsert: [ArtistUpsertWithWhereUniqueWithoutFeaturedInInput!]\n}\n\ninput ArtistUpdateManyWithoutSongsInput {\n  create: [ArtistCreateWithoutSongsInput!]\n  connect: [ArtistWhereUniqueInput!]\n  disconnect: [ArtistWhereUniqueInput!]\n  delete: [ArtistWhereUniqueInput!]\n  update: [ArtistUpdateWithWhereUniqueWithoutSongsInput!]\n  upsert: [ArtistUpsertWithWhereUniqueWithoutSongsInput!]\n}\n\ninput ArtistUpdateWithoutFeaturedInDataInput {\n  alias: String\n  name: String\n  songs: SongUpdateManyWithoutArtistsInput\n}\n\ninput ArtistUpdateWithoutSongsDataInput {\n  alias: String\n  name: String\n  featuredIn: SongUpdateManyWithoutFeaturingInput\n}\n\ninput ArtistUpdateWithWhereUniqueNestedInput {\n  where: ArtistWhereUniqueInput!\n  data: ArtistUpdateDataInput!\n}\n\ninput ArtistUpdateWithWhereUniqueWithoutFeaturedInInput {\n  where: ArtistWhereUniqueInput!\n  data: ArtistUpdateWithoutFeaturedInDataInput!\n}\n\ninput ArtistUpdateWithWhereUniqueWithoutSongsInput {\n  where: ArtistWhereUniqueInput!\n  data: ArtistUpdateWithoutSongsDataInput!\n}\n\ninput ArtistUpsertWithWhereUniqueNestedInput {\n  where: ArtistWhereUniqueInput!\n  update: ArtistUpdateDataInput!\n  create: ArtistCreateInput!\n}\n\ninput ArtistUpsertWithWhereUniqueWithoutFeaturedInInput {\n  where: ArtistWhereUniqueInput!\n  update: ArtistUpdateWithoutFeaturedInDataInput!\n  create: ArtistCreateWithoutFeaturedInInput!\n}\n\ninput ArtistUpsertWithWhereUniqueWithoutSongsInput {\n  where: ArtistWhereUniqueInput!\n  update: ArtistUpdateWithoutSongsDataInput!\n  create: ArtistCreateWithoutSongsInput!\n}\n\ninput ArtistWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [ArtistWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [ArtistWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [ArtistWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  alias: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  alias_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  alias_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  alias_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  alias_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  alias_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  alias_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  alias_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  alias_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  alias_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  alias_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  alias_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  alias_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  alias_not_ends_with: String\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  createdAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  createdAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  createdAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  createdAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  createdAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  createdAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  createdAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  updatedAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  updatedAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  updatedAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  updatedAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  updatedAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  updatedAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  updatedAt_gte: DateTime\n  featuredIn_every: SongWhereInput\n  featuredIn_some: SongWhereInput\n  featuredIn_none: SongWhereInput\n  songs_every: SongWhereInput\n  songs_some: SongWhereInput\n  songs_none: SongWhereInput\n}\n\ninput ArtistWhereUniqueInput {\n  id: ID\n  alias: String\n}\n\ntype BatchPayload {\n  \"\"\"The number of nodes that have been affected by the Batch operation.\"\"\"\n  count: Long!\n}\n\nscalar DateTime\n\n\"\"\"\nThe `Long` scalar type represents non-fractional signed whole numeric values.\nLong can represent values between -(2^63) and 2^63 - 1.\n\"\"\"\nscalar Long\n\ntype Mutation {\n  createSong(data: SongCreateInput!): Song!\n  createAlbum(data: AlbumCreateInput!): Album!\n  createArtist(data: ArtistCreateInput!): Artist!\n  updateSong(data: SongUpdateInput!, where: SongWhereUniqueInput!): Song\n  updateAlbum(data: AlbumUpdateInput!, where: AlbumWhereUniqueInput!): Album\n  updateArtist(data: ArtistUpdateInput!, where: ArtistWhereUniqueInput!): Artist\n  deleteSong(where: SongWhereUniqueInput!): Song\n  deleteAlbum(where: AlbumWhereUniqueInput!): Album\n  deleteArtist(where: ArtistWhereUniqueInput!): Artist\n  upsertSong(where: SongWhereUniqueInput!, create: SongCreateInput!, update: SongUpdateInput!): Song!\n  upsertAlbum(where: AlbumWhereUniqueInput!, create: AlbumCreateInput!, update: AlbumUpdateInput!): Album!\n  upsertArtist(where: ArtistWhereUniqueInput!, create: ArtistCreateInput!, update: ArtistUpdateInput!): Artist!\n  updateManySongs(data: SongUpdateManyMutationInput!, where: SongWhereInput): BatchPayload!\n  updateManyAlbums(data: AlbumUpdateManyMutationInput!, where: AlbumWhereInput): BatchPayload!\n  updateManyArtists(data: ArtistUpdateManyMutationInput!, where: ArtistWhereInput): BatchPayload!\n  deleteManySongs(where: SongWhereInput): BatchPayload!\n  deleteManyAlbums(where: AlbumWhereInput): BatchPayload!\n  deleteManyArtists(where: ArtistWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\ntype Query {\n  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song]!\n  albums(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album]!\n  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist]!\n  song(where: SongWhereUniqueInput!): Song\n  album(where: AlbumWhereUniqueInput!): Album\n  artist(where: ArtistWhereUniqueInput!): Artist\n  songsConnection(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SongConnection!\n  albumsConnection(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlbumConnection!\n  artistsConnection(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArtistConnection!\n\n  \"\"\"Fetches an object given its ID\"\"\"\n  node(\n    \"\"\"The ID of an object\"\"\"\n    id: ID!\n  ): Node\n}\n\ntype Song implements Node {\n  id: ID!\n  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]\n  album: Album!\n  featuring(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]\n  name: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype SongConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [SongEdge]!\n  aggregate: AggregateSong!\n}\n\ninput SongCreateInput {\n  name: String!\n  artists: ArtistCreateManyWithoutSongsInput\n  album: AlbumCreateOneWithoutSongsInput!\n  featuring: ArtistCreateManyWithoutFeaturedInInput\n}\n\ninput SongCreateManyWithoutAlbumInput {\n  create: [SongCreateWithoutAlbumInput!]\n  connect: [SongWhereUniqueInput!]\n}\n\ninput SongCreateManyWithoutArtistsInput {\n  create: [SongCreateWithoutArtistsInput!]\n  connect: [SongWhereUniqueInput!]\n}\n\ninput SongCreateManyWithoutFeaturingInput {\n  create: [SongCreateWithoutFeaturingInput!]\n  connect: [SongWhereUniqueInput!]\n}\n\ninput SongCreateWithoutAlbumInput {\n  name: String!\n  artists: ArtistCreateManyWithoutSongsInput\n  featuring: ArtistCreateManyWithoutFeaturedInInput\n}\n\ninput SongCreateWithoutArtistsInput {\n  name: String!\n  album: AlbumCreateOneWithoutSongsInput!\n  featuring: ArtistCreateManyWithoutFeaturedInInput\n}\n\ninput SongCreateWithoutFeaturingInput {\n  name: String!\n  artists: ArtistCreateManyWithoutSongsInput\n  album: AlbumCreateOneWithoutSongsInput!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype SongEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Song!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum SongOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype SongPreviousValues {\n  id: ID!\n  name: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype SongSubscriptionPayload {\n  mutation: MutationType!\n  node: Song\n  updatedFields: [String!]\n  previousValues: SongPreviousValues\n}\n\ninput SongSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [SongSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [SongSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [SongSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: SongWhereInput\n}\n\ninput SongUpdateInput {\n  name: String\n  artists: ArtistUpdateManyWithoutSongsInput\n  album: AlbumUpdateOneRequiredWithoutSongsInput\n  featuring: ArtistUpdateManyWithoutFeaturedInInput\n}\n\ninput SongUpdateManyMutationInput {\n  name: String\n}\n\ninput SongUpdateManyWithoutAlbumInput {\n  create: [SongCreateWithoutAlbumInput!]\n  connect: [SongWhereUniqueInput!]\n  disconnect: [SongWhereUniqueInput!]\n  delete: [SongWhereUniqueInput!]\n  update: [SongUpdateWithWhereUniqueWithoutAlbumInput!]\n  upsert: [SongUpsertWithWhereUniqueWithoutAlbumInput!]\n}\n\ninput SongUpdateManyWithoutArtistsInput {\n  create: [SongCreateWithoutArtistsInput!]\n  connect: [SongWhereUniqueInput!]\n  disconnect: [SongWhereUniqueInput!]\n  delete: [SongWhereUniqueInput!]\n  update: [SongUpdateWithWhereUniqueWithoutArtistsInput!]\n  upsert: [SongUpsertWithWhereUniqueWithoutArtistsInput!]\n}\n\ninput SongUpdateManyWithoutFeaturingInput {\n  create: [SongCreateWithoutFeaturingInput!]\n  connect: [SongWhereUniqueInput!]\n  disconnect: [SongWhereUniqueInput!]\n  delete: [SongWhereUniqueInput!]\n  update: [SongUpdateWithWhereUniqueWithoutFeaturingInput!]\n  upsert: [SongUpsertWithWhereUniqueWithoutFeaturingInput!]\n}\n\ninput SongUpdateWithoutAlbumDataInput {\n  name: String\n  artists: ArtistUpdateManyWithoutSongsInput\n  featuring: ArtistUpdateManyWithoutFeaturedInInput\n}\n\ninput SongUpdateWithoutArtistsDataInput {\n  name: String\n  album: AlbumUpdateOneRequiredWithoutSongsInput\n  featuring: ArtistUpdateManyWithoutFeaturedInInput\n}\n\ninput SongUpdateWithoutFeaturingDataInput {\n  name: String\n  artists: ArtistUpdateManyWithoutSongsInput\n  album: AlbumUpdateOneRequiredWithoutSongsInput\n}\n\ninput SongUpdateWithWhereUniqueWithoutAlbumInput {\n  where: SongWhereUniqueInput!\n  data: SongUpdateWithoutAlbumDataInput!\n}\n\ninput SongUpdateWithWhereUniqueWithoutArtistsInput {\n  where: SongWhereUniqueInput!\n  data: SongUpdateWithoutArtistsDataInput!\n}\n\ninput SongUpdateWithWhereUniqueWithoutFeaturingInput {\n  where: SongWhereUniqueInput!\n  data: SongUpdateWithoutFeaturingDataInput!\n}\n\ninput SongUpsertWithWhereUniqueWithoutAlbumInput {\n  where: SongWhereUniqueInput!\n  update: SongUpdateWithoutAlbumDataInput!\n  create: SongCreateWithoutAlbumInput!\n}\n\ninput SongUpsertWithWhereUniqueWithoutArtistsInput {\n  where: SongWhereUniqueInput!\n  update: SongUpdateWithoutArtistsDataInput!\n  create: SongCreateWithoutArtistsInput!\n}\n\ninput SongUpsertWithWhereUniqueWithoutFeaturingInput {\n  where: SongWhereUniqueInput!\n  update: SongUpdateWithoutFeaturingDataInput!\n  create: SongCreateWithoutFeaturingInput!\n}\n\ninput SongWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [SongWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [SongWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [SongWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  createdAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  createdAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  createdAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  createdAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  createdAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  createdAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  createdAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  updatedAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  updatedAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  updatedAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  updatedAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  updatedAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  updatedAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  updatedAt_gte: DateTime\n  artists_every: ArtistWhereInput\n  artists_some: ArtistWhereInput\n  artists_none: ArtistWhereInput\n  album: AlbumWhereInput\n  featuring_every: ArtistWhereInput\n  featuring_some: ArtistWhereInput\n  featuring_none: ArtistWhereInput\n}\n\ninput SongWhereUniqueInput {\n  id: ID\n}\n\ntype Subscription {\n  song(where: SongSubscriptionWhereInput): SongSubscriptionPayload\n  album(where: AlbumSubscriptionWhereInput): AlbumSubscriptionPayload\n  artist(where: ArtistSubscriptionWhereInput): ArtistSubscriptionPayload\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 23,
      "containsCycle": true,
      "numDefinitions": 88
    }
  ],
  "metrics": {
    "created_at": "2018-11-02T07:27:48Z",
    "updated_at": "2019-07-05T22:59:27Z",
    "pushed_at": "2019-06-09T12:27:59Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 2,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 2,
    "releases": 0,
    "stargazers": 0
  }
}