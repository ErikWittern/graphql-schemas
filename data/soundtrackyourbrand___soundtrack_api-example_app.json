{
  "repo_name": "soundtrack_api-example_app",
  "repo_full_name": "soundtrackyourbrand/soundtrack_api-example_app",
  "repo_owner": "soundtrackyourbrand",
  "repo_description": "Example app for Soundtrack API.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema.graphql",
      "sha": "6e2c55bbf81d36c0c18e6ed6fb4046cefbf62139",
      "url": "https://api.github.com/repositories/161447969/contents/schema.graphql?ref=6b414d2c400a22b0fb0633548acadb527ce2bc4a",
      "git_url": "https://api.github.com/repositories/161447969/git/blobs/6e2c55bbf81d36c0c18e6ed6fb4046cefbf62139",
      "html_url": "https://github.com/soundtrackyourbrand/soundtrack_api-example_app/blob/6b414d2c400a22b0fb0633548acadb527ce2bc4a/schema.graphql",
      "content": "schema {\n  query: RootQueryType\n  mutation: RootMutationType\n  subscription: RootSubscriptionType\n}\n\ntype Access {\n  \"\"\"Lists invited users\"\"\"\n  pendingUsers(after: String, before: String, first: Int, last: Int): PendingAccountUsersConnection\n\n  \"\"\"Lists active users\"\"\"\n  users(after: String, before: String, first: Int, last: Int): AccountUsersConnection\n}\n\n\"\"\"A registered account\"\"\"\ntype Account implements Node {\n  \"\"\"The users that can access the account\"\"\"\n  access: Access\n  businessName: String\n  businessType: String\n\n  \"\"\"The account's curator profile\"\"\"\n  curator: Curator\n  id: ID!\n\n  \"\"\"The account's locations\"\"\"\n  locations(after: String, before: String, first: Int, last: Int): LocationConnection\n\n  \"\"\"The account's added soundtracks, playlists and schedules\"\"\"\n  musicLibrary: MusicLibrary\n\n  \"\"\"\n  The account's sound zones (the zones are also available under each location)\n  \"\"\"\n  soundZones(after: String, before: String, first: Int, last: Int): SoundZoneConnection\n}\n\ntype AccountConnection {\n  edges: [AccountEdge]\n  pageInfo: PageInfo!\n}\n\ntype AccountEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge\"\"\"\n  node: Account\n}\n\ntype AccountUsersConnection {\n  edges: [AccountUsersEdge]\n  pageInfo: PageInfo!\n}\n\ntype AccountUsersEdge {\n  \"\"\"\n  If the user is a contact (receives administrative emails) for the account\n  \"\"\"\n  contact: Boolean\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n\n  \"\"\"The user\"\"\"\n  node: User\n\n  \"\"\"The invited user role\"\"\"\n  role: Role\n}\n\ninput AddToMusicLibraryInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n\n  \"\"\"id of the parent account\"\"\"\n  parent: ID!\n\n  \"\"\"id of a soundtrack, playlist or schedule\"\"\"\n  source: ID!\n}\n\ntype AddToMusicLibraryPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  musicLibrary: MusicLibrary\n}\n\n\"\"\"An album\"\"\"\ntype Album {\n  \"\"\"The release type\"\"\"\n  albumType: AlbumType\n\n  \"\"\"A pair of colors generated from the album's cover art\"\"\"\n  colors: Color\n\n  \"\"\"The album's cover art\"\"\"\n  image: Image\n  name: String\n}\n\nenum AlbumType {\n  album\n  compilation\n  single\n}\n\n\"\"\"An artist\"\"\"\ntype Artist {\n  name: String\n}\n\n\"\"\"A pair of complementary colors\"\"\"\ntype Color {\n  accent: String\n  primary: String\n}\n\n\"\"\"\nA curator profile contains the information that is publically\nshown when e.g a schedule or playlist from an account is shared.\n\n\"\"\"\ntype Curator implements Node {\n  \"\"\"A full description of the curator\"\"\"\n  description: String\n\n  \"\"\"The curator's ID\"\"\"\n  id: ID!\n\n  \"\"\"An image URL\"\"\"\n  image: String\n\n  \"\"\"A logo URL\"\"\"\n  logo: String\n\n  \"\"\"The curator's name\"\"\"\n  name: String\n\n  \"\"\"A short description of the curator\"\"\"\n  shortDescription: String\n\n  \"\"\"The curator's spotify profile\"\"\"\n  spotifyProfile: String\n\n  \"\"\"A link to the curator's website\"\"\"\n  url: String\n\n  \"\"\"\n  If the curator has been verified as authentic by Soundtrack Your Brand\n  \"\"\"\n  verified: Boolean\n}\n\nscalar Date\n\n\"\"\"A physical device that that plays music.\"\"\"\ntype Device implements Node {\n  \"\"\"The hardware id of the device, e.g mac address\"\"\"\n  hardwareId: String\n  id: ID!\n  label: String\n  name: String\n  pairingCode: String\n\n  \"\"\"The device's current playback state\"\"\"\n  playback: Playback\n  softwareVersion: String\n\n  \"\"\"The sound zone the device is paired with\"\"\"\n  soundZone: SoundZone\n\n  \"\"\"What type of device this is, e.g mobile or desktop\"\"\"\n  type: String\n\n  \"\"\"The vendor who has manufactured the device\"\"\"\n  vendorId: String\n}\n\ntype Error implements Node {\n  cause: String\n  description: String\n  id: ID!\n  occurredAt: Date\n  resolved: Boolean\n  resolvedAt: Date\n  type: String\n}\n\ntype ErrorConnection {\n  edges: [ErrorEdge]\n  pageInfo: PageInfo!\n}\n\ntype ErrorEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge\"\"\"\n  node: Error\n}\n\nenum ErrorState {\n  all\n  unresolved\n}\n\n\"\"\"\nRepresents a sample of artists and tracks that well represent the overall\nsound of the soundtrack.\n\n\"\"\"\ntype FeaturedArtist {\n  name: String\n  tracks(after: String, before: String, first: Int, last: Int): TrackConnection\n}\n\ntype FeaturedArtistConnection {\n  edges: [FeaturedArtistEdge]\n  pageInfo: PageInfo!\n}\n\ntype FeaturedArtistEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge\"\"\"\n  node: FeaturedArtist\n}\n\n\"\"\"An image\"\"\"\ntype Image {\n  height: Int\n  url: String\n  width: Int\n}\n\n\"\"\"A physical location, like a store. Can have one or many sound zones\"\"\"\ntype Location implements Node {\n  address: String\n  address2: String\n  city: String\n  countryName: String\n  id: ID!\n  isoCountry: String\n  name: String\n  postalCode: String\n\n  \"\"\"The sound zones at the location\"\"\"\n  soundZones(after: String, before: String, first: Int, last: Int): SoundZoneConnection\n  state: String\n  timezone: String\n}\n\ntype LocationConnection {\n  edges: [LocationEdge]\n  pageInfo: PageInfo!\n}\n\ntype LocationEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge\"\"\"\n  node: Location\n}\n\ninput LoginDeviceInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  hardwareId: String!\n  vendorSecret: String!\n}\n\ntype LoginDevicePayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  token: String\n}\n\ninput LoginUserInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  email: String!\n  password: String!\n}\n\ntype LoginUserPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  token: String\n}\n\n\"\"\"A music library contains added soundtracks, playlists and schedules.\"\"\"\ntype MusicLibrary {\n  \"\"\"The added playlists\"\"\"\n  playlists(after: String, before: String, first: Int, last: Int): MusicLibraryPlaylistsConnection\n\n  \"\"\"The added schedules\"\"\"\n  schedules(after: String, before: String, first: Int, last: Int): MusicLibrarySchedulesConnection\n\n  \"\"\"The added soundtracks\"\"\"\n  soundtracks(after: String, before: String, first: Int, last: Int): MusicLibrarySoundtracksConnection\n}\n\ntype MusicLibraryPlaylistsConnection {\n  edges: [MusicLibraryPlaylistsEdge]\n  pageInfo: PageInfo!\n}\n\ntype MusicLibraryPlaylistsEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n  node: Playlist\n}\n\ntype MusicLibrarySchedulesConnection {\n  edges: [MusicLibrarySchedulesEdge]\n  pageInfo: PageInfo!\n}\n\ntype MusicLibrarySchedulesEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n  node: Schedule\n}\n\ntype MusicLibrarySoundtracksConnection {\n  edges: [MusicLibrarySoundtracksEdge]\n  pageInfo: PageInfo!\n}\n\ntype MusicLibrarySoundtracksEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n  node: Soundtrack\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"What's currently playing at a sound zone\"\"\"\ntype NowPlaying {\n  \"\"\"The PlaybackSource the current track is from\"\"\"\n  playFrom: PlaybackSource\n  startedAt: Date\n  track: Track\n}\n\ninput NowPlayingUpdateInput {\n  soundZone: ID!\n}\n\ntype NowPlayingUpdatePayload {\n  nowPlaying: NowPlaying\n}\n\ntype PageInfo {\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n}\n\ninput PauseInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID!\n}\n\ntype PausePayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID\n  status: String\n}\n\ntype PendingAccountUsersConnection {\n  edges: [PendingAccountUsersEdge]\n  pageInfo: PageInfo!\n}\n\ntype PendingAccountUsersEdge {\n  \"\"\"\n  If the invited user is a contact (receives administrative emails) for the account\n  \"\"\"\n  contact: Boolean\n\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n\n  \"\"\"The invited user\"\"\"\n  node: PendingUser\n\n  \"\"\"The invited user's role\"\"\"\n  role: Role\n}\n\n\"\"\"An invited user\"\"\"\ntype PendingUser {\n  \"\"\"The invited email\"\"\"\n  email: String!\n}\n\n\"\"\"Information about the player's playback\"\"\"\ntype Playback {\n  \"\"\"The playing state\"\"\"\n  state: PlaybackState\n  volume: Volume\n}\n\n\"\"\"Music sources that can be assigned to a sound zone\"\"\"\nunion PlaybackSource = Soundtrack | Playlist | Schedule\n\nenum PlaybackState {\n  paused\n  playing\n}\n\ninput PlaybackUpdateInput {\n  soundZone: ID!\n}\n\ntype PlaybackUpdatePayload {\n  playback: Playback\n}\n\ninput PlayInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID!\n}\n\n\"\"\"A playlist\"\"\"\ntype Playlist implements Node {\n  \"\"\"The curator of the playlist\"\"\"\n  curator: Curator\n  id: ID!\n  name: String\n\n  \"\"\"Information about how the playlist should be presented visually\"\"\"\n  presentation(\n    \"\"\"What product flavour the presentation should be in\"\"\"\n    product: Product = soundtrack\n  ): Presentation\n  tracks(\n    after: String\n\n    \"\"\"ISO 3166-1 alpha-2, i.e \"SE\" for Sweden\"\"\"\n    country: String!\n    first: Int\n  ): TrackConnection\n}\n\ntype PlayPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID\n  status: String\n}\n\n\"\"\"How something should be presented interfaces\"\"\"\ntype Presentation {\n  \"\"\"A matching pair of colors\"\"\"\n  colors: Color\n\n  \"\"\"A list of thumbnails\"\"\"\n  image: Thumbnails\n}\n\n\"\"\"The two product flavours\"\"\"\nenum Product {\n  soundtrack\n  spotify\n}\n\ntype PublicAPIClient {\n  accounts(after: String, before: String, first: Int, last: Int): PublicApiClientAccountsConnection\n  id: ID!\n}\n\ntype PublicApiClientAccountsConnection {\n  edges: [PublicApiClientAccountsEdge]\n  pageInfo: PageInfo!\n}\n\ntype PublicApiClientAccountsEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n  node: Account\n}\n\ntype QueryInfo {\n  complexity: Int\n}\n\nenum Role {\n  admin\n  contact\n  finance\n  owner\n  user\n}\n\ntype RootMutationType {\n  \"\"\"add an entry to a music library\"\"\"\n  addToMusicLibrary(input: AddToMusicLibraryInput!): AddToMusicLibraryPayload\n\n  \"\"\"login a device with hardware id and vendor secret\"\"\"\n  loginDevice(input: LoginDeviceInput!): LoginDevicePayload\n\n  \"\"\"login a user with username and password\"\"\"\n  loginUser(input: LoginUserInput!): LoginUserPayload\n\n  \"\"\"Pause playback of a sound zone\"\"\"\n  pause(input: PauseInput!): PausePayload\n\n  \"\"\"Start playback of a sound zone\"\"\"\n  play(input: PlayInput!): PlayPayload\n\n  \"\"\"Change playback source of a sound zone\"\"\"\n  setPlayFrom(input: SetPlayFromInput!): SetPlayFromPayload\n\n  \"\"\"Set the volume of a sound zone\"\"\"\n  setVolume(input: SetVolumeInput!): SetVolumePayload\n\n  \"\"\"Skip the current playing track of a sound zone\"\"\"\n  skipTrack(input: SkipTrackInput!): SkipTrackPayload\n}\n\ntype RootQueryType {\n  \"\"\"Find an account by ID\"\"\"\n  account(id: ID!): Account\n\n  \"\"\"\n  The main entry point to begin querying and exploring the API.\n  \n  Returns different nodes depending on the current API session.\n  \"\"\"\n  me: Viewer\n\n  \"\"\"Find entities implementing the node interface by ID\"\"\"\n  node(\n    \"\"\"The id of an object.\"\"\"\n    id: ID!\n  ): Node\n\n  \"\"\"Find the currently playing track by sound zone ID\"\"\"\n  nowPlaying(soundZone: ID!): NowPlaying\n\n  \"\"\"Get the calculated complexity for a query\"\"\"\n  queryInfo: QueryInfo\n\n  \"\"\"Find a sound zone by ID\"\"\"\n  soundZone(id: ID!): SoundZone\n}\n\ntype RootSubscriptionType {\n  \"\"\"Get an update when a sound zone starts playing a new track\"\"\"\n  nowPlayingUpdate(input: NowPlayingUpdateInput!): NowPlayingUpdatePayload\n\n  \"\"\"Get updates on when playback changes (play/pause/volume)\"\"\"\n  playbackUpdate(input: PlaybackUpdateInput!): PlaybackUpdatePayload\n\n  \"\"\"\n  Get updates when base information on the sound zone changes, such as the name or playFrom\n  \"\"\"\n  soundZoneUpdate(input: SoundZoneUpdateInput!): SoundZoneUpdatePayload\n}\n\n\"\"\"\nA schedule of what music should play when, during the course of a week\n\n\"\"\"\ntype Schedule implements Node {\n  \"\"\"\n  One or more hex colors that can be used to represent the schedule as single color or gradient\n  \"\"\"\n  colors: [String]\n\n  \"\"\"The curator for the schedule\"\"\"\n  curator: Curator\n  description: String\n  id: ID!\n\n  \"\"\"The music used in the schedule\"\"\"\n  musicLibrary: MusicLibrary\n  name: String\n\n  \"\"\"\n  The time slots for the schedule.\n  A time slot describes what music should play\n  during what hours on a specific day of week.\n  \"\"\"\n  slots: [Slot]\n  summary: String\n}\n\ninput SetPlayFromInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID!\n  source: ID!\n}\n\ntype SetPlayFromPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  playFrom: PlaybackSource\n}\n\ninput SetVolumeInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID!\n  volume: Volume!\n}\n\ntype SetVolumePayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID\n  status: String\n  volume: Volume\n}\n\ninput SkipTrackInput {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID!\n}\n\ntype SkipTrackPayload {\n  \"\"\"A unique identifier for the client performing the mutation.\"\"\"\n  clientMutationId: String\n  soundZone: ID\n  status: String\n}\n\n\"\"\"\nA sequence of collections (soundtracks or playlists) that should be played\nfor a specific period of time.\n\n\"\"\"\ntype Slot {\n  \"\"\"\n  The playlists or soundtracks scheduled to play from start to start + duration\n  \"\"\"\n  collections: [ID]\n  duration: Int\n  id: ID!\n\n  \"\"\"How this slot should be repeated\"\"\"\n  rrule: String\n  start: String\n}\n\n\"\"\"\nA soundtrack is a week-long, curated collection of music hand-picked for commercial use\n\"\"\"\ntype Soundtrack implements Node {\n  \"\"\"The curator of the soundtrack\"\"\"\n  curator: Curator\n  description: String\n  id: ID!\n  name: String\n\n  \"\"\"How the soundtrack should be presented visually\"\"\"\n  presentation(product: Product = soundtrack): Presentation\n  shortDescription: String\n\n  \"\"\"\n  A summary of the soundtrack's music.\n  Must provide a market as an ISO country since a soundtrack's content\n  may differ based on market.\n  \"\"\"\n  summary(country: String!): SoundtrackSummary\n}\n\n\"\"\"\nA summary describing the soundtrack\n\n\"\"\"\ntype SoundtrackSummary {\n  \"\"\"\n  Samples of artists that well represent the overall sound of the soundtrack\n  \"\"\"\n  featuredArtists(after: String, before: String, first: Int, last: Int): FeaturedArtistConnection\n\n  \"\"\"\n  Samples of tracks that well represent the overall sound of the soundtrack\n  \"\"\"\n  featuredSongs(after: String, before: String, first: Int, last: Int): TrackConnection\n}\n\n\"\"\"A Sound Zone\"\"\"\ntype SoundZone implements Node {\n  \"\"\"The account the sound zone belongs to\"\"\"\n  account: Account\n\n  \"\"\"The sound zone's paired player\"\"\"\n  device: Device\n  errors(after: String, before: String, first: Int, last: Int, state: ErrorState): ErrorConnection\n  id: ID!\n\n  \"\"\"If the sound zone is paired with a player or not\"\"\"\n  isPaired: Boolean\n\n  \"\"\"The location the sound zone belongs to\"\"\"\n  location: Location\n  name: String\n\n  \"\"\"The currently playing track (if any)\"\"\"\n  nowPlaying: NowPlaying\n\n  \"\"\"The URL for the sound zone's now playing display\"\"\"\n  nowPlayingDisplayUrl: String\n\n  \"\"\"The music source currently assigned to the sound zone\"\"\"\n  playFrom: PlaybackSource\n\n  \"\"\"Information about the playback\"\"\"\n  playback: Playback\n\n  \"\"\"The pairing code for the remote\"\"\"\n  remoteCode: String!\n\n  \"\"\"\n  A short id that can be shared publically. Used by e.g the now playing application.\n  \"\"\"\n  shortId: String!\n\n  \"\"\"Information about the subscription\"\"\"\n  subscription: SoundZoneSubscription\n}\n\ntype SoundZoneConnection {\n  edges: [SoundZoneEdge]\n  pageInfo: PageInfo!\n}\n\ntype SoundZoneEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge\"\"\"\n  node: SoundZone\n}\n\n\"\"\"Subscription information\"\"\"\ntype SoundZoneSubscription {\n  \"\"\"If this sound zone has an active subscription or not\"\"\"\n  isActive: Boolean\n}\n\ninput SoundZoneUpdateInput {\n  soundZone: ID!\n}\n\ntype SoundZoneUpdatePayload {\n  soundZone: SoundZone\n}\n\ntype StaffRemote {\n  musicLibrary: MusicLibrary\n  soundZone: SoundZone\n}\n\n\"\"\"Thumbnails of multiple sizes. Sizes may change in the future\"\"\"\ntype Thumbnails {\n  large: Image\n  medium: Image\n  mediumSquare: Image\n\n  \"\"\"The original image\"\"\"\n  original: Image\n  small: Image\n  smallSquare: Image\n  tiny: Image\n}\n\ntype Track implements Node {\n  album: Album\n  artists: [Artist]\n\n  \"\"\"The track's duration in milliseconds\"\"\"\n  duration: Int\n  explicit: Boolean\n  id: ID!\n\n  \"\"\"A globally unique ID to identify this recording\"\"\"\n  isrc: String!\n  name: String\n\n  \"\"\"A 30 second preview of the track. Not available for all tracks\"\"\"\n  previewUrl: String\n\n  \"\"\"\n  A URL that can be used to share the track with users. Does not necessarily\n  always point to the same provider (e.g. Spotify)\n  \"\"\"\n  shareUrl: String\n}\n\ntype TrackConnection {\n  edges: [TrackEdge]\n  pageInfo: PageInfo!\n}\n\ntype TrackEdge {\n  \"\"\"A cursor for use in pagination\"\"\"\n  cursor: String!\n\n  \"\"\"The item at the end of the edge\"\"\"\n  node: Track\n}\n\n\"\"\"A user\"\"\"\ntype User {\n  \"\"\"A list of the accounts the user has access to\"\"\"\n  accounts(after: String, before: String, first: Int, last: Int): AccountConnection\n  email: String\n  id: ID!\n  name: String\n}\n\nunion Viewer = User | PublicAPIClient | Device | StaffRemote\n\n\"\"\"Volume can represent values between 0 and 16.\"\"\"\nscalar Volume\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 68,
      "containsCycle": true,
      "numDefinitions": 90
    }
  ],
  "metrics": {
    "created_at": "2018-12-12T07:15:33Z",
    "updated_at": "2019-07-18T09:19:45Z",
    "pushed_at": "2019-07-18T09:19:43Z",
    "issues": 0,
    "watchers": 9,
    "fork_count": 0,
    "has_wiki_enabled": false,
    "license": "mit",
    "pull_requests": 1,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 1,
    "releases": 0,
    "stargazers": 1
  }
}