{
  "repo_name": "mediacccde-graphql",
  "repo_full_name": "barnslig/mediacccde-graphql",
  "repo_owner": "barnslig",
  "repo_description": "Query media.ccc.de using GraphQL",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "src/schema.graphql",
      "sha": "57867c56bd2c7744363c2e1aa03817fd188184fd",
      "url": "https://api.github.com/repositories/165055821/contents/src/schema.graphql?ref=7a1d9aef1faa09de87ba9ac532444cbf77cba740",
      "git_url": "https://api.github.com/repositories/165055821/git/blobs/57867c56bd2c7744363c2e1aa03817fd188184fd",
      "html_url": "https://github.com/barnslig/mediacccde-graphql/blob/7a1d9aef1faa09de87ba9ac532444cbf77cba740/src/schema.graphql",
      "content": "# An ISO 8601 encoded date string.\nscalar Date\n\n# An ISO 8601 encoded UTC date string.\nscalar DateTime\n\n# An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.\nscalar URI\n\n# An object with an ID.\ninterface Node {\n  # ID of the object.\n  id: ID!\n}\n\n# Possible directions in which to order a list of items when provided an `orderBy` argument.\nenum OrderDirection {\n  # Specifies an ascending order for a given `orderBy` argument.\n  ASC\n\n  # Specifies a descending order for a given `orderBy` argument.\n  DESC\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n}\n\n# Ways in which lists of mirrors can be ordered upon return.\ninput MirrorOrder {\n  # The direction in which to order mirrors by the specified field.\n  direction: OrderDirection!\n\n  # The field in which to order mirrors by.\n  field: MirrorOrderField!\n}\n\n# Properties by which mirror connections can be ordered.\nenum MirrorOrderField {\n  # Order mirrors by amount of mirrored files\n  fileCount\n\n  # Order mirrors by last sync time\n  lastSync\n\n  # Order mirrors by amount of monthly traffic\n  monthBytes\n\n  # Order mirrors by amount of monthly downloads\n  monthDownloads\n}\n\n# A file mirror.\ntype Mirror implements Node {\n  id: ID!\n\n  # The Autonomous System Number of the mirror's network.\n  asnum: Int\n\n  # A two-letter continent code, e.g. EU, US.\n  continentCode: String\n\n  # An ISO 3166-1 alpha-2 encoded two-letter country code, e.g. DE, NA.\n  countryCodes: String\n\n  # Whether the mirror is enabled.\n  enabled: Boolean\n\n  # The amount of files on this mirror.\n  fileCount: Int\n\n  # A URL pointing to the mirror's root.\n  httpUrl: URI\n\n  # Identifies the date and time of the last time the mirror was synced.\n  lastSync: DateTime\n\n  # The mirror's latitude.\n  latitude: Float\n\n  # The mirror's longitude\n  longitude: Float\n\n  # The amount of bytes this mirror transmitted during the current month.\n  monthBytes: String\n\n  # The amount of downloads from this mirror during the current month.\n  monthDownloads: Int\n\n  # A URL pointing to the logo of the mirror's sponsor.\n  sponsorLogoUrl: URI\n\n  # The name of the mirror's sponsor.\n  sponsorName: String\n\n  # A URL pointing to the website of the mirror's sponsor.\n  sponsorUrl: URI\n\n  # Whether the mirror is reachable.\n  up: Boolean\n}\n\n# The connection type for Mirror.\ntype MirrorConnection {\n  # A list of nodes.\n  nodes: [Mirror]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Identifies the total count of items in the connection.\n  totalCount: Int!\n}\n\n# Ways in which lists of news can be ordered upon return.\ninput NewsOrder {\n  # The direction in which to order news by the specified field.\n  direction: OrderDirection!\n\n  # The field in which to order news by.\n  field: NewsOrderField!\n}\n\n# Properties by which news connections can be ordered.\nenum NewsOrderField {\n  # Order news by creation time\n  createdAt\n\n  # Order news by update time\n  updatedAt\n}\n\n# A news entry.\ntype News implements Node {\n  id: ID!\n\n  # The title of this news entry.\n  title: String!\n\n  # The content of this news entry.\n  content: String!\n\n  # Identifies the date and time when the object was created.\n  createdAt: DateTime!\n\n  # Identifies the date and time when the object was last updated.\n  updatedAt: DateTime!\n}\n\n# The connection type for News.\ntype NewsConnection {\n  # A list of nodes.\n  nodes: [News]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Identifies the total count of items in the connection.\n  totalCount: Int!\n}\n\n# The availability state of a recording.\nenum RecordingState {\n  # Recording just got registered in the system\n  notPresent\n\n  # Recording received source URL\n  new\n\n  # Recording is downloading into the CDN\n  downloading\n\n  # Recording has finished downloading and is ready for distribution\n  downloaded\n}\n\n# A recording.\ntype Recording implements Node {\n  id: ID!\n\n  # The conference this event belongs to.\n  conference: Conference\n\n  # The event this recording belongs to.\n  event: Event\n\n  # The height of this recording in px, if it is a video.\n  height: Int\n\n  # Whether this recording is a video with at least 720p resolution.\n  highQuality: Boolean\n\n  # The recordings's language, encoded as ISO 639-2.\n  language: String\n\n  # The recordings's duration in seconds.\n  duration: Int\n\n  # The recordings's mime type, e.g. video/mp4.\n  mimeType: String\n\n  # A URL pointing to the CDN location of this recording.\n  recordingUrl: URI\n\n  # The recording's approximate size in megabytes.\n  size: Int\n\n  # The recording's availability state. Wait for \"downloaded\".\n  state: RecordingState!\n\n  # Identifies the date and time when the object was last updated.\n  updatedAt: DateTime!\n\n  # The width of this recording in px, if it is a video.\n  width: Int\n}\n\n# The connection type for Recording.\ntype RecordingConnection {\n  # A list of nodes.\n  nodes: [Recording]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Identifies the total count of items in the connection.\n  totalCount: Int!\n}\n\n# Ways in which lists of events can be ordered upon return.\ninput EventOrder {\n  # The direction in which to order events by the specified field.\n  direction: OrderDirection!\n\n  # The field in which to order events by.\n  field: EventOrderField!\n}\n\n# Properties by which event connections can be ordered.\nenum EventOrderField {\n  # Order events by date\n  date\n\n  # Order events by duration\n  duration\n\n  # Order events by release date\n  releaseDate\n\n  # Order events by amount of views\n  viewCount\n}\n\n# An event / a lecture.\ntype Event implements Node {\n  id: ID!\n\n  # The conference this event belongs to.\n  conference: Conference\n\n  # Identifies the date and time when the event took place.\n  date: DateTime\n\n  # The event's description.\n  description: String\n\n  # The event's duration in seconds.\n  duration: Int\n\n  # A URL pointing to the event's website.\n  link: URI\n\n  # The event's original language, encoded as ISO 639-2.\n  originalLanguage: String\n\n  # Names of persons that held the event.\n  persons: [String]\n\n  # A URL pointing to a preview/poster image of the event.\n  posterUrl: URI\n\n  # Whether the event is promoted right now.\n  promoted: Boolean\n\n  # A list of recordings at this event.\n  recordings(\n    # Skip the first _n_ edges\n    offset: Int\n\n    # Limit the amount of returned edges\n    limit: Int\n  ): RecordingConnection!\n\n  # A list of related events, ordered by decreasing relevance.\n  relatedEvents(\n    # Skip the first _n_ related events.\n    offset: Int\n\n    # Limit the amount of returned related events.\n    limit: Int\n  ): EventConnection!\n\n  # Identifies the date when the event got released.\n  releaseDate: Date\n\n  # The URL slug of this event.\n  slug: String\n\n  # The event's subtitle that may be displayed below the title.\n  subtitle: String\n\n  # Tags/keywords describing the event.\n  tags: [String]\n\n  # A URL pointing to a thumbnail describing the event.\n  thumbUrl: URI\n\n  # The title of this event.\n  title: String\n\n  # Identifies the date and time when the object was last updated.\n  updatedAt: DateTime\n\n  # The amount of views of this event.\n  viewCount: Int\n}\n\n# The connection type for Event.\ntype EventConnection {\n  # A list of nodes.\n  nodes: [Event]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Identifies the total count of items in the connection.\n  totalCount: Int!\n}\n\n# Ways in which lists of conferences can be ordered upon return.\ninput ConferenceOrder {\n  # The direction in which to order conferences by the specified field.\n  direction: OrderDirection!\n\n  # The field in which to order conferences by.\n  field: ConferenceOrderField!\n}\n\n# Properties by which conference connections can be ordered.\nenum ConferenceOrderField {\n  # Order conferences by last event release time\n  eventLastReleasedAt\n\n  # Order conferences by update time\n  updatedAt\n}\n\n# A group of multiple Events, e.g. a conference, lecture series, ...\ntype Conference implements Node {\n  id: ID!\n\n  # The acronym of this conference, e.g. 35c3.\n  acronym: String!\n\n  # The aspect ratio of the conference's recordings.\n  aspectRatio: String\n\n  # Identifies the date and time when a event was last released.\n  eventLastReleasedAt: Date\n\n  # A URL pointing to the conference's logo.\n  logoUrl: URI\n\n  # A URL pointing to the root of all recording files of this conference.\n  recordingsUrl: String\n\n  # A URL pointing to the conference's frab xml schedule.\n  scheduleUrl: String\n\n  # The URL slug of this conference.\n  slug: String\n\n  # The title of this conference.\n  title: String\n\n  # Identifies the date and time when the object was last updated.\n  updatedAt: DateTime\n\n  # A list of events that took place at this conference.\n  events(\n    # Skip the first _n_ edges.\n    offset: Int\n\n    # Limit the amount of returned edges.\n    limit: Int\n\n    # Ordering options for events returned from the connection.\n    orderBy: EventOrder\n  ): EventConnection!\n}\n\n# The connection type for Conference.\ntype ConferenceConnection {\n  # A list of nodes.\n  nodes: [Conference]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Identifies the total count of items in the connection.\n  totalCount: Int!\n}\n\n# The query root.\ntype Query {\n  # Fetch a list of mirrors.\n  mirrors(\n    # Skip the first _n_ edges.\n    offset: Int\n\n    # Limit the amount of returned edges.\n    limit: Int\n\n    # Ordering options for mirrors returned from the connection.\n    orderBy: MirrorOrder\n  ): MirrorConnection!\n\n  # Look up a mirror.\n  mirror(\n    # The mirror's ID.\n    id: ID!\n  ): Mirror\n\n  # Fetch a list of news.\n  news(\n    # Skip the first _n_ edges.\n    offset: Int\n\n    # Limit the amount of returned edges.\n    limit: Int\n\n    # Ordering options for news returned from the connection.\n    orderBy: NewsOrder\n  ): NewsConnection!\n\n  # Fetches an object given its ID.\n  node(\n    # ID of the object.\n    id: ID!\n  ): Node\n\n  # Fetch a list of conferences.\n  conferences(\n    # Skip the first _n_ edges.\n    offset: Int\n\n    # Limit the amount of returned edges.\n    limit: Int\n\n    # Ordering options for conferences returned from the connection.\n    orderBy: ConferenceOrder\n  ): ConferenceConnection!\n\n  # Look up a conference.\n  conference(\n    # The conference's ID or acronym.\n    id: ID!\n  ): Conference\n\n  # Fetch a list of events.\n  events(\n    # Skip the first _n_ edges.\n    offset: Int\n\n    # Limit the amount of returned edges.\n    limit: Int\n\n    # Ordering options for events returned from the connection.\n    orderBy: EventOrder\n  ): EventConnection!\n\n  # Fetch a list of promoted events.\n  eventsPromoted(\n    # Skip the first _n_ edges.\n    offset: Int\n\n    # Limit the amount of returned edges.\n    limit: Int\n  ): EventConnection!\n\n  # Perform a search on events.\n  eventsSearch(\n    # Skip the first _n_ edges.\n    offset: Int\n\n    # Limit the amount of returned edges.\n    limit: Int\n\n    # The search string to look for.\n    query: String!\n  ): EventConnection!\n\n  # Look up an event.\n  event(\n    # The event's ID or slug.\n    id: ID!\n  ): Event\n\n  # Look up a recording.\n  recording(\n    # The recording's ID.\n    id: ID!\n  ): Recording\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 12,
      "containsCycle": true,
      "numDefinitions": 26
    }
  ],
  "metrics": {
    "created_at": "2019-01-10T12:25:56Z",
    "updated_at": "2019-01-31T16:13:25Z",
    "pushed_at": "2019-05-02T21:58:58Z",
    "issues": 3,
    "watchers": 1,
    "fork_count": 1,
    "has_wiki_enabled": false,
    "license": "mit",
    "pull_requests": 1,
    "pull_requests_open": 1,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}