{
  "repo_name": "react-fullstack-playground",
  "repo_full_name": "gabz75/react-fullstack-playground",
  "repo_owner": "gabz75",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "server/data/schema.graphql",
      "sha": "be1a7d39a33b7f6c94c765d14773843c2e68e7f7",
      "url": "https://api.github.com/repositories/74035187/contents/server/data/schema.graphql?ref=a2970d610ee60ded3f0f8a96249498ac2646e3ab",
      "git_url": "https://api.github.com/repositories/74035187/git/blobs/be1a7d39a33b7f6c94c765d14773843c2e68e7f7",
      "html_url": "https://github.com/gabz75/react-fullstack-playground/blob/a2970d610ee60ded3f0f8a96249498ac2646e3ab/server/data/schema.graphql",
      "content": "input AddFeatureInput {\n  name: String!\n  description: String!\n  url: String!\n  clientMutationId: String\n}\n\ntype AddFeaturePayload {\n  featureEdge: FeatureEdge\n  viewer: User\n  clientMutationId: String\n}\n\n# A car\ntype Car implements Node {\n  # The ID of an object\n  id: ID!\n\n  # Car's year\n  year: Int\n\n  # Car's color\n  color: String\n\n  # Car's model\n  model: String\n\n  # Car's make\n  make: String\n}\n\n# Feature integrated in our starter kit\ntype Feature implements Node {\n  # The ID of an object\n  id: ID!\n\n  # Name of the feature\n  name: String\n\n  # Description of the feature\n  description: String\n\n  # Url of the feature\n  url: String\n}\n\n# A connection to a list of items.\ntype FeatureConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [FeatureEdge]\n}\n\n# An edge in a connection.\ntype FeatureEdge {\n  # The item at the end of the edge\n  node: Feature\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype Mutation {\n  addFeature(input: AddFeatureInput!): AddFeaturePayload\n  updateCar(input: UpdateCarInput!): UpdateCarPayload\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype Query {\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n  root: Root\n  viewer: User\n  car(id: String!): Car\n}\n\ntype Root {\n  cars(limit: Int!, offset: Int!): [Car]\n}\n\ninput UpdateCarInput {\n  id: ID!\n  make: String!\n  model: String!\n  year: Int\n  color: String!\n  clientMutationId: String\n}\n\ntype UpdateCarPayload {\n  car: Car\n  clientMutationId: String\n}\n\n# A person who uses our app\ntype User implements Node {\n  # The ID of an object\n  id: ID!\n\n  # Features that I have\n  features(after: String, first: Int, before: String, last: Int): FeatureConnection\n\n  # Users's username\n  username: String\n\n  # User's website\n  website: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 11,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 14
    }
  ],
  "metrics": {
    "created_at": "2016-11-17T14:34:42Z",
    "updated_at": "2016-11-17T14:35:17Z",
    "pushed_at": "2016-11-17T15:27:36Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}