{
  "repo_name": "schema",
  "repo_full_name": "anontown/schema",
  "repo_owner": "anontown",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "app.gql",
      "path": "app.gql",
      "sha": "723cae2c466220c4dbce76c49b9d18bca0c92874",
      "url": "https://api.github.com/repositories/178519958/contents/app.gql?ref=96bdf5310eaddf12c7f68d4b3ce226d1e5587a98",
      "git_url": "https://api.github.com/repositories/178519958/git/blobs/723cae2c466220c4dbce76c49b9d18bca0c92874",
      "html_url": "https://github.com/anontown/schema/blob/96bdf5310eaddf12c7f68d4b3ce226d1e5587a98/app.gql",
      "content": "scalar DateTime\n\n# client app\ntype Client{\n  # client id\n  id: ID!\n  name: String!\n  # callback url\n  url: String!\n  # yours\n  self: Boolean\n  # create date\n  date: DateTime!\n  # update date\n  update: DateTime!\n}\n\n# topic edit history\ntype History{\n  # history id\n  id: ID!\n  # target topic\n  topic: TopicNormal!\n  # topic title\n  title: String!\n  # topic tags\n  tags: [String!]!\n  # topic text\n  text: String!\n  # history create date\n  date: DateTime!\n  # hash(user,date,topic)\n  hash: String!\n  # yours\n  self:Boolean\n}\n\n# notice message\ntype Msg{\n  # msg id\n  id: ID!\n  # is private msg\n  priv: Boolean\n  # msg text\n  text: String!\n  # create date\n  date: DateTime!\n}\n\n# user profile\ntype Profile{\n  # profile id\n  id: ID!\n  # yours\n  self: Boolean\n  # profile name\n  name: String!\n  # profile text\n  text: String!\n  # create date\n  date: DateTime!\n  # update\n  update: DateTime!\n  # screen name\n  sn: String!\n}\n\n# res vote flag\nenum VoteFlag{\n  # up voted\n  uv\n  # down voted\n  dv\n  # not voted\n  not\n}\n\n# res delete flag\nenum ResDeleteFlag{\n  # by user\n  self\n  # by manager\n  freeze\n}\n\ninterface Res{\n  # res id\n  id: ID!\n  # posted topic\n  topic: Topic!\n  # post date\n  date: DateTime!\n  # yours\n  self: Boolean\n  # up vote count\n  uv: Int!\n  # down vote count\n  dv: Int!\n  # hash(user,topic,date)\n  hash: String!\n  # reply count\n  replyCount: Int!\n  # you vote flag\n  voteFlag: VoteFlag\n}\n\n# normal res\ntype ResNormal implements Res{\n  # res id\n  id: ID!\n  # posted topic\n  topic: Topic!\n  # post date\n  date: DateTime!\n  # yours\n  self: Boolean\n  # up vote count\n  uv: Int!\n  # down vote count\n  dv: Int!\n  # hash(user,topic,date)\n  hash: String!\n  # reply count\n  replyCount: Int!\n  # you vote flag\n  voteFlag: VoteFlag\n\n  # res name\n  name: String\n  # res text\n  text: String!\n  # reply res\n  reply: Res\n  # res profile\n  profile: Profile\n  # is yours reply\n  isReply: Boolean\n}\n\n# post history notice res\ntype ResHistory implements Res{\n  # res id\n  id: ID!\n  # post topic\n  topic: Topic!\n  # post date\n  date: DateTime!\n  # yours\n  self: Boolean\n  # up vote count\n  uv: Int!\n  # down vote count\n  dv: Int!\n  # hash(date,user,topic)\n  hash: String!\n  # was reply count\n  replyCount: Int!\n  # you vote flag\n  voteFlag: VoteFlag\n\n  # target history\n  history: History!\n}\n\n# first res in One/Fork Topic\ntype ResTopic implements Res{\n  # res id\n  id: ID!\n  # post topic\n  topic: Topic!\n  # post date\n  date: DateTime!\n  # yours\n  self: Boolean\n  # up vote count\n  uv: Int!\n  # down vote count\n  dv: Int!\n  # hash(user,topic,date)\n  hash: String!\n  # reply count\n  replyCount: Int!\n  # you vote flag\n  voteFlag: VoteFlag\n}\n\n# new fork topic notice res\ntype ResFork implements Res{\n  # res id\n  id: ID!\n  # post topic\n  topic: Topic!\n  # post date\n  date: DateTime!\n  # yours\n  self: Boolean\n  # up vote count\n  uv: Int!\n  # down vote count\n  dv: Int!\n  # hash(user,topic,date)\n  hash: String!\n  # reply count\n  replyCount: Int!\n  # you vote flag\n  voteFlag: VoteFlag\n\n  # target fork topic\n  fork: TopicFork!\n}\n\n# deteled res\ntype ResDelete implements Res{\n  # res id\n  id: ID!\n  # post topic\n  topic: Topic!\n  # post date\n  date: DateTime!\n  # yours\n  self: Boolean\n  # up vote count\n  uv: Int!\n  # down vote count\n  dv: Int!\n  # hash(user,topic,date)\n  hash: String!\n  # reply count\n  replyCount: Int!\n  # you vote flag\n  voteFlag: VoteFlag\n\n  # delete flag\n  flag: ResDeleteFlag!\n}\n\ntype TokenReq{\n  token: ID!\n  key: String!\n}\n\ninterface Token{\n  id: ID!\n  key: String!\n  date: DateTime!\n}\n\ntype TokenMaster implements Token{\n  id: ID!\n  key: String!\n  date: DateTime!\n}\n\ntype TokenGeneral implements Token{\n  id: ID!\n  key: String!\n  date: DateTime!\n\n  client:Client!\n}\n\ninterface Topic{\n  id: ID!\n  title: String!\n  update: DateTime!\n  date: DateTime!\n  resCount: Int!\n  active: Boolean!\n}\n\ninterface TopicSearch{\n  id: ID!\n  title: String!\n  update: DateTime!\n  date: DateTime!\n  resCount: Int!\n  active: Boolean!\n\n  tags: [String!]!\n  text:String!\n}\n\ntype TopicNormal implements Topic&TopicSearch{\n  id: ID!\n  title: String!\n  update: DateTime!\n  date: DateTime!\n  resCount: Int!\n  active: Boolean!\n\n  tags: [String!]!\n  text:String!\n}\n\ntype TopicOne implements Topic&TopicSearch{\n  id: ID!\n  title: String!\n  update: DateTime!\n  date: DateTime!\n  resCount: Int!\n  active: Boolean!\n\n  tags: [String!]!\n  text:String!\n}\n\ntype TopicFork implements Topic{\n  id: ID!\n  title: String!\n  update: DateTime!\n  date: DateTime!\n  resCount: Int!\n  active: Boolean!\n\n  parent:TopicNormal!\n}\n\ntype Storage{\n  key:String!\n  value:String!\n}\n\ninput DateQuery{\n  date:DateTime!\n  type:DateType!\n}\n\nenum DateType{\n  gt\n  gte\n  lt\n  lte\n}\n\ntype User{\n  id:ID!\n  sn:String!\n}\n\ntype Tags{\n  name:String!\n  count:Int!\n}\n\ninput ClientQuery{\n  id:[ID!]\n  self:Boolean\n}\n\ninput HistoryQuery{\n  id:[ID!]\n  topic:[ID!]\n  date:DateQuery\n}\n\ninput MsgQuery{\n  id:[ID!]\n  date:DateQuery\n}\n\ninput ProfileQuery{\n  id:[ID!]\n  self:Boolean\n}\n\ninput ResQuery{\n  id:[ID!]\n  topic:ID\n  notice:Boolean\n  hash:String\n  reply:ID\n  profile:ID\n  self:Boolean\n  text:String\n  date:DateQuery\n}\n\ninput AuthUser{\n  id:String\n  sn:String\n  pass:String!\n}\n\ninput StorageQuery{\n  key:[String!]\n}\n\ninput TopicQuery{\n  id:[ID!]\n  title:String\n  tags:[String!]\n  activeOnly:Boolean\n  parent:ID\n}\n\ntype Query{\n  clients(query:ClientQuery!):[Client!]!\n  histories(query:HistoryQuery!,limit:Int!=100):[History!]!\n  msgs(query:MsgQuery!,limit:Int!=100):[Msg!]!\n  profiles(query:ProfileQuery!):[Profile!]!\n  reses(query:ResQuery!,limit:Int!=100):[Res!]!\n  storages(query:StorageQuery!):[Storage!]!\n  token:Token!\n  tokens:[Token!]!\n  topics(query:TopicQuery!,skip:Int!=0,limit:Int!=100):[Topic!]!\n  topicTags(limit:Int!=100):[Tags!]!\n  userID(sn:String!):ID!\n  userSN(id:ID!):String!\n  user:User!\n}\n\nenum VoteType{\n  uv\n  dv\n  cv\n}\n\ntype UpdateUserResponse{\n  user:User!\n  token:TokenMaster!\n}\n\ntype CreateUserResponse{\n  user:User!\n  token:TokenMaster!\n}\n\ntype CreateTokenGeneralResponse{\n  token:TokenGeneral!\n  req:TokenReq!\n}\n\ntype Mutation {\n  createClient(name:String!,url:String!):Client!\n  updateClient(id:ID!,name:String,url:String):Client!\n  createProfile(name:String!,text:String!,sn:String!):Profile!\n  updateProfile(id:ID!,name:String,text:String,sn:String):Profile!\n  createRes(topic:String!,name:String,text:String!,reply:String,profile:String,age:Boolean!):ResNormal!\n  voteRes(res:ID!,type:VoteType!):Res!\n  delRes(res:ID!):ResDelete!\n  setStorage(key:String!,value:String!):Storage!\n  delStorage(key:String!):Boolean\n  delTokenClient(client:ID!):Boolean\n  createTokenGeneral(client:ID!):CreateTokenGeneralResponse!\n  createTokenReq:TokenReq!\n  createTokenMaster(auth:AuthUser!):TokenMaster!\n  authTokenReq(id:ID!,key:String!):TokenGeneral!\n  createTopicNormal(title:String!,tags:[String!]!,text:String!):TopicNormal!\n  createTopicOne(title:String!,tags:[String!]!,text:String!):TopicOne!\n  createTopicFork(title:String!,parent:ID!):TopicFork!\n  updateTopic(id:ID!,title:String,tags:[String!],text:String):TopicNormal!\n  createUser(sn:String!,pass:String!,recaptcha:String!):CreateUserResponse!\n  updateUser(sn:String,pass:String,auth:AuthUser!):UpdateUserResponse!\n}\n\ntype ResSubscript{\n  res:Res!\n  count:Int!\n}\n\ntype Subscription {\n  resAdded(topic:ID!):ResSubscript!\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 25,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 44
    }
  ],
  "metrics": {
    "created_at": "2019-03-30T06:17:09Z",
    "updated_at": "2019-06-16T09:48:27Z",
    "pushed_at": "2019-06-16T09:48:15Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}