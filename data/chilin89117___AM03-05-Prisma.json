{
  "repo_name": "AM03-05-Prisma",
  "repo_full_name": "chilin89117/am03-05-prisma",
  "repo_owner": "chilin89117",
  "repo_description": "Blog Project from Udemy course \"The Modern GraphQL Bootcamp (Advanced Node.js)\" by Andrew Mead",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "prisma.graphql",
      "path": "src/generated/prisma.graphql",
      "sha": "8899b5a5dfb4fa3f5dda84dccfff6bf2903cc339",
      "url": "https://api.github.com/repositories/157053257/contents/src/generated/prisma.graphql?ref=ce3dfa66f0e06cc482158bc8a2ae1a987b2bf83c",
      "git_url": "https://api.github.com/repositories/157053257/git/blobs/8899b5a5dfb4fa3f5dda84dccfff6bf2903cc339",
      "html_url": "https://github.com/chilin89117/AM03-05-Prisma/blob/ce3dfa66f0e06cc482158bc8a2ae1a987b2bf83c/src/generated/prisma.graphql",
      "content": "# source: http://192.168.99.100:4466\n# timestamp: Fri Nov 09 2018 12:13:30 GMT-0800 (Pacific Standard Time)\n\ntype AggregateComment {\n  count: Int!\n}\n\ntype AggregatePost {\n  count: Int!\n}\n\ntype AggregateUser {\n  count: Int!\n}\n\ntype BatchPayload {\n  \"\"\"The number of nodes that have been affected by the Batch operation.\"\"\"\n  count: Long!\n}\n\ntype Comment implements Node {\n  id: ID!\n  text: String!\n  author: User!\n  post: Post!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype CommentConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [CommentEdge]!\n  aggregate: AggregateComment!\n}\n\ninput CommentCreateInput {\n  text: String!\n  author: UserCreateOneWithoutCommentsInput!\n  post: PostCreateOneWithoutCommentsInput!\n}\n\ninput CommentCreateManyWithoutAuthorInput {\n  create: [CommentCreateWithoutAuthorInput!]\n  connect: [CommentWhereUniqueInput!]\n}\n\ninput CommentCreateManyWithoutPostInput {\n  create: [CommentCreateWithoutPostInput!]\n  connect: [CommentWhereUniqueInput!]\n}\n\ninput CommentCreateWithoutAuthorInput {\n  text: String!\n  post: PostCreateOneWithoutCommentsInput!\n}\n\ninput CommentCreateWithoutPostInput {\n  text: String!\n  author: UserCreateOneWithoutCommentsInput!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype CommentEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Comment!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum CommentOrderByInput {\n  id_ASC\n  id_DESC\n  text_ASC\n  text_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype CommentPreviousValues {\n  id: ID!\n  text: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype CommentSubscriptionPayload {\n  mutation: MutationType!\n  node: Comment\n  updatedFields: [String!]\n  previousValues: CommentPreviousValues\n}\n\ninput CommentSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [CommentSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [CommentSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [CommentSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: CommentWhereInput\n}\n\ninput CommentUpdateInput {\n  text: String\n  author: UserUpdateOneRequiredWithoutCommentsInput\n  post: PostUpdateOneRequiredWithoutCommentsInput\n}\n\ninput CommentUpdateManyMutationInput {\n  text: String\n}\n\ninput CommentUpdateManyWithoutAuthorInput {\n  create: [CommentCreateWithoutAuthorInput!]\n  connect: [CommentWhereUniqueInput!]\n  disconnect: [CommentWhereUniqueInput!]\n  delete: [CommentWhereUniqueInput!]\n  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]\n  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]\n}\n\ninput CommentUpdateManyWithoutPostInput {\n  create: [CommentCreateWithoutPostInput!]\n  connect: [CommentWhereUniqueInput!]\n  disconnect: [CommentWhereUniqueInput!]\n  delete: [CommentWhereUniqueInput!]\n  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]\n  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]\n}\n\ninput CommentUpdateWithoutAuthorDataInput {\n  text: String\n  post: PostUpdateOneRequiredWithoutCommentsInput\n}\n\ninput CommentUpdateWithoutPostDataInput {\n  text: String\n  author: UserUpdateOneRequiredWithoutCommentsInput\n}\n\ninput CommentUpdateWithWhereUniqueWithoutAuthorInput {\n  where: CommentWhereUniqueInput!\n  data: CommentUpdateWithoutAuthorDataInput!\n}\n\ninput CommentUpdateWithWhereUniqueWithoutPostInput {\n  where: CommentWhereUniqueInput!\n  data: CommentUpdateWithoutPostDataInput!\n}\n\ninput CommentUpsertWithWhereUniqueWithoutAuthorInput {\n  where: CommentWhereUniqueInput!\n  update: CommentUpdateWithoutAuthorDataInput!\n  create: CommentCreateWithoutAuthorInput!\n}\n\ninput CommentUpsertWithWhereUniqueWithoutPostInput {\n  where: CommentWhereUniqueInput!\n  update: CommentUpdateWithoutPostDataInput!\n  create: CommentCreateWithoutPostInput!\n}\n\ninput CommentWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [CommentWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [CommentWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [CommentWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  text: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  text_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  text_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  text_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  text_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  text_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  text_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  text_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  text_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  text_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  text_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  text_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  text_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  text_not_ends_with: String\n  createdAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  createdAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  createdAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  createdAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  createdAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  createdAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  createdAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  updatedAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  updatedAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  updatedAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  updatedAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  updatedAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  updatedAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  updatedAt_gte: DateTime\n  author: UserWhereInput\n  post: PostWhereInput\n}\n\ninput CommentWhereUniqueInput {\n  id: ID\n}\n\nscalar DateTime\n\n\"\"\"Raw JSON value\"\"\"\nscalar Json\n\n\"\"\"\nThe `Long` scalar type represents non-fractional signed whole numeric values.\nLong can represent values between -(2^63) and 2^63 - 1.\n\"\"\"\nscalar Long\n\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  createPost(data: PostCreateInput!): Post!\n  createComment(data: CommentCreateInput!): Comment!\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment\n  deleteUser(where: UserWhereUniqueInput!): User\n  deletePost(where: PostWhereUniqueInput!): Post\n  deleteComment(where: CommentWhereUniqueInput!): Comment\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!\n  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!\n  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!\n  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!\n  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!\n  deleteManyUsers(where: UserWhereInput): BatchPayload!\n  deleteManyPosts(where: PostWhereInput): BatchPayload!\n  deleteManyComments(where: CommentWhereInput): BatchPayload!\n  executeRaw(database: PrismaDatabase, query: String!): Json!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\ntype Post implements Node {\n  id: ID!\n  title: String!\n  body: String!\n  published: Boolean!\n  author: User!\n  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype PostConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [PostEdge]!\n  aggregate: AggregatePost!\n}\n\ninput PostCreateInput {\n  title: String!\n  body: String!\n  published: Boolean!\n  author: UserCreateOneWithoutPostsInput!\n  comments: CommentCreateManyWithoutPostInput\n}\n\ninput PostCreateManyWithoutAuthorInput {\n  create: [PostCreateWithoutAuthorInput!]\n  connect: [PostWhereUniqueInput!]\n}\n\ninput PostCreateOneWithoutCommentsInput {\n  create: PostCreateWithoutCommentsInput\n  connect: PostWhereUniqueInput\n}\n\ninput PostCreateWithoutAuthorInput {\n  title: String!\n  body: String!\n  published: Boolean!\n  comments: CommentCreateManyWithoutPostInput\n}\n\ninput PostCreateWithoutCommentsInput {\n  title: String!\n  body: String!\n  published: Boolean!\n  author: UserCreateOneWithoutPostsInput!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PostEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Post!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum PostOrderByInput {\n  id_ASC\n  id_DESC\n  title_ASC\n  title_DESC\n  body_ASC\n  body_DESC\n  published_ASC\n  published_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype PostPreviousValues {\n  id: ID!\n  title: String!\n  body: String!\n  published: Boolean!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype PostSubscriptionPayload {\n  mutation: MutationType!\n  node: Post\n  updatedFields: [String!]\n  previousValues: PostPreviousValues\n}\n\ninput PostSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [PostSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [PostSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [PostSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: PostWhereInput\n}\n\ninput PostUpdateInput {\n  title: String\n  body: String\n  published: Boolean\n  author: UserUpdateOneRequiredWithoutPostsInput\n  comments: CommentUpdateManyWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  title: String\n  body: String\n  published: Boolean\n}\n\ninput PostUpdateManyWithoutAuthorInput {\n  create: [PostCreateWithoutAuthorInput!]\n  connect: [PostWhereUniqueInput!]\n  disconnect: [PostWhereUniqueInput!]\n  delete: [PostWhereUniqueInput!]\n  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]\n  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]\n}\n\ninput PostUpdateOneRequiredWithoutCommentsInput {\n  create: PostCreateWithoutCommentsInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithoutCommentsDataInput\n  upsert: PostUpsertWithoutCommentsInput\n}\n\ninput PostUpdateWithoutAuthorDataInput {\n  title: String\n  body: String\n  published: Boolean\n  comments: CommentUpdateManyWithoutPostInput\n}\n\ninput PostUpdateWithoutCommentsDataInput {\n  title: String\n  body: String\n  published: Boolean\n  author: UserUpdateOneRequiredWithoutPostsInput\n}\n\ninput PostUpdateWithWhereUniqueWithoutAuthorInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutAuthorDataInput!\n}\n\ninput PostUpsertWithoutCommentsInput {\n  update: PostUpdateWithoutCommentsDataInput!\n  create: PostCreateWithoutCommentsInput!\n}\n\ninput PostUpsertWithWhereUniqueWithoutAuthorInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutAuthorDataInput!\n  create: PostCreateWithoutAuthorInput!\n}\n\ninput PostWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [PostWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [PostWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [PostWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  title: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  title_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  title_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  title_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  title_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  title_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  title_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  title_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  title_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  title_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  title_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  title_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  title_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  title_not_ends_with: String\n  body: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  body_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  body_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  body_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  body_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  body_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  body_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  body_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  body_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  body_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  body_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  body_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  body_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  body_not_ends_with: String\n  published: Boolean\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  published_not: Boolean\n  createdAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  createdAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  createdAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  createdAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  createdAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  createdAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  createdAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  updatedAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  updatedAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  updatedAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  updatedAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  updatedAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  updatedAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  updatedAt_gte: DateTime\n  author: UserWhereInput\n  comments_every: CommentWhereInput\n  comments_some: CommentWhereInput\n  comments_none: CommentWhereInput\n}\n\ninput PostWhereUniqueInput {\n  id: ID\n}\n\nenum PrismaDatabase {\n  default\n}\n\ntype Query {\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!\n  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!\n  user(where: UserWhereUniqueInput!): User\n  post(where: PostWhereUniqueInput!): Post\n  comment(where: CommentWhereUniqueInput!): Comment\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!\n  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!\n\n  \"\"\"Fetches an object given its ID\"\"\"\n  node(\n    \"\"\"The ID of an object\"\"\"\n    id: ID!\n  ): Node\n}\n\ntype Subscription {\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload\n  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload\n}\n\ntype User implements Node {\n  id: ID!\n  name: String!\n  email: String!\n  password: String!\n  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]\n  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype UserConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  name: String!\n  email: String!\n  password: String!\n  posts: PostCreateManyWithoutAuthorInput\n  comments: CommentCreateManyWithoutAuthorInput\n}\n\ninput UserCreateOneWithoutCommentsInput {\n  create: UserCreateWithoutCommentsInput\n  connect: UserWhereUniqueInput\n}\n\ninput UserCreateOneWithoutPostsInput {\n  create: UserCreateWithoutPostsInput\n  connect: UserWhereUniqueInput\n}\n\ninput UserCreateWithoutCommentsInput {\n  name: String!\n  email: String!\n  password: String!\n  posts: PostCreateManyWithoutAuthorInput\n}\n\ninput UserCreateWithoutPostsInput {\n  name: String!\n  email: String!\n  password: String!\n  comments: CommentCreateManyWithoutAuthorInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype UserEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: User!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  email_ASC\n  email_DESC\n  password_ASC\n  password_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  name: String!\n  email: String!\n  password: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [UserSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [UserSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [UserSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n}\n\ninput UserUpdateInput {\n  name: String\n  email: String\n  password: String\n  posts: PostUpdateManyWithoutAuthorInput\n  comments: CommentUpdateManyWithoutAuthorInput\n}\n\ninput UserUpdateManyMutationInput {\n  name: String\n  email: String\n  password: String\n}\n\ninput UserUpdateOneRequiredWithoutCommentsInput {\n  create: UserCreateWithoutCommentsInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutCommentsDataInput\n  upsert: UserUpsertWithoutCommentsInput\n}\n\ninput UserUpdateOneRequiredWithoutPostsInput {\n  create: UserCreateWithoutPostsInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostsDataInput\n  upsert: UserUpsertWithoutPostsInput\n}\n\ninput UserUpdateWithoutCommentsDataInput {\n  name: String\n  email: String\n  password: String\n  posts: PostUpdateManyWithoutAuthorInput\n}\n\ninput UserUpdateWithoutPostsDataInput {\n  name: String\n  email: String\n  password: String\n  comments: CommentUpdateManyWithoutAuthorInput\n}\n\ninput UserUpsertWithoutCommentsInput {\n  update: UserUpdateWithoutCommentsDataInput!\n  create: UserCreateWithoutCommentsInput!\n}\n\ninput UserUpsertWithoutPostsInput {\n  update: UserUpdateWithoutPostsDataInput!\n  create: UserCreateWithoutPostsInput!\n}\n\ninput UserWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [UserWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [UserWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [UserWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  email: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  email_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  email_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  email_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  email_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  email_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  email_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  email_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  email_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  email_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  email_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  email_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  email_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  email_not_ends_with: String\n  password: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  password_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  password_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  password_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  password_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  password_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  password_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  password_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  password_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  password_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  password_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  password_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  password_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  password_not_ends_with: String\n  createdAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  createdAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  createdAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  createdAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  createdAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  createdAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  createdAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  updatedAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  updatedAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  updatedAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  updatedAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  updatedAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  updatedAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  updatedAt_gte: DateTime\n  posts_every: PostWhereInput\n  posts_some: PostWhereInput\n  posts_none: PostWhereInput\n  comments_every: CommentWhereInput\n  comments_some: CommentWhereInput\n  comments_none: CommentWhereInput\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n  email: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 83
    }
  ],
  "metrics": {
    "created_at": "2018-11-11T06:20:29Z",
    "updated_at": "2019-05-10T01:58:32Z",
    "pushed_at": "2019-05-10T01:58:31Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}