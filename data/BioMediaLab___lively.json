{
  "repo_name": "lively",
  "repo_full_name": "biomedialab/lively",
  "repo_owner": "BioMediaLab",
  "repo_description": "☀️",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "api/src/schema.graphql",
      "sha": "48a58800ebc6389b79edac0fda32e9d32b4c6aa2",
      "url": "https://api.github.com/repositories/178265433/contents/api/src/schema.graphql?ref=fa266051e7769d257637b6fc28812ac928e1738d",
      "git_url": "https://api.github.com/repositories/178265433/git/blobs/48a58800ebc6389b79edac0fda32e9d32b4c6aa2",
      "html_url": "https://github.com/BioMediaLab/lively/blob/fa266051e7769d257637b6fc28812ac928e1738d/api/src/schema.graphql",
      "content": "### This file was autogenerated by Nexus 0.11.6\n### Do not make changes to this file directly\n\n\n\"\"\"represents one of lively's classes\"\"\"\ntype Class {\n  description: String!\n  files(max: Int): [ClassFile!]!\n\n  \"\"\"Class ID\"\"\"\n  id: String!\n  members(max: Int): [ClassMember!]!\n  myRole: ClassMember!\n  name: String!\n  unit(unit_id: ID): ClassUnit!\n  unitByOrder(order: Int): ClassUnit\n  units(deployed: Boolean): [ClassUnit!]!\n}\n\ntype ClassFile {\n  class: Class!\n  class_id: ID!\n  creator: User!\n  description: String\n  file_key: String!\n  file_name: String!\n  id: ID!\n  mimetype: String!\n  order: Int\n  unit: ClassUnit!\n  unit_id: ID!\n  uploader_id: ID!\n  url: String!\n}\n\ninput ClassFileReorder {\n  file_id: ID\n  index: Int\n}\n\ntype ClassMember {\n  class: Class!\n  id: String!\n  role: ClassRole!\n  user: User!\n}\n\n\"\"\"A user's role in a given class\"\"\"\nenum ClassRole {\n  ADMIN\n  ASSISTANT\n  AUDITOR\n  PROFESSOR\n  STUDENT\n}\n\ntype ClassUnit {\n  class: Class!\n  class_id: ID!\n  creator_id: ID!\n  deployed: Boolean!\n  description: String\n  files: [ClassFile!]!\n  id: ID!\n  last_modified: String!\n  modifier: User!\n  name: String!\n  order: Int\n}\n\ninput ClassUnitReorder {\n  class_id: ID\n  index: Int\n}\n\ninput FileUpload {\n  file: Upload\n  name: String\n}\n\ntype Mutation {\n  cloneClassFile(new_class_id: ID, old_file: ID): ClassFile!\n  createClassUnit(auto_deploy: Boolean, class_id: ID, description: String, name: String): ClassUnit!\n  createQuiz(class_id: ID, title: String): Quiz!\n  deleteClassFile(file_id: ID!): ClassFile!\n  loginGoogle(code: String, sessionInfo: String): Session!\n  logout: Session!\n  rmClassUnit(unit_id: ID): Boolean!\n  updateAdmin(setAdmin: Boolean, user_id: ID): User!\n  updateClassFile(description: String, file_id: ID, name: String, order: Int, unit_id: ID): ClassFile!\n  updateClassUnit(add_files: [ID!], deploy: Boolean, description: String, name: String, order: Int, unit_id: ID): ClassUnit!\n  updateProfilePic(pic: FileUpload!): User!\n  uploadClassFile(class_id: ID, description: String, file: FileUpload!, order: Int, unit_id: ID): ClassFile!\n}\n\ntype Query {\n  class(class_id: ID): Class!\n  classFile(file_id: ID): ClassFile!\n  classQuizzes(class_id: ID): [Quiz!]!\n  googleRedirect: String!\n  me: User!\n  myClasses(\n    \"\"\"\n    Return only classes where the user has a given role, such as \"Admin\"\n    \"\"\"\n    role: ClassRole\n  ): [ClassMember!]!\n  myClassRole(class_id: ID): ClassMember!\n  users: [User!]!\n}\n\ntype Quiz {\n  class_id: ID!\n  id: ID!\n  title: String!\n}\n\ntype Session {\n  \"\"\"current user's id\"\"\"\n  id: ID!\n\n  \"\"\"current user's session token\"\"\"\n  session: String\n\n  \"\"\"\n  A string describing the context (browser, ip) of the session. So the user can verify it.\n  \"\"\"\n  sessionInfo: String\n}\n\n\"\"\"The `Upload` scalar type represents a file upload.\"\"\"\nscalar Upload\n\ntype User {\n  email: String!\n  firstName: String!\n  hasVisited: Boolean!\n  id: ID!\n  lastName: String!\n  name: String!\n  photo_key: String\n  photo_url: String\n  siteAdmin: Boolean!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 9,
      "containsCycle": true,
      "numDefinitions": 14
    }
  ],
  "metrics": {
    "created_at": "2019-03-28T18:59:43Z",
    "updated_at": "2019-05-06T21:17:13Z",
    "pushed_at": "2019-05-09T18:08:43Z",
    "issues": 1,
    "watchers": 4,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 3,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 3,
    "releases": 0,
    "stargazers": 1
  }
}