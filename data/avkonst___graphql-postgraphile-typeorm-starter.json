{
  "repo_name": "graphql-postgraphile-typeorm-starter",
  "repo_full_name": "avkonst/graphql-postgraphile-typeorm-starter",
  "repo_owner": "avkonst",
  "repo_description": "Starter project for backend development of Graphql APIs wired into Typeorm and embedded Postgraphile infrastructure",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "postgraphile.graphql",
      "path": "src/generated/postgraphile.graphql",
      "sha": "6083d0853ff1a7e45c59d8ab34f17a81071679fc",
      "url": "https://api.github.com/repositories/145476451/contents/src/generated/postgraphile.graphql?ref=e3448a63cbe54471c2c0e257b74f37b250f5453a",
      "git_url": "https://api.github.com/repositories/145476451/git/blobs/6083d0853ff1a7e45c59d8ab34f17a81071679fc",
      "html_url": "https://github.com/avkonst/graphql-postgraphile-typeorm-starter/blob/e3448a63cbe54471c2c0e257b74f37b250f5453a/src/generated/postgraphile.graphql",
      "content": "\"\"\"\nA signed eight-byte integer. The upper big integer values are greater then the\nmax value for a JavaScript number. Therefore all big integers will be output as\nstrings and not numbers.\n\"\"\"\nscalar BigInt\n\n\"\"\"All input for the create `Migration` mutation.\"\"\"\ninput CreateMigrationInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Migration` to be created by this mutation.\"\"\"\n  migration: MigrationInput!\n}\n\n\"\"\"The output of our create `Migration` mutation.\"\"\"\ntype CreateMigrationPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Migration` that was created by this mutation.\"\"\"\n  migration: Migration\n\n  \"\"\"An edge for our `Migration`. May be used by Relay 1.\"\"\"\n  migrationEdge(\n    \"\"\"The method to use when ordering `Migration`.\"\"\"\n    orderBy: [MigrationsOrderBy!] = PRIMARY_KEY_ASC\n  ): MigrationsEdge\n}\n\n\"\"\"All input for the create `Photo` mutation.\"\"\"\ninput CreatePhotoInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Photo` to be created by this mutation.\"\"\"\n  photo: PhotoInput!\n}\n\n\"\"\"The output of our create `Photo` mutation.\"\"\"\ntype CreatePhotoPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Photo` that was created by this mutation.\"\"\"\n  photo: Photo\n\n  \"\"\"An edge for our `Photo`. May be used by Relay 1.\"\"\"\n  photoEdge(\n    \"\"\"The method to use when ordering `Photo`.\"\"\"\n    orderBy: [PhotosOrderBy!] = PRIMARY_KEY_ASC\n  ): PhotosEdge\n}\n\n\"\"\"All input for the create `User` mutation.\"\"\"\ninput CreateUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` to be created by this mutation.\"\"\"\n  user: UserInput!\n}\n\n\"\"\"The output of our create `User` mutation.\"\"\"\ntype CreateUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` that was created by this mutation.\"\"\"\n  user: User\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\n\"\"\"A location in a connection that can be used for resuming pagination.\"\"\"\nscalar Cursor\n\n\"\"\"All input for the `deleteMigrationById` mutation.\"\"\"\ninput DeleteMigrationByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deleteMigration` mutation.\"\"\"\ninput DeleteMigrationInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Migration` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `Migration` mutation.\"\"\"\ntype DeleteMigrationPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Migration` that was deleted by this mutation.\"\"\"\n  migration: Migration\n  deletedMigrationId: ID\n\n  \"\"\"An edge for our `Migration`. May be used by Relay 1.\"\"\"\n  migrationEdge(\n    \"\"\"The method to use when ordering `Migration`.\"\"\"\n    orderBy: [MigrationsOrderBy!] = PRIMARY_KEY_ASC\n  ): MigrationsEdge\n}\n\n\"\"\"All input for the `deletePhotoById` mutation.\"\"\"\ninput DeletePhotoByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deletePhoto` mutation.\"\"\"\ninput DeletePhotoInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Photo` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `Photo` mutation.\"\"\"\ntype DeletePhotoPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Photo` that was deleted by this mutation.\"\"\"\n  photo: Photo\n  deletedPhotoId: ID\n\n  \"\"\"An edge for our `Photo`. May be used by Relay 1.\"\"\"\n  photoEdge(\n    \"\"\"The method to use when ordering `Photo`.\"\"\"\n    orderBy: [PhotosOrderBy!] = PRIMARY_KEY_ASC\n  ): PhotosEdge\n}\n\n\"\"\"All input for the `deleteUserById` mutation.\"\"\"\ninput DeleteUserByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deleteUser` mutation.\"\"\"\ninput DeleteUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `User` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `User` mutation.\"\"\"\ntype DeleteUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` that was deleted by this mutation.\"\"\"\n  user: User\n  deletedUserId: ID\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\ntype Migration implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n  timestamp: BigInt!\n  name: String!\n}\n\n\"\"\"\nA condition to be used against `Migration` object types. All fields are tested\nfor equality and combined with a logical ‘and.’\n\"\"\"\ninput MigrationCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `timestamp` field.\"\"\"\n  timestamp: BigInt\n\n  \"\"\"Checks for equality with the object’s `name` field.\"\"\"\n  name: String\n}\n\n\"\"\"An input for mutations affecting `Migration`\"\"\"\ninput MigrationInput {\n  id: Int\n  timestamp: BigInt!\n  name: String!\n}\n\n\"\"\"\nRepresents an update to a `Migration`. Fields that are set will be updated.\n\"\"\"\ninput MigrationPatch {\n  id: Int\n  timestamp: BigInt\n  name: String\n}\n\n\"\"\"A connection to a list of `Migration` values.\"\"\"\ntype MigrationsConnection {\n  \"\"\"A list of `Migration` objects.\"\"\"\n  nodes: [Migration]!\n\n  \"\"\"\n  A list of edges which contains the `Migration` and cursor to aid in pagination.\n  \"\"\"\n  edges: [MigrationsEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `Migration` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `Migration` edge in the connection.\"\"\"\ntype MigrationsEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `Migration` at the end of the edge.\"\"\"\n  node: Migration\n}\n\n\"\"\"Methods to use when ordering `Migration`.\"\"\"\nenum MigrationsOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  TIMESTAMP_ASC\n  TIMESTAMP_DESC\n  NAME_ASC\n  NAME_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"\nThe root mutation type which contains root level fields which mutate data.\n\"\"\"\ntype Mutation {\n  \"\"\"Creates a single `Migration`.\"\"\"\n  createMigration(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreateMigrationInput!\n  ): CreateMigrationPayload\n\n  \"\"\"Creates a single `Photo`.\"\"\"\n  createPhoto(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreatePhotoInput!\n  ): CreatePhotoPayload\n\n  \"\"\"Creates a single `User`.\"\"\"\n  createUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreateUserInput!\n  ): CreateUserPayload\n\n  \"\"\"\n  Updates a single `Migration` using its globally unique id and a patch.\n  \"\"\"\n  updateMigration(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateMigrationInput!\n  ): UpdateMigrationPayload\n\n  \"\"\"Updates a single `Migration` using a unique key and a patch.\"\"\"\n  updateMigrationById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateMigrationByIdInput!\n  ): UpdateMigrationPayload\n\n  \"\"\"Updates a single `Photo` using its globally unique id and a patch.\"\"\"\n  updatePhoto(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePhotoInput!\n  ): UpdatePhotoPayload\n\n  \"\"\"Updates a single `Photo` using a unique key and a patch.\"\"\"\n  updatePhotoById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePhotoByIdInput!\n  ): UpdatePhotoPayload\n\n  \"\"\"Updates a single `User` using its globally unique id and a patch.\"\"\"\n  updateUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateUserInput!\n  ): UpdateUserPayload\n\n  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n  updateUserById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateUserByIdInput!\n  ): UpdateUserPayload\n\n  \"\"\"Deletes a single `Migration` using its globally unique id.\"\"\"\n  deleteMigration(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteMigrationInput!\n  ): DeleteMigrationPayload\n\n  \"\"\"Deletes a single `Migration` using a unique key.\"\"\"\n  deleteMigrationById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteMigrationByIdInput!\n  ): DeleteMigrationPayload\n\n  \"\"\"Deletes a single `Photo` using its globally unique id.\"\"\"\n  deletePhoto(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePhotoInput!\n  ): DeletePhotoPayload\n\n  \"\"\"Deletes a single `Photo` using a unique key.\"\"\"\n  deletePhotoById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePhotoByIdInput!\n  ): DeletePhotoPayload\n\n  \"\"\"Deletes a single `User` using its globally unique id.\"\"\"\n  deleteUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserInput!\n  ): DeleteUserPayload\n\n  \"\"\"Deletes a single `User` using a unique key.\"\"\"\n  deleteUserById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserByIdInput!\n  ): DeleteUserPayload\n}\n\n\"\"\"An object with a globally unique `ID`.\"\"\"\ninterface Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: Cursor\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: Cursor\n}\n\ntype Photo implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n  name: String!\n  description: String!\n  filename: String!\n  views: Float!\n  isPublished: Boolean!\n}\n\n\"\"\"\nA condition to be used against `Photo` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput PhotoCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `name` field.\"\"\"\n  name: String\n\n  \"\"\"Checks for equality with the object’s `description` field.\"\"\"\n  description: String\n\n  \"\"\"Checks for equality with the object’s `filename` field.\"\"\"\n  filename: String\n\n  \"\"\"Checks for equality with the object’s `views` field.\"\"\"\n  views: Float\n\n  \"\"\"Checks for equality with the object’s `isPublished` field.\"\"\"\n  isPublished: Boolean\n}\n\n\"\"\"An input for mutations affecting `Photo`\"\"\"\ninput PhotoInput {\n  id: Int\n  name: String!\n  description: String!\n  filename: String!\n  views: Float!\n  isPublished: Boolean!\n}\n\n\"\"\"\nRepresents an update to a `Photo`. Fields that are set will be updated.\n\"\"\"\ninput PhotoPatch {\n  id: Int\n  name: String\n  description: String\n  filename: String\n  views: Float\n  isPublished: Boolean\n}\n\n\"\"\"A connection to a list of `Photo` values.\"\"\"\ntype PhotosConnection {\n  \"\"\"A list of `Photo` objects.\"\"\"\n  nodes: [Photo]!\n\n  \"\"\"\n  A list of edges which contains the `Photo` and cursor to aid in pagination.\n  \"\"\"\n  edges: [PhotosEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `Photo` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `Photo` edge in the connection.\"\"\"\ntype PhotosEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `Photo` at the end of the edge.\"\"\"\n  node: Photo\n}\n\n\"\"\"Methods to use when ordering `Photo`.\"\"\"\nenum PhotosOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  NAME_ASC\n  NAME_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  FILENAME_ASC\n  FILENAME_DESC\n  VIEWS_ASC\n  VIEWS_DESC\n  IS_PUBLISHED_ASC\n  IS_PUBLISHED_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"The root query type which gives access points into the data universe.\"\"\"\ntype Query implements Node {\n  \"\"\"\n  Exposes the root query type nested one level down. This is helpful for Relay 1\n  which can only query top level fields if they are in a particular form.\n  \"\"\"\n  query: Query!\n\n  \"\"\"\n  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"Fetches an object given its globally unique `ID`.\"\"\"\n  node(\n    \"\"\"The globally unique `ID`.\"\"\"\n    nodeId: ID!\n  ): Node\n\n  \"\"\"Reads and enables pagination through a set of `Migration`.\"\"\"\n  allMigrations(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Migration`.\"\"\"\n    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: MigrationCondition\n  ): MigrationsConnection\n\n  \"\"\"Reads and enables pagination through a set of `Photo`.\"\"\"\n  allPhotos(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Photo`.\"\"\"\n    orderBy: [PhotosOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: PhotoCondition\n  ): PhotosConnection\n\n  \"\"\"Reads and enables pagination through a set of `User`.\"\"\"\n  allUsers(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: UserCondition\n  ): UsersConnection\n  migrationById(id: Int!): Migration\n  photoById(id: Int!): Photo\n  userById(id: Int!): User\n\n  \"\"\"Reads a single `Migration` using its globally unique `ID`.\"\"\"\n  migration(\n    \"\"\"\n    The globally unique `ID` to be used in selecting a single `Migration`.\n    \"\"\"\n    nodeId: ID!\n  ): Migration\n\n  \"\"\"Reads a single `Photo` using its globally unique `ID`.\"\"\"\n  photo(\n    \"\"\"The globally unique `ID` to be used in selecting a single `Photo`.\"\"\"\n    nodeId: ID!\n  ): Photo\n\n  \"\"\"Reads a single `User` using its globally unique `ID`.\"\"\"\n  user(\n    \"\"\"The globally unique `ID` to be used in selecting a single `User`.\"\"\"\n    nodeId: ID!\n  ): User\n}\n\n\"\"\"All input for the `updateMigrationById` mutation.\"\"\"\ninput UpdateMigrationByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Migration` being updated.\n  \"\"\"\n  migrationPatch: MigrationPatch!\n  id: Int!\n}\n\n\"\"\"All input for the `updateMigration` mutation.\"\"\"\ninput UpdateMigrationInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Migration` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `Migration` being updated.\n  \"\"\"\n  migrationPatch: MigrationPatch!\n}\n\n\"\"\"The output of our update `Migration` mutation.\"\"\"\ntype UpdateMigrationPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Migration` that was updated by this mutation.\"\"\"\n  migration: Migration\n\n  \"\"\"An edge for our `Migration`. May be used by Relay 1.\"\"\"\n  migrationEdge(\n    \"\"\"The method to use when ordering `Migration`.\"\"\"\n    orderBy: [MigrationsOrderBy!] = PRIMARY_KEY_ASC\n  ): MigrationsEdge\n}\n\n\"\"\"All input for the `updatePhotoById` mutation.\"\"\"\ninput UpdatePhotoByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Photo` being updated.\n  \"\"\"\n  photoPatch: PhotoPatch!\n  id: Int!\n}\n\n\"\"\"All input for the `updatePhoto` mutation.\"\"\"\ninput UpdatePhotoInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Photo` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `Photo` being updated.\n  \"\"\"\n  photoPatch: PhotoPatch!\n}\n\n\"\"\"The output of our update `Photo` mutation.\"\"\"\ntype UpdatePhotoPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Photo` that was updated by this mutation.\"\"\"\n  photo: Photo\n\n  \"\"\"An edge for our `Photo`. May be used by Relay 1.\"\"\"\n  photoEdge(\n    \"\"\"The method to use when ordering `Photo`.\"\"\"\n    orderBy: [PhotosOrderBy!] = PRIMARY_KEY_ASC\n  ): PhotosEdge\n}\n\n\"\"\"All input for the `updateUserById` mutation.\"\"\"\ninput UpdateUserByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `User` being updated.\n  \"\"\"\n  userPatch: UserPatch!\n  id: Int!\n}\n\n\"\"\"All input for the `updateUser` mutation.\"\"\"\ninput UpdateUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `User` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `User` being updated.\n  \"\"\"\n  userPatch: UserPatch!\n}\n\n\"\"\"The output of our update `User` mutation.\"\"\"\ntype UpdateUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` that was updated by this mutation.\"\"\"\n  user: User\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\ntype User implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n  name: String!\n  email: String!\n  password: String!\n}\n\n\"\"\"\nA condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput UserCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `name` field.\"\"\"\n  name: String\n\n  \"\"\"Checks for equality with the object’s `email` field.\"\"\"\n  email: String\n\n  \"\"\"Checks for equality with the object’s `password` field.\"\"\"\n  password: String\n}\n\n\"\"\"An input for mutations affecting `User`\"\"\"\ninput UserInput {\n  id: Int\n  name: String!\n  email: String!\n  password: String!\n}\n\n\"\"\"\nRepresents an update to a `User`. Fields that are set will be updated.\n\"\"\"\ninput UserPatch {\n  id: Int\n  name: String\n  email: String\n  password: String\n}\n\n\"\"\"A connection to a list of `User` values.\"\"\"\ntype UsersConnection {\n  \"\"\"A list of `User` objects.\"\"\"\n  nodes: [User]!\n\n  \"\"\"\n  A list of edges which contains the `User` and cursor to aid in pagination.\n  \"\"\"\n  edges: [UsersEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `User` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `User` edge in the connection.\"\"\"\ntype UsersEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `User` at the end of the edge.\"\"\"\n  node: User\n}\n\n\"\"\"Methods to use when ordering `User`.\"\"\"\nenum UsersOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  NAME_ASC\n  NAME_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PASSWORD_ASC\n  PASSWORD_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 21,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 51
    }
  ],
  "metrics": {
    "created_at": "2018-08-20T22:24:00Z",
    "updated_at": "2019-05-24T23:02:57Z",
    "pushed_at": "2018-08-20T23:09:28Z",
    "issues": 0,
    "watchers": 5,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 26
  }
}