{
  "repo_name": "linear-node-sdk",
  "repo_full_name": "linearapp/linear-node-sdk",
  "repo_owner": "linearapp",
  "repo_description": "Linear API SDK for Node.js",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema-raw.graphql",
      "path": "src/schema-raw.graphql",
      "sha": "90f425b9455492e3bda9a5a44ba7cdd206360471",
      "url": "https://api.github.com/repositories/165708595/contents/src/schema-raw.graphql?ref=cbf419be1592d1399ab8b8099a017aa367903dce",
      "git_url": "https://api.github.com/repositories/165708595/git/blobs/90f425b9455492e3bda9a5a44ba7cdd206360471",
      "html_url": "https://github.com/linearapp/linear-node-sdk/blob/cbf419be1592d1399ab8b8099a017aa367903dce/src/schema-raw.graphql",
      "content": "# source: http://localhost:8090/graphql\n# timestamp: Sat Jan 19 2019 16:33:21 GMT-0800 (Pacific Standard Time)\n\n\"\"\"An API key\"\"\"\ntype ApiKey {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"Key label.\"\"\"\n  label: String!\n}\n\ninput ApiKeyCreateInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The API key label.\"\"\"\n  label: String!\n\n  \"\"\"The API key value (format: /^[a-zA-Z0-9]{40}$/).\"\"\"\n  key: String!\n}\n\ntype ApiKeyPayload {\n  userError: [String!]!\n  apiKey: ApiKey!\n}\n\ntype ArchivePayload {\n  userError: [String!]!\n}\n\n\"\"\"The base class of a backend entity object. Not to be used directly.\"\"\"\ntype BackendEntity {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n}\n\n\"\"\"The base class of a model object. Not to be used directly\"\"\"\ntype ClientEntity {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n}\n\n\"\"\"An issue comment\"\"\"\ntype Comment {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"Comment content in markdown format.\"\"\"\n  body: String!\n\n  \"\"\"Comment content as a Prosemirror document.\"\"\"\n  bodyData: JSON\n\n  \"\"\"The issue that the comment is associated with.\"\"\"\n  issue: Issue!\n\n  \"\"\"The user who wrote the comment\"\"\"\n  user: User!\n}\n\ninput CommentCreateInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The comment content in markdown format.\"\"\"\n  body: String!\n\n  \"\"\"The comment content as a Prosemirror document.\"\"\"\n  bodyData: JSON\n\n  \"\"\"The issue to associate the comment with.\"\"\"\n  issueId: String!\n}\n\ntype CommentPayload {\n  userError: [String!]!\n  comment: Comment!\n}\n\ninput CommentUpdateInput {\n  \"\"\"The comment content.\"\"\"\n  body: String!\n\n  \"\"\"The comment content as a Prosemirror document.\"\"\"\n  bodyData: JSON\n}\n\ninput CreateOrganizationInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The groups name.\"\"\"\n  name: String!\n}\n\ninput CreateUserInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The users name.\"\"\"\n  name: String!\n\n  \"\"\"The users display name.\"\"\"\n  displayName: String!\n\n  \"\"\"The users email address.\"\"\"\n  email: String!\n\n  \"\"\"The users avatar image URL.\"\"\"\n  avatarUrl: String\n\n  \"\"\"The organization associated with the user.\"\"\"\n  organizationId: String\n}\n\n\"\"\"\nThe DateTime scalar type represents date time strings complying to ISO-8601.\n\"\"\"\nscalar DateTime\n\n\"\"\"\nThe Email scalar type represents E-Mail addresses compliant to RFC 822.\n\"\"\"\nscalar Email\n\n\"\"\"GitHub's commit data\"\"\"\ntype GitHubCommitPayload {\n  id: String!\n  message: String!\n  timestamp: String!\n  url: String!\n  added: [String!]!\n  removed: [String!]!\n  modified: [String!]!\n}\n\n\"\"\"GitHub's pull request data\"\"\"\ntype GitHubPullRequestPayload {\n  status: String!\n  number: Float!\n  url: String!\n  id: String!\n  title: String!\n  userId: String!\n  userLogin: String!\n  createdAt: String!\n  updatedAt: String!\n  closedAt: String!\n  mergedAt: String!\n}\n\ntype ImageUploadPayload {\n  userError: [String!]!\n  uploadFile: UploadFile\n}\n\n\"\"\"An integration to external service\"\"\"\ntype Integration {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The integration's type.\"\"\"\n  service: String!\n\n  \"\"\"The external service ID.\"\"\"\n  serviceId: String\n\n  \"\"\"The organization that the integration is associated with.\"\"\"\n  organization: Organization!\n\n  \"\"\"The project that the integration is associated with.\"\"\"\n  project: Project\n\n  \"\"\"The user who added the integration\"\"\"\n  creator: User!\n\n  \"\"\"Settings related to the integration.\"\"\"\n  settings: IntegrationSettings!\n}\n\ntype IntegrationPayload {\n  userError: [String!]!\n  integration: Integration\n}\n\n\"\"\"An integration resource from external service\"\"\"\ntype IntegrationResource {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The integration's type.\"\"\"\n  resourceType: String!\n\n  \"\"\"The external service resource ID.\"\"\"\n  resourceId: String!\n\n  \"\"\"The integration that the resource is associated with.\"\"\"\n  integration: Integration!\n\n  \"\"\"The issue that the resource is associated with.\"\"\"\n  issue: Issue!\n\n  \"\"\"Detailed information about the external resource.\"\"\"\n  data: IntegrationResourceData!\n}\n\n\"\"\"Integration resource's payload\"\"\"\ntype IntegrationResourceData {\n  githubPullRequest: GitHubPullRequestPayload\n  githubCommit: GitHubCommitPayload\n}\n\n\"\"\"Integration resource's payload\"\"\"\ntype IntegrationSettings {\n  slackPost: SlackPostSettings\n}\n\n\"\"\"An issue.\"\"\"\ntype Issue {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The issue's unique number.\"\"\"\n  number: Float!\n\n  \"\"\"The issue's title.\"\"\"\n  title: String!\n\n  \"\"\"The issue's description in markdown format.\"\"\"\n  description: String\n\n  \"\"\"The issue's description as a Prosemirror document.\"\"\"\n  descriptionData: JSON\n\n  \"\"\"The priority of the issue.\"\"\"\n  priority: Float!\n\n  \"\"\"Comments associated with the issue\"\"\"\n  comments: [Comment!]!\n\n  \"\"\"The project that the issue is associated with.\"\"\"\n  project: Project!\n\n  \"\"\"The user who created the issue.\"\"\"\n  creator: User!\n\n  \"\"\"The user to whom the issue is assigned to.\"\"\"\n  assignee: User\n\n  \"\"\"Users who are subscribed to the issue.\"\"\"\n  subscribers: [User!]!\n\n  \"\"\"The workflow state that the issue is associated with.\"\"\"\n  state: ProjectState!\n\n  \"\"\"The order of the item in its column on the board.\"\"\"\n  boardOrder: Float!\n\n  \"\"\"The time at which the issue was moved into started state.\"\"\"\n  startedAt: DateTime\n\n  \"\"\"The time at which the issue was moved into completed state.\"\"\"\n  completedAt: DateTime\n\n  \"\"\"The time at which the issue was moved into canceled state.\"\"\"\n  canceledAt: DateTime\n  labels: [IssueLabel!]!\n}\n\ninput IssueCreateInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The issue's title.\"\"\"\n  title: String!\n\n  \"\"\"The issue description in markdown format.\"\"\"\n  description: String\n\n  \"\"\"The issue description as a Prosemirror document.\"\"\"\n  descriptionData: JSON\n\n  \"\"\"The id of the user to assign the issue to.\"\"\"\n  assigneeId: String\n\n  \"\"\"The priority of the issue\"\"\"\n  priority: Float\n\n  \"\"\"The ids of the users subscribing to this ticket.\"\"\"\n  subscriberIds: [String!]\n\n  \"\"\"The ids of the issue labels associated with this ticket.\"\"\"\n  labelIds: [String!]\n\n  \"\"\"The project to associate the issue with.\"\"\"\n  projectId: String!\n\n  \"\"\"The project state which the issue is assigned.\"\"\"\n  stateId: String\n\n  \"\"\"The order of the item in its column on the board.\"\"\"\n  boardOrder: Float\n}\n\n\"\"\"Issue labels.\"\"\"\ntype IssueLabel {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The issue label's name.\"\"\"\n  name: String!\n\n  \"\"\"The issue label's description.\"\"\"\n  description: String\n\n  \"\"\"The label color.\"\"\"\n  color: String!\n\n  \"\"\"The parent project in which this label belongs to.\"\"\"\n  project: Project!\n\n  \"\"\"The user who created the label.\"\"\"\n  creator: User\n}\n\ninput IssueLabelCreateInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The issue label's name.\"\"\"\n  name: String!\n\n  \"\"\"The issue label's description.\"\"\"\n  description: String\n\n  \"\"\"The issue label's color.\"\"\"\n  color: String\n\n  \"\"\"The project to associate the issue label with.\"\"\"\n  projectId: String!\n}\n\ntype IssueLabelPayload {\n  userError: [String!]!\n  issueLabel: IssueLabel!\n}\n\ntype IssuePayload {\n  userError: [String!]!\n  issue: Issue\n}\n\ninput IssueUpdateInput {\n  \"\"\"The issue's title.\"\"\"\n  title: String\n\n  \"\"\"The issue description in markdown format.\"\"\"\n  description: String\n\n  \"\"\"The issue description as a Prosemirror document.\"\"\"\n  descriptionData: JSON\n\n  \"\"\"The id of the user to assign the issue to.\"\"\"\n  assigneeId: String\n\n  \"\"\"The priority of the issue.\"\"\"\n  priority: Float\n\n  \"\"\"The ids of the users subscribing to this ticket.\"\"\"\n  subscriberIds: [String!]\n\n  \"\"\"The ids of the issue labels associated with this ticket.\"\"\"\n  labelIds: [String!]\n\n  \"\"\"The project to associate the issue with.\"\"\"\n  projectId: String\n\n  \"\"\"The project state which the issue is assigned.\"\"\"\n  stateId: String\n\n  \"\"\"The order of the item in its column on the board.\"\"\"\n  boardOrder: Float\n}\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n\ntype Mutation {\n  \"\"\"Creates a new api key.\"\"\"\n  apiKeyCreate(\n    \"\"\"The api key object to create.\"\"\"\n    input: ApiKeyCreateInput!\n  ): ApiKeyPayload!\n\n  \"\"\"Archives an api key.\"\"\"\n  apiKeyArchive(\n    \"\"\"The identifier of the api key to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Creates a new comment.\"\"\"\n  commentCreate(\n    \"\"\"The comment object to create.\"\"\"\n    input: CommentCreateInput!\n  ): CommentPayload!\n\n  \"\"\"Updates a comment.\"\"\"\n  commentUpdate(\n    \"\"\"A partial comment object to update the issue with.\"\"\"\n    input: CommentUpdateInput!\n\n    \"\"\"The identifier of the comment to update.\"\"\"\n    id: String!\n  ): CommentPayload!\n\n  \"\"\"Archives a comment.\"\"\"\n  commentArchive(\n    \"\"\"The identifier of the comment to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"\n  XHR request payload to upload an image directly to Google Cloud Storage\n  \"\"\"\n  imageUpload(\n    \"\"\"Upload mime-type\"\"\"\n    contentType: String!\n\n    \"\"\"Filename of the uploaded file\"\"\"\n    filename: String!\n  ): ImageUploadPayload!\n\n  \"\"\"Connects with Github App.\"\"\"\n  integrationGithubConnect(\n    \"\"\"The Github data to connect with.\"\"\"\n    installationId: String!\n  ): IntegrationPayload!\n\n  \"\"\"Save regular Slack integration.\"\"\"\n  integrationSlack(\n    \"\"\"The Slack OAuth redirect URI.\"\"\"\n    redirectUri: String!\n\n    \"\"\"The Slack OAuth code.\"\"\"\n    code: String!\n  ): IntegrationPayload!\n\n  \"\"\"Save Slack webhook integration.\"\"\"\n  integrationSlackPost(\n    \"\"\"The Slack OAuth redirect URI.\"\"\"\n    redirectUri: String!\n\n    \"\"\"Integration's associated project.\"\"\"\n    projectId: String!\n\n    \"\"\"The Slack OAuth code.\"\"\"\n    code: String!\n  ): IntegrationPayload!\n\n  \"\"\"Archives an integration.\"\"\"\n  integrationArchive(\n    \"\"\"The identifier of the integration to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Archives an integration resource.\"\"\"\n  integrationResourceArchive(\n    \"\"\"The identifier of the integration resource to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Creates a new issue label.\"\"\"\n  issueLabelCreate(\n    \"\"\"The issue label object to create.\"\"\"\n    input: IssueLabelCreateInput!\n  ): IssueLabelPayload!\n\n  \"\"\"Archives an issue label.\"\"\"\n  issueLabelArchive(\n    \"\"\"The identifier of the issue label to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Creates a new issue.\"\"\"\n  issueCreate(\n    \"\"\"The issue object to create.\"\"\"\n    input: IssueCreateInput!\n  ): IssuePayload!\n\n  \"\"\"Updates an issue.\"\"\"\n  issueUpdate(\n    \"\"\"A partial issue object to update the issue with.\"\"\"\n    input: IssueUpdateInput!\n\n    \"\"\"The identifier of the issue to update.\"\"\"\n    id: String!\n  ): IssuePayload!\n\n  \"\"\"Closes an issue by moving it into the first completed state.\"\"\"\n  issueClose(\n    \"\"\"The identifier of the issue to close.\"\"\"\n    id: String!\n  ): IssuePayload!\n\n  \"\"\"Archives an issue.\"\"\"\n  issueArchive(\n    \"\"\"The identifier of the issue to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Updates a notification.\"\"\"\n  notificationUpdate(\n    \"\"\"A partial notification object to update the issue with.\"\"\"\n    input: NotificationUpdateInput!\n\n    \"\"\"The identifier of the notification to update.\"\"\"\n    id: String!\n  ): NotificationPayload!\n\n  \"\"\"Archives a notification.\"\"\"\n  notificationArchive(\n    \"\"\"The identifier of the notification to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Creates a new organization.\"\"\"\n  organizationCreate(\n    \"\"\"The organization object to create.\"\"\"\n    input: CreateOrganizationInput!\n  ): OrganizationPayload!\n\n  \"\"\"Updates the users organization.\"\"\"\n  organizationUpdate(\n    \"\"\"A partial organization object to update the organization with.\"\"\"\n    input: UpdateOrganizationInput!\n  ): OrganizationPayload!\n\n  \"\"\"Creates a new project.\"\"\"\n  projectCreate(\n    \"\"\"The project object to create.\"\"\"\n    input: ProjectCreateInput!\n  ): ProjectPayload!\n\n  \"\"\"Updates a project.\"\"\"\n  projectUpdate(\n    \"\"\"A partial project object to update the project with.\"\"\"\n    input: ProjectUpdateInput!\n\n    \"\"\"The identifier of the project to update\"\"\"\n    id: String!\n  ): ProjectPayload!\n\n  \"\"\"Archives a project.\"\"\"\n  projectArchive(\n    \"\"\"The identifier of the project to archive\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Creates a new project workflow state.\"\"\"\n  projectStateCreate(\n    \"\"\"The project workflow state object to create.\"\"\"\n    input: ProjectStateCreateInput!\n  ): ProjectStatePayload!\n\n  \"\"\"Updates a project workflow state.\"\"\"\n  projectStateUpdate(\n    \"\"\"A partial project workflow state object to update.\"\"\"\n    input: ProjectStateUpdateInput!\n\n    \"\"\"The identifier of the project workflow state to update.\"\"\"\n    id: String!\n  ): ProjectStatePayload!\n\n  \"\"\"\n  Archives a project workflow state. Only states with issues that have been archived can be archived themselves.\n  \"\"\"\n  projectStateArchive(\n    \"\"\"The identifier of the project workflow state to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Creates a push subscription.\"\"\"\n  pushSubscriptionCreate(\n    \"\"\"The subscription to create.\"\"\"\n    input: PushSubscriptionCreateInput!\n  ): PushSubscriptionPayload!\n\n  \"\"\"Archives a PushSubscription.\"\"\"\n  pushSubscriptionArchive(\n    \"\"\"The identifier of the PushSubscription to archive\"\"\"\n    id: String!\n  ): PushSubscriptionPayload!\n\n  \"\"\"Second step of Google's OAuth flow\"\"\"\n  userAccountGoogleAuth(\n    \"\"\"Code returned from Google's OAuth flow\"\"\"\n    code: String!\n  ): UserGoogleAuthPayload!\n\n  \"\"\"Creates a new user.\"\"\"\n  userCreate(\n    \"\"\"The user object to create.\"\"\"\n    input: CreateUserInput!\n  ): UserPayload!\n\n  \"\"\"Updates a user.\"\"\"\n  userUpdate(\n    \"\"\"A partial user object to update the user with.\"\"\"\n    input: UpdateUserInput!\n\n    \"\"\"The identifier of the user to update.\"\"\"\n    id: String!\n  ): UserPayload!\n\n  \"\"\"Archives a user.\"\"\"\n  userArchive(\n    \"\"\"The identifier of the user to archive.\"\"\"\n    id: String!\n  ): ArchivePayload!\n\n  \"\"\"Updates user settings.\"\"\"\n  userSettingsUpdate(\n    \"\"\"A partial notification object to update the settings with.\"\"\"\n    input: UserSettingsUpdateInput!\n\n    \"\"\"The identifier of the userSettings to update\"\"\"\n    id: String!\n  ): UserSettingsPayload!\n}\n\n\"\"\"A user notification\"\"\"\ntype Notification {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"Notification type\"\"\"\n  type: String!\n\n  \"\"\"The user to whom this notification was targeted for.\"\"\"\n  user: User!\n\n  \"\"\"The issue that the notification is associated with.\"\"\"\n  issue: Issue!\n\n  \"\"\"The project which the notification is associated with\"\"\"\n  project: Project!\n\n  \"\"\"The time at when the user marked it as read.\"\"\"\n  readAt: DateTime\n}\n\ntype NotificationPayload {\n  userError: [String!]!\n  notification: Notification!\n}\n\ninput NotificationUpdateInput {\n  \"\"\"The time when notification was marked as read.\"\"\"\n  readAt: DateTime\n}\n\n\"\"\"Organizations contain user accounts and projects.\"\"\"\ntype Organization {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The organizations name.\"\"\"\n  name: String!\n\n  \"\"\"The organizations picture.\"\"\"\n  pictureUrl: String\n\n  \"\"\"Projects associated with the organization.\"\"\"\n  projects: [Project!]!\n\n  \"\"\"Users associated with the organization.\"\"\"\n  users: [User!]!\n}\n\ntype OrganizationPayload {\n  userError: [String!]!\n  organization: Organization\n}\n\n\"\"\"A project that contains issues.\"\"\"\ntype Project {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The project's name.\"\"\"\n  name: String!\n\n  \"\"\"The project's unique key.\"\"\"\n  key: String!\n\n  \"\"\"The project's description.\"\"\"\n  description: String\n\n  \"\"\"Issues associated with the project\"\"\"\n  issues: [Issue!]!\n\n  \"\"\"Keys associated with the project\"\"\"\n  keys: [Issue!]!\n\n  \"\"\"Issue labels associated with the project.\"\"\"\n  issueLabels: [IssueLabel!]!\n\n  \"\"\"Issues belonging in this workflow state\"\"\"\n  states: [ProjectState!]!\n\n  \"\"\"The organization that the project is associated with.\"\"\"\n  organization: Organization!\n}\n\ninput ProjectCreateInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The name of the project.\"\"\"\n  name: String!\n\n  \"\"\"The description of the project.\"\"\"\n  description: String\n\n  \"\"\"\n  The key of the project. If not given, a key will be generated based on the name of the project.\n  \"\"\"\n  key: String\n\n  \"\"\"The organization associated with the project.\"\"\"\n  organizationId: String\n}\n\ntype ProjectPayload {\n  userError: [String!]!\n  project: Project\n}\n\n\"\"\"Individual state in an issue workflow.\"\"\"\ntype ProjectState {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The state's name.\"\"\"\n  name: String!\n\n  \"\"\"The state's emoji.\"\"\"\n  emoji: String\n\n  \"\"\"Information about the state.\"\"\"\n  description: String\n\n  \"\"\"Position of the state in the project flow.\"\"\"\n  position: Float!\n\n  \"\"\"State type.\"\"\"\n  type: String!\n\n  \"\"\"Issues belonging in this workflow state\"\"\"\n  issues: [Issue!]!\n\n  \"\"\"The parent project in which this state belongs to.\"\"\"\n  project: Project!\n}\n\ninput ProjectStateCreateInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The name of the workflow state.\"\"\"\n  name: String!\n\n  \"\"\"The name of the workflow state.\"\"\"\n  emoji: String\n\n  \"\"\"The description of the workflow state.\"\"\"\n  description: String\n\n  \"\"\"The project to associate the workflow state with.\"\"\"\n  projectId: String!\n}\n\ntype ProjectStatePayload {\n  userError: [String!]!\n  projectState: ProjectState!\n}\n\ninput ProjectStateUpdateInput {\n  \"\"\"The name of the workflow state.\"\"\"\n  name: String!\n\n  \"\"\"The name of the workflow state.\"\"\"\n  emoji: String\n\n  \"\"\"The description of the workflow state.\"\"\"\n  description: String\n}\n\ninput ProjectUpdateInput {\n  \"\"\"The name of the project.\"\"\"\n  name: String\n\n  \"\"\"The description of the project.\"\"\"\n  description: String\n\n  \"\"\"The key of the project.\"\"\"\n  key: String\n}\n\n\"\"\"A user's push subscription.\"\"\"\ntype PushSubscription {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n}\n\ninput PushSubscriptionCreateInput {\n  \"\"\"The identifier. If none is provided, the backend will generate one\"\"\"\n  id: String\n\n  \"\"\"The user id of the subscription\"\"\"\n  userId: String!\n\n  \"\"\"The data of the subscription in stringified JSON format\"\"\"\n  data: String!\n}\n\ntype PushSubscriptionPayload {\n  userError: [String!]!\n}\n\ntype Query {\n  \"\"\"Fetches all data for the user.\"\"\"\n  syncBootstrap(databaseVersion: Float!, sinceId: Float!): SyncResponse!\n\n  \"\"\"Fetches all data for the user.\"\"\"\n  syncUpdates(sinceId: Float!): SyncResponse!\n\n  \"\"\"Fetches all api keys.\"\"\"\n  apiKeys: [ApiKey!]!\n\n  \"\"\"Fetches all comments.\"\"\"\n  comments: [Comment!]!\n\n  \"\"\"Fetches a specific comment.\"\"\"\n  comment(id: String!): Comment!\n\n  \"\"\"Fetches all integrations.\"\"\"\n  integrations: [Integration!]!\n\n  \"\"\"Fetches a specific integration.\"\"\"\n  integration(id: String!): Integration!\n\n  \"\"\"\n  Fetches all integrations resources (e.g. linked GitHub pull requests for issues).\n  \"\"\"\n  integrationResources: [IntegrationResource!]!\n\n  \"\"\"\n  Fetches a specific integration resource (e.g. linked GitHub pull requests for an issue).\n  \"\"\"\n  integrationResource(id: String!): IntegrationResource!\n\n  \"\"\"Fetches all issue labels.\"\"\"\n  issueLabels: [IssueLabel!]!\n\n  \"\"\"Fetches a specific issue label.\"\"\"\n  issueLabel(id: String!): IssueLabel!\n\n  \"\"\"Fetches all issues.\"\"\"\n  issues: [Issue!]!\n\n  \"\"\"Fetches a specific issue.\"\"\"\n  issue(id: String!): Issue!\n\n  \"\"\"Fetches all notifications.\"\"\"\n  notifications: [Notification!]!\n\n  \"\"\"Fetches the users settings.\"\"\"\n  notification: UserSettings!\n\n  \"\"\"Fetches the users organization.\"\"\"\n  organizations: [Organization!]!\n\n  \"\"\"Fetches the users organization.\"\"\"\n  organization(id: String!): Organization!\n\n  \"\"\"Fetches all projects.\"\"\"\n  projects: [Project!]!\n\n  \"\"\"Fetches a specific project.\"\"\"\n  project(id: String!): Project!\n\n  \"\"\"Fetches all project workflow states.\"\"\"\n  projectStates: [ProjectState!]!\n\n  \"\"\"Fetches a specific project workflow state.\"\"\"\n  projectState(id: String!): ProjectState!\n\n  \"\"\"Fetches all users.\"\"\"\n  users: [User!]!\n\n  \"\"\"Fetches a specific user.\"\"\"\n  user(id: String!): User!\n}\n\ntype SlackPostSettings {\n  channel: String!\n  channelId: String!\n  configurationUrl: String!\n}\n\n\"\"\"A transport model for sync responses\"\"\"\ntype SyncResponse {\n  \"\"\"The type of the sync response\"\"\"\n  type: String!\n\n  \"\"\"The serialized data associated with the sync response\"\"\"\n  data: String!\n\n  \"\"\"The last id covered by the response\"\"\"\n  lastSyncId: Float!\n\n  \"\"\"\n  The version of the database. Increased by 1 for each migration run on the database\n  \"\"\"\n  databaseVersion: Float!\n}\n\ninput UpdateOrganizationInput {\n  \"\"\"The groups name.\"\"\"\n  name: String!\n}\n\ninput UpdateUserInput {\n  \"\"\"The users name.\"\"\"\n  name: String\n\n  \"\"\"The users display name.\"\"\"\n  displayName: String\n\n  \"\"\"The users email address.\"\"\"\n  email: String\n\n  \"\"\"The users avatar image URL.\"\"\"\n  avatarUrl: String\n\n  \"\"\"The organization associated with the user.\"\"\"\n  organizationId: String\n}\n\n\"\"\"Object representing Google Cloud upload policy\"\"\"\ntype UploadFile {\n  filename: String!\n  contentType: String!\n  uploadUrl: String!\n  assetUrl: String!\n}\n\n\"\"\"A user.\"\"\"\ntype User {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The user's full name.\"\"\"\n  name: String!\n\n  \"\"\"The user's display (nick) name.\"\"\"\n  displayName: String!\n\n  \"\"\"The user's email address.\"\"\"\n  email: Email!\n\n  \"\"\"An URL to the user's avatar image\"\"\"\n  avatarUrl: String!\n\n  \"\"\"Issues created by the user.\"\"\"\n  createdIssues: [Issue!]!\n\n  \"\"\"Issues assigned to the user.\"\"\"\n  assignedIssues: [Issue!]!\n\n  \"\"\"Notifications assigned to the user.\"\"\"\n  notifications: [Notification!]!\n\n  \"\"\"Push subscriptions of the user.\"\"\"\n  pushSubscriptions: [PushSubscription!]!\n\n  \"\"\"Developer API keys of the user.\"\"\"\n  apiKeys: [ApiKey!]!\n\n  \"\"\"The organization that the user is associated with.\"\"\"\n  organization: Organization!\n\n  \"\"\"The settings of the user\"\"\"\n  settings: UserSettings!\n}\n\n\"\"\"A user account.\"\"\"\ntype UserAccount {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The user's name.\"\"\"\n  name: String!\n\n  \"\"\"The user's email address.\"\"\"\n  email: Email!\n\n  \"\"\"The user that this user account is associated with\"\"\"\n  user: User!\n}\n\ntype UserGoogleAuthPayload {\n  token: String\n  userId: String\n}\n\ntype UserPayload {\n  userError: [String!]!\n  user: User\n}\n\n\"\"\"The settings of a user.\"\"\"\ntype UserSettings {\n  \"\"\"The models identifier.\"\"\"\n  id: UUID!\n\n  \"\"\"The time at which the model was created.\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"The time at which the model was updated.\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"The time at which the model was archived.\"\"\"\n  archivedAt: DateTime\n\n  \"\"\"The user to whom this notification was targeted for.\"\"\"\n  user: User!\n\n  \"\"\"Whether the navigation sidebar is collapsed.\"\"\"\n  sidebarCollapsed: Boolean!\n}\n\ntype UserSettingsPayload {\n  userError: [String!]!\n\n  \"\"\"The users settings.\"\"\"\n  userSettings: UserSettings!\n}\n\ninput UserSettingsUpdateInput {\n  \"\"\"The user's settings\"\"\"\n  settings: String\n}\n\n\"\"\"The UUID scalar type represents a UUID.\"\"\"\nscalar UUID\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 40,
      "containsCycle": true,
      "numDefinitions": 61
    }
  ],
  "metrics": {
    "created_at": "2019-01-14T17:58:15Z",
    "updated_at": "2019-04-12T00:59:04Z",
    "pushed_at": "2019-01-26T03:49:38Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}