{
  "repo_name": "graphql-yoga-signup-example",
  "repo_full_name": "darkeye123/graphql-yoga-signup-example",
  "repo_owner": "DarkEye123",
  "repo_description": "An example project for my blogpost - Using Prisma GraphQL Yoga",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "prisma.graphql",
      "path": "src/generated/prisma.graphql",
      "sha": "9aa5930e2de1ebae1e839c007cbaaf8863273dda",
      "url": "https://api.github.com/repositories/166661538/contents/src/generated/prisma.graphql?ref=60b810a86686f9f25969b1dd763fa11032b15935",
      "git_url": "https://api.github.com/repositories/166661538/git/blobs/9aa5930e2de1ebae1e839c007cbaaf8863273dda",
      "html_url": "https://github.com/DarkEye123/graphql-yoga-signup-example/blob/60b810a86686f9f25969b1dd763fa11032b15935/src/generated/prisma.graphql",
      "content": "type AggregateUser {\n  count: Int!\n}\n\ntype BatchPayload {\n  count: Long!\n}\n\nscalar Long\n\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  deleteUser(where: UserWhereUniqueInput!): User\n  deleteManyUsers(where: UserWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  user(where: UserWhereUniqueInput!): User\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  node(id: ID!): Node\n}\n\ntype Subscription {\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n}\n\ntype User {\n  id: ID!\n  email: String!\n  password: String!\n}\n\ntype UserConnection {\n  pageInfo: PageInfo!\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  email: String!\n  password: String!\n}\n\ntype UserEdge {\n  node: User!\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  email_ASC\n  email_DESC\n  password_ASC\n  password_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  email: String!\n  password: String!\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n  AND: [UserSubscriptionWhereInput!]\n  OR: [UserSubscriptionWhereInput!]\n  NOT: [UserSubscriptionWhereInput!]\n}\n\ninput UserUpdateInput {\n  email: String\n  password: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: String\n  password: String\n}\n\ninput UserWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  email: String\n  email_not: String\n  email_in: [String!]\n  email_not_in: [String!]\n  email_lt: String\n  email_lte: String\n  email_gt: String\n  email_gte: String\n  email_contains: String\n  email_not_contains: String\n  email_starts_with: String\n  email_not_starts_with: String\n  email_ends_with: String\n  email_not_ends_with: String\n  password: String\n  password_not: String\n  password_in: [String!]\n  password_not_in: [String!]\n  password_lt: String\n  password_lte: String\n  password_gt: String\n  password_gte: String\n  password_contains: String\n  password_not_contains: String\n  password_starts_with: String\n  password_not_starts_with: String\n  password_ends_with: String\n  password_not_ends_with: String\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  NOT: [UserWhereInput!]\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n  email: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 11,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 21
    },
    {
      "name": "schema.graphql",
      "path": "src/schema.graphql",
      "sha": "dcfc0d8005e121fd7c02a9958a67be9f50052762",
      "url": "https://api.github.com/repositories/166661538/contents/src/schema.graphql?ref=d7c09c93bde2200b5d8bd8227ecbc6905fcc083d",
      "git_url": "https://api.github.com/repositories/166661538/git/blobs/dcfc0d8005e121fd7c02a9958a67be9f50052762",
      "html_url": "https://github.com/DarkEye123/graphql-yoga-signup-example/blob/d7c09c93bde2200b5d8bd8227ecbc6905fcc083d/src/schema.graphql",
      "content": "#import * from './generated/prisma.graphql'\n\n# this shadows User type from prisma/datamodel.prisma. You may use it to make some fields not accessible (like password)\ntype User {\n  id: ID!\n  email: String!\n}\n\ntype Mutation {\n  # '!' makes field mandatory, without it, mutation won't be even processed\n  signUp(email: String!, password: String!, confirmPassword: String!): User!\n}\n\ntype Query {\n  currentUser: User\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 3
    }
  ],
  "metrics": {
    "created_at": "2019-01-20T12:58:46Z",
    "updated_at": "2019-03-16T20:10:33Z",
    "pushed_at": "2019-03-16T20:10:31Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}