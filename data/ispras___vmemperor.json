{
  "repo_name": "vmemperor",
  "repo_full_name": "ispras/vmemperor",
  "repo_owner": "ispras",
  "repo_description": "Web service for easy launch and tracking of Ubuntu-based VMs in XenServer/XCP environment",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "frontend/schema.graphql",
      "sha": "1fe7a2dbcfc2a3be42063c4580f0a1befc9f06a2",
      "url": "https://api.github.com/repositories/20238643/contents/frontend/schema.graphql?ref=5560817001fbb58864e8b8e3fa0d191f497adb17",
      "git_url": "https://api.github.com/repositories/20238643/git/blobs/1fe7a2dbcfc2a3be42063c4580f0a1befc9f06a2",
      "html_url": "https://github.com/ispras/vmemperor/blob/5560817001fbb58864e8b8e3fa0d191f497adb17/frontend/schema.graphql",
      "content": "# This file was generated based on \".graphqlconfig\" at Tue May 07 15:47:00 MSK 2019. Do not edit manually.\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ninterface GAbstractVM {\n  PVBootloader: String!\n  VCPUsAtStartup: Int!\n  VCPUsMax: Int!\n  domainType: DomainType!\n  guestMetrics: ID!\n  installTime: DateTime!\n  memoryActual: Float!\n  memoryDynamicMax: Float!\n  memoryDynamicMin: Float!\n  memoryStaticMax: Float!\n  memoryStaticMin: Float!\n  \"CPU platform parameters\"\n  platform: Platform\n}\n\ninterface GAccessEntry {\n  isOwner: Boolean!\n  userId: User!\n}\n\ninterface GAclXenObject {\n  access: [GAccessEntry]!\n  isOwner: Boolean!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n}\n\ninterface GQuotaObject {\n  \"The user against whom the quotas for this object are calculated\"\n  mainOwner: User\n}\n\ninterface GXenObject {\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n}\n\nunion GHostOrDeleted = Deleted | GHost\n\nunion GNetworkOrDeleted = Deleted | GNetwork\n\nunion GPoolOrDeleted = Deleted | GPool\n\nunion GSROrDeleted = Deleted | GSR\n\nunion GTaskOrDeleted = Deleted | GTask\n\nunion GTemplateOrDeleted = Deleted | GTemplate\n\nunion GVDIOrDeleted = Deleted | GVDI\n\nunion GVMOrDeleted = Deleted | GVM\n\ntype AttachNetworkMutation {\n  granted: Boolean!\n  reason: String\n  \"Attach/Detach task ID. If already attached/detached, returns null\"\n  taskId: ID\n}\n\ntype AttachVDIMutation {\n  \"Returns True if access is granted\"\n  granted: Boolean!\n  \"If access is not granted, return the reason\"\n  reason: String\n  \"Attach/Detach task ID. If already attached/detached, returns null\"\n  taskId: ID\n}\n\ntype CpuInfo {\n  cpuCount: Int!\n  family: Int!\n  features: ID!\n  featuresHvm: ID\n  featuresPv: ID\n  flags: String!\n  model: Int!\n  modelname: String!\n  socketCount: Int!\n  speed: Float!\n  stepping: Int!\n  vendor: String!\n}\n\ntype CreateVM {\n  granted: Boolean!\n  reason: String\n  \"Installation task ID\"\n  taskId: ID\n}\n\ntype CurrentUserInformation {\n  groups: [User]\n  isAdmin: Boolean!\n  user: User\n}\n\ntype Deleted {\n  \"Deleted object's ref\"\n  ref: ID!\n}\n\ntype GHost implements GXenObject {\n  \"Major XenAPI version number\"\n  APIVersionMajor: Int\n  \"Minor XenAPI version number\"\n  APIVersionMinor: Int\n  \"Connections to storage repositories\"\n  PBDs: [GPBD]!\n  PCIs: [ID]!\n  PGPUs: [ID]!\n  PIFs: [ID]!\n  PUSBs: [ID]!\n  \"The address by which this host can be contacted from any other host in the pool\"\n  address: String!\n  allowedOperations: [HostAllowedOperations]!\n  cpuInfo: CpuInfo!\n  display: HostDisplay!\n  hostname: String!\n  \"True if host is up. May be null if no data\"\n  live: Boolean\n  \"When live status was last updated\"\n  liveUpdated: DateTime\n  \"Available memory as measured by the host in kilobytes\"\n  memoryAvailable: Float\n  \"Free memory in kilobytes\"\n  memoryFree: Float\n  \"Virtualization overhead in kilobytes\"\n  memoryOverhead: Float\n  \"Total memory in kilobytes\"\n  memoryTotal: Float\n  metrics: ID!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  \"VMs currently resident on host\"\n  residentVms: [GVM]!\n  softwareVersion: SoftwareVersion!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n}\n\ntype GHostsSubscription {\n  \"Change type\"\n  changeType: Change!\n  value: GHostOrDeleted!\n}\n\ntype GNetwork implements GAclXenObject {\n  VIFs: [GVIF]\n  access: [GNetworkAccessEntry]!\n  isOwner: Boolean!\n  myActions: [NetworkActions]!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  otherConfig: JSONString\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n}\n\ntype GNetworkAccessEntry implements GAccessEntry {\n  actions: [NetworkActions!]!\n  isOwner: Boolean!\n  userId: User!\n}\n\ntype GNetworksSubscription {\n  \"Change type\"\n  changeType: Change!\n  value: GNetworkOrDeleted!\n}\n\n\"\"\"\nFancy name for a PBD. Not a real Xen object, though a connection\nbetween a host and a SR\n\"\"\"\ntype GPBD {\n  SR: GSR!\n  currentlyAttached: Boolean!\n  deviceConfig: JSONString!\n  \"Host to which the SR is supposed to be connected to\"\n  host: GHost!\n  \"Unique constant identifier/object reference\"\n  ref: ID!\n  \"Unique non-primary identifier/object reference\"\n  uuid: ID!\n}\n\ntype GPlaybook {\n  \"Playbook description\"\n  description: String\n  \"Playbook ID\"\n  id: ID!\n  \"Inventory file path\"\n  inventory: String\n  \"Playbook name\"\n  name: String!\n  \"Requirements for running this playbook\"\n  requires: PlaybookRequirements\n  \"Variables available for change to an user\"\n  variables: JSONString\n}\n\ntype GPool implements GAclXenObject {\n  access: [GPoolAccessEntry]!\n  \"Default SR\"\n  defaultSr: GSR\n  isOwner: Boolean!\n  \"Pool master\"\n  master: GHost\n  myActions: [PoolActions]!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n}\n\ntype GPoolAccessEntry implements GAccessEntry {\n  actions: [PoolActions!]!\n  isOwner: Boolean!\n  userId: User!\n}\n\ntype GPoolsSubscription {\n  \"Change type\"\n  changeType: Change!\n  value: GPoolOrDeleted!\n}\n\ntype GSR implements GAclXenObject {\n  \"Connections to host. Usually one, unless the storage repository is shared: e.g. iSCSI\"\n  PBDs: [GPBD]!\n  VDIs: [GVDI]\n  access: [GSRAccessEntry]!\n  contentType: SRContentType!\n  isOwner: Boolean!\n  \"This SR contains XenServer Tools\"\n  isToolsSr: Boolean!\n  myActions: [SRActions]!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  \"Physical size in kilobytes\"\n  physicalSize: Float!\n  \"Physical utilisation in bytes\"\n  physicalUtilisation: Float!\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  \"Available space in bytes\"\n  spaceAvailable: Float!\n  type: String!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n  \"Virtual allocation in kilobytes\"\n  virtualAllocation: Float!\n}\n\ntype GSRAccessEntry implements GAccessEntry {\n  actions: [SRActions!]!\n  isOwner: Boolean!\n  userId: User!\n}\n\ntype GSRsSubscription {\n  \"Change type\"\n  changeType: Change!\n  value: GSROrDeleted!\n}\n\ntype GTask implements GAclXenObject {\n  access: [GTaskAccessEntry]!\n  \"Action kind, if detected. Must be of object_type's action enum (See also: myActions on type corresponding to object_type)\"\n  action: String\n  \"Task creation time\"\n  created: DateTime!\n  \"Error strings, if failed\"\n  errorInfo: [String]\n  \"Task finish time\"\n  finished: DateTime\n  isOwner: Boolean!\n  myActions: [TaskActions]!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  \"An object this task is running on\"\n  objectRef: ID\n  \"Object type\"\n  objectType: String\n  \"Task progress\"\n  progress: Float!\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  \"ref of a host that runs this task\"\n  residentOn: ID\n  \"Task result if available\"\n  result: ID\n  \"Task status\"\n  status: TaskStatus!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n  who: User\n}\n\ntype GTaskAccessEntry implements GAccessEntry {\n  actions: [TaskActions!]!\n  isOwner: Boolean!\n  userId: User!\n}\n\ntype GTasksSubscription {\n  \"Change type\"\n  changeType: Change!\n  value: GTaskOrDeleted!\n}\n\ntype GTemplate implements GAbstractVM & GAclXenObject {\n  PVBootloader: String!\n  VCPUsAtStartup: Int!\n  VCPUsMax: Int!\n  access: [GTemplateAccessEntry]!\n  domainType: DomainType!\n  guestMetrics: ID!\n  \"If the template supports unattended installation, its options are there\"\n  installOptions: InstallOSOptions\n  installTime: DateTime!\n  \"This template is preinstalled with XenServer\"\n  isDefaultTemplate: Boolean!\n  isOwner: Boolean!\n  memoryActual: Float!\n  memoryDynamicMax: Float!\n  memoryDynamicMin: Float!\n  memoryStaticMax: Float!\n  memoryStaticMin: Float!\n  myActions: [TemplateActions]!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  \"CPU platform parameters\"\n  platform: Platform\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n}\n\ntype GTemplateAccessEntry implements GAccessEntry {\n  actions: [TemplateActions!]!\n  isOwner: Boolean!\n  userId: User!\n}\n\ntype GTemplatesSubscription {\n  \"Change type\"\n  changeType: Change!\n  value: GTemplateOrDeleted!\n}\n\ntype GVBD {\n  VDI: GVDI\n  VM: GVM\n  bootable: Boolean!\n  currentlyAttached: Boolean!\n  mode: VBDMode!\n  \"Unique constant identifier/object reference\"\n  ref: ID!\n  type: VBDType!\n  userdevice: Int!\n  \"Unique non-primary identifier/object reference\"\n  uuid: ID!\n}\n\ntype GVDI implements GAclXenObject & GQuotaObject {\n  SR: GSR\n  VBDs: [GVBD]!\n  access: [GVDIAccessEntry]!\n  contentType: SRContentType!\n  isOwner: Boolean!\n  \"The user against whom the quotas for this object are calculated\"\n  mainOwner: User\n  myActions: [VDIActions]!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  type: VDIType!\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n  virtualSize: Float!\n}\n\ntype GVDIAccessEntry implements GAccessEntry {\n  actions: [VDIActions!]!\n  isOwner: Boolean!\n  userId: User!\n}\n\ntype GVDIsSubscription {\n  \"Change type\"\n  changeType: Change!\n  value: GVDIOrDeleted!\n}\n\ntype GVIF {\n  \"MAC address\"\n  MAC: ID!\n  VM: GVM\n  currentlyAttached: Boolean!\n  \"Device ID\"\n  device: ID!\n  ip: String\n  ipv4: String\n  ipv6: String\n  network: GNetwork\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n}\n\ntype GVM implements GAbstractVM & GAclXenObject & GQuotaObject {\n  PVBootloader: String!\n  \"True if PV drivers are up to date, reported if Guest Additions are installed\"\n  PVDriversUpToDate: Boolean\n  \"PV drivers version, if available\"\n  PVDriversVersion: PvDriversVersion\n  \"Virtual block devices\"\n  VBDs: [GVBD]!\n  VCPUsAtStartup: Int!\n  VCPUsMax: Int!\n  VIFs: [GVIF]!\n  access: [GVMAccessEntry]!\n  domainType: DomainType!\n  guestMetrics: ID!\n  installTime: DateTime!\n  isOwner: Boolean!\n  \"The user against whom the quotas for this object are calculated\"\n  mainOwner: User\n  memoryActual: Float!\n  memoryDynamicMax: Float!\n  memoryDynamicMin: Float!\n  memoryStaticMax: Float!\n  memoryStaticMin: Float!\n  metrics: ID!\n  myActions: [VMActions]!\n  \"a human-readable description\"\n  nameDescription: String!\n  \"a human-readable name\"\n  nameLabel: String!\n  osVersion: OSVersion\n  \"CPU platform parameters\"\n  platform: Platform\n  powerState: PowerState!\n  \"Unique constant identifier/object reference (primary)\"\n  ref: ID!\n  startTime: DateTime\n  \"Unique constant identifier/object reference (used in XenCenter)\"\n  uuid: ID!\n}\n\ntype GVMAccessEntry implements GAccessEntry {\n  actions: [VMActions!]!\n  isOwner: Boolean!\n  userId: User!\n}\n\ntype GVMsSubscription {\n  \"Change type\"\n  changeType: Change!\n  value: GVMOrDeleted!\n}\n\ntype InstallOSOptions {\n  arch: Arch\n  distro: Distro!\n  installRepository: String\n  release: String\n}\n\ntype Mutation {\n  \"Create a new VM\"\n  createVm(\n    disks: [NewVDI],\n    #Automatic installation parameters, the installation is done via internet. Only available when template.os_kind is not empty\n    installParams: AutoInstall,\n    #ISO image mounted if conf parameter is null\n    iso: ID,\n    #Network ID to connect to\n    network: ID,\n    #Template ID\n    template: ID!,\n    #Basic VM options. Leave fields empty to use Template options\n    vmOptions: VMInput!\n  ): CreateVM\n  \"Set network access rights\"\n  netAccessSet(actions: [NetworkActions!]!, ref: ID!, revoke: Boolean!, user: String!): NetAccessSet\n  \"Attach VM to a Network by creating a new Interface\"\n  netAttach(\n    #True if attach, False if detach\n    isAttach: Boolean!,\n    netRef: ID!,\n    vmRef: ID!\n  ): AttachNetworkMutation\n  \"Edit Network options\"\n  network(\n    #Network to change\n    network: NetworkInput!,\n    #Object ID\n    ref: ID!\n  ): NetworkMutation\n  \"Launch an Ansible Playbook on specified VMs\"\n  playbookLaunch(\n    #Playbook ID\n    id: ID!,\n    #JSON with key-value pairs representing Playbook variables changed by user\n    variables: JSONString,\n    #VM UUIDs to run Playbook on. Ignored if this is a Playbook with provided Inventory\n    vms: [ID]\n  ): PlaybookLaunchMutation\n  \"Edit pool options\"\n  pool(\n    #Pool to change\n    pool: PoolInput!,\n    #Object ID\n    ref: ID!\n  ): PoolMutation\n  \"Set pool access rights\"\n  poolAccessSet(actions: [PoolActions!]!, ref: ID!, revoke: Boolean!, user: String!): PoolAccessSet\n  \"Adjust quota\"\n  quotaSet(quota: QuotaInput!, userId: String!): QuotaMutation\n  \"Edit SR options\"\n  sr(\n    #Object ID\n    ref: ID!,\n    #Sr to change\n    sr: SRInput!\n  ): SRMutation\n  \"Set SR access rights\"\n  srAccessSet(actions: [SRActions!]!, ref: ID!, revoke: Boolean!, user: String!): SRAccessSet\n  \"Delete a SR\"\n  srDelete(ref: ID!): SRDestroyMutation\n  \"Delete a Task\"\n  taskDelete(ref: ID!): TaskRemoveMutation\n  \"Edit template options\"\n  template(\n    #Object ID\n    ref: ID!,\n    #Template to change\n    template: TemplateInput!\n  ): TemplateMutation\n  \"Set template access rights\"\n  templateAccessSet(actions: [TemplateActions!]!, ref: ID!, revoke: Boolean!, user: String!): TemplateAccessSet\n  \"Clone template\"\n  templateClone(\n    #New name label\n    nameLabel: String!,\n    ref: ID!,\n    #User/group to own resulting clone\n    user: String\n  ): TemplateCloneMutation\n  \"Delete template\"\n  templateDelete(ref: ID!): TemplateDestroyMutation\n  \"Edit VDI options\"\n  vdi(\n    #Object ID\n    ref: ID!,\n    #Vdi to change\n    vdi: VDIInput!\n  ): VDIMutation\n  \"Set VDI access rights\"\n  vdiAccessSet(actions: [VDIActions!]!, ref: ID!, revoke: Boolean!, user: String!): VDIAccessSet\n  \"Attach VDI to a VM by creating a new virtual block device\"\n  vdiAttach(\n    #True if attach, False if detach\n    isAttach: Boolean!,\n    vdiRef: ID!,\n    vmRef: ID!\n  ): AttachVDIMutation\n  \"Delete a VDI\"\n  vdiDelete(ref: ID!): VDIDestroyMutation\n  \"Edit VM options\"\n  vm(\n    #Object ID\n    ref: ID!,\n    #Vm to change\n    vm: VMInput!\n  ): VMMutation\n  \"Set VM access rights\"\n  vmAccessSet(actions: [VMActions!]!, ref: ID!, revoke: Boolean!, user: String!): VMAccessSet\n  \"Delete a Halted VM\"\n  vmDelete(ref: ID!): VMDestroyMutation\n  \"If VM is Running, pause VM. If Paused, unpause VM\"\n  vmPause(ref: ID!): VMPauseMutation\n  \"Reboot VM\"\n  vmReboot(\n    #Force reboot in a hard or clean way. Default: clean\n    force: ShutdownForce,\n    ref: ID!\n  ): VMRebootMutation\n  \"Shut down VM\"\n  vmShutdown(\n    #Force shutdown in a hard or clean way\n    force: ShutdownForce,\n    ref: ID!\n  ): VMShutdownMutation\n  \"Start VM\"\n  vmStart(options: VMStartInput, ref: ID!): VMStartMutation\n  \"If VM is Running, suspend VM. If Suspended, resume VM\"\n  vmSuspend(ref: ID!): VMSuspendMutation\n}\n\ntype NetAccessSet {\n  success: Boolean!\n}\n\ntype NetworkMutation {\n  granted: Boolean!\n  reason: String\n}\n\n\"OS version reported by Xen tools\"\ntype OSVersion {\n  distro: String\n  major: Int\n  minor: Int\n  name: String\n  uname: String\n}\n\ntype Platform {\n  acpi: Int\n  apic: Boolean\n  coresPerSocket: Int\n  deviceModel: String\n  hpet: Boolean\n  nx: Boolean\n  pae: Boolean\n  timeoffset: Int\n  videoram: Int\n}\n\ntype PlaybookLaunchMutation {\n  \"Playbook execution task ID\"\n  taskId: ID!\n}\n\ntype PlaybookRequirements {\n  \"Minimal supported OS versions\"\n  osVersion: [OSVersion]!\n}\n\ntype PoolAccessSet {\n  success: Boolean!\n}\n\ntype PoolMutation {\n  granted: Boolean!\n  reason: String\n}\n\n\"Drivers version. We don't want any fancy resolver except for the thing that we know that it's a dict in VM document\"\ntype PvDriversVersion {\n  build: Int\n  major: Int\n  micro: Int\n  minor: Int\n}\n\ntype Query {\n  \"One-time link to RFB console for a VM\"\n  console(vmRef: ID!): String\n  \"current user or group information\"\n  currentUser: CurrentUserInformation\n  findUser(query: String!): [User]!\n  \"All registered groups\"\n  groups: [User]!\n  host(ref: ID!): GHost\n  hosts: [GHost]!\n  \"Information about a single network\"\n  network(ref: ID!): GNetwork\n  \"All Networks available to user\"\n  networks: [GNetwork]!\n  \"Information about Ansible-powered playbook\"\n  playbook(id: ID): GPlaybook\n  \"List of Ansible-powered playbooks\"\n  playbooks: [GPlaybook]!\n  pool(ref: ID!): GPool\n  pools: [GPool]!\n  quota(user: String!): Quota!\n  quotas: [Quota]!\n  \"Information about a single storage repository\"\n  sr(ref: ID!): GSR\n  \"All Storage repositories available to user\"\n  srs: [GSR]!\n  \"Single Task\"\n  task(ref: ID!): GTask\n  \"All Tasks available to user\"\n  tasks(endDate: DateTime, startDate: DateTime): [GTask]!\n  template(ref: ID!): GTemplate\n  \"All Templates available to user\"\n  templates: [GTemplate]!\n  \"User or group information\"\n  user(id: ID): User\n  \"All registered users (excluding root)\"\n  users: [User]!\n  \"Information about a single virtual disk image (hard disk)\"\n  vdi(ref: ID!): GVDI\n  \"All Virtual Disk Images (hard disks), available for user\"\n  vdis(\n    #True - print only ISO images; False - print everything but ISO images; null - print everything\n    onlyIsos: Boolean\n  ): [GVDI]!\n  vm(ref: ID!): GVM\n  \"All VMs available to user\"\n  vms: [GVM]!\n}\n\ntype Quota {\n  memory: Float\n  user: User!\n  vcpuCount: Int\n  vdiSize: Float\n  vmCount: Int\n}\n\ntype QuotaMutation {\n  success: Boolean!\n}\n\ntype SRAccessSet {\n  success: Boolean!\n}\n\ntype SRDestroyMutation {\n  \"Shows if access to destroy is granted\"\n  granted: Boolean!\n  reason: String\n  \"Task ID\"\n  taskId: ID\n}\n\ntype SRMutation {\n  granted: Boolean!\n  reason: String\n}\n\ntype SoftwareVersion {\n  buildNumber: String!\n  date: String!\n  hostname: String!\n  \"Linux kernel version\"\n  linux: String!\n  networkBackend: String!\n  platformName: String!\n  platformVersion: String!\n  platformVersionText: String!\n  platformVersionTextShort: String!\n  productBrand: String!\n  productVersion: String!\n  productVersionText: String!\n  \"XAPI version\"\n  xapi: String!\n  \"Xen version\"\n  xen: String!\n}\n\n\"All subscriptions must return  Observable\"\ntype Subscription {\n  \"Updates for a particular Host\"\n  host(ref: ID!): GHost\n  \"Updates for all Hosts\"\n  hosts(withInitials: Boolean): GHostsSubscription!\n  \"Updates for a particular Network\"\n  network(ref: ID!): GNetwork\n  \"Updates for all Networks\"\n  networks(withInitials: Boolean): GNetworksSubscription!\n  \"Updates for a particular Pool\"\n  pool(ref: ID!): GPool\n  \"Updates for all pools available in VMEmperor\"\n  pools(withInitials: Boolean): GPoolsSubscription!\n  \"Updates for a particular Storage Repository\"\n  sr(ref: ID!): GSR\n  \"Updates for all Storage Repositories\"\n  srs(withInitials: Boolean): GSRsSubscription!\n  \"Updates for a particular XenServer Task\"\n  task(ref: ID!): GTask\n  \"Updates for all XenServer tasks\"\n  tasks(withInitials: Boolean): GTasksSubscription!\n  \"Updates for a particular Template\"\n  template(ref: ID!): GTemplate\n  \"Updates for all Templates\"\n  templates(withInitials: Boolean): GTemplatesSubscription!\n  \"Updates for a particular VDI\"\n  vdi(ref: ID!): GVDI\n  \"Updates for all VDIs\"\n  vdis(\n    #True - print only ISO images; False - print everything but ISO images; null - print everything\n    onlyIsos: Boolean,\n    withInitials: Boolean\n  ): GVDIsSubscription!\n  \"Updates for a particular VM\"\n  vm(ref: ID!): GVM\n  \"Updates for all VMs\"\n  vms(withInitials: Boolean): GVMsSubscription!\n}\n\ntype TaskRemoveMutation {\n  \"Shows if access to task remove is granted\"\n  granted: Boolean!\n  reason: String\n  \"always null, provided for compatibility\"\n  taskId: ID\n}\n\ntype TemplateAccessSet {\n  success: Boolean!\n}\n\ntype TemplateCloneMutation {\n  \"Shows if access to clone is granted\"\n  granted: Boolean!\n  reason: String\n  \"clone task ID\"\n  taskId: ID\n}\n\ntype TemplateDestroyMutation {\n  \"Shows if access to destroy is granted\"\n  granted: Boolean!\n  reason: String\n  \"Task ID\"\n  taskId: ID\n}\n\ntype TemplateMutation {\n  granted: Boolean!\n  reason: String\n}\n\ntype User {\n  id: ID!\n  name: String!\n  username: String!\n}\n\ntype VDIAccessSet {\n  success: Boolean!\n}\n\ntype VDIDestroyMutation {\n  \"Shows if access to destroy is granted\"\n  granted: Boolean!\n  reason: String\n  \"Task ID\"\n  taskId: ID\n}\n\ntype VDIMutation {\n  granted: Boolean!\n  reason: String\n}\n\ntype VMAccessSet {\n  success: Boolean!\n}\n\ntype VMDestroyMutation {\n  \"Shows if access to delete is granted\"\n  granted: Boolean!\n  reason: String\n  \"Deleting task ID\"\n  taskId: ID\n}\n\ntype VMMutation {\n  granted: Boolean!\n  reason: String\n}\n\ntype VMPauseMutation {\n  \"Shows if access to pause/unpause is granted\"\n  granted: Boolean!\n  reason: String\n  \"Pause/unpause task ID\"\n  taskId: ID\n}\n\ntype VMRebootMutation {\n  \"Shows if access to reboot is granted\"\n  granted: Boolean!\n  \"Reboot task ID\"\n  taskId: ID\n}\n\ntype VMShutdownMutation {\n  \"Shows if access to shutdown is granted\"\n  granted: Boolean!\n  \"Shutdown task ID\"\n  taskId: ID\n}\n\ntype VMStartMutation {\n  \"Shows if access to start is granted\"\n  granted: Boolean!\n  reason: String\n  \"Start task ID\"\n  taskId: ID\n}\n\ntype VMSuspendMutation {\n  \"Shows if access to destroy is granted\"\n  granted: Boolean!\n  reason: String\n  \"Task ID\"\n  taskId: ID\n}\n\n\"An enumeration.\"\nenum Arch {\n  I386\n  X86_64\n}\n\nenum Change {\n  Add\n  Change\n  Initial\n  Remove\n}\n\n\"An enumeration.\"\nenum Distro {\n  CentOS\n  Debian\n  SUSE\n}\n\n\"An enumeration.\"\nenum DomainType {\n  HVM\n  PV\n  PV_in_PVH\n}\n\nenum HostAllowedOperations {\n  #Indicates this host is evacuating\n  Evacuate\n  #Indicates this host is in the process of being powered on\n  PowerOn\n  #Indicates this host is able to provision another VM\n  Provision\n  #Indicates this host is in the process of rebooting\n  Reboot\n  #Indicates this host is in the process of shutting itself down\n  Shutdown\n  #This host is the migration target of a VM\n  VmMigrate\n  #This host is resuming a VM\n  VmResume\n  #This host is starting a VM\n  VmStart\n}\n\nenum HostDisplay {\n  #The host will stop outputting its console to a physical display device on next boot\n  DisableOnReboot\n  #This host is not outputting its console to a physical display device\n  Disabled\n  #The host will start outputting its console to a physical display device on next boot\n  EnableOnReboot\n  #This host is outputting its console to a physical display device\n  Enabled\n}\n\n\"An enumeration.\"\nenum NetworkActions {\n  ALL\n  NONE\n  attaching\n  rename\n}\n\n\"An enumeration.\"\nenum PoolActions {\n  ALL\n  NONE\n  create_vm\n  rename\n}\n\nenum PowerState {\n  Halted\n  Paused\n  Running\n  Suspended\n}\n\n\"An enumeration.\"\nenum SRActions {\n  ALL\n  NONE\n  destroy\n  rename\n  scan\n  vdi_clone\n  vdi_create\n  vdi_introduce\n}\n\nenum SRContentType {\n  Disk\n  ISO\n  User\n}\n\nenum ShutdownForce {\n  CLEAN\n  HARD\n}\n\n\"An enumeration.\"\nenum TaskActions {\n  ALL\n  NONE\n  cancel\n  remove\n}\n\n\"An enumeration.\"\nenum TaskStatus {\n  Cancelled\n  Cancelling\n  Failure\n  Pending\n  Success\n}\n\n\"An enumeration.\"\nenum TemplateActions {\n  ALL\n  NONE\n  change_domain_type\n  change_install_os_options\n  changing_VCPUs\n  changing_memory_limits\n  clone\n  create_vm\n  destroy\n  rename\n}\n\nenum VBDMode {\n  RO\n  RW\n}\n\nenum VBDType {\n  CD\n  Disk\n  Floppy\n}\n\n\"An enumeration.\"\nenum VDIActions {\n  ALL\n  NONE\n  destroy\n  plug\n  rename\n}\n\n\"VDI class supports only a subset of VDI types, that are listed below.\"\nenum VDIType {\n  Ephemeral\n  System\n  User\n}\n\n\"An enumeration.\"\nenum VMActions {\n  ALL\n  NONE\n  VNC\n  attach_network\n  attach_vdi\n  change_domain_type\n  changing_VCPUs\n  changing_memory_limits\n  checkpoint\n  clean_reboot\n  clean_shutdown\n  clone\n  copy\n  create_template\n  csvm\n  destroy\n  hard_reboot\n  hard_shutdown\n  launch_playbook\n  migrate_send\n  pause\n  pool_migrate\n  power_state_reset\n  rename\n  resume\n  resume_on\n  revert\n  shutdown\n  snapshot\n  snapshot_with_quiesce\n  start\n  start_on\n  suspend\n  unpause\n}\n\ninput AutoInstall {\n  \"User's full name\"\n  fullname: String\n  \"VM hostname\"\n  hostname: String!\n  \"Partition scheme (TODO)\"\n  partition: String!\n  \"User and root password\"\n  password: String!\n  \"Static IP configuration, if needed\"\n  staticIpConfig: NetworkConfiguration\n  \"Name of the newly created user\"\n  username: String!\n}\n\ninput InstallOSOptionsInput {\n  arch: Arch\n  distro: Distro\n  installRepository: String\n  release: String\n}\n\ninput NetworkConfiguration {\n  dns0: String!\n  dns1: String\n  gateway: String!\n  ip: String!\n  netmask: String!\n}\n\ninput NetworkInput {\n  \"Object's human-readable description\"\n  nameDescription: String\n  \"Object's human-readable name\"\n  nameLabel: String\n}\n\ninput NewVDI {\n  \"Storage repository to create disk on\"\n  SR: ID!\n  \"Disk size of a newly created disk in bytes\"\n  size: Float!\n}\n\ninput PlatformInput {\n  acpi: Int\n  apic: Boolean\n  coresPerSocket: Int\n  deviceModel: String\n  hpet: Boolean\n  nx: Boolean\n  pae: Boolean\n  timeoffset: Int\n  videoram: Int\n}\n\ninput PoolInput {\n  \"Object's human-readable description\"\n  nameDescription: String\n  \"Object's human-readable name\"\n  nameLabel: String\n}\n\ninput QuotaInput {\n  memory: Float\n  vcpuCount: Int\n  vdiSize: Float\n  vmCount: Int\n}\n\ninput SRInput {\n  \"Object's human-readable description\"\n  nameDescription: String\n  \"Object's human-readable name\"\n  nameLabel: String\n}\n\ninput TemplateInput {\n  \"Number of VCPUs at startup\"\n  VCPUsAtStartup: Int\n  \"Maximum number of VCPUs\"\n  VCPUsMax: Int\n  \"VM domain type: 'pv', 'hvm', 'pv_in_pvh'\"\n  domainType: DomainType\n  installOptions: InstallOSOptionsInput\n  \"Dynamic memory max in bytes\"\n  memoryDynamicMax: Float\n  \"Dynamic memory min in bytes\"\n  memoryDynamicMin: Float\n  \"Static memory max in bytes\"\n  memoryStaticMax: Float\n  \"Static memory min in bytes\"\n  memoryStaticMin: Float\n  \"Object's human-readable description\"\n  nameDescription: String\n  \"Object's human-readable name\"\n  nameLabel: String\n  \"VCPU platform properties\"\n  platform: PlatformInput\n}\n\ninput VDIInput {\n  \"Object's human-readable description\"\n  nameDescription: String\n  \"Object's human-readable name\"\n  nameLabel: String\n}\n\ninput VMInput {\n  \"Number of VCPUs at startup\"\n  VCPUsAtStartup: Int\n  \"Maximum number of VCPUs\"\n  VCPUsMax: Int\n  \"VM domain type: 'pv', 'hvm', 'pv_in_pvh'\"\n  domainType: DomainType\n  \"A user against whom the quotes are calculated\"\n  mainOwner: ID\n  \"Dynamic memory max in bytes\"\n  memoryDynamicMax: Float\n  \"Dynamic memory min in bytes\"\n  memoryDynamicMin: Float\n  \"Static memory max in bytes\"\n  memoryStaticMax: Float\n  \"Static memory min in bytes\"\n  memoryStaticMin: Float\n  \"Object's human-readable description\"\n  nameDescription: String\n  \"Object's human-readable name\"\n  nameLabel: String\n  \"VCPU platform properties\"\n  platform: PlatformInput\n}\n\ninput VMStartInput {\n  \"Should this VM be started forcibly\"\n  force: Boolean\n  \"Host to start VM on\"\n  host: ID\n  \"Should this VM be started and immidiately paused\"\n  paused: Boolean\n}\n\n\n\"\"\"\nThe `DateTime` scalar type represents a DateTime\nvalue as specified by\n[iso8601](https://en.wikipedia.org/wiki/ISO_8601).\n\"\"\"\nscalar DateTime\n\n\"JSON String\"\nscalar JSONString\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 69,
      "containsCycle": true,
      "numDefinitions": 118
    }
  ],
  "metrics": {
    "created_at": "2014-05-27T23:18:30Z",
    "updated_at": "2019-06-26T17:00:43Z",
    "pushed_at": "2019-06-26T17:00:41Z",
    "issues": 5,
    "watchers": 3,
    "fork_count": 6,
    "has_wiki_enabled": true,
    "license": "apache-2.0",
    "pull_requests": 9,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 9,
    "releases": 0,
    "stargazers": 0
  }
}