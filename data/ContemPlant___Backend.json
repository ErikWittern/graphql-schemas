{
  "repo_name": "Backend",
  "repo_full_name": "contemplant/backend",
  "repo_owner": "ContemPlant",
  "repo_description": "GraphQL API for the ContemPlant Backend",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "prisma.graphql",
      "path": "src/generated/prisma.graphql",
      "sha": "94d621a84de06304e02c78c15f9975da35e405e9",
      "url": "https://api.github.com/repositories/144572121/contents/src/generated/prisma.graphql?ref=73ac89fd86e344e1b11280727a18fa75efbcc299",
      "git_url": "https://api.github.com/repositories/144572121/git/blobs/94d621a84de06304e02c78c15f9975da35e405e9",
      "html_url": "https://github.com/ContemPlant/Backend/blob/73ac89fd86e344e1b11280727a18fa75efbcc299/src/generated/prisma.graphql",
      "content": "# source: http://localhost:4466/plantsdb/dev\n# timestamp: Wed Jun 13 2018 17:26:14 GMT+0200 (CEST)\n\ntype AggregateArdu {\n  count: Int!\n}\n\ntype AggregatePlant {\n  count: Int!\n}\n\ntype AggregatePlantState {\n  count: Int!\n}\n\ntype AggregateSensorDates {\n  count: Int!\n}\n\ntype AggregateUser {\n  count: Int!\n}\n\ntype Ardu {\n  arduId: String!\n  loadedPlant(where: PlantWhereInput): Plant\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype ArduConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [ArduEdge]!\n  aggregate: AggregateArdu!\n}\n\ninput ArduCreateInput {\n  arduId: String!\n  loadedPlant: PlantCreateOneInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ArduEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Ardu!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum ArduOrderByInput {\n  arduId_ASC\n  arduId_DESC\n  id_ASC\n  id_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype ArduPreviousValues {\n  arduId: String!\n}\n\ntype ArduSubscriptionPayload {\n  mutation: MutationType!\n  node: Ardu\n  updatedFields: [String!]\n  previousValues: ArduPreviousValues\n}\n\ninput ArduSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [ArduSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [ArduSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [ArduSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: ArduWhereInput\n}\n\ninput ArduUpdateInput {\n  arduId: String\n  loadedPlant: PlantUpdateOneInput\n}\n\ninput ArduWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [ArduWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [ArduWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [ArduWhereInput!]\n  arduId: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  arduId_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  arduId_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  arduId_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  arduId_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  arduId_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  arduId_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  arduId_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  arduId_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  arduId_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  arduId_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  arduId_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  arduId_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  arduId_not_ends_with: String\n  loadedPlant: PlantWhereInput\n}\n\ninput ArduWhereUniqueInput {\n  arduId: String\n}\n\ntype BatchPayload {\n  \"\"\"The number of nodes that have been affected by the Batch operation.\"\"\"\n  count: Long!\n}\n\nscalar DateTime\n\n\"\"\"\nThe `Long` scalar type represents non-fractional signed whole numeric values.\nLong can represent values between -(2^63) and 2^63 - 1.\n\"\"\"\nscalar Long\n\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  createPlant(data: PlantCreateInput!): Plant!\n  createArdu(data: ArduCreateInput!): Ardu!\n  createSensorDates(data: SensorDatesCreateInput!): SensorDates!\n  createPlantState(data: PlantStateCreateInput!): PlantState!\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updatePlant(data: PlantUpdateInput!, where: PlantWhereUniqueInput!): Plant\n  updateArdu(data: ArduUpdateInput!, where: ArduWhereUniqueInput!): Ardu\n  updateSensorDates(data: SensorDatesUpdateInput!, where: SensorDatesWhereUniqueInput!): SensorDates\n  updatePlantState(data: PlantStateUpdateInput!, where: PlantStateWhereUniqueInput!): PlantState\n  deleteUser(where: UserWhereUniqueInput!): User\n  deletePlant(where: PlantWhereUniqueInput!): Plant\n  deleteArdu(where: ArduWhereUniqueInput!): Ardu\n  deleteSensorDates(where: SensorDatesWhereUniqueInput!): SensorDates\n  deletePlantState(where: PlantStateWhereUniqueInput!): PlantState\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  upsertPlant(where: PlantWhereUniqueInput!, create: PlantCreateInput!, update: PlantUpdateInput!): Plant!\n  upsertArdu(where: ArduWhereUniqueInput!, create: ArduCreateInput!, update: ArduUpdateInput!): Ardu!\n  upsertSensorDates(where: SensorDatesWhereUniqueInput!, create: SensorDatesCreateInput!, update: SensorDatesUpdateInput!): SensorDates!\n  upsertPlantState(where: PlantStateWhereUniqueInput!, create: PlantStateCreateInput!, update: PlantStateUpdateInput!): PlantState!\n  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!\n  updateManyPlants(data: PlantUpdateInput!, where: PlantWhereInput): BatchPayload!\n  updateManyArdus(data: ArduUpdateInput!, where: ArduWhereInput): BatchPayload!\n  updateManySensorDateses(data: SensorDatesUpdateInput!, where: SensorDatesWhereInput): BatchPayload!\n  updateManyPlantStates(data: PlantStateUpdateInput!, where: PlantStateWhereInput): BatchPayload!\n  deleteManyUsers(where: UserWhereInput): BatchPayload!\n  deleteManyPlants(where: PlantWhereInput): BatchPayload!\n  deleteManyArdus(where: ArduWhereInput): BatchPayload!\n  deleteManySensorDateses(where: SensorDatesWhereInput): BatchPayload!\n  deleteManyPlantStates(where: PlantStateWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\ntype Plant implements Node {\n  id: ID!\n  owner(where: UserWhereInput): User!\n  name: String!\n  temperature_opt: Float!\n  temperature_weight: Float!\n  radiation_opt: Float!\n  radiation_weight: Float!\n  humidity_opt: Float!\n  humidity_weight: Float!\n  loudness_opt: Float!\n  loudness_weight: Float!\n  plantStates(where: PlantStateWhereInput, orderBy: PlantStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlantState!]\n  sensorDates(where: SensorDatesWhereInput, orderBy: SensorDatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorDates!]\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype PlantConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [PlantEdge]!\n  aggregate: AggregatePlant!\n}\n\ninput PlantCreateInput {\n  name: String!\n  temperature_opt: Float!\n  temperature_weight: Float!\n  radiation_opt: Float!\n  radiation_weight: Float!\n  humidity_opt: Float!\n  humidity_weight: Float!\n  loudness_opt: Float!\n  loudness_weight: Float!\n  owner: UserCreateOneWithoutPlantsInput!\n  plantStates: PlantStateCreateManyWithoutPlantInput\n  sensorDates: SensorDatesCreateManyWithoutPlantInput\n}\n\ninput PlantCreateManyWithoutOwnerInput {\n  create: [PlantCreateWithoutOwnerInput!]\n  connect: [PlantWhereUniqueInput!]\n}\n\ninput PlantCreateOneInput {\n  create: PlantCreateInput\n  connect: PlantWhereUniqueInput\n}\n\ninput PlantCreateOneWithoutPlantStatesInput {\n  create: PlantCreateWithoutPlantStatesInput\n  connect: PlantWhereUniqueInput\n}\n\ninput PlantCreateOneWithoutSensorDatesInput {\n  create: PlantCreateWithoutSensorDatesInput\n  connect: PlantWhereUniqueInput\n}\n\ninput PlantCreateWithoutOwnerInput {\n  name: String!\n  temperature_opt: Float!\n  temperature_weight: Float!\n  radiation_opt: Float!\n  radiation_weight: Float!\n  humidity_opt: Float!\n  humidity_weight: Float!\n  loudness_opt: Float!\n  loudness_weight: Float!\n  plantStates: PlantStateCreateManyWithoutPlantInput\n  sensorDates: SensorDatesCreateManyWithoutPlantInput\n}\n\ninput PlantCreateWithoutPlantStatesInput {\n  name: String!\n  temperature_opt: Float!\n  temperature_weight: Float!\n  radiation_opt: Float!\n  radiation_weight: Float!\n  humidity_opt: Float!\n  humidity_weight: Float!\n  loudness_opt: Float!\n  loudness_weight: Float!\n  owner: UserCreateOneWithoutPlantsInput!\n  sensorDates: SensorDatesCreateManyWithoutPlantInput\n}\n\ninput PlantCreateWithoutSensorDatesInput {\n  name: String!\n  temperature_opt: Float!\n  temperature_weight: Float!\n  radiation_opt: Float!\n  radiation_weight: Float!\n  humidity_opt: Float!\n  humidity_weight: Float!\n  loudness_opt: Float!\n  loudness_weight: Float!\n  owner: UserCreateOneWithoutPlantsInput!\n  plantStates: PlantStateCreateManyWithoutPlantInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PlantEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Plant!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum PlantOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  temperature_opt_ASC\n  temperature_opt_DESC\n  temperature_weight_ASC\n  temperature_weight_DESC\n  radiation_opt_ASC\n  radiation_opt_DESC\n  radiation_weight_ASC\n  radiation_weight_DESC\n  humidity_opt_ASC\n  humidity_opt_DESC\n  humidity_weight_ASC\n  humidity_weight_DESC\n  loudness_opt_ASC\n  loudness_opt_DESC\n  loudness_weight_ASC\n  loudness_weight_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype PlantPreviousValues {\n  id: ID!\n  name: String!\n  temperature_opt: Float!\n  temperature_weight: Float!\n  radiation_opt: Float!\n  radiation_weight: Float!\n  humidity_opt: Float!\n  humidity_weight: Float!\n  loudness_opt: Float!\n  loudness_weight: Float!\n}\n\ntype PlantState implements Node {\n  id: ID!\n  environment: Float!\n  plant(where: PlantWhereInput): Plant!\n  health: Float!\n  size: Float!\n  sensorDates(where: SensorDatesWhereInput): SensorDates!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype PlantStateConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [PlantStateEdge]!\n  aggregate: AggregatePlantState!\n}\n\ninput PlantStateCreateInput {\n  environment: Float!\n  health: Float!\n  size: Float!\n  plant: PlantCreateOneWithoutPlantStatesInput!\n  sensorDates: SensorDatesCreateOneInput!\n}\n\ninput PlantStateCreateManyWithoutPlantInput {\n  create: [PlantStateCreateWithoutPlantInput!]\n  connect: [PlantStateWhereUniqueInput!]\n}\n\ninput PlantStateCreateWithoutPlantInput {\n  environment: Float!\n  health: Float!\n  size: Float!\n  sensorDates: SensorDatesCreateOneInput!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PlantStateEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: PlantState!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum PlantStateOrderByInput {\n  id_ASC\n  id_DESC\n  environment_ASC\n  environment_DESC\n  health_ASC\n  health_DESC\n  size_ASC\n  size_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype PlantStatePreviousValues {\n  id: ID!\n  environment: Float!\n  health: Float!\n  size: Float!\n}\n\ntype PlantStateSubscriptionPayload {\n  mutation: MutationType!\n  node: PlantState\n  updatedFields: [String!]\n  previousValues: PlantStatePreviousValues\n}\n\ninput PlantStateSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [PlantStateSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [PlantStateSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [PlantStateSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: PlantStateWhereInput\n}\n\ninput PlantStateUpdateInput {\n  environment: Float\n  health: Float\n  size: Float\n  plant: PlantUpdateOneWithoutPlantStatesInput\n  sensorDates: SensorDatesUpdateOneInput\n}\n\ninput PlantStateUpdateManyWithoutPlantInput {\n  create: [PlantStateCreateWithoutPlantInput!]\n  connect: [PlantStateWhereUniqueInput!]\n  disconnect: [PlantStateWhereUniqueInput!]\n  delete: [PlantStateWhereUniqueInput!]\n  update: [PlantStateUpdateWithWhereUniqueWithoutPlantInput!]\n  upsert: [PlantStateUpsertWithWhereUniqueWithoutPlantInput!]\n}\n\ninput PlantStateUpdateWithoutPlantDataInput {\n  environment: Float\n  health: Float\n  size: Float\n  sensorDates: SensorDatesUpdateOneInput\n}\n\ninput PlantStateUpdateWithWhereUniqueWithoutPlantInput {\n  where: PlantStateWhereUniqueInput!\n  data: PlantStateUpdateWithoutPlantDataInput!\n}\n\ninput PlantStateUpsertWithWhereUniqueWithoutPlantInput {\n  where: PlantStateWhereUniqueInput!\n  update: PlantStateUpdateWithoutPlantDataInput!\n  create: PlantStateCreateWithoutPlantInput!\n}\n\ninput PlantStateWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [PlantStateWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [PlantStateWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [PlantStateWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  environment: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  environment_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  environment_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  environment_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  environment_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  environment_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  environment_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  environment_gte: Float\n  health: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  health_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  health_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  health_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  health_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  health_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  health_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  health_gte: Float\n  size: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  size_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  size_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  size_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  size_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  size_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  size_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  size_gte: Float\n  plant: PlantWhereInput\n  sensorDates: SensorDatesWhereInput\n}\n\ninput PlantStateWhereUniqueInput {\n  id: ID\n}\n\ntype PlantSubscriptionPayload {\n  mutation: MutationType!\n  node: Plant\n  updatedFields: [String!]\n  previousValues: PlantPreviousValues\n}\n\ninput PlantSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [PlantSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [PlantSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [PlantSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: PlantWhereInput\n}\n\ninput PlantUpdateDataInput {\n  name: String\n  temperature_opt: Float\n  temperature_weight: Float\n  radiation_opt: Float\n  radiation_weight: Float\n  humidity_opt: Float\n  humidity_weight: Float\n  loudness_opt: Float\n  loudness_weight: Float\n  owner: UserUpdateOneWithoutPlantsInput\n  plantStates: PlantStateUpdateManyWithoutPlantInput\n  sensorDates: SensorDatesUpdateManyWithoutPlantInput\n}\n\ninput PlantUpdateInput {\n  name: String\n  temperature_opt: Float\n  temperature_weight: Float\n  radiation_opt: Float\n  radiation_weight: Float\n  humidity_opt: Float\n  humidity_weight: Float\n  loudness_opt: Float\n  loudness_weight: Float\n  owner: UserUpdateOneWithoutPlantsInput\n  plantStates: PlantStateUpdateManyWithoutPlantInput\n  sensorDates: SensorDatesUpdateManyWithoutPlantInput\n}\n\ninput PlantUpdateManyWithoutOwnerInput {\n  create: [PlantCreateWithoutOwnerInput!]\n  connect: [PlantWhereUniqueInput!]\n  disconnect: [PlantWhereUniqueInput!]\n  delete: [PlantWhereUniqueInput!]\n  update: [PlantUpdateWithWhereUniqueWithoutOwnerInput!]\n  upsert: [PlantUpsertWithWhereUniqueWithoutOwnerInput!]\n}\n\ninput PlantUpdateOneInput {\n  create: PlantCreateInput\n  connect: PlantWhereUniqueInput\n  disconnect: Boolean\n  delete: Boolean\n  update: PlantUpdateDataInput\n  upsert: PlantUpsertNestedInput\n}\n\ninput PlantUpdateOneWithoutPlantStatesInput {\n  create: PlantCreateWithoutPlantStatesInput\n  connect: PlantWhereUniqueInput\n  delete: Boolean\n  update: PlantUpdateWithoutPlantStatesDataInput\n  upsert: PlantUpsertWithoutPlantStatesInput\n}\n\ninput PlantUpdateOneWithoutSensorDatesInput {\n  create: PlantCreateWithoutSensorDatesInput\n  connect: PlantWhereUniqueInput\n  delete: Boolean\n  update: PlantUpdateWithoutSensorDatesDataInput\n  upsert: PlantUpsertWithoutSensorDatesInput\n}\n\ninput PlantUpdateWithoutOwnerDataInput {\n  name: String\n  temperature_opt: Float\n  temperature_weight: Float\n  radiation_opt: Float\n  radiation_weight: Float\n  humidity_opt: Float\n  humidity_weight: Float\n  loudness_opt: Float\n  loudness_weight: Float\n  plantStates: PlantStateUpdateManyWithoutPlantInput\n  sensorDates: SensorDatesUpdateManyWithoutPlantInput\n}\n\ninput PlantUpdateWithoutPlantStatesDataInput {\n  name: String\n  temperature_opt: Float\n  temperature_weight: Float\n  radiation_opt: Float\n  radiation_weight: Float\n  humidity_opt: Float\n  humidity_weight: Float\n  loudness_opt: Float\n  loudness_weight: Float\n  owner: UserUpdateOneWithoutPlantsInput\n  sensorDates: SensorDatesUpdateManyWithoutPlantInput\n}\n\ninput PlantUpdateWithoutSensorDatesDataInput {\n  name: String\n  temperature_opt: Float\n  temperature_weight: Float\n  radiation_opt: Float\n  radiation_weight: Float\n  humidity_opt: Float\n  humidity_weight: Float\n  loudness_opt: Float\n  loudness_weight: Float\n  owner: UserUpdateOneWithoutPlantsInput\n  plantStates: PlantStateUpdateManyWithoutPlantInput\n}\n\ninput PlantUpdateWithWhereUniqueWithoutOwnerInput {\n  where: PlantWhereUniqueInput!\n  data: PlantUpdateWithoutOwnerDataInput!\n}\n\ninput PlantUpsertNestedInput {\n  update: PlantUpdateDataInput!\n  create: PlantCreateInput!\n}\n\ninput PlantUpsertWithoutPlantStatesInput {\n  update: PlantUpdateWithoutPlantStatesDataInput!\n  create: PlantCreateWithoutPlantStatesInput!\n}\n\ninput PlantUpsertWithoutSensorDatesInput {\n  update: PlantUpdateWithoutSensorDatesDataInput!\n  create: PlantCreateWithoutSensorDatesInput!\n}\n\ninput PlantUpsertWithWhereUniqueWithoutOwnerInput {\n  where: PlantWhereUniqueInput!\n  update: PlantUpdateWithoutOwnerDataInput!\n  create: PlantCreateWithoutOwnerInput!\n}\n\ninput PlantWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [PlantWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [PlantWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [PlantWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  temperature_opt: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  temperature_opt_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  temperature_opt_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  temperature_opt_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  temperature_opt_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  temperature_opt_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  temperature_opt_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  temperature_opt_gte: Float\n  temperature_weight: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  temperature_weight_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  temperature_weight_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  temperature_weight_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  temperature_weight_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  temperature_weight_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  temperature_weight_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  temperature_weight_gte: Float\n  radiation_opt: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  radiation_opt_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  radiation_opt_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  radiation_opt_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  radiation_opt_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  radiation_opt_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  radiation_opt_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  radiation_opt_gte: Float\n  radiation_weight: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  radiation_weight_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  radiation_weight_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  radiation_weight_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  radiation_weight_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  radiation_weight_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  radiation_weight_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  radiation_weight_gte: Float\n  humidity_opt: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  humidity_opt_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  humidity_opt_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  humidity_opt_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  humidity_opt_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  humidity_opt_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  humidity_opt_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  humidity_opt_gte: Float\n  humidity_weight: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  humidity_weight_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  humidity_weight_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  humidity_weight_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  humidity_weight_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  humidity_weight_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  humidity_weight_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  humidity_weight_gte: Float\n  loudness_opt: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  loudness_opt_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  loudness_opt_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  loudness_opt_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  loudness_opt_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  loudness_opt_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  loudness_opt_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  loudness_opt_gte: Float\n  loudness_weight: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  loudness_weight_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  loudness_weight_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  loudness_weight_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  loudness_weight_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  loudness_weight_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  loudness_weight_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  loudness_weight_gte: Float\n  owner: UserWhereInput\n  plantStates_every: PlantStateWhereInput\n  plantStates_some: PlantStateWhereInput\n  plantStates_none: PlantStateWhereInput\n  sensorDates_every: SensorDatesWhereInput\n  sensorDates_some: SensorDatesWhereInput\n  sensorDates_none: SensorDatesWhereInput\n}\n\ninput PlantWhereUniqueInput {\n  id: ID\n}\n\ntype Query {\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant]!\n  ardus(where: ArduWhereInput, orderBy: ArduOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ardu]!\n  sensorDateses(where: SensorDatesWhereInput, orderBy: SensorDatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorDates]!\n  plantStates(where: PlantStateWhereInput, orderBy: PlantStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlantState]!\n  user(where: UserWhereUniqueInput!): User\n  plant(where: PlantWhereUniqueInput!): Plant\n  ardu(where: ArduWhereUniqueInput!): Ardu\n  sensorDates(where: SensorDatesWhereUniqueInput!): SensorDates\n  plantState(where: PlantStateWhereUniqueInput!): PlantState\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  plantsConnection(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlantConnection!\n  ardusConnection(where: ArduWhereInput, orderBy: ArduOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArduConnection!\n  sensorDatesesConnection(where: SensorDatesWhereInput, orderBy: SensorDatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorDatesConnection!\n  plantStatesConnection(where: PlantStateWhereInput, orderBy: PlantStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlantStateConnection!\n\n  \"\"\"Fetches an object given its ID\"\"\"\n  node(\n    \"\"\"The ID of an object\"\"\"\n    id: ID!\n  ): Node\n}\n\ntype SensorDates implements Node {\n  id: ID!\n  timeStamp: DateTime!\n  plant(where: PlantWhereInput): Plant!\n  temperatureValue: Float!\n  radiationValue: Float!\n  humidityValue: Float!\n  loudnessValue: Float!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype SensorDatesConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [SensorDatesEdge]!\n  aggregate: AggregateSensorDates!\n}\n\ninput SensorDatesCreateInput {\n  timeStamp: DateTime!\n  temperatureValue: Float!\n  radiationValue: Float!\n  humidityValue: Float!\n  loudnessValue: Float!\n  plant: PlantCreateOneWithoutSensorDatesInput!\n}\n\ninput SensorDatesCreateManyWithoutPlantInput {\n  create: [SensorDatesCreateWithoutPlantInput!]\n  connect: [SensorDatesWhereUniqueInput!]\n}\n\ninput SensorDatesCreateOneInput {\n  create: SensorDatesCreateInput\n  connect: SensorDatesWhereUniqueInput\n}\n\ninput SensorDatesCreateWithoutPlantInput {\n  timeStamp: DateTime!\n  temperatureValue: Float!\n  radiationValue: Float!\n  humidityValue: Float!\n  loudnessValue: Float!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype SensorDatesEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: SensorDates!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum SensorDatesOrderByInput {\n  id_ASC\n  id_DESC\n  timeStamp_ASC\n  timeStamp_DESC\n  temperatureValue_ASC\n  temperatureValue_DESC\n  radiationValue_ASC\n  radiationValue_DESC\n  humidityValue_ASC\n  humidityValue_DESC\n  loudnessValue_ASC\n  loudnessValue_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype SensorDatesPreviousValues {\n  id: ID!\n  timeStamp: DateTime!\n  temperatureValue: Float!\n  radiationValue: Float!\n  humidityValue: Float!\n  loudnessValue: Float!\n}\n\ntype SensorDatesSubscriptionPayload {\n  mutation: MutationType!\n  node: SensorDates\n  updatedFields: [String!]\n  previousValues: SensorDatesPreviousValues\n}\n\ninput SensorDatesSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [SensorDatesSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [SensorDatesSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [SensorDatesSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: SensorDatesWhereInput\n}\n\ninput SensorDatesUpdateDataInput {\n  timeStamp: DateTime\n  temperatureValue: Float\n  radiationValue: Float\n  humidityValue: Float\n  loudnessValue: Float\n  plant: PlantUpdateOneWithoutSensorDatesInput\n}\n\ninput SensorDatesUpdateInput {\n  timeStamp: DateTime\n  temperatureValue: Float\n  radiationValue: Float\n  humidityValue: Float\n  loudnessValue: Float\n  plant: PlantUpdateOneWithoutSensorDatesInput\n}\n\ninput SensorDatesUpdateManyWithoutPlantInput {\n  create: [SensorDatesCreateWithoutPlantInput!]\n  connect: [SensorDatesWhereUniqueInput!]\n  disconnect: [SensorDatesWhereUniqueInput!]\n  delete: [SensorDatesWhereUniqueInput!]\n  update: [SensorDatesUpdateWithWhereUniqueWithoutPlantInput!]\n  upsert: [SensorDatesUpsertWithWhereUniqueWithoutPlantInput!]\n}\n\ninput SensorDatesUpdateOneInput {\n  create: SensorDatesCreateInput\n  connect: SensorDatesWhereUniqueInput\n  delete: Boolean\n  update: SensorDatesUpdateDataInput\n  upsert: SensorDatesUpsertNestedInput\n}\n\ninput SensorDatesUpdateWithoutPlantDataInput {\n  timeStamp: DateTime\n  temperatureValue: Float\n  radiationValue: Float\n  humidityValue: Float\n  loudnessValue: Float\n}\n\ninput SensorDatesUpdateWithWhereUniqueWithoutPlantInput {\n  where: SensorDatesWhereUniqueInput!\n  data: SensorDatesUpdateWithoutPlantDataInput!\n}\n\ninput SensorDatesUpsertNestedInput {\n  update: SensorDatesUpdateDataInput!\n  create: SensorDatesCreateInput!\n}\n\ninput SensorDatesUpsertWithWhereUniqueWithoutPlantInput {\n  where: SensorDatesWhereUniqueInput!\n  update: SensorDatesUpdateWithoutPlantDataInput!\n  create: SensorDatesCreateWithoutPlantInput!\n}\n\ninput SensorDatesWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [SensorDatesWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [SensorDatesWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [SensorDatesWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  timeStamp: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  timeStamp_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  timeStamp_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  timeStamp_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  timeStamp_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  timeStamp_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  timeStamp_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  timeStamp_gte: DateTime\n  temperatureValue: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  temperatureValue_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  temperatureValue_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  temperatureValue_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  temperatureValue_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  temperatureValue_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  temperatureValue_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  temperatureValue_gte: Float\n  radiationValue: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  radiationValue_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  radiationValue_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  radiationValue_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  radiationValue_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  radiationValue_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  radiationValue_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  radiationValue_gte: Float\n  humidityValue: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  humidityValue_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  humidityValue_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  humidityValue_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  humidityValue_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  humidityValue_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  humidityValue_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  humidityValue_gte: Float\n  loudnessValue: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  loudnessValue_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  loudnessValue_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  loudnessValue_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  loudnessValue_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  loudnessValue_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  loudnessValue_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  loudnessValue_gte: Float\n  plant: PlantWhereInput\n}\n\ninput SensorDatesWhereUniqueInput {\n  id: ID\n}\n\ntype Subscription {\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n  plant(where: PlantSubscriptionWhereInput): PlantSubscriptionPayload\n  ardu(where: ArduSubscriptionWhereInput): ArduSubscriptionPayload\n  sensorDates(where: SensorDatesSubscriptionWhereInput): SensorDatesSubscriptionPayload\n  plantState(where: PlantStateSubscriptionWhereInput): PlantStateSubscriptionPayload\n}\n\ntype User implements Node {\n  id: ID!\n  username: String!\n  email: String!\n  password: String!\n  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant!]\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype UserConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  username: String!\n  email: String!\n  password: String!\n  plants: PlantCreateManyWithoutOwnerInput\n}\n\ninput UserCreateOneWithoutPlantsInput {\n  create: UserCreateWithoutPlantsInput\n  connect: UserWhereUniqueInput\n}\n\ninput UserCreateWithoutPlantsInput {\n  username: String!\n  email: String!\n  password: String!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype UserEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: User!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  username_ASC\n  username_DESC\n  email_ASC\n  email_DESC\n  password_ASC\n  password_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  username: String!\n  email: String!\n  password: String!\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [UserSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [UserSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [UserSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n}\n\ninput UserUpdateInput {\n  username: String\n  email: String\n  password: String\n  plants: PlantUpdateManyWithoutOwnerInput\n}\n\ninput UserUpdateOneWithoutPlantsInput {\n  create: UserCreateWithoutPlantsInput\n  connect: UserWhereUniqueInput\n  delete: Boolean\n  update: UserUpdateWithoutPlantsDataInput\n  upsert: UserUpsertWithoutPlantsInput\n}\n\ninput UserUpdateWithoutPlantsDataInput {\n  username: String\n  email: String\n  password: String\n}\n\ninput UserUpsertWithoutPlantsInput {\n  update: UserUpdateWithoutPlantsDataInput!\n  create: UserCreateWithoutPlantsInput!\n}\n\ninput UserWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [UserWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [UserWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [UserWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  username: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  username_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  username_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  username_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  username_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  username_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  username_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  username_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  username_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  username_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  username_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  username_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  username_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  username_not_ends_with: String\n  email: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  email_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  email_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  email_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  email_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  email_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  email_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  email_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  email_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  email_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  email_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  email_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  email_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  email_not_ends_with: String\n  password: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  password_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  password_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  password_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  password_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  password_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  password_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  password_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  password_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  password_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  password_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  password_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  password_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  password_not_ends_with: String\n  plants_every: PlantWhereInput\n  plants_some: PlantWhereInput\n  plants_none: PlantWhereInput\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n  email: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 35,
      "containsCycle": true,
      "numDefinitions": 110
    }
  ],
  "metrics": {
    "created_at": "2018-08-13T11:44:07Z",
    "updated_at": "2018-08-14T12:27:48Z",
    "pushed_at": "2018-08-14T12:27:47Z",
    "issues": 0,
    "watchers": 3,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}