{
  "repo_name": "postgraphile",
  "repo_full_name": "nttuananh7630/postgraphile",
  "repo_owner": "nttuananh7630",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "data/schema.graphql",
      "sha": "fba0744a79194b6c3e5e99119b4b02d6530a3370",
      "url": "https://api.github.com/repositories/162819428/contents/data/schema.graphql?ref=10cd2990bed04ecdd64ae25ec51d61d82e0901c3",
      "git_url": "https://api.github.com/repositories/162819428/git/blobs/fba0744a79194b6c3e5e99119b4b02d6530a3370",
      "html_url": "https://github.com/nttuananh7630/postgraphile/blob/10cd2990bed04ecdd64ae25ec51d61d82e0901c3/data/schema.graphql",
      "content": "\"\"\"All input for the create `Forum` mutation.\"\"\"\ninput CreateForumInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Forum` to be created by this mutation.\"\"\"\n  forum: ForumInput!\n}\n\n\"\"\"The output of our create `Forum` mutation.\"\"\"\ntype CreateForumPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Forum` that was created by this mutation.\"\"\"\n  forum: Forum\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n  forumEdge(\n    \"\"\"The method to use when ordering `Forum`.\"\"\"\n    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n  ): ForumsEdge\n}\n\n\"\"\"All input for the create `Post` mutation.\"\"\"\ninput CreatePostInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Post` to be created by this mutation.\"\"\"\n  post: PostInput!\n}\n\n\"\"\"The output of our create `Post` mutation.\"\"\"\ntype CreatePostPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Post` that was created by this mutation.\"\"\"\n  post: Post\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Topic` that is related to this `Post`.\"\"\"\n  topic: Topic\n\n  \"\"\"Reads a single `User` that is related to this `Post`.\"\"\"\n  author: User\n\n  \"\"\"An edge for our `Post`. May be used by Relay 1.\"\"\"\n  postEdge(\n    \"\"\"The method to use when ordering `Post`.\"\"\"\n    orderBy: [PostsOrderBy!] = PRIMARY_KEY_ASC\n  ): PostsEdge\n}\n\n\"\"\"All input for the create `Topic` mutation.\"\"\"\ninput CreateTopicInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Topic` to be created by this mutation.\"\"\"\n  topic: TopicInput!\n}\n\n\"\"\"The output of our create `Topic` mutation.\"\"\"\ntype CreateTopicPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Topic` that was created by this mutation.\"\"\"\n  topic: Topic\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Forum` that is related to this `Topic`.\"\"\"\n  forum: Forum\n\n  \"\"\"Reads a single `User` that is related to this `Topic`.\"\"\"\n  author: User\n\n  \"\"\"An edge for our `Topic`. May be used by Relay 1.\"\"\"\n  topicEdge(\n    \"\"\"The method to use when ordering `Topic`.\"\"\"\n    orderBy: [TopicsOrderBy!] = PRIMARY_KEY_ASC\n  ): TopicsEdge\n}\n\n\"\"\"All input for the create `UserEmail` mutation.\"\"\"\ninput CreateUserEmailInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `UserEmail` to be created by this mutation.\"\"\"\n  userEmail: UserEmailInput!\n}\n\n\"\"\"The output of our create `UserEmail` mutation.\"\"\"\ntype CreateUserEmailPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `UserEmail` that was created by this mutation.\"\"\"\n  userEmail: UserEmail\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `User` that is related to this `UserEmail`.\"\"\"\n  user: User\n\n  \"\"\"An edge for our `UserEmail`. May be used by Relay 1.\"\"\"\n  userEmailEdge(\n    \"\"\"The method to use when ordering `UserEmail`.\"\"\"\n    orderBy: [UserEmailsOrderBy!] = PRIMARY_KEY_ASC\n  ): UserEmailsEdge\n}\n\n\"\"\"A location in a connection that can be used for resuming pagination.\"\"\"\nscalar Cursor\n\n\"\"\"\nA point in time as described by the [ISO\n8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.\n\"\"\"\nscalar Datetime\n\n\"\"\"All input for the `deleteForumById` mutation.\"\"\"\ninput DeleteForumByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deleteForumBySlug` mutation.\"\"\"\ninput DeleteForumBySlugInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n  slug: String!\n}\n\n\"\"\"All input for the `deleteForum` mutation.\"\"\"\ninput DeleteForumInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Forum` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `Forum` mutation.\"\"\"\ntype DeleteForumPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Forum` that was deleted by this mutation.\"\"\"\n  forum: Forum\n  deletedForumId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n  forumEdge(\n    \"\"\"The method to use when ordering `Forum`.\"\"\"\n    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n  ): ForumsEdge\n}\n\n\"\"\"All input for the `deletePostById` mutation.\"\"\"\ninput DeletePostByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deletePost` mutation.\"\"\"\ninput DeletePostInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Post` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `Post` mutation.\"\"\"\ntype DeletePostPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Post` that was deleted by this mutation.\"\"\"\n  post: Post\n  deletedPostId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Topic` that is related to this `Post`.\"\"\"\n  topic: Topic\n\n  \"\"\"Reads a single `User` that is related to this `Post`.\"\"\"\n  author: User\n\n  \"\"\"An edge for our `Post`. May be used by Relay 1.\"\"\"\n  postEdge(\n    \"\"\"The method to use when ordering `Post`.\"\"\"\n    orderBy: [PostsOrderBy!] = PRIMARY_KEY_ASC\n  ): PostsEdge\n}\n\n\"\"\"All input for the `deleteTopicById` mutation.\"\"\"\ninput DeleteTopicByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deleteTopic` mutation.\"\"\"\ninput DeleteTopicInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Topic` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `Topic` mutation.\"\"\"\ntype DeleteTopicPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Topic` that was deleted by this mutation.\"\"\"\n  topic: Topic\n  deletedTopicId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Forum` that is related to this `Topic`.\"\"\"\n  forum: Forum\n\n  \"\"\"Reads a single `User` that is related to this `Topic`.\"\"\"\n  author: User\n\n  \"\"\"An edge for our `Topic`. May be used by Relay 1.\"\"\"\n  topicEdge(\n    \"\"\"The method to use when ordering `Topic`.\"\"\"\n    orderBy: [TopicsOrderBy!] = PRIMARY_KEY_ASC\n  ): TopicsEdge\n}\n\n\"\"\"All input for the `deleteUserAuthenticationById` mutation.\"\"\"\ninput DeleteUserAuthenticationByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"\nAll input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.\n\"\"\"\ninput DeleteUserAuthenticationByServiceAndIdentifierInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n  service: String!\n\n  \"\"\"A unique identifier for the user within the login service.\"\"\"\n  identifier: String!\n}\n\n\"\"\"All input for the `deleteUserAuthentication` mutation.\"\"\"\ninput DeleteUserAuthenticationInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `UserAuthentication` mutation.\"\"\"\ntype DeleteUserAuthenticationPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `UserAuthentication` that was deleted by this mutation.\"\"\"\n  userAuthentication: UserAuthentication\n  deletedUserAuthenticationId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `UserAuthentication`. May be used by Relay 1.\"\"\"\n  userAuthenticationEdge(\n    \"\"\"The method to use when ordering `UserAuthentication`.\"\"\"\n    orderBy: [UserAuthenticationsOrderBy!] = PRIMARY_KEY_ASC\n  ): UserAuthenticationsEdge\n}\n\n\"\"\"All input for the `deleteUserById` mutation.\"\"\"\ninput DeleteUserByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"Unique identifier for the user.\"\"\"\n  id: Int!\n}\n\n\"\"\"All input for the `deleteUserByUsername` mutation.\"\"\"\ninput DeleteUserByUsernameInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"Public-facing username (or 'handle') of the user.\"\"\"\n  username: String!\n}\n\n\"\"\"All input for the `deleteUserEmailById` mutation.\"\"\"\ninput DeleteUserEmailByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  id: Int!\n}\n\n\"\"\"All input for the `deleteUserEmailByUserIdAndEmail` mutation.\"\"\"\ninput DeleteUserEmailByUserIdAndEmailInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  userId: Int!\n\n  \"\"\"The users email address, in `a@b.c` format.\"\"\"\n  email: String!\n}\n\n\"\"\"All input for the `deleteUserEmail` mutation.\"\"\"\ninput DeleteUserEmailInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `UserEmail` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `UserEmail` mutation.\"\"\"\ntype DeleteUserEmailPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `UserEmail` that was deleted by this mutation.\"\"\"\n  userEmail: UserEmail\n  deletedUserEmailId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `User` that is related to this `UserEmail`.\"\"\"\n  user: User\n\n  \"\"\"An edge for our `UserEmail`. May be used by Relay 1.\"\"\"\n  userEmailEdge(\n    \"\"\"The method to use when ordering `UserEmail`.\"\"\"\n    orderBy: [UserEmailsOrderBy!] = PRIMARY_KEY_ASC\n  ): UserEmailsEdge\n}\n\n\"\"\"All input for the `deleteUser` mutation.\"\"\"\ninput DeleteUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `User` to be deleted.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"The output of our delete `User` mutation.\"\"\"\ntype DeleteUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` that was deleted by this mutation.\"\"\"\n  user: User\n  deletedUserId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\n\"\"\"All input for the `forgotPassword` mutation.\"\"\"\ninput ForgotPasswordInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  email: String!\n}\n\n\"\"\"The output of our `forgotPassword` mutation.\"\"\"\ntype ForgotPasswordPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n  success: Boolean\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n}\n\n\"\"\"A subject-based grouping of topics and posts.\"\"\"\ntype Forum implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n\n  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n  slug: String!\n\n  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n  name: String!\n\n  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n  description: String!\n  createdAt: Datetime!\n  updatedAt: Datetime!\n\n  \"\"\"Reads and enables pagination through a set of `Topic`.\"\"\"\n  topics(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Topic`.\"\"\"\n    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: TopicCondition\n  ): TopicsConnection!\n}\n\n\"\"\"\nA condition to be used against `Forum` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput ForumCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `slug` field.\"\"\"\n  slug: String\n\n  \"\"\"Checks for equality with the object’s `name` field.\"\"\"\n  name: String\n\n  \"\"\"Checks for equality with the object’s `description` field.\"\"\"\n  description: String\n\n  \"\"\"Checks for equality with the object’s `createdAt` field.\"\"\"\n  createdAt: Datetime\n\n  \"\"\"Checks for equality with the object’s `updatedAt` field.\"\"\"\n  updatedAt: Datetime\n}\n\n\"\"\"An input for mutations affecting `Forum`\"\"\"\ninput ForumInput {\n  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n  slug: String!\n\n  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n  name: String!\n\n  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n  description: String\n}\n\n\"\"\"\nRepresents an update to a `Forum`. Fields that are set will be updated.\n\"\"\"\ninput ForumPatch {\n  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n  slug: String\n\n  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n  name: String\n\n  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n  description: String\n}\n\n\"\"\"A connection to a list of `Forum` values.\"\"\"\ntype ForumsConnection {\n  \"\"\"A list of `Forum` objects.\"\"\"\n  nodes: [Forum]!\n\n  \"\"\"\n  A list of edges which contains the `Forum` and cursor to aid in pagination.\n  \"\"\"\n  edges: [ForumsEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `Forum` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `Forum` edge in the connection.\"\"\"\ntype ForumsEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `Forum` at the end of the edge.\"\"\"\n  node: Forum\n}\n\n\"\"\"Methods to use when ordering `Forum`.\"\"\"\nenum ForumsOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  SLUG_ASC\n  SLUG_DESC\n  NAME_ASC\n  NAME_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  UPDATED_AT_ASC\n  UPDATED_AT_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"\nThe root mutation type which contains root level fields which mutate data.\n\"\"\"\ntype Mutation {\n  \"\"\"Creates a single `Forum`.\"\"\"\n  createForum(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreateForumInput!\n  ): CreateForumPayload\n\n  \"\"\"Creates a single `Post`.\"\"\"\n  createPost(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreatePostInput!\n  ): CreatePostPayload\n\n  \"\"\"Creates a single `Topic`.\"\"\"\n  createTopic(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreateTopicInput!\n  ): CreateTopicPayload\n\n  \"\"\"Creates a single `UserEmail`.\"\"\"\n  createUserEmail(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreateUserEmailInput!\n  ): CreateUserEmailPayload\n\n  \"\"\"Updates a single `Forum` using its globally unique id and a patch.\"\"\"\n  updateForum(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateForumInput!\n  ): UpdateForumPayload\n\n  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n  updateForumById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateForumByIdInput!\n  ): UpdateForumPayload\n\n  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n  updateForumBySlug(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateForumBySlugInput!\n  ): UpdateForumPayload\n\n  \"\"\"Updates a single `Post` using its globally unique id and a patch.\"\"\"\n  updatePost(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePostInput!\n  ): UpdatePostPayload\n\n  \"\"\"Updates a single `Post` using a unique key and a patch.\"\"\"\n  updatePostById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePostByIdInput!\n  ): UpdatePostPayload\n\n  \"\"\"Updates a single `Topic` using its globally unique id and a patch.\"\"\"\n  updateTopic(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateTopicInput!\n  ): UpdateTopicPayload\n\n  \"\"\"Updates a single `Topic` using a unique key and a patch.\"\"\"\n  updateTopicById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateTopicByIdInput!\n  ): UpdateTopicPayload\n\n  \"\"\"Updates a single `User` using its globally unique id and a patch.\"\"\"\n  updateUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateUserInput!\n  ): UpdateUserPayload\n\n  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n  updateUserById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateUserByIdInput!\n  ): UpdateUserPayload\n\n  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n  updateUserByUsername(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdateUserByUsernameInput!\n  ): UpdateUserPayload\n\n  \"\"\"Deletes a single `Forum` using its globally unique id.\"\"\"\n  deleteForum(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteForumInput!\n  ): DeleteForumPayload\n\n  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n  deleteForumById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteForumByIdInput!\n  ): DeleteForumPayload\n\n  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n  deleteForumBySlug(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteForumBySlugInput!\n  ): DeleteForumPayload\n\n  \"\"\"Deletes a single `Post` using its globally unique id.\"\"\"\n  deletePost(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePostInput!\n  ): DeletePostPayload\n\n  \"\"\"Deletes a single `Post` using a unique key.\"\"\"\n  deletePostById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePostByIdInput!\n  ): DeletePostPayload\n\n  \"\"\"Deletes a single `Topic` using its globally unique id.\"\"\"\n  deleteTopic(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteTopicInput!\n  ): DeleteTopicPayload\n\n  \"\"\"Deletes a single `Topic` using a unique key.\"\"\"\n  deleteTopicById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteTopicByIdInput!\n  ): DeleteTopicPayload\n\n  \"\"\"Deletes a single `UserAuthentication` using its globally unique id.\"\"\"\n  deleteUserAuthentication(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserAuthenticationInput!\n  ): DeleteUserAuthenticationPayload\n\n  \"\"\"Deletes a single `UserAuthentication` using a unique key.\"\"\"\n  deleteUserAuthenticationById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserAuthenticationByIdInput!\n  ): DeleteUserAuthenticationPayload\n\n  \"\"\"Deletes a single `UserAuthentication` using a unique key.\"\"\"\n  deleteUserAuthenticationByServiceAndIdentifier(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserAuthenticationByServiceAndIdentifierInput!\n  ): DeleteUserAuthenticationPayload\n\n  \"\"\"Deletes a single `UserEmail` using its globally unique id.\"\"\"\n  deleteUserEmail(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserEmailInput!\n  ): DeleteUserEmailPayload\n\n  \"\"\"Deletes a single `UserEmail` using a unique key.\"\"\"\n  deleteUserEmailById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserEmailByIdInput!\n  ): DeleteUserEmailPayload\n\n  \"\"\"Deletes a single `UserEmail` using a unique key.\"\"\"\n  deleteUserEmailByUserIdAndEmail(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserEmailByUserIdAndEmailInput!\n  ): DeleteUserEmailPayload\n\n  \"\"\"Deletes a single `User` using its globally unique id.\"\"\"\n  deleteUser(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserInput!\n  ): DeleteUserPayload\n\n  \"\"\"Deletes a single `User` using a unique key.\"\"\"\n  deleteUserById(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserByIdInput!\n  ): DeleteUserPayload\n\n  \"\"\"Deletes a single `User` using a unique key.\"\"\"\n  deleteUserByUsername(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeleteUserByUsernameInput!\n  ): DeleteUserPayload\n\n  \"\"\"\n  If you've forgotten your password, give us one of your email addresses and we'\n  send you a reset token. Note this only works if you have added an email address!\n  \"\"\"\n  forgotPassword(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: ForgotPasswordInput!\n  ): ForgotPasswordPayload\n\n  \"\"\"\n  After triggering forgotPassword, you'll be sent a reset token. Combine this\n  with your user ID and a new password to reset your password.\n  \"\"\"\n  resetPassword(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: ResetPasswordInput!\n  ): ResetPasswordPayload\n}\n\n\"\"\"An object with a globally unique `ID`.\"\"\"\ninterface Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: Cursor\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: Cursor\n}\n\n\"\"\"An individual message thread within a Forum.\"\"\"\ntype Post implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n  topicId: Int!\n  authorId: Int!\n\n  \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n  body: String!\n  createdAt: Datetime!\n  updatedAt: Datetime!\n\n  \"\"\"Reads a single `Topic` that is related to this `Post`.\"\"\"\n  topic: Topic\n\n  \"\"\"Reads a single `User` that is related to this `Post`.\"\"\"\n  author: User\n}\n\n\"\"\"\nA condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput PostCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `topicId` field.\"\"\"\n  topicId: Int\n\n  \"\"\"Checks for equality with the object’s `authorId` field.\"\"\"\n  authorId: Int\n\n  \"\"\"Checks for equality with the object’s `body` field.\"\"\"\n  body: String\n\n  \"\"\"Checks for equality with the object’s `createdAt` field.\"\"\"\n  createdAt: Datetime\n\n  \"\"\"Checks for equality with the object’s `updatedAt` field.\"\"\"\n  updatedAt: Datetime\n}\n\n\"\"\"An input for mutations affecting `Post`\"\"\"\ninput PostInput {\n  topicId: Int!\n\n  \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n  body: String\n}\n\n\"\"\"\nRepresents an update to a `Post`. Fields that are set will be updated.\n\"\"\"\ninput PostPatch {\n  \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n  body: String\n}\n\n\"\"\"A connection to a list of `Post` values.\"\"\"\ntype PostsConnection {\n  \"\"\"A list of `Post` objects.\"\"\"\n  nodes: [Post]!\n\n  \"\"\"\n  A list of edges which contains the `Post` and cursor to aid in pagination.\n  \"\"\"\n  edges: [PostsEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `Post` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `Post` edge in the connection.\"\"\"\ntype PostsEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `Post` at the end of the edge.\"\"\"\n  node: Post\n}\n\n\"\"\"Methods to use when ordering `Post`.\"\"\"\nenum PostsOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  TOPIC_ID_ASC\n  TOPIC_ID_DESC\n  AUTHOR_ID_ASC\n  AUTHOR_ID_DESC\n  BODY_ASC\n  BODY_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  UPDATED_AT_ASC\n  UPDATED_AT_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"The root query type which gives access points into the data universe.\"\"\"\ntype Query implements Node {\n  \"\"\"\n  Exposes the root query type nested one level down. This is helpful for Relay 1\n  which can only query top level fields if they are in a particular form.\n  \"\"\"\n  query: Query!\n\n  \"\"\"\n  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"Fetches an object given its globally unique `ID`.\"\"\"\n  node(\n    \"\"\"The globally unique `ID`.\"\"\"\n    nodeId: ID!\n  ): Node\n\n  \"\"\"Reads and enables pagination through a set of `Forum`.\"\"\"\n  allForums(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Forum`.\"\"\"\n    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: ForumCondition\n  ): ForumsConnection\n  forumById(id: Int!): Forum\n  forumBySlug(slug: String!): Forum\n  postById(id: Int!): Post\n  topicById(id: Int!): Topic\n  userAuthenticationById(id: Int!): UserAuthentication\n  userAuthenticationByServiceAndIdentifier(service: String!, identifier: String!): UserAuthentication\n  userEmailById(id: Int!): UserEmail\n  userEmailByUserIdAndEmail(userId: Int!, email: String!): UserEmail\n  userById(id: Int!): User\n  userByUsername(username: String!): User\n  currentUser: User\n\n  \"\"\"Reads and enables pagination through a set of `Forum`.\"\"\"\n  forumsAboutCats(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n  ): ForumsConnection!\n\n  \"\"\"Chosen by fair dice roll. Guaranteed to be random. XKCD#221\"\"\"\n  randomNumber: Int\n\n  \"\"\"Reads a single `Forum` using its globally unique `ID`.\"\"\"\n  forum(\n    \"\"\"The globally unique `ID` to be used in selecting a single `Forum`.\"\"\"\n    nodeId: ID!\n  ): Forum\n\n  \"\"\"Reads a single `Post` using its globally unique `ID`.\"\"\"\n  post(\n    \"\"\"The globally unique `ID` to be used in selecting a single `Post`.\"\"\"\n    nodeId: ID!\n  ): Post\n\n  \"\"\"Reads a single `Topic` using its globally unique `ID`.\"\"\"\n  topic(\n    \"\"\"The globally unique `ID` to be used in selecting a single `Topic`.\"\"\"\n    nodeId: ID!\n  ): Topic\n\n  \"\"\"Reads a single `UserAuthentication` using its globally unique `ID`.\"\"\"\n  userAuthentication(\n    \"\"\"\n    The globally unique `ID` to be used in selecting a single `UserAuthentication`.\n    \"\"\"\n    nodeId: ID!\n  ): UserAuthentication\n\n  \"\"\"Reads a single `UserEmail` using its globally unique `ID`.\"\"\"\n  userEmail(\n    \"\"\"\n    The globally unique `ID` to be used in selecting a single `UserEmail`.\n    \"\"\"\n    nodeId: ID!\n  ): UserEmail\n\n  \"\"\"Reads a single `User` using its globally unique `ID`.\"\"\"\n  user(\n    \"\"\"The globally unique `ID` to be used in selecting a single `User`.\"\"\"\n    nodeId: ID!\n  ): User\n}\n\n\"\"\"All input for the `resetPassword` mutation.\"\"\"\ninput ResetPasswordInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  userId: Int!\n  resetToken: String!\n  newPassword: String!\n}\n\n\"\"\"The output of our `resetPassword` mutation.\"\"\"\ntype ResetPasswordPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n  user: User\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\n\"\"\"An individual message thread within a Forum.\"\"\"\ntype Topic implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n  forumId: Int!\n  authorId: Int!\n\n  \"\"\"The title of the `Topic`.\"\"\"\n  title: String!\n\n  \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n  body: String!\n  createdAt: Datetime!\n  updatedAt: Datetime!\n\n  \"\"\"Reads a single `Forum` that is related to this `Topic`.\"\"\"\n  forum: Forum\n\n  \"\"\"Reads a single `User` that is related to this `Topic`.\"\"\"\n  author: User\n\n  \"\"\"Reads and enables pagination through a set of `Post`.\"\"\"\n  posts(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Post`.\"\"\"\n    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: PostCondition\n  ): PostsConnection!\n  bodySummary(maxLength: Int): String\n}\n\n\"\"\"\nA condition to be used against `Topic` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput TopicCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `forumId` field.\"\"\"\n  forumId: Int\n\n  \"\"\"Checks for equality with the object’s `authorId` field.\"\"\"\n  authorId: Int\n\n  \"\"\"Checks for equality with the object’s `title` field.\"\"\"\n  title: String\n\n  \"\"\"Checks for equality with the object’s `body` field.\"\"\"\n  body: String\n\n  \"\"\"Checks for equality with the object’s `createdAt` field.\"\"\"\n  createdAt: Datetime\n\n  \"\"\"Checks for equality with the object’s `updatedAt` field.\"\"\"\n  updatedAt: Datetime\n}\n\n\"\"\"An input for mutations affecting `Topic`\"\"\"\ninput TopicInput {\n  forumId: Int!\n\n  \"\"\"The title of the `Topic`.\"\"\"\n  title: String!\n\n  \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n  body: String\n}\n\n\"\"\"\nRepresents an update to a `Topic`. Fields that are set will be updated.\n\"\"\"\ninput TopicPatch {\n  \"\"\"The title of the `Topic`.\"\"\"\n  title: String\n\n  \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n  body: String\n}\n\n\"\"\"A connection to a list of `Topic` values.\"\"\"\ntype TopicsConnection {\n  \"\"\"A list of `Topic` objects.\"\"\"\n  nodes: [Topic]!\n\n  \"\"\"\n  A list of edges which contains the `Topic` and cursor to aid in pagination.\n  \"\"\"\n  edges: [TopicsEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `Topic` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `Topic` edge in the connection.\"\"\"\ntype TopicsEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `Topic` at the end of the edge.\"\"\"\n  node: Topic\n}\n\n\"\"\"Methods to use when ordering `Topic`.\"\"\"\nenum TopicsOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  FORUM_ID_ASC\n  FORUM_ID_DESC\n  AUTHOR_ID_ASC\n  AUTHOR_ID_DESC\n  TITLE_ASC\n  TITLE_DESC\n  BODY_ASC\n  BODY_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  UPDATED_AT_ASC\n  UPDATED_AT_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"All input for the `updateForumById` mutation.\"\"\"\ninput UpdateForumByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Forum` being updated.\n  \"\"\"\n  forumPatch: ForumPatch!\n  id: Int!\n}\n\n\"\"\"All input for the `updateForumBySlug` mutation.\"\"\"\ninput UpdateForumBySlugInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Forum` being updated.\n  \"\"\"\n  forumPatch: ForumPatch!\n\n  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n  slug: String!\n}\n\n\"\"\"All input for the `updateForum` mutation.\"\"\"\ninput UpdateForumInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Forum` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `Forum` being updated.\n  \"\"\"\n  forumPatch: ForumPatch!\n}\n\n\"\"\"The output of our update `Forum` mutation.\"\"\"\ntype UpdateForumPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Forum` that was updated by this mutation.\"\"\"\n  forum: Forum\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n  forumEdge(\n    \"\"\"The method to use when ordering `Forum`.\"\"\"\n    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n  ): ForumsEdge\n}\n\n\"\"\"All input for the `updatePostById` mutation.\"\"\"\ninput UpdatePostByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Post` being updated.\n  \"\"\"\n  postPatch: PostPatch!\n  id: Int!\n}\n\n\"\"\"All input for the `updatePost` mutation.\"\"\"\ninput UpdatePostInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Post` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `Post` being updated.\n  \"\"\"\n  postPatch: PostPatch!\n}\n\n\"\"\"The output of our update `Post` mutation.\"\"\"\ntype UpdatePostPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Post` that was updated by this mutation.\"\"\"\n  post: Post\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Topic` that is related to this `Post`.\"\"\"\n  topic: Topic\n\n  \"\"\"Reads a single `User` that is related to this `Post`.\"\"\"\n  author: User\n\n  \"\"\"An edge for our `Post`. May be used by Relay 1.\"\"\"\n  postEdge(\n    \"\"\"The method to use when ordering `Post`.\"\"\"\n    orderBy: [PostsOrderBy!] = PRIMARY_KEY_ASC\n  ): PostsEdge\n}\n\n\"\"\"All input for the `updateTopicById` mutation.\"\"\"\ninput UpdateTopicByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Topic` being updated.\n  \"\"\"\n  topicPatch: TopicPatch!\n  id: Int!\n}\n\n\"\"\"All input for the `updateTopic` mutation.\"\"\"\ninput UpdateTopicInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Topic` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `Topic` being updated.\n  \"\"\"\n  topicPatch: TopicPatch!\n}\n\n\"\"\"The output of our update `Topic` mutation.\"\"\"\ntype UpdateTopicPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Topic` that was updated by this mutation.\"\"\"\n  topic: Topic\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"Reads a single `Forum` that is related to this `Topic`.\"\"\"\n  forum: Forum\n\n  \"\"\"Reads a single `User` that is related to this `Topic`.\"\"\"\n  author: User\n\n  \"\"\"An edge for our `Topic`. May be used by Relay 1.\"\"\"\n  topicEdge(\n    \"\"\"The method to use when ordering `Topic`.\"\"\"\n    orderBy: [TopicsOrderBy!] = PRIMARY_KEY_ASC\n  ): TopicsEdge\n}\n\n\"\"\"All input for the `updateUserById` mutation.\"\"\"\ninput UpdateUserByIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `User` being updated.\n  \"\"\"\n  userPatch: UserPatch!\n\n  \"\"\"Unique identifier for the user.\"\"\"\n  id: Int!\n}\n\n\"\"\"All input for the `updateUserByUsername` mutation.\"\"\"\ninput UpdateUserByUsernameInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `User` being updated.\n  \"\"\"\n  userPatch: UserPatch!\n\n  \"\"\"Public-facing username (or 'handle') of the user.\"\"\"\n  username: String!\n}\n\n\"\"\"All input for the `updateUser` mutation.\"\"\"\ninput UpdateUserInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `User` to be updated.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `User` being updated.\n  \"\"\"\n  userPatch: UserPatch!\n}\n\n\"\"\"The output of our update `User` mutation.\"\"\"\ntype UpdateUserPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `User` that was updated by this mutation.\"\"\"\n  user: User\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `User`. May be used by Relay 1.\"\"\"\n  userEdge(\n    \"\"\"The method to use when ordering `User`.\"\"\"\n    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC\n  ): UsersEdge\n}\n\n\"\"\"A user who can log in to the application.\"\"\"\ntype User implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n\n  \"\"\"Unique identifier for the user.\"\"\"\n  id: Int!\n\n  \"\"\"Public-facing username (or 'handle') of the user.\"\"\"\n  username: String!\n\n  \"\"\"Public-facing name (or pseudonym) of the user.\"\"\"\n  name: String\n\n  \"\"\"Optional avatar URL.\"\"\"\n  avatarUrl: String\n\n  \"\"\"If true, the user has elevated privileges.\"\"\"\n  isAdmin: Boolean!\n  createdAt: Datetime!\n  updatedAt: Datetime!\n\n  \"\"\"Reads and enables pagination through a set of `UserEmail`.\"\"\"\n  userEmails(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `UserEmail`.\"\"\"\n    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: UserEmailCondition\n  ): UserEmailsConnection!\n\n  \"\"\"Reads and enables pagination through a set of `Topic`.\"\"\"\n  topics(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Topic`.\"\"\"\n    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: TopicCondition\n  ): TopicsConnection!\n\n  \"\"\"Reads and enables pagination through a set of `Post`.\"\"\"\n  posts(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Post`.\"\"\"\n    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: PostCondition\n  ): PostsConnection!\n}\n\n\"\"\"\nContains information about the login providers this user has used, so that they may disconnect them should they wish.\n\"\"\"\ntype UserAuthentication implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n\n  \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n  service: String!\n\n  \"\"\"A unique identifier for the user within the login service.\"\"\"\n  identifier: String!\n  createdAt: Datetime!\n  updatedAt: Datetime!\n}\n\n\"\"\"A `UserAuthentication` edge in the connection.\"\"\"\ntype UserAuthenticationsEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `UserAuthentication` at the end of the edge.\"\"\"\n  node: UserAuthentication\n}\n\n\"\"\"Methods to use when ordering `UserAuthentication`.\"\"\"\nenum UserAuthenticationsOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  SERVICE_ASC\n  SERVICE_DESC\n  IDENTIFIER_ASC\n  IDENTIFIER_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  UPDATED_AT_ASC\n  UPDATED_AT_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"Information about a user's email address.\"\"\"\ntype UserEmail implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  nodeId: ID!\n  id: Int!\n  userId: Int!\n\n  \"\"\"The users email address, in `a@b.c` format.\"\"\"\n  email: String!\n\n  \"\"\"\n  True if the user has is_verified their email address (by clicking the link in\n  the email we sent them, or logging in with a social login provider), false otherwise.\n  \"\"\"\n  isVerified: Boolean!\n  createdAt: Datetime!\n  updatedAt: Datetime!\n\n  \"\"\"Reads a single `User` that is related to this `UserEmail`.\"\"\"\n  user: User\n}\n\n\"\"\"\nA condition to be used against `UserEmail` object types. All fields are tested\nfor equality and combined with a logical ‘and.’\n\"\"\"\ninput UserEmailCondition {\n  \"\"\"Checks for equality with the object’s `id` field.\"\"\"\n  id: Int\n\n  \"\"\"Checks for equality with the object’s `userId` field.\"\"\"\n  userId: Int\n\n  \"\"\"Checks for equality with the object’s `email` field.\"\"\"\n  email: String\n\n  \"\"\"Checks for equality with the object’s `isVerified` field.\"\"\"\n  isVerified: Boolean\n\n  \"\"\"Checks for equality with the object’s `createdAt` field.\"\"\"\n  createdAt: Datetime\n\n  \"\"\"Checks for equality with the object’s `updatedAt` field.\"\"\"\n  updatedAt: Datetime\n}\n\n\"\"\"An input for mutations affecting `UserEmail`\"\"\"\ninput UserEmailInput {\n  \"\"\"The users email address, in `a@b.c` format.\"\"\"\n  email: String!\n}\n\n\"\"\"A connection to a list of `UserEmail` values.\"\"\"\ntype UserEmailsConnection {\n  \"\"\"A list of `UserEmail` objects.\"\"\"\n  nodes: [UserEmail]!\n\n  \"\"\"\n  A list of edges which contains the `UserEmail` and cursor to aid in pagination.\n  \"\"\"\n  edges: [UserEmailsEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `UserEmail` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `UserEmail` edge in the connection.\"\"\"\ntype UserEmailsEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `UserEmail` at the end of the edge.\"\"\"\n  node: UserEmail\n}\n\n\"\"\"Methods to use when ordering `UserEmail`.\"\"\"\nenum UserEmailsOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  USER_ID_ASC\n  USER_ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  IS_VERIFIED_ASC\n  IS_VERIFIED_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  UPDATED_AT_ASC\n  UPDATED_AT_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\n\"\"\"\nRepresents an update to a `User`. Fields that are set will be updated.\n\"\"\"\ninput UserPatch {\n  \"\"\"Public-facing name (or pseudonym) of the user.\"\"\"\n  name: String\n\n  \"\"\"Optional avatar URL.\"\"\"\n  avatarUrl: String\n}\n\n\"\"\"A `User` edge in the connection.\"\"\"\ntype UsersEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `User` at the end of the edge.\"\"\"\n  node: User\n}\n\n\"\"\"Methods to use when ordering `User`.\"\"\"\nenum UsersOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  USERNAME_ASC\n  USERNAME_DESC\n  NAME_ASC\n  NAME_DESC\n  AVATAR_URL_ASC\n  AVATAR_URL_DESC\n  IS_ADMIN_ASC\n  IS_ADMIN_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  UPDATED_AT_ASC\n  UPDATED_AT_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 88
    }
  ],
  "metrics": {
    "created_at": "2018-12-22T14:52:15Z",
    "updated_at": "2018-12-22T14:58:13Z",
    "pushed_at": "2018-12-22T14:58:11Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}