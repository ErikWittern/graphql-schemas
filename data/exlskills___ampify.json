{
  "repo_name": "ampify",
  "repo_full_name": "exlskills/ampify",
  "repo_owner": "exlskills",
  "repo_description": "Make EXLskills.com more AMP! [ARCHIVED - FUNCTIONALITY MOVED TO SPF-SERVER]",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema.graphql",
      "sha": "cc4afb882c2f2e95fa5d300d7f57772076d576bf",
      "url": "https://api.github.com/repositories/150820713/contents/schema.graphql?ref=4093e040861c3cb14908cc13421f658740076be7",
      "git_url": "https://api.github.com/repositories/150820713/git/blobs/cc4afb882c2f2e95fa5d300d7f57772076d576bf",
      "html_url": "https://github.com/exlskills/ampify/blob/4093e040861c3cb14908cc13421f658740076be7/schema.graphql",
      "content": "type Activity implements Node {\n  # The ID of an object\n  id: ID!\n  user_id: ID!\n  date: String!\n  def_id: String!\n  activity_link: String!\n  type: String!\n  type_desc: String\n  content: String!\n}\n\n# A connection to a list of items.\ntype ActivityConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ActivityEdge]\n}\n\n# An edge in a connection.\ntype ActivityEdge {\n  # The item at the end of the edge\n  node: Activity\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype activityPaging {\n  activities(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): ActivityConnection\n}\n\n# Authentication strategy object, provides a flexible structure for various auth methods\ntype AuthStrategy implements Node {\n  # The ID of an object\n  id: ID!\n  auth_id: ID!\n  email: String\n  method: String!\n  version: String!\n}\n\n# A connection to a list of items.\ntype AuthStrategyConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [AuthStrategyEdge]\n}\n\n# An edge in a connection.\ntype AuthStrategyEdge {\n  # The item at the end of the edge\n  node: AuthStrategy\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Operation Completion Report\ntype CompletionObj {\n  code: String\n  msg: String\n  processed: Int\n  modified: Int\n}\n\n# EXLskills course\ntype Course implements Node {\n  # The ID of an object\n  id: ID!\n  title: String!\n  headline: String!\n  description: String!\n  organization_ids: [ID]\n  primary_locale: String\n  logo_url: String!\n  cover_url: String!\n  is_published: Boolean!\n  is_organization_only: Boolean!\n  subscription_level: Int!\n\n  # Course units\n  units(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): CourseUnitConnection\n  topics: [String]\n  enrolled_count: Int!\n  view_count: Int!\n  info_md: String!\n  repo_url: String\n  verified_cert_cost: Float\n  skill_level: Int\n  est_minutes: Int\n  primary_topic: String\n  last_accessed_at: String\n  last_accessed_unit: String\n  last_accessed_section: String\n  last_accessed_card: String\n  delivery_methods: [String]\n}\n\n# A connection to a list of items.\ntype CourseConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [CourseEdge]\n}\n\n# Course Delivery Schedule\ntype CourseDeliverySchedule implements Node {\n  # The ID of an object\n  id: ID!\n  _id: String\n  delivery_methods: [String]\n  delivery_structure: String\n  course_duration: EventDuration\n  course_notes: String\n  session_info: [ScheduledRunSessionInfoType]\n  scheduled_runs: [ScheduledRunType]\n}\n\n# An edge in a connection.\ntype CourseEdge {\n  # The item at the end of the edge\n  node: Course\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Unit of an EXLskills course\ntype CourseUnit implements Node {\n  # The ID of an object\n  id: ID!\n  index: Int\n  title: String\n  headline: String\n\n  # Course units\n  sections(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): UnitSectionConnection\n  sections_list: [UnitSection]\n  final_exams: [String]\n  pre_exams: [String]\n  final_exam_weight_pct: Float\n  attempts_left: Int\n  unit_progress_state: Int\n  ema: Float\n  grade: Float\n  is_continue_exam: Boolean\n\n  # The ID of an object\n  exam_attempt_id: ID!\n  last_attempted_at: String\n  attempts: Int\n  passed: Boolean\n}\n\n# A connection to a list of items.\ntype CourseUnitConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [CourseUnitEdge]\n}\n\n# An edge in a connection.\ntype CourseUnitEdge {\n  # The item at the end of the edge\n  node: CourseUnit\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum CudAction {\n  CREATE\n  UPDATE\n  DELETE\n}\n\n# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the\n# `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO\n# 8601 standard for representation of dates and times using the Gregorian calendar.\nscalar DateTime\n\ntype EmbeddedDocRef {\n  embedded_doc_refs: EmbeddedDocRefRecordConnection!\n}\n\ntype EmbeddedDocRefRecord implements Node {\n  # The ID of an object\n  id: ID!\n  level: Int!\n  doc_id: String!\n}\n\n# A connection to a list of items.\ntype EmbeddedDocRefRecordConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [EmbeddedDocRefRecordEdge]\n}\n\n# An edge in a connection.\ntype EmbeddedDocRefRecordEdge {\n  # The item at the end of the edge\n  node: EmbeddedDocRefRecord\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Event Duration\ntype EventDuration {\n  months: Int\n  weeks: Int\n  days: Int\n  hours: Int\n  minutes: Int\n}\n\ntype Exam implements Node {\n  # The ID of an object\n  id: ID!\n  creator_id: ID!\n  question_ids: [ID]\n  tags: [String]\n  random_order: Boolean!\n  question_count: Int!\n  time_limit: Int\n  use_ide_test_mode: Boolean!\n  est_time: Int\n}\n\n# ExamAttempt\ntype ExamAttempt implements Node {\n  # The ID of an object\n  id: ID!\n  exam_id: ID!\n  user_id: ID!\n  course_unit_id: ID!\n  question_ids: [ID]\n  question_interaction_ids: [ID]!\n  started_at: String\n  is_active: Boolean\n  submitted_at: String\n  time_limit_exceeded: Boolean\n}\n\ninput FieldCud {\n  field: String\n  valueToAssign: String\n  valueToFind: String\n  cudAction: CudAction\n}\n\ninput FilterValues {\n  filterValuesString: String\n}\n\n# Item Price\ntype ItemPriceType {\n  amount: Int\n}\n\n# Application Lang\ntype Lang implements Node {\n  # The ID of an object\n  id: ID!\n  label: String\n  value: String\n}\n\ninput LeaveExamInput {\n  exam_attempt_id: ID!\n  clientMutationId: String\n}\n\ntype LeaveExamPayload {\n  completionObj: CompletionObj\n  clientMutationId: String\n}\n\ntype ListDef implements Node {\n  # The ID of an object\n  id: ID!\n  type: String!\n  value: String!\n}\n\ntype Mutation {\n  readNotification(input: ReadNotificationInput!): ReadNotificationPayload\n  submitAnswer(input: SubmitAnswerInput!): SubmitAnswerPayload\n  takeExam(input: TakeExamInput!): TakeExamPayload\n  leaveExam(input: LeaveExamInput!): LeaveExamPayload\n  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload\n  updateUserUnitStatus(input: UpdateUserUnitStatusInput!): UpdateUserUnitStatusPayload\n  updateUserCourseRole(input: UpdateUserCourseRoleInput!): UpdateUserCourseRolePayload\n  takeQuiz(input: TakeQuizInput!): TakeQuizPayload\n}\n\n# NextQuestion\ntype NextQuestion {\n  course_id: String\n  section_id: String\n  unit_id: String\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\ntype notificationPaging {\n  notifications(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): UserNotificationConnection\n}\n\ninput OrderBy {\n  field: String\n  direction: OrderByDirection\n}\n\nenum OrderByDirection {\n  DESC\n  ASC\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype Query {\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n  courseById(course_id: String): Course\n\n  # Course Unit\n  courseUnit(course_id: String, unit_id: String): CourseUnit\n  courseDeliverySchedule(course_id: String, delivery_method: String, date_on_or_after: DateTime): CourseDeliverySchedule\n\n  # SectionCard Entry\n  cardEntry(course_id: ID!, unit_id: ID!, section_id: ID!, card_id: ID!): SectionCard\n\n  # Card Entry by question ID\n  cardByQuestion(question_id: String!): SectionCard\n  userActivity(start_date: String, end_date: String): [UserActivity]\n  userProfile(user_id: String): User\n  examToTake(unit_id: String, course_id: String): Exam\n  examAttempt(unit_id: String): [ExamAttempt]\n\n  # Content Latest Version\n  oneVersionedContent(content_id: String!, version: String): VersionedContentRecord\n\n  # Activities\n  activityPaging: activityPaging\n\n  # all Courses in the database\n  coursePaging(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): CourseConnection\n\n  # all Units in the course\n  unitPaging(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): CourseUnitConnection\n\n  # User exam status for Course\n  userCourseUnitExamStatusPaging(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): CourseUnitConnection\n\n  # all Sections in the Unit\n  sectionPaging(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): UnitSectionConnection\n\n  # all Cards in the Section\n  cardPaging(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): SectionCardConnection\n\n  # Notifications for the logged in user\n  notificationPaging: notificationPaging\n\n  # Question Entry\n  questionHint(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): Question\n  langType: [Lang]\n\n  # get Question by Unit\n  questionPaging(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): QuestionConnection\n\n  # get Questions For Exam\n  questionPagingExam(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): QuestionConnection\n  topicFilter: [ListDef]\n}\n\ninput QueryResolverArgs {\n  param: String\n  value: String\n}\n\ntype Question implements Node {\n  # The ID of an object\n  id: ID!\n  tags: [String]!\n  points: Int\n  est_time_sec: Int\n  compl_level: Int\n  question_type: String!\n  question_text: String!\n  data: QuestionData!\n  question_answer: String\n  hint: String\n  hint_exists: Boolean\n\n  # The ID of an object\n  card_id: ID!\n}\n\n# A connection to a list of items.\ntype QuestionConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [QuestionEdge]\n}\n\n# Question data for several question types\ntype QuestionData implements Node {\n  # The ID of an object\n  id: ID!\n  tmpl_files: String\n  environment_key: String\n  use_advanced_features: Boolean\n  explanation: String\n  src_files: String\n  options: [QuestionMultipleData]\n}\n\n# An edge in a connection.\ntype QuestionEdge {\n  # The item at the end of the edge\n  node: Question\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Question data for the `multiple_choice_single` and `multiple_choice_many` question types\ntype QuestionMultipleData implements Node {\n  # The ID of an object\n  id: ID!\n  seq: Int!\n  explanation: String!\n  is_answer: Boolean!\n  text: String!\n}\n\ninput ReadNotificationInput {\n  notif_id: String!\n  clientMutationId: String\n}\n\ntype ReadNotificationPayload {\n  completionObj: CompletionObj\n  clientMutationId: String\n}\n\n# Scheduled Run Session Info\ntype ScheduledRunSessionInfoType implements Node {\n  # The ID of an object\n  id: ID!\n  session_seq: Int\n  headline: String\n  desc: String\n  session_notes: String\n}\n\n# Scheduled Run Session\ntype ScheduledRunSessionType implements Node {\n  # The ID of an object\n  id: ID!\n  session_seq: Int\n  session_start_date: DateTime\n  _id: String\n  session_run_notes: String\n  instructors: [SessionInstructorType]\n  session_duration: EventDuration\n}\n\n# Scheduled Run\ntype ScheduledRunType implements Node {\n  # The ID of an object\n  id: ID!\n  run_start_date: DateTime\n  _id: String\n  offered_at_price: ItemPriceType\n  run_sessions: [ScheduledRunSessionType]\n  seat_purchased: Boolean\n}\n\n# Card of an EXLskills section\ntype SectionCard implements Node {\n  # The ID of an object\n  id: ID!\n  index: Int\n  title: String\n  headline: String\n  content_id: ID\n  tags: [String]\n  question_ids: [ID]\n  ema: Float\n  card_ref: EmbeddedDocRef\n  content: VersionedContentRecord\n  question: Question\n  questions: [Question]\n\n  # The ID of an object\n  currentCourseId: ID!\n\n  # The ID of an object\n  currentUnitId: ID!\n\n  # The ID of an object\n  currentSectionId: ID!\n}\n\n# A connection to a list of items.\ntype SectionCardConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [SectionCardEdge]\n}\n\n# An edge in a connection.\ntype SectionCardEdge {\n  # The item at the end of the edge\n  node: SectionCard\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Session Instructor\ntype SessionInstructorType implements Node {\n  # The ID of an object\n  id: ID!\n  _id: String\n  full_name: String\n  username: String\n  avatar_url: String\n  headline: String\n  biography: String\n}\n\ninput SubmitAnswerInput {\n  exam_attempt_id: ID!\n  question_id: ID!\n  response_data: String\n  checkAnswer: Boolean\n  quiz: Boolean\n  is_quiz_start: Boolean\n  is_last_question: Boolean\n  clientMutationId: String\n}\n\ntype SubmitAnswerPayload {\n  is_correct: Boolean\n  explain_text: String\n  grading_response: String\n  completionObj: CompletionObj\n  next_question: NextQuestion\n  clientMutationId: String\n}\n\ninput TakeExamInput {\n  courseId: ID!\n  unitId: ID!\n  clientMutationId: String\n}\n\ntype TakeExamPayload {\n  exam_attempt_id: String\n  exam_time_limit: Float\n  exam_id: String\n  completionObj: CompletionObj\n  clientMutationId: String\n}\n\ninput TakeQuizInput {\n  card: Boolean\n  courseId: ID!\n  unitId: ID!\n  sectionId: ID\n  clientMutationId: String\n}\n\ntype TakeQuizPayload {\n  quiz_id: String\n  clientMutationId: String\n}\n\n# Section of an EXLskills unit\ntype UnitSection implements Node {\n  # The ID of an object\n  id: ID!\n  index: Int\n  title: String\n  headline: String\n  ema: Float\n  cards_list: [SectionCard]\n\n  # Section cards\n  cards(orderBy: [OrderBy], filterValues: FilterValues, resolverArgs: [QueryResolverArgs], after: String, first: Int, before: String, last: Int): SectionCardConnection\n}\n\n# A connection to a list of items.\ntype UnitSectionConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UnitSectionEdge]\n}\n\n# An edge in a connection.\ntype UnitSectionEdge {\n  # The item at the end of the edge\n  node: UnitSection\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput UpdateUserCourseRoleInput {\n  user_id: ID!\n  course_id: ID!\n  cudContent: [FieldCud]!\n  clientMutationId: String\n}\n\ntype UpdateUserCourseRolePayload {\n  completionObj: CompletionObj\n  clientMutationId: String\n}\n\ninput UpdateUserProfileInput {\n  locale: String\n  profile: UserProfileInput\n  clientMutationId: String\n}\n\ntype UpdateUserProfilePayload {\n  completionObj: CompletionObj\n  clientMutationId: String\n}\n\ninput UpdateUserUnitStatusInput {\n  unit_id: String\n  course_id: String\n  clientMutationId: String\n}\n\ntype UpdateUserUnitStatusPayload {\n  completionObj: CompletionObj\n  clientMutationId: String\n}\n\n# Application user\ntype User implements Node {\n  # The ID of an object\n  id: ID!\n  full_name: String\n  username: String\n  primary_email: String\n  pwd: String\n  secondary_emails: [String]\n  biography: String\n  is_demo: Boolean\n  headline: String\n  has_completed_first_tutorial: Boolean\n  locales: [String]\n  primary_locale: String!\n  subscription: UserSubscriptionConnection\n  avatar_url: String\n  is_verified: Boolean\n  auth_strategies(after: String, first: Int, before: String, last: Int): AuthStrategyConnection\n  organization_roles(after: String, first: Int, before: String, last: Int): UserOrganizationRoleConnection\n  course_roles(after: String, first: Int, before: String, last: Int): UserCourseRoleConnection\n}\n\n# Defines a user’s activity which are pre-calculated\ntype UserActivity {\n  # The ID of an object\n  id: ID!\n  date: String!\n  count: Int!\n}\n\n# Defines a users role in a course\ntype UserCourseRole implements Node {\n  # The ID of an object\n  id: ID!\n  course_id: ID!\n  role: [String]!\n  last_accessed_at: String\n}\n\n# A connection to a list of items.\ntype UserCourseRoleConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UserCourseRoleEdge]\n}\n\n# An edge in a connection.\ntype UserCourseRoleEdge {\n  # The item at the end of the edge\n  node: UserCourseRole\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# User notifications\ntype UserNotification implements Node {\n  # The ID of an object\n  id: ID!\n  actor: String\n  notification_link: String!\n  def_id: String!\n  is_read: Boolean!\n  created_at: String!\n  updated_at: String!\n  content: String\n}\n\n# A connection to a list of items.\ntype UserNotificationConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UserNotificationEdge]\n}\n\n# An edge in a connection.\ntype UserNotificationEdge {\n  # The item at the end of the edge\n  node: UserNotification\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Defines a users role in an organization\ntype UserOrganizationRole implements Node {\n  # The ID of an object\n  id: ID!\n  organization_id: ID!\n  role: String!\n}\n\n# A connection to a list of items.\ntype UserOrganizationRoleConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UserOrganizationRoleEdge]\n}\n\n# An edge in a connection.\ntype UserOrganizationRoleEdge {\n  # The item at the end of the edge\n  node: UserOrganizationRole\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# User profile field for update\ninput UserProfileInput {\n  id: ID\n  full_name: String\n  username: String\n  primary_email: String\n  biography: String\n  headline: String\n  locales: [String]\n  primary_locale: String!\n  avatar_url: String!\n}\n\n# The users subscription level. All users have this field -- they then vary by their level\ntype UserSubscription implements Node {\n  # The ID of an object\n  id: ID!\n  level: Int!\n}\n\n# A connection to a list of items.\ntype UserSubscriptionConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UserSubscriptionEdge]\n}\n\n# An edge in a connection.\ntype UserSubscriptionEdge {\n  # The item at the end of the edge\n  node: UserSubscription\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Object that matches a version number with an actual piece of content\ntype VersionedContentRecord implements Node {\n  # The ID of an object\n  id: ID!\n  version: Int!\n  content: String!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 68,
      "containsCycle": false,
      "polynomialLevel": 6,
      "numDefinitions": 85
    }
  ],
  "metrics": {
    "created_at": "2018-09-29T03:29:56Z",
    "updated_at": "2018-10-15T16:01:31Z",
    "pushed_at": "2018-10-01T04:55:46Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "apache-2.0",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}