{
  "repo_name": "FULLSTACK-books-projects-codes",
  "repo_full_name": "jackieljm/fullstack-books-projects-codes",
  "repo_owner": "JackieLJM",
  "repo_description": "new one.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "CODEs/fullstack-react-code-r35/relay/bookstore/client/src/data/schema.graphql",
      "sha": "92382bc3c71667d155b357c5642594f2b632dd12",
      "url": "https://api.github.com/repositories/142099505/contents/CODEs/fullstack-react-code-r35/relay/bookstore/client/src/data/schema.graphql?ref=b0b9d047ad8e187ba1d061d8d0e7352705ba94f9",
      "git_url": "https://api.github.com/repositories/142099505/git/blobs/92382bc3c71667d155b357c5642594f2b632dd12",
      "html_url": "https://github.com/JackieLJM/FULLSTACK-books-projects-codes/blob/b0b9d047ad8e187ba1d061d8d0e7352705ba94f9/CODEs/fullstack-react-code-r35/relay/bookstore/client/src/data/schema.graphql",
      "content": "schema {\n  query: RootQuery\n  mutation: RootMutation\n}\n\ninput addAuthorInput {\n  name: String\n  avatarUrl: String\n  bio: String\n  createdAt: Date\n  books: [ID]\n  clientMutationId: String\n}\n\ntype addAuthorPayload {\n  viewer: Viewer\n  changedAuthorEdge: changedAuthorEdge\n  clientMutationId: String\n}\n\ninput addBookInput {\n  name: String\n  slug: String\n  tagline: String\n  description: String\n  coverUrl: String\n  pages: Float\n  createdAt: Date\n  authors: [ID]\n  clientMutationId: String\n}\n\ntype addBookPayload {\n  viewer: Viewer\n  changedBookEdge: changedBookEdge\n  clientMutationId: String\n}\n\ntype Author implements Node {\n  name: String\n  avatarUrl: String\n  bio: String\n  createdAt: Date\n  books(after: String, first: Int, before: String, last: Int): AuthorBooksConnection\n  _id: ID\n\n  # The ID of an object\n  id: ID!\n}\n\n# A connection to a list of items.\ntype AuthorBooksConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [AuthorBooksEdge]\n  count: Float\n}\n\n# An edge in a connection.\ntype AuthorBooksEdge {\n  # The item at the end of the edge\n  node: Book\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# A connection to a list of items.\ntype AuthorConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [AuthorEdge]\n  count: Float\n}\n\n# An edge in a connection.\ntype AuthorEdge {\n  # The item at the end of the edge\n  node: Author\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype Book implements Node {\n  name: String\n  slug: String\n  tagline: String\n  description: String\n  coverUrl: String\n  pages: Float\n  createdAt: Date\n  authors(after: String, first: Int, before: String, last: Int): BookAuthorsConnection\n  _id: ID\n\n  # The ID of an object\n  id: ID!\n}\n\n# A connection to a list of items.\ntype BookAuthorsConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [BookAuthorsEdge]\n  count: Float\n}\n\n# An edge in a connection.\ntype BookAuthorsEdge {\n  # The item at the end of the edge\n  node: Author\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# A connection to a list of items.\ntype BookConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [BookEdge]\n  count: Float\n}\n\n# An edge in a connection.\ntype BookEdge {\n  # The item at the end of the edge\n  node: Book\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# An edge in a connection.\ntype changedAuthorEdge {\n  # The item at the end of the edge\n  node: changedAuthorNode\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype changedAuthorNode {\n  name: String\n  avatarUrl: String\n  bio: String\n  createdAt: Date\n  books(after: String, first: Int, before: String, last: Int): AuthorBooksConnection\n  _id: ID\n\n  # The ID of an object\n  id: ID!\n}\n\n# An edge in a connection.\ntype changedBookEdge {\n  # The item at the end of the edge\n  node: changedBookNode\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype changedBookNode {\n  name: String\n  slug: String\n  tagline: String\n  description: String\n  coverUrl: String\n  pages: Float\n  createdAt: Date\n  authors(after: String, first: Int, before: String, last: Int): BookAuthorsConnection\n  _id: ID\n\n  # The ID of an object\n  id: ID!\n}\n\nscalar Date\n\ninput deleteAuthorInput {\n  id: ID!\n  clientMutationId: String\n}\n\ntype deleteAuthorPayload {\n  viewer: Viewer\n  ok: Boolean\n  id: ID!\n  clientMutationId: String\n}\n\ninput deleteBookInput {\n  id: ID!\n  clientMutationId: String\n}\n\ntype deleteBookPayload {\n  viewer: Viewer\n  ok: Boolean\n  id: ID!\n  clientMutationId: String\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\nenum orderByAuthor {\n  NAME_ASC\n  NAME_DESC\n  AVATARURL_ASC\n  AVATARURL_DESC\n  BIO_ASC\n  BIO_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  _ID_ASC\n  _ID_DESC\n}\n\nenum orderByBook {\n  NAME_ASC\n  NAME_DESC\n  TAGLINE_ASC\n  TAGLINE_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  COVERURL_ASC\n  COVERURL_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  _ID_ASC\n  _ID_DESC\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype RootMutation {\n  addAuthor(input: addAuthorInput!): addAuthorPayload\n  updateAuthor(input: updateAuthorInput!): updateAuthorPayload\n  deleteAuthor(input: deleteAuthorInput!): deleteAuthorPayload\n  addBook(input: addBookInput!): addBookPayload\n  updateBook(input: updateBookInput!): updateBookPayload\n  deleteBook(input: deleteBookInput!): deleteBookPayload\n}\n\ntype RootQuery {\n  author(id: ID!): Author\n  authors(\n    # The ID of a Author\n    id: [ID]\n\n    # The ID of a Author\n    ids: [ID]\n    orderBy: orderByAuthor\n    name: String\n    avatarUrl: String\n    bio: String\n    createdAt: Date\n    _id: ID\n  ): [Author]\n  book(id: ID, slug: String): Book\n  books(\n    # The ID of a Book\n    id: [ID]\n\n    # The ID of a Book\n    ids: [ID]\n    orderBy: orderByBook\n    name: String\n    slug: String\n    tagline: String\n    description: String\n    coverUrl: String\n    pages: Float\n    createdAt: Date\n    _id: ID\n  ): [Book]\n  viewer: Viewer\n\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n}\n\ninput updateAuthorInput {\n  name: String\n  avatarUrl: String\n  bio: String\n  createdAt: Date\n  books: [ID]\n  books_add: [ID]\n  id: ID!\n  clientMutationId: String\n}\n\ntype updateAuthorPayload {\n  changedAuthor: Author\n  clientMutationId: String\n}\n\ninput updateBookInput {\n  name: String\n  slug: String\n  tagline: String\n  description: String\n  coverUrl: String\n  pages: Float\n  createdAt: Date\n  authors: [ID]\n  authors_add: [ID]\n  id: ID!\n  clientMutationId: String\n}\n\ntype updateBookPayload {\n  changedBook: Book\n  clientMutationId: String\n}\n\ntype Viewer implements Node {\n  # The ID of an object\n  id: ID!\n  authors(after: String, first: Int, before: String, last: Int, orderBy: orderByAuthor, name: String, avatarUrl: String, bio: String, createdAt: Date, _id: ID): AuthorConnection\n  author(id: ID!): Author\n  books(after: String, first: Int, before: String, last: Int, orderBy: orderByBook, name: String, slug: String, tagline: String, description: String, coverUrl: String, pages: Float, createdAt: Date, _id: ID): BookConnection\n  book(id: ID, slug: String): Book\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 35
    }
  ],
  "metrics": {
    "created_at": "2018-07-24T03:29:13Z",
    "updated_at": "2019-06-13T02:19:36Z",
    "pushed_at": "2019-06-13T02:19:22Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "apache-2.0",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}