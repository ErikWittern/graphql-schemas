{
  "repo_name": "open-product-evaluation-server",
  "repo_full_name": "th-koeln/open-product-evaluation-server",
  "repo_owner": "th-koeln",
  "repo_description": "Implementation of the Open Product Evaluation Server at the Cologne University of Applied Sciences",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "user.graphql",
      "path": "src/entities/user/user.graphql",
      "sha": "fadc088fe36d66dde6f7b6bb611761c787fa9e4b",
      "url": "https://api.github.com/repositories/133054250/contents/src/entities/user/user.graphql?ref=4f75ec694f99556e9348fe533f2bfcf8a10ccd7a",
      "git_url": "https://api.github.com/repositories/133054250/git/blobs/fadc088fe36d66dde6f7b6bb611761c787fa9e4b",
      "html_url": "https://github.com/th-koeln/open-product-evaluation-server/blob/4f75ec694f99556e9348fe533f2bfcf8a10ccd7a/src/entities/user/user.graphql",
      "content": "type Query {\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Returns an array of user-objects or null\n        * _**Admin:**_ Returns all users\n        * _**User:**_ Only returns the own user-object\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * there are no users found (when using filters)\n    \"\"\"\n    users(pagination: Pagination, sortBy: [UserSortParameter!], filterBy: Filter) : [User!]\n\n\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Returns the specified user\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * a standard user requests another user\n        * the provided userID is invalid / the user was not found\n    \"\"\"\n    user(userID : HashID!) : User!\n\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Returns the amount of viewable users\n        * _**Admin:**_ Returns the amount of all users\n        * _**User:**_ Returns 1\n    * __Error:__ Returns an error when\n        * access rights are missing\n    \"\"\"\n    userAmount : Int\n}\n\ntype Mutation {\n    \"\"\"\n    * __Roles:__ No Authorization required\n    * __Function:__ Creates a user\n    * __Error:__ Returns an error when\n        * the provided email is already taken\n    \"\"\"\n    createUser(data : UserCreateInput!) : UserCreatePayload!\n\n\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Updates a user\n        * _**Admin:**_ Can update all users\n        * _**User:**_ Can only update himself\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * the specified user was not found\n        * the provided email is already taken\n        * a standard user tries to update another user\n    \"\"\"\n    updateUser(data : UserUpdateInput!, userID : HashID!) : UserUpdatePayload!\n\n\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Deletes a user\n        * _**Admin:**_ Can delete all users\n        * _**User:**_ Can only delete himself\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * the specified user was not found\n        * a standard user tries to delete another user\n    \"\"\"\n    deleteUser(userID : HashID!) : UserDeletePayload!\n\n\n    \"\"\"\n    * __Roles:__ No Authorization required\n    * __Function:__ Login as the requested user\n    * __Error:__ Returns an error when\n        * the specified user was not found\n        * the email and / or password arent matching\n    \"\"\"\n    login(data : LoginInput!) : LoginPayload!\n}\n\ntype Subscription {\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Subscribe to all updates of a user-object (UPDATE / DELETE-events)\n        * _**Admin:**_ Can subscribe to all users\n        * _**User:**_ Can only subscribe to himself\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * the specified user was not found\n        * a standard user tries to subscribe another user\n    \"\"\"\n    userUpdate(userID : HashID!) : UserUpdateSubscriptionPayload!\n}\n\n\"\"\" All attributes users can be sorted by \"\"\"\nenum SortableUserField {\n    CREATION_DATE\n    LAST_UPDATE\n    FIRST_NAME\n    LAST_NAME\n    EMAIL\n    IS_ADMIN\n}\n\n\"\"\" Defines the attribute users are sorted by, as well as the order \"\"\"\ninput UserSortParameter {\n    \"\"\" The attribute \"\"\"\n    fieldName : SortableUserField!\n\n    \"\"\" The order \"\"\"\n    sortOption : SortOption!\n}\n\n\"\"\" Defines a user of the Adminview. A user can create Surveys as well as Domains and is allowed to manage these entities. Users can also be set as the owner of a Client. In this case they are also allowed to manage those Clients.\"\"\"\ntype User {\n    \"\"\" The unique identifier \"\"\"\n    id : HashID!\n\n    \"\"\" The date of creation \"\"\"\n    creationDate : DateTime!\n\n    \"\"\" The date of the last update \"\"\"\n    lastUpdate : DateTime!\n\n    \"\"\" The first name \"\"\"\n    firstName : String!\n\n    \"\"\" The last name \"\"\"\n    lastName : String!\n\n    \"\"\" The email used for the Login (can only be used for a single user) \"\"\"\n    email : String!\n\n    \"\"\" The admin-flag (true = user is admin) \"\"\"\n    isAdmin : Boolean!\n}\n\n\"\"\" Defines the input for creating a user \"\"\"\ninput UserCreateInput {\n\n    \"\"\" The first name \"\"\"\n    firstName : String!\n\n    \"\"\" The last name \"\"\"\n    lastName : String!\n\n    \"\"\" The email used for the Login (can only be used for a single user) \"\"\"\n    email : String!\n\n    \"\"\" The password used for the Login \"\"\"\n    password : String!\n}\n\n\"\"\" Defines the payload when creating a user \"\"\"\ntype UserCreatePayload {\n\n    \"\"\" The created user data structure \"\"\"\n    user : User!\n\n    \"\"\" The JWT to authorize requests of this user (needs to be added as Authorization-header for every request. 'Authorization': 'Bearer token') \"\"\"\n    token : String!\n}\n\n\"\"\" Defines the input for updating a user \"\"\"\ninput UserUpdateInput {\n\n    \"\"\" Replaces the first name if provided \"\"\"\n    firstName : String\n\n    \"\"\" Replaces the last name if provided \"\"\"\n    lastName : String\n\n    \"\"\" Replaces the email if provided (still needs to be unique) \"\"\"\n    email : String\n\n    \"\"\" Replaces the password if provided \"\"\"\n    password : String\n\n    \"\"\" Provide a user admin rights or revoke them (only admins can do that) \"\"\"\n    isAdmin: Boolean\n}\n\n\"\"\" Defines the payload for updating a user \"\"\"\ntype UserUpdatePayload {\n\n    \"\"\" The updated user data structure \"\"\"\n    user : User!\n}\n\n\"\"\" Defines the payload for deleting a user \"\"\"\ntype UserDeletePayload {\n\n    \"\"\" A notification if the deletion was successfull \"\"\"\n    success : Boolean!\n}\n\n\"\"\" Defines the input for a login \"\"\"\ninput LoginInput {\n\n    \"\"\" The email of the user \"\"\"\n    email : String!\n\n    \"\"\" The password of the user \"\"\"\n    password : String!\n}\n\n\"\"\" Defines the payload for a login \"\"\"\ntype LoginPayload {\n\n    \"\"\" The current user data structure \"\"\"\n    user : User!\n\n    \"\"\" The JWT to authorize requests of this user (needs to be added as Authorization-header for every request. 'Authorization': 'Bearer token') \"\"\"\n    token : String!\n}\n\n\"\"\" Defines the payload when subscribing to the changes of a user \"\"\"\ntype UserUpdateSubscriptionPayload {\n    \"\"\" The action that was performed on a user data structure (UPDATE, DELETE) \"\"\"\n    event: String!\n\n    \"\"\" The attributes that were changed (only if the event is UPDATE) \"\"\"\n    changedAttributes: [String!]\n\n    \"\"\" The updated or deleted user data structure \"\"\"\n    user: User\n}\n",
      "containsQueryType": true,
      "merged": {
        "mergedContent": "# https://github.com/th-koeln/open-product-evaluation-server/blob/4f75ec694f99556e9348fe533f2bfcf8a10ccd7a/src/entities/user/user.graphql:\ntype Query {\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Returns an array of user-objects or null\n        * _**Admin:**_ Returns all users\n        * _**User:**_ Only returns the own user-object\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * there are no users found (when using filters)\n    \"\"\"\n    users(pagination: Pagination, sortBy: [UserSortParameter!], filterBy: Filter) : [User!]\n\n\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Returns the specified user\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * a standard user requests another user\n        * the provided userID is invalid / the user was not found\n    \"\"\"\n    user(userID : HashID!) : User!\n\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Returns the amount of viewable users\n        * _**Admin:**_ Returns the amount of all users\n        * _**User:**_ Returns 1\n    * __Error:__ Returns an error when\n        * access rights are missing\n    \"\"\"\n    userAmount : Int\n}\n\ntype Mutation {\n    \"\"\"\n    * __Roles:__ No Authorization required\n    * __Function:__ Creates a user\n    * __Error:__ Returns an error when\n        * the provided email is already taken\n    \"\"\"\n    createUser(data : UserCreateInput!) : UserCreatePayload!\n\n\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Updates a user\n        * _**Admin:**_ Can update all users\n        * _**User:**_ Can only update himself\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * the specified user was not found\n        * the provided email is already taken\n        * a standard user tries to update another user\n    \"\"\"\n    updateUser(data : UserUpdateInput!, userID : HashID!) : UserUpdatePayload!\n\n\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Deletes a user\n        * _**Admin:**_ Can delete all users\n        * _**User:**_ Can only delete himself\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * the specified user was not found\n        * a standard user tries to delete another user\n    \"\"\"\n    deleteUser(userID : HashID!) : UserDeletePayload!\n\n\n    \"\"\"\n    * __Roles:__ No Authorization required\n    * __Function:__ Login as the requested user\n    * __Error:__ Returns an error when\n        * the specified user was not found\n        * the email and / or password arent matching\n    \"\"\"\n    login(data : LoginInput!) : LoginPayload!\n}\n\ntype Subscription {\n    \"\"\"\n    * __Roles:__ Admin / User\n    * __Function:__ Subscribe to all updates of a user-object (UPDATE / DELETE-events)\n        * _**Admin:**_ Can subscribe to all users\n        * _**User:**_ Can only subscribe to himself\n    * __Error:__ Returns an error when\n        * access rights are missing\n        * the specified user was not found\n        * a standard user tries to subscribe another user\n    \"\"\"\n    userUpdate(userID : HashID!) : UserUpdateSubscriptionPayload!\n}\n\n\"\"\" All attributes users can be sorted by \"\"\"\nenum SortableUserField {\n    CREATION_DATE\n    LAST_UPDATE\n    FIRST_NAME\n    LAST_NAME\n    EMAIL\n    IS_ADMIN\n}\n\n\"\"\" Defines the attribute users are sorted by, as well as the order \"\"\"\ninput UserSortParameter {\n    \"\"\" The attribute \"\"\"\n    fieldName : SortableUserField!\n\n    \"\"\" The order \"\"\"\n    sortOption : SortOption!\n}\n\n\"\"\" Defines a user of the Adminview. A user can create Surveys as well as Domains and is allowed to manage these entities. Users can also be set as the owner of a Client. In this case they are also allowed to manage those Clients.\"\"\"\ntype User {\n    \"\"\" The unique identifier \"\"\"\n    id : HashID!\n\n    \"\"\" The date of creation \"\"\"\n    creationDate : DateTime!\n\n    \"\"\" The date of the last update \"\"\"\n    lastUpdate : DateTime!\n\n    \"\"\" The first name \"\"\"\n    firstName : String!\n\n    \"\"\" The last name \"\"\"\n    lastName : String!\n\n    \"\"\" The email used for the Login (can only be used for a single user) \"\"\"\n    email : String!\n\n    \"\"\" The admin-flag (true = user is admin) \"\"\"\n    isAdmin : Boolean!\n}\n\n\"\"\" Defines the input for creating a user \"\"\"\ninput UserCreateInput {\n\n    \"\"\" The first name \"\"\"\n    firstName : String!\n\n    \"\"\" The last name \"\"\"\n    lastName : String!\n\n    \"\"\" The email used for the Login (can only be used for a single user) \"\"\"\n    email : String!\n\n    \"\"\" The password used for the Login \"\"\"\n    password : String!\n}\n\n\"\"\" Defines the payload when creating a user \"\"\"\ntype UserCreatePayload {\n\n    \"\"\" The created user data structure \"\"\"\n    user : User!\n\n    \"\"\" The JWT to authorize requests of this user (needs to be added as Authorization-header for every request. 'Authorization': 'Bearer token') \"\"\"\n    token : String!\n}\n\n\"\"\" Defines the input for updating a user \"\"\"\ninput UserUpdateInput {\n\n    \"\"\" Replaces the first name if provided \"\"\"\n    firstName : String\n\n    \"\"\" Replaces the last name if provided \"\"\"\n    lastName : String\n\n    \"\"\" Replaces the email if provided (still needs to be unique) \"\"\"\n    email : String\n\n    \"\"\" Replaces the password if provided \"\"\"\n    password : String\n\n    \"\"\" Provide a user admin rights or revoke them (only admins can do that) \"\"\"\n    isAdmin: Boolean\n}\n\n\"\"\" Defines the payload for updating a user \"\"\"\ntype UserUpdatePayload {\n\n    \"\"\" The updated user data structure \"\"\"\n    user : User!\n}\n\n\"\"\" Defines the payload for deleting a user \"\"\"\ntype UserDeletePayload {\n\n    \"\"\" A notification if the deletion was successfull \"\"\"\n    success : Boolean!\n}\n\n\"\"\" Defines the input for a login \"\"\"\ninput LoginInput {\n\n    \"\"\" The email of the user \"\"\"\n    email : String!\n\n    \"\"\" The password of the user \"\"\"\n    password : String!\n}\n\n\"\"\" Defines the payload for a login \"\"\"\ntype LoginPayload {\n\n    \"\"\" The current user data structure \"\"\"\n    user : User!\n\n    \"\"\" The JWT to authorize requests of this user (needs to be added as Authorization-header for every request. 'Authorization': 'Bearer token') \"\"\"\n    token : String!\n}\n\n\"\"\" Defines the payload when subscribing to the changes of a user \"\"\"\ntype UserUpdateSubscriptionPayload {\n    \"\"\" The action that was performed on a user data structure (UPDATE, DELETE) \"\"\"\n    event: String!\n\n    \"\"\" The attributes that were changed (only if the event is UPDATE) \"\"\"\n    changedAttributes: [String!]\n\n    \"\"\" The updated or deleted user data structure \"\"\"\n    user: User\n}\n\n# https://github.com/th-koeln/open-product-evaluation-server/blob/4f75ec694f99556e9348fe533f2bfcf8a10ccd7a/src/entities/misc/misc.graphql:\n\"\"\" Defines a type for image uploads \"\"\"\nscalar Upload\n\n\"\"\" Defines a type for date and time \"\"\"\nscalar DateTime\n\n\"\"\" Defines a type for hashed IDs every entity uses \"\"\"\nscalar HashID\n\n\"\"\" Defines different types of questions \"\"\"\nenum QuestionType {\n    \"\"\" Represents a question where the participant can communicate that he / she liked something (or be neutral by answering with 'null' or false). Its mostly needed when there is only this single question and people could simply share a like when walking by (in crowded places). \"\"\"\n    LIKE\n    \"\"\" Represents a question where the participant can communicate that he / she liked or disliked something (or be neutral by answering with 'null'). \"\"\"\n    LIKEDISLIKE\n    \"\"\" Represents a question where the participant can choose between different choices / answer options (or be neutral by answering with 'null'). \"\"\"\n    CHOICE\n    \"\"\" Represents a question where the participant can give a rating thats in between a minimum and maximum value (or be neutral by answering with 'null'). \"\"\"\n    REGULATOR\n    \"\"\" Represents a question where the participant can favorite one of the provided items (or be neutral by answering with 'null'). \"\"\"\n    FAVORITE\n    \"\"\" Represents a question where the participant can rank the provided items (or be neutral by answering with 'null'). \"\"\"\n    RANKING\n}\n\n\"\"\" Provide the maximum amount of documents you get and at which offset they should start \"\"\"\ninput Pagination {\n    \"\"\" The maximum amount of documents you get \"\"\"\n    limit : Int = 50\n\n    \"\"\" The offset at which the documents start \"\"\"\n    offset : Int = 0\n}\n\n\"\"\" Defines the order of objects when sorting them \"\"\"\nenum SortOption {\n    \"\"\" Start by the lowest value / object \"\"\"\n    ASCENDING,\n\n    \"\"\" Start by the highest value / object \"\"\"\n    DESCENDING\n}\n\n\"\"\" Defines a filter for the query \"\"\"\ninput Filter {\n    \"\"\" The server searches in every rational attribute of the requested entities if it contains or starts with this String \"\"\"\n    search: String!\n}\n",
        "mergedPaths": [
          "src/entities/misc/misc.graphql"
        ],
        "typesDefinedByMerge": [
          "DateTime",
          "HashID",
          "SortOption"
        ],
        "directivesDefinedByMerge": [],
        "validSchema": true,
        "contentDuplicate": false,
        "numObjectTypes": 9,
        "containsCycle": false,
        "polynomialLevel": 1,
        "numDefinitions": 21
      },
      "validSchema": false
    },
    {
      "name": "misc.graphql",
      "path": "src/entities/misc/misc.graphql",
      "sha": "6a1f717960df2591b9e3e1da2cdb6cbabc324407",
      "url": "https://api.github.com/repositories/133054250/contents/src/entities/misc/misc.graphql?ref=4f75ec694f99556e9348fe533f2bfcf8a10ccd7a",
      "git_url": "https://api.github.com/repositories/133054250/git/blobs/6a1f717960df2591b9e3e1da2cdb6cbabc324407",
      "html_url": "https://github.com/th-koeln/open-product-evaluation-server/blob/4f75ec694f99556e9348fe533f2bfcf8a10ccd7a/src/entities/misc/misc.graphql",
      "content": "\"\"\" Defines a type for image uploads \"\"\"\nscalar Upload\n\n\"\"\" Defines a type for date and time \"\"\"\nscalar DateTime\n\n\"\"\" Defines a type for hashed IDs every entity uses \"\"\"\nscalar HashID\n\n\"\"\" Defines different types of questions \"\"\"\nenum QuestionType {\n    \"\"\" Represents a question where the participant can communicate that he / she liked something (or be neutral by answering with 'null' or false). Its mostly needed when there is only this single question and people could simply share a like when walking by (in crowded places). \"\"\"\n    LIKE\n    \"\"\" Represents a question where the participant can communicate that he / she liked or disliked something (or be neutral by answering with 'null'). \"\"\"\n    LIKEDISLIKE\n    \"\"\" Represents a question where the participant can choose between different choices / answer options (or be neutral by answering with 'null'). \"\"\"\n    CHOICE\n    \"\"\" Represents a question where the participant can give a rating thats in between a minimum and maximum value (or be neutral by answering with 'null'). \"\"\"\n    REGULATOR\n    \"\"\" Represents a question where the participant can favorite one of the provided items (or be neutral by answering with 'null'). \"\"\"\n    FAVORITE\n    \"\"\" Represents a question where the participant can rank the provided items (or be neutral by answering with 'null'). \"\"\"\n    RANKING\n}\n\n\"\"\" Provide the maximum amount of documents you get and at which offset they should start \"\"\"\ninput Pagination {\n    \"\"\" The maximum amount of documents you get \"\"\"\n    limit : Int = 50\n\n    \"\"\" The offset at which the documents start \"\"\"\n    offset : Int = 0\n}\n\n\"\"\" Defines the order of objects when sorting them \"\"\"\nenum SortOption {\n    \"\"\" Start by the lowest value / object \"\"\"\n    ASCENDING,\n\n    \"\"\" Start by the highest value / object \"\"\"\n    DESCENDING\n}\n\n\"\"\" Defines a filter for the query \"\"\"\ninput Filter {\n    \"\"\" The server searches in every rational attribute of the requested entities if it contains or starts with this String \"\"\"\n    search: String!\n}\n",
      "containsQueryType": false,
      "validSchema": true,
      "contentDuplicate": false,
      "numDefinitions": 7
    }
  ],
  "metrics": {
    "created_at": "2018-05-11T15:04:15Z",
    "updated_at": "2019-03-28T16:17:12Z",
    "pushed_at": "2019-03-28T22:23:39Z",
    "issues": 136,
    "watchers": 6,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 132,
    "pull_requests_open": 0,
    "pull_requests_closed": 12,
    "pull_requests_merged": 120,
    "releases": 1,
    "stargazers": 1
  }
}