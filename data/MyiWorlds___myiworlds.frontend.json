{
  "repo_name": "myiworlds.frontend",
  "repo_full_name": "myiworlds/myiworlds.frontend",
  "repo_owner": "MyiWorlds",
  "repo_description": "Deprecating for my project \"frontend\" - A thin layer between consciousness and reality to enable our ultimate potential.  A completely customizable interface for you to create/find/share anything.  Think Iron Man mask and the interface he uses to interact with everything. ",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "src/schema.graphql",
      "sha": "aa4cfc13b219afa0ceb7761dae9d5c8dccd7cc17",
      "url": "https://api.github.com/repositories/110505318/contents/src/schema.graphql?ref=eed3568e2bc162e03a07cc7a60260b6831b2f75d",
      "git_url": "https://api.github.com/repositories/110505318/git/blobs/aa4cfc13b219afa0ceb7761dae9d5c8dccd7cc17",
      "html_url": "https://github.com/MyiWorlds/myiworlds.frontend/blob/eed3568e2bc162e03a07cc7a60260b6831b2f75d/src/schema.graphql",
      "content": "# The `BigInt` scalar type represents non-fractional signed whole numeric values.\n# BigInt can represent values between -(2^53) + 1 and 2^53 - 1. \nscalar BigInt\n\n# Every circle you see can be placed inside a circle.\ntype Circle implements Node {\n  # The ID of an object\n  id: ID!\n\n  # A unique id used to instantly locate this inside the database\n  _id: ID\n\n  # If a user interface is not set, the user will take the default styles of the page\n  ui: Circle\n\n  # The full slug (after domain name) to this piece of content\n  slug: String\n\n  # The name of this slug without creators name before it. This allows shared\n  # Users to edit the title, but not the root path.  This is stored incase the\n  # creators name changes\n  slugName: String\n\n  # Is this circle visable to the public?\n  public: Boolean\n\n  # Does it require a password to view?\n  passwordRequired: Boolean\n\n  # The type of data this node is holding, it allows the frontend to choose the perfect component to show you.\n  type: String!\n  settings: Circle\n  rating: Circle\n  styles: Circle\n  tags: [String]\n  title: String\n  subtitle: String\n  description: String\n\n  # A piece of media (font icon/image/gif/video) that helps identify this piece of content.\n  media: Circle\n\n  # A piece of icon (font icon/image/gif/video) that helps identify this piece of content.  Defaults to creators display pic\n  icon: Circle\n\n  # Who is allowed to see this node?\n  viewers: Circle\n\n  # The User who created this piece of content\n  creator: User\n\n  # Users that can edit this circle\n  editors: Circle\n  dateCreated: BigInt\n  dateUpdated: BigInt\n  string: String\n  blob: JSON\n  number: Int\n  bigNumber: BigInt\n  boolean: Boolean\n  date: String\n  geoPoint: String\n\n  # When you want to point to a single circle type.  Normally used for changing a node but without actually changing it.\n  line: Circle\n\n  # When you want to connect lots of Circles, but don't need pagination (used for TONS of results) \n  lines: [Circle]\n\n  # When you need to connect lots of Circles together, but you only want to show a certain amount at a time\n  linesMany(after: String, first: Int, before: String, last: Int): CircleConnection\n}\n\n# A connection to a list of items.\ntype CircleConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [CircleEdge]\n}\n\n# An edge in a connection.\ntype CircleEdge {\n  # The item at the end of the edge\n  node: Circle\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput createCircleInput {\n  _id: String\n  slug: String\n  slugName: String\n  public: Boolean\n  passwordRequired: Boolean\n  password: String\n  viewers: [String]\n  type: String!\n  styles: [String]\n  tags: [String]\n  title: String\n  subtitle: String\n  description: String\n  media: String\n  icon: String\n  creator: String!\n  editors: [String]\n  dateCreated: String\n  dateUpdated: String\n  string: String\n  blob: JSON\n  number: Int\n  boolean: Boolean\n  line: String\n  lines: [String]\n  linesMany: [String]\n  clientMutationId: String\n}\n\ntype createCirclePayload {\n  message: String\n  createdCircle: Circle\n  clientMutationId: String\n}\n\ninput createUserInput {\n  username: String!\n  email: String!\n  password: String!\n  dateCreated: String!\n  dateUpdated: String!\n  clientMutationId: String\n}\n\ntype createUserPayload {\n  message: String\n  createdUser: User\n  clientMutationId: String\n}\n\ninput deleteCircleInput {\n  _id: String!\n  clientMutationId: String\n}\n\ntype deleteCirclePayload {\n  message: String\n  idToDelete: String\n  wasDeleted: Boolean\n  numberOfClones: Int\n  clonesDeleted: Boolean\n  clientMutationId: String\n}\n\ninput deleteUserInput {\n  _id: String!\n  clientMutationId: String\n}\n\ntype deleteUserPayload {\n  message: String\n  idToDelete: String\n  wasDeleted: Boolean\n  numberOfClones: Int\n  clonesDeleted: Boolean\n  clientMutationId: String\n}\n\n# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\nscalar JSON\n\ntype Mutation {\n  createCircle(input: createCircleInput!): createCirclePayload\n  updateCircle(input: updateCircleInput!): updateCirclePayload\n  updateCirclePassword(input: updateCirclePasswordInput!): updateCirclePasswordPayload\n  deleteCircle(input: deleteCircleInput!): deleteCirclePayload\n  createUser(input: createUserInput!): createUserPayload\n  updateUserPassword(input: updateUserPasswordInput!): updateUserPasswordPayload\n  updateEmailConfirmed(input: updateEmailConfirmedInput!): updateEmailConfirmedPayload\n  updateUsername(input: updateUsernameInput!): updateUsernamePayload\n  updateEmail(input: updateEmailInput!): updateEmailPayload\n  deleteUser(input: deleteUserInput!): deleteUserPayload\n  updateUiEnabled(input: updateUiEnabledInput!): updateUiEnabledPayload\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype Query {\n  user(_id: String): User\n  getCirclesByUserKey(creator: String): [Circle]\n  getCircleBySlug(slug: String): Circle\n  getCircleByKey(_id: String): Circle\n\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n\n  # Fetches objects given their IDs\n  nodes(\n    # The IDs of objects\n    ids: [ID!]!\n  ): [Node]!\n}\n\ninput updateCircleInput {\n  _id: String!\n  slug: String\n  slugName: String\n  public: Boolean\n  passwordRequired: Boolean\n  viewers: [String]\n  type: String!\n  styles: [String]\n  tags: [String]\n  order: Int\n  title: String\n  subtitle: String\n  description: String\n  media: String\n  creator: String!\n  editors: [String]\n  dateCreated: String\n  dateUpdated: String\n  string: String\n  blob: JSON\n  number: Int\n  boolean: Boolean\n  line: String\n  lines: [String]\n  linesMany: [String]\n  clientMutationId: String\n}\n\ninput updateCirclePasswordInput {\n  _id: String!\n  password: String\n  dateUpdated: String!\n  clientMutationId: String\n}\n\ntype updateCirclePasswordPayload {\n  message: String\n  updatedCircle: Circle\n  latestVersionOfCircle: Circle\n  clientMutationId: String\n}\n\ntype updateCirclePayload {\n  message: String\n  updatedCircle: Circle\n  latestVersionOfCircle: Circle\n  clientMutationId: String\n}\n\ninput updateEmailConfirmedInput {\n  _id: String!\n  dateUpdated: String!\n  clientMutationId: String\n}\n\ntype updateEmailConfirmedPayload {\n  message: String\n  updatedUser: User\n  latestVersionOfUser: User\n  clientMutationId: String\n}\n\ninput updateEmailInput {\n  _id: String!\n  email: String!\n  dateUpdated: String!\n  clientMutationId: String\n}\n\ntype updateEmailPayload {\n  message: String\n  updatedUser: User\n  latestVersionOfUser: User\n  clientMutationId: String\n}\n\ninput updateUiEnabledInput {\n  _id: String!\n  dateUpdated: String!\n  uiEnabled: Boolean!\n  clientMutationId: String\n}\n\ntype updateUiEnabledPayload {\n  message: String\n  updatedUser: User\n  latestVersionOfUser: User\n  clientMutationId: String\n}\n\ninput updateUsernameInput {\n  _id: String!\n  username: String!\n  dateUpdated: String!\n  clientMutationId: String\n}\n\ntype updateUsernamePayload {\n  message: String\n  updatedUser: User\n  latestVersionOfUser: User\n  clientMutationId: String\n}\n\ninput updateUserPasswordInput {\n  _id: String!\n  password: String!\n  dateUpdated: String!\n  clientMutationId: String\n}\n\ntype updateUserPasswordPayload {\n  message: String\n  updatedUser: User\n  latestVersionOfUser: User\n  clientMutationId: String\n}\n\n# user who can create and interact with circles.\ntype User implements Node {\n  # The ID of an object\n  id: ID!\n  _id: ID!\n  username: String\n  email: String!\n  emailConfirmed: Boolean\n  dateCreated: Int\n  dateUpdated: Int\n  level: Circle\n\n  # The users currently oweing balance\n  balance: Circle\n\n  # The Users rating\n  rating: Circle\n  uiEnabled: Boolean\n\n  # How the user wants to view the system.\n  ui: Circle\n\n  # The home circle of myiworlds.com/user/userName.\n  homePublic: Circle\n\n  # The home circle of myiworlds.com/user/userName.\n  homePrivate: Circle\n\n  # All circles created by this user, they are not stored on the user object but\n  # its own node in the graph to prevent overloading this.  No concepts of\n  # friends, just things you follow, it could be a friends page though.\n  following: Circle\n\n  # Contains a list of notifications.\n  notifications: Circle\n\n  # The Users search history. Will be used by their personal AI to help them in\n  # the best way possible.  Saves the last node they viewed\n  search: Circle\n\n  # The Users history of what they view. Will be used by their personal AI to help\n  # them in the best way possible.  Saves the last node they viewed\n  history: Circle\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 18,
      "containsCycle": true,
      "numDefinitions": 32
    }
  ],
  "metrics": {
    "created_at": "2017-11-13T05:46:57Z",
    "updated_at": "2018-09-15T19:34:44Z",
    "pushed_at": "2018-08-25T01:32:53Z",
    "issues": 31,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 3
  }
}