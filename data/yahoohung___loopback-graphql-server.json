{
  "repo_name": "loopback-graphql-server",
  "repo_full_name": "yahoohung/loopback-graphql-server",
  "repo_owner": "yahoohung",
  "repo_description": "Combine the powers of GraphQL with the backend of Loopback to automatically generate GraphQL endpoints based on Loopback Schema. ",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "src/schema.graphql",
      "sha": "daab0c723ea4db8517ad8a1aae455b308f4ed31f",
      "url": "https://api.github.com/repositories/103037153/contents/src/schema.graphql?ref=7295d67ee6cb0d68a03070ef27784a248d7d88b6",
      "git_url": "https://api.github.com/repositories/103037153/git/blobs/daab0c723ea4db8517ad8a1aae455b308f4ed31f",
      "html_url": "https://github.com/yahoohung/loopback-graphql-server/blob/7295d67ee6cb0d68a03070ef27784a248d7d88b6/src/schema.graphql",
      "content": "type brand implements Node {\n  # The ID of an object\n  id: ID!\n  name: String!\n  products(filter: JSON, after: String, first: Int, before: String, last: Int): productConnection\n}\n\n# A connection to a list of items.\ntype brandConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [brandEdge]\n\n  # Total number of items\n  totalCount: Int\n}\n\ninput brandCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype brandCreatePayload {\n  obj: brand\n  clientMutationId: String\n}\n\ninput brandDeleteByIdInput {\n  id: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype brandDeleteByIdPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\n# An edge in a connection.\ntype brandEdge {\n  # The item at the end of the edge\n  node: brand\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput brandPatchOrCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype brandPatchOrCreatePayload {\n  obj: brand\n  clientMutationId: String\n}\n\n# brand\ntype brandQueries {\n  # Check whether a model instance exists in the data source.\n  brandExists(id: JSON, options: JSON): Boolean\n\n  # Find a model instance by {{id}} from the data source.\n  brandFindById(id: JSON, filter: JSON, options: JSON): brand\n\n  # Find all instances of the model matched by filter from the data source.\n  brandFind(filter: JSON, options: JSON, after: String, first: Int, before: String, last: Int): brandConnection\n\n  # Find first instance of the model matched by filter from the data source.\n  brandFindOne(filter: JSON, options: JSON): brand\n\n  # Count instances of the model matched by where from the data source.\n  brandCount(where: JSON, options: JSON): Int\n}\n\ninput brandReplaceByIdInput {\n  id: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype brandReplaceByIdPayload {\n  obj: brand\n  clientMutationId: String\n}\n\ninput brandReplaceOrCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype brandReplaceOrCreatePayload {\n  obj: brand\n  clientMutationId: String\n}\n\ninput brandUpdateAllInput {\n  where: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype brandUpdateAllPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\ninput brandUpsertWithWhereInput {\n  where: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype brandUpsertWithWherePayload {\n  obj: brand\n  clientMutationId: String\n}\n\nscalar DateTime\n\n# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\nscalar JSON\n\ntype Mutation {\n  # Create a new instance of the model and persist it into the data source.\n  productCreate(input: productCreateInput!): productCreatePayload\n\n  # Patch an existing model instance or insert a new one into the data source.\n  productPatchOrCreate(input: productPatchOrCreateInput!): productPatchOrCreatePayload\n\n  # Replace an existing model instance or insert a new one into the data source.\n  productReplaceOrCreate(input: productReplaceOrCreateInput!): productReplaceOrCreatePayload\n\n  # Update an existing model instance or insert a new one into the data source based on the where criteria.\n  productUpsertWithWhere(input: productUpsertWithWhereInput!): productUpsertWithWherePayload\n\n  # Replace attributes for a model instance and persist it into the data source.\n  productReplaceById(input: productReplaceByIdInput!): productReplaceByIdPayload\n\n  # Update instances of the model matched by {{where}} from the data source.\n  productUpdateAll(input: productUpdateAllInput!): productUpdateAllPayload\n\n  # Delete a model instance by {{id}} from the data source.\n  productDeleteById(input: productDeleteByIdInput!): productDeleteByIdPayload\n\n  # Create a new instance of the model and persist it into the data source.\n  brandCreate(input: brandCreateInput!): brandCreatePayload\n\n  # Patch an existing model instance or insert a new one into the data source.\n  brandPatchOrCreate(input: brandPatchOrCreateInput!): brandPatchOrCreatePayload\n\n  # Replace an existing model instance or insert a new one into the data source.\n  brandReplaceOrCreate(input: brandReplaceOrCreateInput!): brandReplaceOrCreatePayload\n\n  # Update an existing model instance or insert a new one into the data source based on the where criteria.\n  brandUpsertWithWhere(input: brandUpsertWithWhereInput!): brandUpsertWithWherePayload\n\n  # Replace attributes for a model instance and persist it into the data source.\n  brandReplaceById(input: brandReplaceByIdInput!): brandReplaceByIdPayload\n\n  # Update instances of the model matched by {{where}} from the data source.\n  brandUpdateAll(input: brandUpdateAllInput!): brandUpdateAllPayload\n\n  # Delete a model instance by {{id}} from the data source.\n  brandDeleteById(input: brandDeleteByIdInput!): brandDeleteByIdPayload\n\n  # Create a new instance of the model and persist it into the data source.\n  userCreate(input: userCreateInput!): userCreatePayload\n\n  # Patch an existing model instance or insert a new one into the data source.\n  userPatchOrCreate(input: userPatchOrCreateInput!): userPatchOrCreatePayload\n\n  # Replace an existing model instance or insert a new one into the data source.\n  userReplaceOrCreate(input: userReplaceOrCreateInput!): userReplaceOrCreatePayload\n\n  # Update an existing model instance or insert a new one into the data source based on the where criteria.\n  userUpsertWithWhere(input: userUpsertWithWhereInput!): userUpsertWithWherePayload\n\n  # Replace attributes for a model instance and persist it into the data source.\n  userReplaceById(input: userReplaceByIdInput!): userReplaceByIdPayload\n\n  # Update instances of the model matched by {{where}} from the data source.\n  userUpdateAll(input: userUpdateAllInput!): userUpdateAllPayload\n\n  # Delete a model instance by {{id}} from the data source.\n  userDeleteById(input: userDeleteByIdInput!): userDeleteByIdPayload\n\n  # Login a user with username/email and password.\n  userLogin(input: userLoginInput!): userLoginPayload\n\n  # Logout a user with access token.\n  userLogout(input: userLogoutInput!): userLogoutPayload\n\n  # Reset password for a user with email.\n  userResetPassword(input: userResetPasswordInput!): userResetPasswordPayload\n\n  # Change a user's password.\n  userChangePassword(input: userChangePasswordInput!): userChangePasswordPayload\n\n  # Reset user's password via a password-reset token.\n  userSetPassword(input: userSetPasswordInput!): userSetPasswordPayload\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype product implements Node {\n  # The ID of an object\n  id: ID!\n  name: String!\n  price: Float\n  create_at: DateTime!\n  brandId: Float\n  brand(filter: JSON, after: String, first: Int, before: String, last: Int): brand\n}\n\n# A connection to a list of items.\ntype productConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [productEdge]\n\n  # Total number of items\n  totalCount: Int\n}\n\ninput productCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype productCreatePayload {\n  obj: product\n  clientMutationId: String\n}\n\ninput productDeleteByIdInput {\n  id: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype productDeleteByIdPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\n# An edge in a connection.\ntype productEdge {\n  # The item at the end of the edge\n  node: product\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput productPatchOrCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype productPatchOrCreatePayload {\n  obj: product\n  clientMutationId: String\n}\n\n# product\ntype productQueries {\n  # Check whether a model instance exists in the data source.\n  productExists(id: JSON, options: JSON): Boolean\n\n  # Find a model instance by {{id}} from the data source.\n  productFindById(id: JSON, filter: JSON, options: JSON): product\n\n  # Find all instances of the model matched by filter from the data source.\n  productFind(filter: JSON, options: JSON, after: String, first: Int, before: String, last: Int): productConnection\n\n  # Find first instance of the model matched by filter from the data source.\n  productFindOne(filter: JSON, options: JSON): product\n\n  # Count instances of the model matched by where from the data source.\n  productCount(where: JSON, options: JSON): Int\n}\n\ninput productReplaceByIdInput {\n  id: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype productReplaceByIdPayload {\n  obj: product\n  clientMutationId: String\n}\n\ninput productReplaceOrCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype productReplaceOrCreatePayload {\n  obj: product\n  clientMutationId: String\n}\n\ninput productUpdateAllInput {\n  where: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype productUpdateAllPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\ninput productUpsertWithWhereInput {\n  where: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype productUpsertWithWherePayload {\n  obj: product\n  clientMutationId: String\n}\n\ntype Query {\n  product: productQueries\n  brand: brandQueries\n  user: userQueries\n}\n\ntype user implements Node {\n  realm: String\n  username: String\n  email: String!\n  emailVerified: Boolean\n\n  # The ID of an object\n  id: ID!\n}\n\ninput userChangePasswordInput {\n  id: JSON\n  oldPassword: String\n  newPassword: String\n  options: JSON\n  clientMutationId: String\n}\n\ntype userChangePasswordPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\n# A connection to a list of items.\ntype userConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [userEdge]\n\n  # Total number of items\n  totalCount: Int\n}\n\ninput userCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype userCreatePayload {\n  obj: user\n  clientMutationId: String\n}\n\ninput userDeleteByIdInput {\n  id: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype userDeleteByIdPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\n# An edge in a connection.\ntype userEdge {\n  # The item at the end of the edge\n  node: user\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput userLoginInput {\n  credentials: JSON\n  include: JSON\n  clientMutationId: String\n}\n\ntype userLoginPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\ninput userLogoutInput {\n  access_token: String\n  clientMutationId: String\n}\n\ntype userLogoutPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\ninput userPatchOrCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype userPatchOrCreatePayload {\n  obj: user\n  clientMutationId: String\n}\n\n# user\ntype userQueries {\n  # Check whether a model instance exists in the data source.\n  userExists(id: JSON, options: JSON): Boolean\n\n  # Find a model instance by {{id}} from the data source.\n  userFindById(id: JSON, filter: JSON, options: JSON): user\n\n  # Find all instances of the model matched by filter from the data source.\n  userFind(filter: JSON, options: JSON, after: String, first: Int, before: String, last: Int): userConnection\n\n  # Find first instance of the model matched by filter from the data source.\n  userFindOne(filter: JSON, options: JSON): user\n\n  # Count instances of the model matched by where from the data source.\n  userCount(where: JSON, options: JSON): Int\n\n  # Confirm a user registration with identity verification token.\n  userConfirm(uid: String, token: String, redirect: String): JSON\n}\n\ninput userReplaceByIdInput {\n  id: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype userReplaceByIdPayload {\n  obj: user\n  clientMutationId: String\n}\n\ninput userReplaceOrCreateInput {\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype userReplaceOrCreatePayload {\n  obj: user\n  clientMutationId: String\n}\n\ninput userResetPasswordInput {\n  options: JSON\n  clientMutationId: String\n}\n\ntype userResetPasswordPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\ninput userSetPasswordInput {\n  id: JSON\n  newPassword: String\n  options: JSON\n  clientMutationId: String\n}\n\ntype userSetPasswordPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\ninput userUpdateAllInput {\n  where: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype userUpdateAllPayload {\n  obj: JSON\n  clientMutationId: String\n}\n\ninput userUpsertWithWhereInput {\n  where: JSON\n  data: JSON\n  options: JSON\n  clientMutationId: String\n}\n\ntype userUpsertWithWherePayload {\n  obj: user\n  clientMutationId: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 41,
      "containsCycle": true,
      "numDefinitions": 70
    }
  ],
  "metrics": {
    "created_at": "2017-09-10T14:46:23Z",
    "updated_at": "2019-07-17T21:26:59Z",
    "pushed_at": "2019-07-01T09:59:28Z",
    "issues": 18,
    "watchers": 10,
    "fork_count": 20,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 5,
    "pull_requests_open": 3,
    "pull_requests_closed": 0,
    "pull_requests_merged": 2,
    "releases": 0,
    "stargazers": 85
  }
}