{
  "repo_name": "strapi",
  "repo_full_name": "netseecom/strapi",
  "repo_owner": "netseecom",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "nuxt-strapi-deliveroo-clone-tutorial/server/plugins/graphql/config/generated/schema.graphql",
      "sha": "bb5b22c1962a40af90e65bd6bc8ced7c67f6989d",
      "url": "https://api.github.com/repositories/160393672/contents/nuxt-strapi-deliveroo-clone-tutorial/server/plugins/graphql/config/generated/schema.graphql?ref=5a36b896a768ad873c710d89d82973e4f19ae7b6",
      "git_url": "https://api.github.com/repositories/160393672/git/blobs/bb5b22c1962a40af90e65bd6bc8ced7c67f6989d",
      "html_url": "https://github.com/netseecom/strapi/blob/5a36b896a768ad873c710d89d82973e4f19ae7b6/nuxt-strapi-deliveroo-clone-tutorial/server/plugins/graphql/config/generated/schema.graphql",
      "content": "input createDishInput {\n  data: DishInput\n}\n\ntype createDishPayload {\n  dish: Dish\n}\n\ninput createOrderInput {\n  data: OrderInput\n}\n\ntype createOrderPayload {\n  order: Order\n}\n\ninput createRestaurantInput {\n  data: RestaurantInput\n}\n\ntype createRestaurantPayload {\n  restaurant: Restaurant\n}\n\ninput createRoleInput {\n  data: RoleInput\n}\n\ntype createRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput createUserInput {\n  data: UserInput\n}\n\ntype createUserPayload {\n  user: UsersPermissionsUser\n}\n\n\"\"\"\nThe `DateTime` scalar represents a date and time following the ISO 8601 standard\n\"\"\"\nscalar DateTime\n\ninput deleteDishInput {\n  where: InputID\n}\n\ntype deleteDishPayload {\n  dish: Dish\n}\n\ninput deleteOrderInput {\n  where: InputID\n}\n\ntype deleteOrderPayload {\n  order: Order\n}\n\ninput deleteRestaurantInput {\n  where: InputID\n}\n\ntype deleteRestaurantPayload {\n  restaurant: Restaurant\n}\n\ninput deleteRoleInput {\n  where: InputID\n}\n\ntype deleteRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput deleteUserInput {\n  where: InputID\n}\n\ntype deleteUserPayload {\n  user: UsersPermissionsUser\n}\n\ntype Dish {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String\n  description: String\n  image: UploadFile\n  price: Float\n  restaurant: Restaurant\n}\n\ntype DishAggregator {\n  count: Int\n  sum: DishAggregatorSum\n  avg: DishAggregatorAvg\n  min: DishAggregatorMin\n  max: DishAggregatorMax\n}\n\ntype DishAggregatorAvg {\n  price: Float\n}\n\ntype DishAggregatorMax {\n  price: Float\n}\n\ntype DishAggregatorMin {\n  price: Float\n}\n\ntype DishAggregatorSum {\n  price: Float\n}\n\ntype DishConnection {\n  values: [Dish]\n  groupBy: DishGroupBy\n  aggregate: DishAggregator\n}\n\ntype DishConnection_id {\n  key: ID\n  connection: DishConnection\n}\n\ntype DishConnectionCreatedAt {\n  key: DateTime\n  connection: DishConnection\n}\n\ntype DishConnectionDescription {\n  key: String\n  connection: DishConnection\n}\n\ntype DishConnectionImage {\n  key: ID\n  connection: DishConnection\n}\n\ntype DishConnectionName {\n  key: String\n  connection: DishConnection\n}\n\ntype DishConnectionPrice {\n  key: Float\n  connection: DishConnection\n}\n\ntype DishConnectionRestaurant {\n  key: ID\n  connection: DishConnection\n}\n\ntype DishConnectionUpdatedAt {\n  key: DateTime\n  connection: DishConnection\n}\n\ntype DishGroupBy {\n  _id: [DishConnection_id]\n  createdAt: [DishConnectionCreatedAt]\n  updatedAt: [DishConnectionUpdatedAt]\n  name: [DishConnectionName]\n  description: [DishConnectionDescription]\n  image: [DishConnectionImage]\n  price: [DishConnectionPrice]\n  restaurant: [DishConnectionRestaurant]\n}\n\ninput DishInput {\n  name: String\n  description: String\n  image: ID\n  price: Float\n  restaurant: ID\n}\n\ninput FileInput {\n  name: String!\n  hash: String!\n  sha256: String\n  ext: String\n  mime: String!\n  size: String!\n  url: String!\n  provider: String!\n  related: [ID]\n}\n\ninput InputID {\n  id: ID!\n}\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n\nunion Morph = UsersPermissionsMe | UsersPermissionsMeRole | Dish | createDishPayload | updateDishPayload | deleteDishPayload | DishConnection | DishAggregator | DishAggregatorSum | DishAggregatorAvg | DishAggregatorMin | DishAggregatorMax | DishGroupBy | DishConnection_id | DishConnectionCreatedAt | DishConnectionUpdatedAt | DishConnectionName | DishConnectionDescription | DishConnectionImage | DishConnectionPrice | DishConnectionRestaurant | Order | createOrderPayload | updateOrderPayload | deleteOrderPayload | OrderConnection | OrderAggregator | OrderAggregatorSum | OrderAggregatorAvg | OrderAggregatorMin | OrderAggregatorMax | OrderGroupBy | OrderConnection_id | OrderConnectionCreatedAt | OrderConnectionUpdatedAt | OrderConnectionAddress | OrderConnectionPostalCode | OrderConnectionCity | OrderConnectionDishes | OrderConnectionAmount | Restaurant | createRestaurantPayload | updateRestaurantPayload | deleteRestaurantPayload | RestaurantConnection | RestaurantAggregator | RestaurantGroupBy | RestaurantConnection_id | RestaurantConnectionCreatedAt | RestaurantConnectionUpdatedAt | RestaurantConnectionName | RestaurantConnectionDescription | RestaurantConnectionImage | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole\n\ntype Mutation {\n  createDish(input: createDishInput): createDishPayload\n  updateDish(input: updateDishInput): updateDishPayload\n  deleteDish(input: deleteDishInput): deleteDishPayload\n  createOrder(input: createOrderInput): createOrderPayload\n  updateOrder(input: updateOrderInput): updateOrderPayload\n  deleteOrder(input: deleteOrderInput): deleteOrderPayload\n  createRestaurant(input: createRestaurantInput): createRestaurantPayload\n  updateRestaurant(input: updateRestaurantInput): updateRestaurantPayload\n  deleteRestaurant(input: deleteRestaurantInput): deleteRestaurantPayload\n\n  \"\"\"Create a new role\"\"\"\n  createRole(input: createRoleInput): createRolePayload\n\n  \"\"\"Update an existing role\"\"\"\n  updateRole(input: updateRoleInput): updateRolePayload\n\n  \"\"\"Delete an existing role\"\"\"\n  deleteRole(input: deleteRoleInput): deleteRolePayload\n  createUser(input: createUserInput): createUserPayload\n  updateUser(input: updateUserInput): updateUserPayload\n  deleteUser(input: deleteUserInput): deleteUserPayload\n  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!\n}\n\ntype Order {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  address: String\n  postalCode: String\n  city: String\n  dishes: JSON\n  amount: Float\n}\n\ntype OrderAggregator {\n  count: Int\n  sum: OrderAggregatorSum\n  avg: OrderAggregatorAvg\n  min: OrderAggregatorMin\n  max: OrderAggregatorMax\n}\n\ntype OrderAggregatorAvg {\n  amount: Float\n}\n\ntype OrderAggregatorMax {\n  amount: Float\n}\n\ntype OrderAggregatorMin {\n  amount: Float\n}\n\ntype OrderAggregatorSum {\n  amount: Float\n}\n\ntype OrderConnection {\n  values: [Order]\n  groupBy: OrderGroupBy\n  aggregate: OrderAggregator\n}\n\ntype OrderConnection_id {\n  key: ID\n  connection: OrderConnection\n}\n\ntype OrderConnectionAddress {\n  key: String\n  connection: OrderConnection\n}\n\ntype OrderConnectionAmount {\n  key: Float\n  connection: OrderConnection\n}\n\ntype OrderConnectionCity {\n  key: String\n  connection: OrderConnection\n}\n\ntype OrderConnectionCreatedAt {\n  key: DateTime\n  connection: OrderConnection\n}\n\ntype OrderConnectionDishes {\n  key: JSON\n  connection: OrderConnection\n}\n\ntype OrderConnectionPostalCode {\n  key: String\n  connection: OrderConnection\n}\n\ntype OrderConnectionUpdatedAt {\n  key: DateTime\n  connection: OrderConnection\n}\n\ntype OrderGroupBy {\n  _id: [OrderConnection_id]\n  createdAt: [OrderConnectionCreatedAt]\n  updatedAt: [OrderConnectionUpdatedAt]\n  address: [OrderConnectionAddress]\n  postalCode: [OrderConnectionPostalCode]\n  city: [OrderConnectionCity]\n  dishes: [OrderConnectionDishes]\n  amount: [OrderConnectionAmount]\n}\n\ninput OrderInput {\n  address: String\n  postalCode: String\n  city: String\n  dishes: JSON\n  amount: Float\n}\n\ntype Query {\n  dish(id: ID!): Dish\n  dishes(sort: String, limit: Int, start: Int, where: JSON): [Dish]\n  dishesConnection(sort: String, limit: Int, start: Int, where: JSON): DishConnection\n  order(id: ID!): Order\n  orders(sort: String, limit: Int, start: Int, where: JSON): [Order]\n  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrderConnection\n  restaurant(id: ID!): Restaurant\n  restaurants(sort: String, limit: Int, start: Int, where: JSON): [Restaurant]\n  restaurantsConnection(sort: String, limit: Int, start: Int, where: JSON): RestaurantConnection\n  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]\n  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection\n  role(id: ID!): UsersPermissionsRole\n\n  \"\"\"\n  Retrieve all the existing roles. You can't apply filters on this query.\n  \"\"\"\n  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]\n  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection\n  user(id: ID!): UsersPermissionsUser\n  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]\n  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection\n  me: UsersPermissionsMe\n}\n\ntype Restaurant {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String\n  description: String\n  image: UploadFile\n  dishes(sort: String, limit: Int, start: Int, where: JSON): [Dish]\n}\n\ntype RestaurantAggregator {\n  count: Int\n}\n\ntype RestaurantConnection {\n  values: [Restaurant]\n  groupBy: RestaurantGroupBy\n  aggregate: RestaurantAggregator\n}\n\ntype RestaurantConnection_id {\n  key: ID\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionCreatedAt {\n  key: DateTime\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionDescription {\n  key: String\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionImage {\n  key: ID\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionName {\n  key: String\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionUpdatedAt {\n  key: DateTime\n  connection: RestaurantConnection\n}\n\ntype RestaurantGroupBy {\n  _id: [RestaurantConnection_id]\n  createdAt: [RestaurantConnectionCreatedAt]\n  updatedAt: [RestaurantConnectionUpdatedAt]\n  name: [RestaurantConnectionName]\n  description: [RestaurantConnectionDescription]\n  image: [RestaurantConnectionImage]\n}\n\ninput RestaurantInput {\n  name: String\n  description: String\n  image: ID\n  dishes: [ID]\n}\n\ninput RoleInput {\n  name: String!\n  description: String\n  type: String\n  permissions: [ID]\n  users: [ID]\n}\n\ninput updateDishInput {\n  where: InputID\n  data: DishInput\n}\n\ntype updateDishPayload {\n  dish: Dish\n}\n\ninput updateOrderInput {\n  where: InputID\n  data: OrderInput\n}\n\ntype updateOrderPayload {\n  order: Order\n}\n\ninput updateRestaurantInput {\n  where: InputID\n  data: RestaurantInput\n}\n\ntype updateRestaurantPayload {\n  restaurant: Restaurant\n}\n\ninput updateRoleInput {\n  where: InputID\n  data: RoleInput\n}\n\ntype updateRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput updateUserInput {\n  where: InputID\n  data: UserInput\n}\n\ntype updateUserPayload {\n  user: UsersPermissionsUser\n}\n\n\"\"\"\nThe `Upload` scalar type represents a file upload promise that resolves an\nobject containing `stream`, `filename`, `mimetype` and `encoding`.\n\"\"\"\nscalar Upload\n\ntype UploadFile {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  hash: String!\n  sha256: String\n  ext: String\n  mime: String!\n  size: String!\n  url: String!\n  provider: String!\n  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]\n}\n\ntype UploadFileAggregator {\n  count: Int\n}\n\ntype UploadFileConnection {\n  values: [UploadFile]\n  groupBy: UploadFileGroupBy\n  aggregate: UploadFileAggregator\n}\n\ntype UploadFileConnection_id {\n  key: ID\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionCreatedAt {\n  key: DateTime\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionExt {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionHash {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionMime {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionName {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionProvider {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionSha256 {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionSize {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionUpdatedAt {\n  key: DateTime\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionUrl {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileGroupBy {\n  _id: [UploadFileConnection_id]\n  createdAt: [UploadFileConnectionCreatedAt]\n  updatedAt: [UploadFileConnectionUpdatedAt]\n  name: [UploadFileConnectionName]\n  hash: [UploadFileConnectionHash]\n  sha256: [UploadFileConnectionSha256]\n  ext: [UploadFileConnectionExt]\n  mime: [UploadFileConnectionMime]\n  size: [UploadFileConnectionSize]\n  url: [UploadFileConnectionUrl]\n  provider: [UploadFileConnectionProvider]\n}\n\ninput UserInput {\n  username: String!\n  email: String!\n  provider: String\n  confirmed: Boolean\n  blocked: Boolean\n  role: ID\n}\n\ntype UsersPermissionsMe {\n  _id: ID!\n  username: String!\n  email: String!\n  confirmed: Boolean\n  blocked: Boolean\n  role: UsersPermissionsMeRole\n}\n\ntype UsersPermissionsMeRole {\n  _id: ID!\n  name: String!\n  description: String\n  type: String\n}\n\ntype UsersPermissionsPermission {\n  _id: ID!\n  type: String!\n  controller: String!\n  action: String!\n  enabled: Boolean!\n  policy: String\n  role: UsersPermissionsRole\n}\n\ntype UsersPermissionsRole {\n  _id: ID!\n  name: String!\n  description: String\n  type: String\n  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]\n  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]\n}\n\ntype UsersPermissionsRoleAggregator {\n  count: Int\n}\n\ntype UsersPermissionsRoleConnection {\n  values: [UsersPermissionsRole]\n  groupBy: UsersPermissionsRoleGroupBy\n  aggregate: UsersPermissionsRoleAggregator\n}\n\ntype UsersPermissionsRoleConnection_id {\n  key: ID\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionDescription {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionName {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionType {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleGroupBy {\n  _id: [UsersPermissionsRoleConnection_id]\n  name: [UsersPermissionsRoleConnectionName]\n  description: [UsersPermissionsRoleConnectionDescription]\n  type: [UsersPermissionsRoleConnectionType]\n}\n\ntype UsersPermissionsUser {\n  _id: ID!\n  username: String!\n  email: String!\n  provider: String\n  confirmed: Boolean\n  blocked: Boolean\n  role: UsersPermissionsRole\n}\n\ntype UsersPermissionsUserAggregator {\n  count: Int\n}\n\ntype UsersPermissionsUserConnection {\n  values: [UsersPermissionsUser]\n  groupBy: UsersPermissionsUserGroupBy\n  aggregate: UsersPermissionsUserAggregator\n}\n\ntype UsersPermissionsUserConnection_id {\n  key: ID\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionBlocked {\n  key: Boolean\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionConfirmed {\n  key: Boolean\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionEmail {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionProvider {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionRole {\n  key: ID\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionUsername {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserGroupBy {\n  _id: [UsersPermissionsUserConnection_id]\n  username: [UsersPermissionsUserConnectionUsername]\n  email: [UsersPermissionsUserConnectionEmail]\n  provider: [UsersPermissionsUserConnectionProvider]\n  confirmed: [UsersPermissionsUserConnectionConfirmed]\n  blocked: [UsersPermissionsUserConnectionBlocked]\n  role: [UsersPermissionsUserConnectionRole]\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 122
    },
    {
      "name": "schema.graphql",
      "path": "nextjs-react-strapi-deliveroo-clone-tutorial/backend/plugins/graphql/config/generated/schema.graphql",
      "sha": "7f914b41d6c966b948b5da5013efceac76660ce0",
      "url": "https://api.github.com/repositories/160393672/contents/nextjs-react-strapi-deliveroo-clone-tutorial/backend/plugins/graphql/config/generated/schema.graphql?ref=5a36b896a768ad873c710d89d82973e4f19ae7b6",
      "git_url": "https://api.github.com/repositories/160393672/git/blobs/7f914b41d6c966b948b5da5013efceac76660ce0",
      "html_url": "https://github.com/netseecom/strapi/blob/5a36b896a768ad873c710d89d82973e4f19ae7b6/nextjs-react-strapi-deliveroo-clone-tutorial/backend/plugins/graphql/config/generated/schema.graphql",
      "content": "input createDishInput {\n  data: DishInput\n}\n\ntype createDishPayload {\n  dish: Dish\n}\n\ninput createOrderInput {\n  data: OrderInput\n}\n\ntype createOrderPayload {\n  order: Order\n}\n\ninput createRestaurantInput {\n  data: RestaurantInput\n}\n\ntype createRestaurantPayload {\n  restaurant: Restaurant\n}\n\ninput createRoleInput {\n  data: RoleInput\n}\n\ntype createRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput createUserInput {\n  data: UserInput\n}\n\ntype createUserPayload {\n  user: UsersPermissionsUser\n}\n\n\"\"\"\nThe `DateTime` scalar represents a date and time following the ISO 8601 standard\n\"\"\"\nscalar DateTime\n\ninput deleteDishInput {\n  where: InputID\n}\n\ntype deleteDishPayload {\n  dish: Dish\n}\n\ninput deleteOrderInput {\n  where: InputID\n}\n\ntype deleteOrderPayload {\n  order: Order\n}\n\ninput deleteRestaurantInput {\n  where: InputID\n}\n\ntype deleteRestaurantPayload {\n  restaurant: Restaurant\n}\n\ninput deleteRoleInput {\n  where: InputID\n}\n\ntype deleteRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput deleteUserInput {\n  where: InputID\n}\n\ntype deleteUserPayload {\n  user: UsersPermissionsUser\n}\n\ntype Dish {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String\n  description: String\n  image: UploadFile\n  price: Int\n  restaurant: Restaurant\n}\n\ntype DishAggregator {\n  count: Int\n  sum: DishAggregatorSum\n  avg: DishAggregatorAvg\n  min: DishAggregatorMin\n  max: DishAggregatorMax\n}\n\ntype DishAggregatorAvg {\n  price: Float\n}\n\ntype DishAggregatorMax {\n  price: Float\n}\n\ntype DishAggregatorMin {\n  price: Float\n}\n\ntype DishAggregatorSum {\n  price: Float\n}\n\ntype DishConnection {\n  values: [Dish]\n  groupBy: DishGroupBy\n  aggregate: DishAggregator\n}\n\ntype DishConnection_id {\n  key: ID\n  connection: DishConnection\n}\n\ntype DishConnectionCreatedAt {\n  key: DateTime\n  connection: DishConnection\n}\n\ntype DishConnectionDescription {\n  key: String\n  connection: DishConnection\n}\n\ntype DishConnectionImage {\n  key: ID\n  connection: DishConnection\n}\n\ntype DishConnectionName {\n  key: String\n  connection: DishConnection\n}\n\ntype DishConnectionPrice {\n  key: Int\n  connection: DishConnection\n}\n\ntype DishConnectionRestaurant {\n  key: ID\n  connection: DishConnection\n}\n\ntype DishConnectionUpdatedAt {\n  key: DateTime\n  connection: DishConnection\n}\n\ntype DishGroupBy {\n  _id: [DishConnection_id]\n  createdAt: [DishConnectionCreatedAt]\n  updatedAt: [DishConnectionUpdatedAt]\n  name: [DishConnectionName]\n  description: [DishConnectionDescription]\n  image: [DishConnectionImage]\n  price: [DishConnectionPrice]\n  restaurant: [DishConnectionRestaurant]\n}\n\ninput DishInput {\n  name: String\n  description: String\n  image: ID\n  price: Int\n  restaurant: ID\n}\n\ninput FileInput {\n  name: String!\n  hash: String!\n  sha256: String\n  ext: String\n  mime: String!\n  size: String!\n  url: String!\n  provider: String!\n  related: [ID]\n}\n\ninput InputID {\n  id: ID!\n}\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n\nunion Morph = Dish | createDishPayload | updateDishPayload | deleteDishPayload | DishConnection | DishAggregator | DishAggregatorSum | DishAggregatorAvg | DishAggregatorMin | DishAggregatorMax | DishGroupBy | DishConnection_id | DishConnectionCreatedAt | DishConnectionUpdatedAt | DishConnectionName | DishConnectionDescription | DishConnectionImage | DishConnectionPrice | DishConnectionRestaurant | Order | createOrderPayload | updateOrderPayload | deleteOrderPayload | OrderConnection | OrderAggregator | OrderAggregatorSum | OrderAggregatorAvg | OrderAggregatorMin | OrderAggregatorMax | OrderGroupBy | OrderConnection_id | OrderConnectionCreatedAt | OrderConnectionUpdatedAt | OrderConnectionAddress | OrderConnectionCity | OrderConnectionDishes | OrderConnectionAmount | Restaurant | createRestaurantPayload | updateRestaurantPayload | deleteRestaurantPayload | RestaurantConnection | RestaurantAggregator | RestaurantGroupBy | RestaurantConnection_id | RestaurantConnectionCreatedAt | RestaurantConnectionUpdatedAt | RestaurantConnectionName | RestaurantConnectionDescription | RestaurantConnectionImage | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole\n\ntype Mutation {\n  createDish(input: createDishInput): createDishPayload\n  updateDish(input: updateDishInput): updateDishPayload\n  deleteDish(input: deleteDishInput): deleteDishPayload\n  createOrder(input: createOrderInput): createOrderPayload\n  updateOrder(input: updateOrderInput): updateOrderPayload\n  deleteOrder(input: deleteOrderInput): deleteOrderPayload\n  createRestaurant(input: createRestaurantInput): createRestaurantPayload\n  updateRestaurant(input: updateRestaurantInput): updateRestaurantPayload\n  deleteRestaurant(input: deleteRestaurantInput): deleteRestaurantPayload\n\n  \"\"\"Create a new role\"\"\"\n  createRole(input: createRoleInput): createRolePayload\n\n  \"\"\"Update an existing role\"\"\"\n  updateRole(input: updateRoleInput): updateRolePayload\n\n  \"\"\"Delete an existing role\"\"\"\n  deleteRole(input: deleteRoleInput): deleteRolePayload\n  createUser(input: createUserInput): createUserPayload\n  updateUser(input: updateUserInput): updateUserPayload\n  deleteUser(input: deleteUserInput): deleteUserPayload\n  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!\n}\n\ntype Order {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  address: String\n  city: String\n  dishes: JSON\n  amount: Int\n}\n\ntype OrderAggregator {\n  count: Int\n  sum: OrderAggregatorSum\n  avg: OrderAggregatorAvg\n  min: OrderAggregatorMin\n  max: OrderAggregatorMax\n}\n\ntype OrderAggregatorAvg {\n  amount: Float\n}\n\ntype OrderAggregatorMax {\n  amount: Float\n}\n\ntype OrderAggregatorMin {\n  amount: Float\n}\n\ntype OrderAggregatorSum {\n  amount: Float\n}\n\ntype OrderConnection {\n  values: [Order]\n  groupBy: OrderGroupBy\n  aggregate: OrderAggregator\n}\n\ntype OrderConnection_id {\n  key: ID\n  connection: OrderConnection\n}\n\ntype OrderConnectionAddress {\n  key: String\n  connection: OrderConnection\n}\n\ntype OrderConnectionAmount {\n  key: Int\n  connection: OrderConnection\n}\n\ntype OrderConnectionCity {\n  key: String\n  connection: OrderConnection\n}\n\ntype OrderConnectionCreatedAt {\n  key: DateTime\n  connection: OrderConnection\n}\n\ntype OrderConnectionDishes {\n  key: JSON\n  connection: OrderConnection\n}\n\ntype OrderConnectionUpdatedAt {\n  key: DateTime\n  connection: OrderConnection\n}\n\ntype OrderGroupBy {\n  _id: [OrderConnection_id]\n  createdAt: [OrderConnectionCreatedAt]\n  updatedAt: [OrderConnectionUpdatedAt]\n  address: [OrderConnectionAddress]\n  city: [OrderConnectionCity]\n  dishes: [OrderConnectionDishes]\n  amount: [OrderConnectionAmount]\n}\n\ninput OrderInput {\n  address: String\n  city: String\n  dishes: JSON\n  amount: Int\n}\n\ntype Query {\n  dish(id: ID!): Dish\n  dishes(sort: String, limit: Int, start: Int, where: JSON): [Dish]\n  dishesConnection(sort: String, limit: Int, start: Int, where: JSON): DishConnection\n  order(id: ID!): Order\n  orders(sort: String, limit: Int, start: Int, where: JSON): [Order]\n  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrderConnection\n  restaurant(id: ID!): Restaurant\n  restaurants(sort: String, limit: Int, start: Int, where: JSON): [Restaurant]\n  restaurantsConnection(sort: String, limit: Int, start: Int, where: JSON): RestaurantConnection\n  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]\n  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection\n  role(id: ID!): UsersPermissionsRole\n\n  \"\"\"\n  Retrieve all the existing roles. You can't apply filters on this query.\n  \"\"\"\n  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]\n  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection\n  user(id: ID!): UsersPermissionsUser\n  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]\n  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection\n}\n\ntype Restaurant {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String\n  description: String\n  image: UploadFile\n  dishes(sort: String, limit: Int, start: Int, where: JSON): [Dish]\n}\n\ntype RestaurantAggregator {\n  count: Int\n}\n\ntype RestaurantConnection {\n  values: [Restaurant]\n  groupBy: RestaurantGroupBy\n  aggregate: RestaurantAggregator\n}\n\ntype RestaurantConnection_id {\n  key: ID\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionCreatedAt {\n  key: DateTime\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionDescription {\n  key: String\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionImage {\n  key: ID\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionName {\n  key: String\n  connection: RestaurantConnection\n}\n\ntype RestaurantConnectionUpdatedAt {\n  key: DateTime\n  connection: RestaurantConnection\n}\n\ntype RestaurantGroupBy {\n  _id: [RestaurantConnection_id]\n  createdAt: [RestaurantConnectionCreatedAt]\n  updatedAt: [RestaurantConnectionUpdatedAt]\n  name: [RestaurantConnectionName]\n  description: [RestaurantConnectionDescription]\n  image: [RestaurantConnectionImage]\n}\n\ninput RestaurantInput {\n  name: String\n  description: String\n  image: ID\n  dishes: [ID]\n}\n\ninput RoleInput {\n  name: String!\n  description: String\n  type: String\n  permissions: [ID]\n  users: [ID]\n}\n\ninput updateDishInput {\n  where: InputID\n  data: DishInput\n}\n\ntype updateDishPayload {\n  dish: Dish\n}\n\ninput updateOrderInput {\n  where: InputID\n  data: OrderInput\n}\n\ntype updateOrderPayload {\n  order: Order\n}\n\ninput updateRestaurantInput {\n  where: InputID\n  data: RestaurantInput\n}\n\ntype updateRestaurantPayload {\n  restaurant: Restaurant\n}\n\ninput updateRoleInput {\n  where: InputID\n  data: RoleInput\n}\n\ntype updateRolePayload {\n  role: UsersPermissionsRole\n}\n\ninput updateUserInput {\n  where: InputID\n  data: UserInput\n}\n\ntype updateUserPayload {\n  user: UsersPermissionsUser\n}\n\n\"\"\"\nThe `Upload` scalar type represents a file upload promise that resolves an\nobject containing `stream`, `filename`, `mimetype` and `encoding`.\n\"\"\"\nscalar Upload\n\ntype UploadFile {\n  _id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  hash: String!\n  sha256: String\n  ext: String\n  mime: String!\n  size: String!\n  url: String!\n  provider: String!\n  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]\n}\n\ntype UploadFileAggregator {\n  count: Int\n}\n\ntype UploadFileConnection {\n  values: [UploadFile]\n  groupBy: UploadFileGroupBy\n  aggregate: UploadFileAggregator\n}\n\ntype UploadFileConnection_id {\n  key: ID\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionCreatedAt {\n  key: DateTime\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionExt {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionHash {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionMime {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionName {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionProvider {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionSha256 {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionSize {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionUpdatedAt {\n  key: DateTime\n  connection: UploadFileConnection\n}\n\ntype UploadFileConnectionUrl {\n  key: String\n  connection: UploadFileConnection\n}\n\ntype UploadFileGroupBy {\n  _id: [UploadFileConnection_id]\n  createdAt: [UploadFileConnectionCreatedAt]\n  updatedAt: [UploadFileConnectionUpdatedAt]\n  name: [UploadFileConnectionName]\n  hash: [UploadFileConnectionHash]\n  sha256: [UploadFileConnectionSha256]\n  ext: [UploadFileConnectionExt]\n  mime: [UploadFileConnectionMime]\n  size: [UploadFileConnectionSize]\n  url: [UploadFileConnectionUrl]\n  provider: [UploadFileConnectionProvider]\n}\n\ninput UserInput {\n  username: String!\n  email: String!\n  provider: String\n  confirmed: Boolean\n  blocked: Boolean\n  role: ID\n}\n\ntype UsersPermissionsPermission {\n  _id: ID!\n  type: String!\n  controller: String!\n  action: String!\n  enabled: Boolean!\n  policy: String\n  role: UsersPermissionsRole\n}\n\ntype UsersPermissionsRole {\n  _id: ID!\n  name: String!\n  description: String\n  type: String\n  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]\n  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]\n}\n\ntype UsersPermissionsRoleAggregator {\n  count: Int\n}\n\ntype UsersPermissionsRoleConnection {\n  values: [UsersPermissionsRole]\n  groupBy: UsersPermissionsRoleGroupBy\n  aggregate: UsersPermissionsRoleAggregator\n}\n\ntype UsersPermissionsRoleConnection_id {\n  key: ID\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionDescription {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionName {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleConnectionType {\n  key: String\n  connection: UsersPermissionsRoleConnection\n}\n\ntype UsersPermissionsRoleGroupBy {\n  _id: [UsersPermissionsRoleConnection_id]\n  name: [UsersPermissionsRoleConnectionName]\n  description: [UsersPermissionsRoleConnectionDescription]\n  type: [UsersPermissionsRoleConnectionType]\n}\n\ntype UsersPermissionsUser {\n  _id: ID!\n  username: String!\n  email: String!\n  provider: String\n  confirmed: Boolean\n  blocked: Boolean\n  role: UsersPermissionsRole\n}\n\ntype UsersPermissionsUserAggregator {\n  count: Int\n}\n\ntype UsersPermissionsUserConnection {\n  values: [UsersPermissionsUser]\n  groupBy: UsersPermissionsUserGroupBy\n  aggregate: UsersPermissionsUserAggregator\n}\n\ntype UsersPermissionsUserConnection_id {\n  key: ID\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionBlocked {\n  key: Boolean\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionConfirmed {\n  key: Boolean\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionEmail {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionProvider {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionRole {\n  key: ID\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserConnectionUsername {\n  key: String\n  connection: UsersPermissionsUserConnection\n}\n\ntype UsersPermissionsUserGroupBy {\n  _id: [UsersPermissionsUserConnection_id]\n  username: [UsersPermissionsUserConnectionUsername]\n  email: [UsersPermissionsUserConnectionEmail]\n  provider: [UsersPermissionsUserConnectionProvider]\n  confirmed: [UsersPermissionsUserConnectionConfirmed]\n  blocked: [UsersPermissionsUserConnectionBlocked]\n  role: [UsersPermissionsUserConnectionRole]\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 93,
      "containsCycle": true,
      "numDefinitions": 119
    }
  ],
  "metrics": {
    "created_at": "2018-12-04T17:20:55Z",
    "updated_at": "2018-12-04T17:23:39Z",
    "pushed_at": "2018-12-04T17:23:00Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}