{
  "repo_name": "shop_admin",
  "repo_full_name": "dgladovich/shop_admin",
  "repo_owner": "dgladovich",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "server/data/schema.graphql",
      "sha": "8ce00fca553c821460f2dd526306c0596c26adc1",
      "url": "https://api.github.com/repositories/119743935/contents/server/data/schema.graphql?ref=1b4e200240a45b284d6af5d3ed41f1878cb7b2db",
      "git_url": "https://api.github.com/repositories/119743935/git/blobs/8ce00fca553c821460f2dd526306c0596c26adc1",
      "html_url": "https://github.com/dgladovich/shop_admin/blob/1b4e200240a45b284d6af5d3ed41f1878cb7b2db/server/data/schema.graphql",
      "content": "input AddCategoryInput {\n  title: String!\n  view_title: String!\n  image: String\n  description: String!\n  parent: Int\n  clientMutationId: String\n}\n\ntype AddCategoryPayload {\n  categoryEdge: CategoryEdge\n  viewer: User\n  clientMutationId: String\n}\n\ninput AddFeatureInput {\n  name: String!\n  description: String!\n  url: String!\n  clientMutationId: String\n}\n\ntype AddFeaturePayload {\n  featureEdge: FeatureEdge\n  viewer: User\n  clientMutationId: String\n}\n\ninput AddProductInput {\n  name: String!\n  price: Int!\n  created_at: String!\n  updated_at: String!\n  clientMutationId: String\n}\n\ntype AddProductPayload {\n  productEdge: ProductEdge\n  viewer: User\n  clientMutationId: String\n}\n\ninput AddUserInput {\n  name: String!\n  age: Int!\n  clientMutationId: String\n}\n\ntype AddUserPayload {\n  userEdge: UserEdge\n  viewer: User\n  clientMutationId: String\n}\n\n# Category of shop and his parent\ntype Category {\n  # The ID of an object\n  id: ID!\n\n  # Title of category\n  title: String\n\n  # Description of the category\n  description: String\n\n  # Title for view element\n  view_title: String\n\n  # Image src for category\n  image: String\n\n  # Id of parent category\n  parent: Int\n\n  # Subcategories for category\n  children: String\n\n  # Subcategories for category\n  lang_key: String\n\n  # Date, when category created\n  createdAt: String\n\n  # Date, when category updated\n  updatedAt: String\n}\n\n# A connection to a list of items.\ntype CategoryConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [CategoryEdge]\n}\n\n# An edge in a connection.\ntype CategoryEdge {\n  # The item at the end of the edge\n  node: Category\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Users which will be updated with admin\ntype Comment implements Node {\n  # The ID of an object\n  id: ID!\n  name: String\n  age: Int\n  email: String\n}\n\n# A connection to a list of items.\ntype CommentConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [CommentEdge]\n}\n\n# An edge in a connection.\ntype CommentEdge {\n  # The item at the end of the edge\n  node: Comment\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput DeleteCategoryInput {\n  productId: String!\n  clientMutationId: String\n}\n\ntype DeleteCategoryPayload {\n  categoryEdge: CategoryEdge\n  removeCategoryId: CategoryEdge\n  viewer: User\n  clientMutationId: String\n}\n\ninput DeleteProductInput {\n  id: String!\n  clientMutationId: String\n}\n\ntype DeleteProductPayload {\n  deletedProductId: String!\n  viewer: User\n  clientMutationId: String\n}\n\n# Feature integrated in our starter kit\ntype Feature {\n  # The ID of an object\n  id: ID!\n\n  # Name of the feature\n  name: String\n\n  # Description of the feature\n  description: String\n\n  # Url of the feature\n  url: String\n}\n\n# A connection to a list of items.\ntype FeatureConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [FeatureEdge]\n}\n\n# An edge in a connection.\ntype FeatureEdge {\n  # The item at the end of the edge\n  node: Feature\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Total review of month\ntype MonthlyRevenue implements Node {\n  # The ID of an object\n  id: ID!\n  total: Int\n}\n\ntype Mutation {\n  addFeature(input: AddFeatureInput!): AddFeaturePayload\n  addProduct(input: AddProductInput!): AddProductPayload\n  updateProduct(input: UpdateProductInput!): UpdateProductPayload\n  deleteProduct(input: DeleteProductInput!): DeleteProductPayload\n  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload\n  addCategory(input: AddCategoryInput!): AddCategoryPayload\n  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload\n  updateUser(input: UpdateUserInput!): UpdateUserPayload\n  addUser(input: AddUserInput!): AddUserPayload\n}\n\n# Count off new orders\ntype NewOrdersCount implements Node {\n  # The ID of an object\n  id: ID!\n  total: Int\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\n# Order which in queue\ntype Order implements Node {\n  # The ID of an object\n  id: ID!\n\n  # Products, which user ordered\n  products(after: String, first: Int, before: String, last: Int): OrderProductConnection\n\n  # Users's username\n  user: UserConnection\n  website: String\n  delivery_date: String\n  address: String\n  delivery_service: String\n  payment: String\n  status: String\n  total_price: Float\n  price: Float\n  created_at: String\n  updated_at: String\n}\n\n# A connection to a list of items.\ntype OrderConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [OrderEdge]\n}\n\n# An edge in a connection.\ntype OrderEdge {\n  # The item at the end of the edge\n  node: Order\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# A connection to a list of items.\ntype OrderProductConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [OrderProductEdge]\n}\n\n# An edge in a connection.\ntype OrderProductEdge {\n  # The item at the end of the edge\n  node: OrderProducts\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Order which in queue\ntype OrderProducts implements Node {\n  # The ID of an object\n  id: ID!\n  product_id: Int\n\n  # product object in db\n  product(after: String, first: Int, before: String, last: Int): Product\n  order_id: Int\n  createdAt: String\n  updatedAt: String\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\n# Product \ntype Product {\n  # The ID of an object\n  id: ID!\n\n  # Name of the product\n  name: String\n\n  # Description of the pruduct\n  price: Int\n\n  # Description of the pruduct\n  title: String\n\n  # Description of the pruduct\n  category: String\n\n  # Description of the pruduct\n  short_description: String\n\n  # Array of product images\n  images(after: String, first: Int, before: String, last: Int): ProductImageConnection\n\n  # Description of the pruduct\n  status: Boolean\n\n  # Description of the pruduct\n  full_description: String\n\n  # Description of the pruduct\n  lang_key: String\n\n  # Date where product created\n  created_at: String\n\n  # Date where product updated\n  updated_at: String\n}\n\n# A connection to a list of items.\ntype ProductConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ProductEdge]\n}\n\n# An edge in a connection.\ntype ProductEdge {\n  # The item at the end of the edge\n  node: Product\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Product Image \ntype ProductImage {\n  # The ID of an object\n  id: ID!\n\n  # Id of parent product\n  product_id: Int\n\n  # title for image\n  title: String\n\n  # path for image\n  src: String\n\n  # Description of the pruduct\n  main: Boolean\n\n  # Description of the pruduct\n  createdAt: String\n\n  # Description of the pruduct\n  updatedAt: String\n}\n\n# A connection to a list of items.\ntype ProductImageConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ProductImageEdge]\n}\n\n# An edge in a connection.\ntype ProductImageEdge {\n  # The item at the end of the edge\n  node: ProductImage\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype Query {\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n  viewer: User\n}\n\ninput UpdateOrderInput {\n  delivery_date: String!\n  address: Int!\n  delivery_service: String!\n  payment: String!\n  status: String!\n  clientMutationId: String\n}\n\ntype UpdateOrderPayload {\n  orderEdge: OrderEdge\n  viewer: User\n  clientMutationId: String\n}\n\ninput UpdateProductInput {\n  name: String!\n  price: Int!\n  created_at: String!\n  updated_at: String!\n  clientMutationId: String\n}\n\ntype UpdateProductPayload {\n  productEdge: ProductEdge\n  viewer: User\n  clientMutationId: String\n}\n\ninput UpdateUserInput {\n  name: String!\n  age: Int!\n  clientMutationId: String\n}\n\ntype UpdateUserPayload {\n  userEdge: UserEdge\n  viewer: User\n  clientMutationId: String\n}\n\n# A person who uses our app\ntype User implements Node {\n  # The ID of an object\n  id: ID!\n\n  # Features that I have\n  features(after: String, first: Int, before: String, last: Int): FeatureConnection\n\n  # ProductType\n  product(id: String): Product\n\n  # Array of products\n  products(after: String, first: Int, before: String, last: Int, query: String): ProductConnection\n\n  # List of users\n  users(after: String, first: Int, before: String, last: Int): UsersConnection\n\n  # List of comments\n  comments(after: String, first: Int, before: String, last: Int): CommentConnection\n\n  # Array of categories\n  categories(after: String, first: Int, before: String, last: Int): CategoryConnection\n\n  # Array of orders wich\n  orders(after: String, first: Int, before: String, last: Int): OrderConnection\n\n  # Array of orders wich\n  order(id: String): Order\n\n  # Array of visits for preset time interval\n  visits(after: String, first: Int, before: String, last: Int): VisitConnection\n\n  # Users's username\n  username: String\n  monthlyRevenue: MonthlyRevenue\n  newOrdersCount: NewOrdersCount\n  website: String\n}\n\n# A connection to a list of items.\ntype UserConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UserEdge]\n}\n\n# An edge in a connection.\ntype UserEdge {\n  # The item at the end of the edge\n  node: Users\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Users which will be updated with admin\ntype Users implements Node {\n  # The ID of an object\n  id: ID!\n  name: String\n  age: Int\n  email: String\n}\n\n# A connection to a list of items.\ntype UsersConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UsersEdge]\n}\n\n# An edge in a connection.\ntype UsersEdge {\n  # The item at the end of the edge\n  node: Users\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Visit object\ntype Visit {\n  # The ID of an object\n  id: ID!\n\n  # Date of calendar\n  created_at: String\n\n  # Quantity of visits for this day\n  user_id: Int\n}\n\n# A connection to a list of items.\ntype VisitConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [VisitEdge]\n}\n\n# An edge in a connection.\ntype VisitEdge {\n  # The item at the end of the edge\n  node: Visit\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 44,
      "containsCycle": false,
      "polynomialLevel": 3,
      "numDefinitions": 54
    }
  ],
  "metrics": {
    "created_at": "2018-01-31T21:11:58Z",
    "updated_at": "2018-07-17T13:27:08Z",
    "pushed_at": "2018-07-17T13:27:07Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 1
  }
}