{
  "repo_name": "opencollective-frontend",
  "repo_full_name": "opencollective/opencollective-frontend",
  "repo_owner": "opencollective",
  "repo_description": "Open Collective Frontend. A React app powered by Next.js.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "src/graphql/schema.graphql",
      "sha": "c999b7f7203e21bb43e9b4a16d0b648964dc8f50",
      "url": "https://api.github.com/repositories/76222279/contents/src/graphql/schema.graphql?ref=2f7b99d9e65e1063382795d38baed059353b2fa9",
      "git_url": "https://api.github.com/repositories/76222279/git/blobs/c999b7f7203e21bb43e9b4a16d0b648964dc8f50",
      "html_url": "https://github.com/opencollective/opencollective-frontend/blob/2f7b99d9e65e1063382795d38baed059353b2fa9/src/graphql/schema.graphql",
      "content": "# source: http://localhost:3000/api/graphql\n# timestamp: Mon May 20 2019 15:46:31 GMT+0200 (GMT+02:00)\n\n\"\"\"Application model\"\"\"\ntype Application {\n  id: Int\n  type: ApplicationType\n  name: String\n  description: String\n  apiKey: String\n  clientId: String\n  clientSecret: String\n  callbackUrl: String\n}\n\n\"\"\"Input type for Application\"\"\"\ninput ApplicationInput {\n  type: ApplicationType!\n  name: String\n  description: String\n  callbackUrl: String\n}\n\n\"\"\"All application types\"\"\"\nenum ApplicationType {\n  API_KEY\n  OAUTH\n}\n\n\"\"\"Breakdown of backers per type (ANY/USER/ORGANIZATION/COLLECTIVE)\"\"\"\ntype BackersStatsType {\n  id: Int\n\n  \"\"\"Total number of backers that have given money to this collective\"\"\"\n  all: Int\n\n  \"\"\"Number of individuals that have given money to this collective\"\"\"\n  users: Int\n\n  \"\"\"Number of organizations that have given money to this collective\"\"\"\n  organizations: Int\n\n  \"\"\"Number of collectives that have given money to this collective\"\"\"\n  collectives: Int\n}\n\n\"\"\"This represents a Collective\"\"\"\ntype Collective implements CollectiveInterface {\n  id: Int\n  createdByUser: UserDetails\n  parentCollective: CollectiveInterface\n  type: String\n  isActive: Boolean\n  name: String\n  company: String\n  description: String\n  longDescription: String\n  expensePolicy: String\n  mission: String\n  tags: [String]\n  countryISO: String @deprecated(reason: \"From 03/20/2019 - use `location.country` instead\")\n\n  \"\"\"Name, address, lat, long of the location.\"\"\"\n  location: LocationType\n  createdAt: String\n  startsAt: String\n  endsAt: String\n  timezone: String\n  maxAmount: Int\n  hostFeePercent: Int\n  currency: String\n  image: String\n  imageUrl(height: Int, format: ImageFormat): String\n  backgroundImage: String\n  backgroundImageUrl(height: Int, format: ImageFormat): String\n  settings: JSON\n\n  \"\"\"Defines if a collective is pledged\"\"\"\n  isPledged: Boolean\n  data: JSON\n  slug: String\n  path: String\n\n  \"\"\"\n  Returns whether this collective can host other collectives (ie. has a Stripe Account connected)\n  \"\"\"\n  isHost: Boolean\n\n  \"\"\"Returns whether this host accepts applications for new collectives\"\"\"\n  canApply: Boolean\n\n  \"\"\"Returns whether this collective is archived\"\"\"\n  isArchived: Boolean\n\n  \"\"\"Returns whether this collective is deletable\"\"\"\n  isDeletable: Boolean\n\n  \"\"\"\n  Get the host collective that is receiving the money on behalf of this collective\n  \"\"\"\n  host: CollectiveInterface\n\n  \"\"\"A host might have a collective attached to it\"\"\"\n  hostCollective: CollectiveInterface\n\n  \"\"\"\n  Get all the members of this collective (admins, members, backers, followers)\n  \"\"\"\n  members(limit: Int, offset: Int, type: String, role: String, TierId: Int, tierSlug: String, roles: [String]): [Member]\n\n  \"\"\"\n  Get all the collective this collective is a member of (as a member, backer, follower, etc.)\n  \"\"\"\n  memberOf(\n    limit: Int\n    offset: Int\n\n    \"\"\"Type of collective (COLLECTIVE, EVENT, ORGANIZATION)\"\"\"\n    type: String\n    role: String\n    roles: [String]\n  ): [Member]\n  collectives(orderBy: CollectiveOrderField = name, orderDirection: OrderDirection = ASC, expenseStatus: String = null, limit: Int, offset: Int, isActive: Boolean, isArchived: Boolean): CollectiveSearchResults\n  followers(limit: Int, offset: Int): [CollectiveInterface]\n  notifications(limit: Int, offset: Int, channel: String, type: String, active: Boolean): [NotificationType]\n  maxQuantity: Int\n  tiers(id: Int, slug: String, slugs: [String]): [Tier]\n  orders(status: OrderStatus): [OrderType]\n  ordersFromCollective(subscriptionsOnly: Boolean): [OrderType]\n  transactions(\n    \"\"\"type of transaction (DEBIT/CREDIT)\"\"\"\n    type: String\n    limit: Int\n    offset: Int\n  ): [Transaction]\n  expenses(type: String, limit: Int, offset: Int, includeHostedCollectives: Boolean, status: String): [ExpenseType]\n  role: String\n  twitterHandle: String\n  githubHandle: String\n  website: String\n  updates(limit: Int, offset: Int): [Event]\n  events(limit: Int, offset: Int): [Event]\n  paymentMethods(service: String, limit: Int, hasBalanceAboveZero: Boolean, isConfirmed: Boolean = true, types: [String], orderBy: PaymenMethodOrderField = type): [PaymentMethodType]\n\n  \"\"\"\n  Get the virtual cards created by this collective. RemoteUser must be a collective admin.\n  \"\"\"\n  createdVirtualCards(\n    limit: Int\n    offset: Int\n\n    \"\"\"Wether the virtual card has been claimed or not\"\"\"\n    isConfirmed: Boolean\n  ): PaginatedPaymentMethod\n  connectedAccounts: [ConnectedAccountType]\n  stats: CollectiveStatsType\n}\n\n\"\"\"Input type for attributes of CollectiveInputType\"\"\"\ninput CollectiveAttributesInputType {\n  id: Int\n  slug: String\n  type: String\n  name: String\n  company: String\n  firstName: String\n  lastName: String\n  email: String\n  description: String\n  longDescription: String\n  expensePolicy: String\n  website: String\n  twitterHandle: String\n  githubHandle: String\n  location: LocationInputType\n  countryISO: String\n  startsAt: String\n  endsAt: String\n  timezone: String\n  maxAmount: Int\n  currency: String\n  settings: JSON\n  tags: [String]\n}\n\n\"\"\"Input type for CollectiveType\"\"\"\ninput CollectiveInputType {\n  id: Int\n  slug: String\n  type: String\n  name: String\n  company: String\n  website: String\n  twitterHandle: String\n  githubHandle: String\n  description: String\n  longDescription: String\n  expensePolicy: String\n  location: LocationInputType\n  countryISO: String\n  startsAt: String\n  endsAt: String\n  timezone: String\n  maxAmount: Int\n  currency: String\n  image: String\n  backgroundImage: String\n  tags: [String]\n  tiers: [TierInputType]\n  settings: JSON\n  data: JSON\n  members: [MemberInputType]\n  notifications: [NotificationInputType]\n  paymentMethods: [PaymentMethodInputType]\n  HostCollectiveId: Int\n  hostFeePercent: Int\n  ParentCollectiveId: Int\n  email: String\n  firstName: String\n  lastName: String\n}\n\n\"\"\"Collective interface\"\"\"\ninterface CollectiveInterface {\n  id: Int\n  createdByUser: UserDetails\n  parentCollective: CollectiveInterface\n  type: String\n  isActive: Boolean\n  name: String\n  company: String\n  description: String\n  longDescription: String\n  expensePolicy: String\n  mission: String\n  tags: [String]\n  countryISO: String @deprecated(reason: \"From 03/20/2019 - use `location.country` instead\")\n\n  \"\"\"Name, address, country, lat, long of the location.\"\"\"\n  location: LocationType\n  createdAt: String\n  startsAt: String\n  endsAt: String\n  timezone: String\n  maxAmount: Int\n  hostFeePercent: Int\n  currency: String\n  image: String\n  imageUrl(height: Int, format: ImageFormat): String\n  backgroundImage: String\n  backgroundImageUrl(height: Int, format: ImageFormat): String\n  settings: JSON\n  data: JSON\n  slug: String\n  path: String\n  isHost: Boolean\n  canApply: Boolean\n  isArchived: Boolean\n  isDeletable: Boolean\n  host: CollectiveInterface\n  hostCollective: CollectiveInterface\n\n  \"\"\"\n  List of all collectives that are related to this collective with their\n  membership relationship. Can filter by role\n  (BACKER/MEMBER/ADMIN/HOST/FOLLOWER)\n  \"\"\"\n  members(\n    limit: Int\n    offset: Int\n\n    \"\"\"Type of User: USER/ORGANIZATION\"\"\"\n    type: String\n    TierId: Int\n    tierSlug: String\n    role: String\n    roles: [String]\n  ): [Member]\n\n  \"\"\"\n  List of all collectives that this collective is a member of with their\n  membership relationship. Can filter by role\n  (BACKER/MEMBER/ADMIN/HOST/FOLLOWER)\n  \"\"\"\n  memberOf(\n    limit: Int\n    offset: Int\n\n    \"\"\"Type of collective (COLLECTIVE, EVENT, ORGANIZATION)\"\"\"\n    type: String\n    role: String\n    roles: [String]\n  ): [Member]\n\n  \"\"\"List of all collectives hosted by this collective\"\"\"\n  collectives(orderBy: CollectiveOrderField = name, orderDirection: OrderDirection = ASC, expenseStatus: String = null, limit: Int, offset: Int, isActive: Boolean, isArchived: Boolean): CollectiveSearchResults\n\n  \"\"\"List of all followers of this collective\"\"\"\n  followers(limit: Int, offset: Int): [CollectiveInterface]\n\n  \"\"\"List of all notifications for this collective\"\"\"\n  notifications(limit: Int, offset: Int, channel: String, type: String, active: Boolean): [NotificationType]\n  maxQuantity: Int\n  tiers(id: Int, slug: String, slugs: [String]): [Tier]\n  orders(status: OrderStatus): [OrderType]\n  ordersFromCollective(subscriptionsOnly: Boolean): [OrderType]\n  stats: CollectiveStatsType\n  transactions(type: String, limit: Int, offset: Int): [Transaction]\n  expenses(type: String, limit: Int, offset: Int, status: String, includeHostedCollectives: Boolean): [ExpenseType]\n  role: String\n  twitterHandle: String\n  githubHandle: String\n  website: String\n  updates(limit: Int, offset: Int): [Event]\n  events(limit: Int, offset: Int): [Event]\n  paymentMethods(\n    service: String\n    limit: Int\n    hasBalanceAboveZero: Boolean\n\n    \"\"\"Only return confirmed payment methods\"\"\"\n    isConfirmed: Boolean = true\n\n    \"\"\"Filter on given types (creditcard, virtualcard...)\"\"\"\n    types: [String]\n\n    \"\"\"Order entries based on given column. Set to null for no ordering.\"\"\"\n    orderBy: PaymenMethodOrderField\n  ): [PaymentMethodType]\n  createdVirtualCards(\n    limit: Int\n    offset: Int\n\n    \"\"\"Wether the virtual card has been claimed or not\"\"\"\n    isConfirmed: Boolean\n  ): PaginatedPaymentMethod\n  connectedAccounts: [ConnectedAccountType]\n}\n\n\"\"\"Properties by which collectives can be ordered.\"\"\"\nenum CollectiveOrderField {\n  \"\"\"\n  Order collectives by their average monthly spending (based on last 90 days)\n  \"\"\"\n  monthlySpending\n\n  \"\"\"Order collectives by total balance.\"\"\"\n  balance\n\n  \"\"\"Order collectives by creation time.\"\"\"\n  createdAt\n\n  \"\"\"Order collectives by name.\"\"\"\n  name\n\n  \"\"\"Order collectives by slug.\"\"\"\n  slug\n\n  \"\"\"Order collectives by updated time.\"\"\"\n  updatedAt\n}\n\n\"\"\"The results from searching for collectives with pagination info\"\"\"\ntype CollectiveSearchResults {\n  collectives: [Collective]\n  limit: Int\n  offset: Int\n  total: Int\n}\n\n\"\"\"\nBreakdown of collectives under this collective by role (all/hosted/memberOf/events)\n\"\"\"\ntype CollectivesStatsType {\n  id: Int\n  all: Int\n\n  \"\"\"Returns the collectives hosted by this collective\"\"\"\n  hosted: Int\n\n  \"\"\"Returns the number of collectives that have this collective has parent\"\"\"\n  memberOf: Int\n\n  \"\"\"Returns the number of events that have this collective has parent\"\"\"\n  events: Int\n}\n\n\"\"\"Stats for the collective\"\"\"\ntype CollectiveStatsType {\n  id: Int\n\n  \"\"\"\n  Amount of money in cents in the currency of the collective currently available to spend\n  \"\"\"\n  balance: Int\n\n  \"\"\"Breakdown of all backers of this collective\"\"\"\n  backers: BackersStatsType\n\n  \"\"\"Number of collectives under this collective\"\"\"\n  collectives: CollectivesStatsType\n\n  \"\"\"Number of updates published by this collective\"\"\"\n  updates: Int\n\n  \"\"\"Number of events under this collective\"\"\"\n  events: Int\n\n  \"\"\"\n  Breakdown of expenses submitted to this collective by type (ALL/PENDING/APPROVED/PAID/REJECTED)\n  \"\"\"\n  expenses: ExpensesStatsType\n\n  \"\"\"Number of transactions\"\"\"\n  transactions: TransactionsStatsType\n\n  \"\"\"Average amount spent per month based on the last 90 days\"\"\"\n  monthlySpending: Int\n\n  \"\"\"Total amount spent\"\"\"\n  totalAmountSpent: Int\n\n  \"\"\"Net amount received\"\"\"\n  totalAmountReceived: Int\n\n  \"\"\"Total amount raised through referral\"\"\"\n  totalAmountRaised: Int\n  yearlyBudget: Int\n  topExpenses: JSON\n  topFundingSources: JSON\n}\n\n\"\"\"Input type for CommentType\"\"\"\ninput CommentAttributesInputType {\n  id: Int\n  markdown: String\n  html: String\n  FromCollectiveId: Int\n  CollectiveId: Int\n  ExpenseId: Int\n  UpdateId: Int\n}\n\n\"\"\"Input type for CommentType\"\"\"\ninput CommentInputType {\n  id: Int\n  markdown: String\n  html: String\n  FromCollectiveId: Int!\n  CollectiveId: Int!\n  ExpenseId: Int\n  UpdateId: Int\n}\n\n\"\"\"List of comments with pagination info\"\"\"\ntype CommentListType {\n  comments: [CommentType]\n  limit: Int\n  offset: Int\n  total: Int\n}\n\n\"\"\"This represents a Comment\"\"\"\ntype CommentType {\n  id: Int\n  createdAt: String\n  updatedAt: String\n  html: String\n  markdown: String\n  createdByUser: UserDetails\n  fromCollective: CollectiveInterface\n  collective: CollectiveInterface\n  expense: ExpenseType\n  update: UpdateType\n}\n\n\"\"\"Input type for ConnectedAccountInputType\"\"\"\ninput ConnectedAccountInputType {\n  id: Int\n  settings: JSON\n}\n\n\"\"\"Sanitized ConnectedAccount Info (ConnectedAccount model)\"\"\"\ntype ConnectedAccountType {\n  id: Int\n  service: String\n  username: String\n  settings: JSON\n  createdAt: String\n  updatedAt: String\n}\n\ntype CreateUserResult {\n  user: UserDetails\n  organization: CollectiveInterface\n}\n\nscalar Email\n\n\"\"\"This represents an Event Collective\"\"\"\ntype Event implements CollectiveInterface {\n  id: Int\n  createdByUser: UserDetails\n  parentCollective: CollectiveInterface\n  type: String\n  isActive: Boolean\n  name: String\n  company: String\n  description: String\n  longDescription: String\n  expensePolicy: String\n  mission: String\n  tags: [String]\n  countryISO: String @deprecated(reason: \"From 03/20/2019 - use `location.country` instead\")\n\n  \"\"\"Name, address, lat, long of the location.\"\"\"\n  location: LocationType\n  createdAt: String\n  startsAt: String\n  endsAt: String\n  timezone: String\n  maxAmount: Int\n  hostFeePercent: Int\n  currency: String\n  image: String\n  imageUrl(height: Int, format: ImageFormat): String\n  backgroundImage: String\n  backgroundImageUrl(height: Int, format: ImageFormat): String\n  settings: JSON\n\n  \"\"\"Defines if a collective is pledged\"\"\"\n  isPledged: Boolean\n  data: JSON\n  slug: String\n  path: String\n\n  \"\"\"\n  Returns whether this collective can host other collectives (ie. has a Stripe Account connected)\n  \"\"\"\n  isHost: Boolean\n\n  \"\"\"Returns whether this host accepts applications for new collectives\"\"\"\n  canApply: Boolean\n\n  \"\"\"Returns whether this collective is archived\"\"\"\n  isArchived: Boolean\n\n  \"\"\"Returns whether this collective is deletable\"\"\"\n  isDeletable: Boolean\n\n  \"\"\"\n  Get the host collective that is receiving the money on behalf of this collective\n  \"\"\"\n  host: CollectiveInterface\n\n  \"\"\"A host might have a collective attached to it\"\"\"\n  hostCollective: CollectiveInterface\n\n  \"\"\"\n  Get all the members of this collective (admins, members, backers, followers)\n  \"\"\"\n  members(limit: Int, offset: Int, type: String, role: String, TierId: Int, tierSlug: String, roles: [String]): [Member]\n\n  \"\"\"\n  Get all the collective this collective is a member of (as a member, backer, follower, etc.)\n  \"\"\"\n  memberOf(\n    limit: Int\n    offset: Int\n\n    \"\"\"Type of collective (COLLECTIVE, EVENT, ORGANIZATION)\"\"\"\n    type: String\n    role: String\n    roles: [String]\n  ): [Member]\n  collectives(orderBy: CollectiveOrderField = name, orderDirection: OrderDirection = ASC, expenseStatus: String = null, limit: Int, offset: Int, isActive: Boolean, isArchived: Boolean): CollectiveSearchResults\n  followers(limit: Int, offset: Int): [CollectiveInterface]\n  notifications(limit: Int, offset: Int, channel: String, type: String, active: Boolean): [NotificationType]\n  maxQuantity: Int\n  tiers(id: Int, slug: String, slugs: [String]): [Tier]\n  orders(status: OrderStatus): [OrderType]\n  ordersFromCollective(subscriptionsOnly: Boolean): [OrderType]\n  transactions(\n    \"\"\"type of transaction (DEBIT/CREDIT)\"\"\"\n    type: String\n    limit: Int\n    offset: Int\n  ): [Transaction]\n  expenses(type: String, limit: Int, offset: Int, includeHostedCollectives: Boolean, status: String): [ExpenseType]\n  role: String\n  twitterHandle: String\n  githubHandle: String\n  website: String\n  updates(limit: Int, offset: Int): [Event]\n  events(limit: Int, offset: Int): [Event]\n  paymentMethods(service: String, limit: Int, hasBalanceAboveZero: Boolean, isConfirmed: Boolean = true, types: [String], orderBy: PaymenMethodOrderField = type): [PaymentMethodType]\n\n  \"\"\"\n  Get the virtual cards created by this collective. RemoteUser must be a collective admin.\n  \"\"\"\n  createdVirtualCards(\n    limit: Int\n    offset: Int\n\n    \"\"\"Wether the virtual card has been claimed or not\"\"\"\n    isConfirmed: Boolean\n  ): PaginatedPaymentMethod\n  connectedAccounts: [ConnectedAccountType]\n  stats: CollectiveStatsType\n}\n\n\"\"\"Expense model\"\"\"\ntype Expense implements Transaction {\n  id: Int\n  refundTransaction: Transaction\n  uuid: String\n  type: String\n  amount: Int\n  currency: String\n  hostCurrency: String\n\n  \"\"\"\n  Exchange rate between the currency of the transaction and the currency of the\n  host (transaction.amount * transaction.hostCurrencyFxRate =\n  transaction.amountInHostCurrency)\n  \"\"\"\n  hostCurrencyFxRate: Float\n\n  \"\"\"\n  Fee kept by the host in the lowest unit of the currency of the host (ie. in cents)\n  \"\"\"\n  hostFeeInHostCurrency: Int\n\n  \"\"\"\n  Fee kept by the Open Collective Platform in the lowest unit of the currency of the host (ie. in cents)\n  \"\"\"\n  platformFeeInHostCurrency: Int\n\n  \"\"\"\n  Fee kept by the payment processor in the lowest unit of the currency of the host (ie. in cents)\n  \"\"\"\n  paymentProcessorFeeInHostCurrency: Int\n\n  \"\"\"The amount paid in tax (for example VAT) for this transaction\"\"\"\n  taxAmount: Int\n\n  \"\"\"\n  Amount after fees received by the collective in the lowest unit of its own currency (ie. cents)\n  \"\"\"\n  netAmountInCollectiveCurrency: Int\n  host: User\n  createdByUser: UserDetails\n  fromCollective: CollectiveInterface\n  usingVirtualCardFromCollective: CollectiveInterface\n  collective: CollectiveInterface\n  createdAt: String\n  updatedAt: String\n  paymentMethod: PaymentMethodType\n  description: String\n  privateMessage: String\n  category: String\n  attachment: String\n}\n\n\"\"\"Input type for ExpenseType\"\"\"\ninput ExpenseInputType {\n  id: Int\n  amount: Int\n  currency: String\n  createdAt: String\n  incurredAt: String\n  description: String\n  category: String\n  status: String\n\n  \"\"\"Can be paypal, donation, manual, other\"\"\"\n  payoutMethod: String\n  privateMessage: String\n  attachment: String\n  user: UserInputType\n  collective: CollectiveAttributesInputType\n}\n\n\"\"\"Breakdown of expenses per status (ALL/PENDING/APPROVED/PAID/REJECTED)\"\"\"\ntype ExpensesStatsType {\n  id: Int\n  all: Int\n\n  \"\"\"Returns the number of expenses that are pending\"\"\"\n  pending: Int\n\n  \"\"\"Returns the number of expenses that are approved\"\"\"\n  approved: Int\n\n  \"\"\"Returns the number of expenses that are rejected\"\"\"\n  rejected: Int\n\n  \"\"\"Returns the number of expenses that are paid\"\"\"\n  paid: Int\n}\n\n\"\"\"Possible statuses for an Expense\"\"\"\nenum ExpenseStatus {\n  PENDING\n  APPROVED\n  REJECTED\n  PAID\n}\n\n\"\"\"This represents an Expense\"\"\"\ntype ExpenseType {\n  id: Int\n  amount: Int\n  currency: String\n  createdAt: String\n  updatedAt: String\n  incurredAt: String\n  description: String\n  category: String\n  status: String\n  payoutMethod: String\n  privateMessage: String\n  attachment: String\n  user: UserDetails\n  fromCollective: CollectiveInterface\n  comments(limit: Int, offset: Int): CommentListType\n  collective: CollectiveInterface\n\n  \"\"\"Returns the DEBIT transaction to pay out this expense\"\"\"\n  transaction: Transaction\n}\n\n\"\"\"Properties by which hosts can be ordered.\"\"\"\nenum HostCollectiveOrderFieldType {\n  \"\"\"Order hosts by creation time.\"\"\"\n  createdAt\n\n  \"\"\"Order hosts by name.\"\"\"\n  name\n\n  \"\"\"Order hosts by number of collectives it is hosting.\"\"\"\n  collectives\n\n  \"\"\"Order hosts by updated time.\"\"\"\n  updatedAt\n}\n\nenum ImageFormat {\n  txt\n  png\n  jpg\n  gif\n  svg\n}\n\n\"\"\"Input dates and collectives for Invoice\"\"\"\ninput InvoiceInputType {\n  dateFrom: IsoDateString\n  dateTo: IsoDateString\n  collectiveSlug: String\n  fromCollectiveSlug: String\n}\n\n\"\"\"This represents an Invoice\"\"\"\ntype InvoiceType {\n  slug: String\n\n  \"\"\"\n  Title for the invoice. Depending on the type of legal entity, a host should issue an Invoice or a Receipt.\n  \"\"\"\n  title: String\n\n  \"\"\"\n  dateFrom and dateTo will be set for any invoice over a period of time. They\n  will not be set for an invoice for a single transaction.\n  \"\"\"\n  dateFrom: IsoDateString\n\n  \"\"\"\n  dateFrom and dateTo will be set for any invoice over a period of time. They\n  will not be set for an invoice for a single transaction.\n  \"\"\"\n  dateTo: IsoDateString\n\n  \"\"\"\n  year will be set for an invoice for a single transaction. Otherwise, prefer dateFrom, dateTo\n  \"\"\"\n  year: Int\n\n  \"\"\"\n  month will be set for an invoice for a single transaction. Otherwise, prefer dateFrom, dateTo\n  \"\"\"\n  month: Int\n\n  \"\"\"\n  day will be set for an invoice for a single transaction. Otherwise, prefer dateFrom, dateTo\n  \"\"\"\n  day: Int\n  totalAmount: Int\n  currency: String\n  host: CollectiveInterface\n  fromCollective: CollectiveInterface\n  transactions: [Transaction]\n}\n\nscalar IsoDateString\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n\n\"\"\"Input type for Location\"\"\"\ninput LocationInputType {\n  \"\"\"A short name for the location (eg. Google Headquarters)\"\"\"\n  name: String\n\n  \"\"\"Postal address without country (eg. 12 opensource avenue, 7500 Paris)\"\"\"\n  address: String\n\n  \"\"\"Two letters country code (eg. FR, BE...etc)\"\"\"\n  country: String\n\n  \"\"\"Latitude\"\"\"\n  lat: Float\n\n  \"\"\"Longitude\"\"\"\n  long: Float\n}\n\n\"\"\"Type for Location\"\"\"\ntype LocationType {\n  \"\"\"A short name for the location (eg. Google Headquarters)\"\"\"\n  name: String\n\n  \"\"\"Postal address without country (eg. 12 opensource avenue, 7500 Paris)\"\"\"\n  address: String\n\n  \"\"\"Two letters country code (eg. FR, BE...etc)\"\"\"\n  country: String\n\n  \"\"\"Latitude\"\"\"\n  lat: Float\n\n  \"\"\"Longitude\"\"\"\n  long: Float\n}\n\n\"\"\"This is a Member\"\"\"\ntype Member {\n  id: Int\n  createdAt: String\n  orders(limit: Int, offset: Int): [OrderType]\n  transactions(limit: Int, offset: Int): [Transaction]\n  collective: CollectiveInterface\n  member: CollectiveInterface\n  role: String\n  description: String\n  tier: Tier\n  stats: StatsMemberType\n}\n\n\"\"\"Input type for MemberType\"\"\"\ninput MemberInputType {\n  id: Int\n  member: CollectiveAttributesInputType\n  collective: CollectiveAttributesInputType\n  role: String\n  description: String\n}\n\n\"\"\"This is the root mutation\"\"\"\ntype Mutation {\n  createCollective(collective: CollectiveInputType!): CollectiveInterface\n  createCollectiveFromGithub(collective: CollectiveInputType!): CollectiveInterface\n  editCollective(collective: CollectiveInputType!): CollectiveInterface\n  deleteEventCollective(id: Int!): CollectiveInterface\n  deleteCollective(id: Int!): CollectiveInterface\n  deleteUserCollective(id: Int!): CollectiveInterface\n  claimCollective(id: Int!): CollectiveInterface\n\n  \"\"\"Approve a collective\"\"\"\n  approveCollective(id: Int!): CollectiveInterface\n  archiveCollective(id: Int!): CollectiveInterface\n  unarchiveCollective(id: Int!): CollectiveInterface\n\n  \"\"\"Create a user with an optional organization.\"\"\"\n  createUser(\n    \"\"\"The user info\"\"\"\n    user: UserInputType!\n\n    \"\"\"An optional organization to create alongside the user\"\"\"\n    organization: CollectiveInputType\n\n    \"\"\"The redirect URL for the login email sent to the user\"\"\"\n    redirect: String = \"/\"\n\n    \"\"\"The website URL originating the request\"\"\"\n    websiteUrl: String\n  ): CreateUserResult\n\n  \"\"\"Update the email address for logged in user\"\"\"\n  updateUserEmail(\n    \"\"\"The new email address for user\"\"\"\n    email: String!\n  ): UserDetails\n\n  \"\"\"Confirm the new user email from confirmation token\"\"\"\n  confirmUserEmail(\n    \"\"\"User's emailConfirmationToken\"\"\"\n    token: String!\n  ): UserDetails\n  editConnectedAccount(connectedAccount: ConnectedAccountInputType!): ConnectedAccountType\n  approveExpense(id: Int!): ExpenseType\n  rejectExpense(id: Int!): ExpenseType\n  payExpense(id: Int!, paymentProcessorFeeInCollectiveCurrency: Int, hostFeeInCollectiveCurrency: Int, platformFeeInCollectiveCurrency: Int): ExpenseType\n  markOrderAsPaid(id: Int!): OrderType\n  createExpense(expense: ExpenseInputType!): ExpenseType\n  editExpense(expense: ExpenseInputType!): ExpenseType\n  deleteExpense(id: Int!): ExpenseType\n\n  \"\"\"Update a single tier\"\"\"\n  editTier(\n    \"\"\"The tier to update\"\"\"\n    tier: TierInputType!\n  ): Tier\n  editTiers(id: Int!, tiers: [TierInputType]): [Tier]\n  createMember(member: CollectiveAttributesInputType!, collective: CollectiveAttributesInputType!, role: String!): Member\n  removeMember(member: CollectiveAttributesInputType!, collective: CollectiveAttributesInputType!, role: String!): Member\n  createOrder(order: OrderInputType!): OrderType\n  updateOrder(order: OrderInputType!): OrderType\n\n  \"\"\"\n  Update the non-sensitive information of an order, like the public message\n  \"\"\"\n  updateOrderInfo(\n    \"\"\"ID of the order to update\"\"\"\n    id: Int!\n\n    \"\"\"Public message to motivate others to contribute\"\"\"\n    publicMessage: String\n  ): OrderType\n  createUpdate(update: UpdateInputType!): UpdateType\n  editUpdate(update: UpdateAttributesInputType!): UpdateType\n  publishUpdate(id: Int!): UpdateType\n  unpublishUpdate(id: Int!): UpdateType\n  deleteUpdate(id: Int!): UpdateType\n  createComment(comment: CommentInputType!): CommentType\n  editComment(comment: CommentAttributesInputType!): CommentType\n  deleteComment(id: Int!): CommentType\n  cancelSubscription(id: Int!): OrderType\n  updateSubscription(id: Int!, paymentMethod: PaymentMethodInputType, amount: Int): OrderType\n  refundTransaction(id: Int!): Transaction\n  addFundsToOrg(totalAmount: Int!, CollectiveId: Int!, HostCollectiveId: Int!, description: String): PaymentMethodType\n  createApplication(application: ApplicationInput!): Application\n  deleteApplication(id: String!): Application\n  createPaymentMethod(\n    type: String!\n    currency: String!\n    amount: Int\n    monthlyLimitPerMember: Int\n\n    \"\"\"\n    Limit this payment method to make donations to collectives having those tags\n    \"\"\"\n    limitedToTags: [String]\n\n    \"\"\"Limit this payment method to make donations to those collectives\"\"\"\n    limitedToCollectiveIds: [Int]\n\n    \"\"\"\n    Limit this payment method to make donations to the collectives hosted by those hosts\n    \"\"\"\n    limitedToHostCollectiveIds: [Int]\n    CollectiveId: Int!\n    PaymentMethodId: Int\n    description: String\n    expiryDate: String\n\n    \"\"\"The data attached to this PaymentMethod\"\"\"\n    data: PaymentMethodDataVirtualCardInputType\n  ): PaymentMethodType @deprecated(reason: \"Please use createVirtualCards\")\n\n  \"\"\"Update a payment method\"\"\"\n  updatePaymentMethod(id: Int!, name: String, monthlyLimitPerMember: Int): PaymentMethodType\n\n  \"\"\"Add a new credit card to the given collective\"\"\"\n  createCreditCard(CollectiveId: Int!, name: String!, token: String!, data: StripeCreditCardDataInputType!, monthlyLimitPerMember: Int): PaymentMethodType\n  createVirtualCards(\n    CollectiveId: Int!\n    PaymentMethodId: Int\n\n    \"\"\"\n    A list of emails to generate virtual cards for (only if numberOfVirtualCards is not provided)\n    \"\"\"\n    emails: [String]\n\n    \"\"\"Number of virtual cards to generate (only if emails is not provided)\"\"\"\n    numberOfVirtualCards: Int\n\n    \"\"\"\n    An optional currency. If not provided, will use the collective currency.\n    \"\"\"\n    currency: String\n\n    \"\"\"The amount as an Integer with cents.\"\"\"\n    amount: Int\n    monthlyLimitPerMember: Int\n\n    \"\"\"\n    Limit this payment method to make donations to collectives having those tags\n    \"\"\"\n    limitedToTags: [String]\n\n    \"\"\"Limit this payment method to make donations to those collectives\"\"\"\n    limitedToCollectiveIds: [Int]\n\n    \"\"\"\n    Limit this payment method to make donations to the collectives hosted by those hosts\n    \"\"\"\n    limitedToHostCollectiveIds: [Int]\n\n    \"\"\"Set `limitedToHostCollectiveIds` to open-source collectives only\"\"\"\n    limitedToOpenSourceCollectives: Boolean\n\n    \"\"\"\n    A custom message attached to the email that will be sent for this virtual card\n    \"\"\"\n    description: String\n\n    \"\"\"A custom message that will be sent in the invitation email\"\"\"\n    customMessage: String\n    expiryDate: String\n  ): [PaymentMethodType]\n  claimPaymentMethod(code: String!, user: UserInputType): PaymentMethodType\n\n  \"\"\"Removes the payment method\"\"\"\n  removePaymentMethod(\n    \"\"\"ID of the payment method to remove\"\"\"\n    id: Int!\n  ): PaymentMethodType!\n\n  \"\"\"Edits (by replacing) the admin-level webhooks for a collective.\"\"\"\n  editWebhooks(\n    \"\"\"ID of the collective whose webhooks are edited.\"\"\"\n    collectiveId: Int!\n\n    \"\"\"New notifications for the collective.\"\"\"\n    notifications: [NotificationInputType]\n  ): [NotificationType]\n\n  \"\"\"Register user-level webhooks for a collective.\"\"\"\n  createWebhook(\n    \"\"\"Slug of the collective the webhook is created for.\"\"\"\n    collectiveSlug: String!\n\n    \"\"\"The notification object.\"\"\"\n    notification: NotificationInputType\n  ): NotificationType\n\n  \"\"\"Deletes a notification by ID.\"\"\"\n  deleteNotification(\n    \"\"\"ID of the notification to delete.\"\"\"\n    id: Int!\n  ): NotificationType\n}\n\n\"\"\"Input type for NotificationType\"\"\"\ninput NotificationInputType {\n  id: Int\n  channel: String\n  type: String\n  active: Boolean\n  webhookUrl: String\n  UserId: Int\n  CollectiveId: Int\n}\n\n\"\"\"This represents a Notification\"\"\"\ntype NotificationType {\n  id: Int\n\n  \"\"\"channel to send notification\"\"\"\n  channel: String\n\n  \"\"\"the notification type\"\"\"\n  type: String\n\n  \"\"\"whether or not the notification is active\"\"\"\n  active: Boolean\n  webhookUrl: String\n  user: UserDetails\n  collective: CollectiveInterface\n  createdAt: String\n  updatedAt: String\n}\n\n\"\"\"Order model\"\"\"\ntype Order implements Transaction {\n  id: Int\n  refundTransaction: Transaction\n  uuid: String\n  type: String\n  amount: Int\n  currency: String\n  hostCurrency: String\n\n  \"\"\"\n  Exchange rate between the currency of the transaction and the currency of the\n  host (transaction.amount * transaction.hostCurrencyFxRate =\n  transaction.amountInHostCurrency)\n  \"\"\"\n  hostCurrencyFxRate: Float\n\n  \"\"\"\n  Fee kept by the host in the lowest unit of the currency of the host (ie. in cents)\n  \"\"\"\n  hostFeeInHostCurrency: Int\n\n  \"\"\"\n  Fee kept by the Open Collective Platform in the lowest unit of the currency of the host (ie. in cents)\n  \"\"\"\n  platformFeeInHostCurrency: Int\n\n  \"\"\"\n  Fee kept by the payment processor in the lowest unit of the currency of the host (ie. in cents)\n  \"\"\"\n  paymentProcessorFeeInHostCurrency: Int\n\n  \"\"\"The amount paid in tax (for example VAT) for this transaction\"\"\"\n  taxAmount: Int\n\n  \"\"\"\n  Amount after fees received by the collective in the lowest unit of its own currency (ie. cents)\n  \"\"\"\n  netAmountInCollectiveCurrency: Int\n  host: User\n  createdByUser: UserDetails\n  fromCollective: CollectiveInterface\n  usingVirtualCardFromCollective: CollectiveInterface\n  collective: CollectiveInterface\n  createdAt: String\n  updatedAt: String\n  paymentMethod: PaymentMethodType\n  description: String\n  privateMessage: String\n  publicMessage: String\n  order: OrderType\n  subscription: Subscription\n}\n\n\"\"\"Properties by which results can be ordered.\"\"\"\nenum OrderByField {\n  \"\"\"Order result by creation time.\"\"\"\n  createdAt\n\n  \"\"\"Order result by updated time.\"\"\"\n  updatedAt\n}\n\n\"\"\"Ordering options\"\"\"\ninput OrderByType {\n  field: OrderByField = createdAt\n\n  \"\"\"The ordering direction\"\"\"\n  direction: OrderDirection = DESC\n}\n\n\"\"\"\nPossible directions in which to order a list of items when provided an orderBy argument.\n\"\"\"\nenum OrderDirection {\n  ASC\n  DESC\n}\n\n\"\"\"Input type for OrderType\"\"\"\ninput OrderInputType {\n  id: Int\n  quantity: Int = 1\n  totalAmount: Int\n  hostFeePercent: Int\n  platformFeePercent: Int\n  currency: String\n  interval: String\n  description: String\n  publicMessage: String\n  privateMessage: String\n  paymentMethod: PaymentMethodInputType\n\n  \"\"\"\n  The first part of the UUID of the PaymentMethod that can be used to match the donation\n  \"\"\"\n  matchingFund: String\n\n  \"\"\"The referral collective\"\"\"\n  referral: CollectiveAttributesInputType\n  user: UserInputType\n  fromCollective: CollectiveAttributesInputType\n  collective: CollectiveAttributesInputType!\n  tier: TierInputType\n  recaptchaToken: String\n\n  \"\"\"The amount of taxes that were included in totalAmount\"\"\"\n  taxAmount: Int = 0\n\n  \"\"\"User country, to know which tax applies\"\"\"\n  countryISO: String\n\n  \"\"\"User tax ID number\"\"\"\n  taxIDNumber: String\n}\n\n\"\"\"Possible statuses for an Order\"\"\"\nenum OrderStatus {\n  PENDING\n  PAID\n  ACTIVE\n  CANCELLED\n  REJECTED\n  ERROR\n}\n\n\"\"\"\nThis is an order (for donations, buying tickets, subscribing to a Tier, pledging to a Collective)\n\"\"\"\ntype OrderType {\n  id: Int\n\n  \"\"\"quantity of items (defined by Tier)\"\"\"\n  quantity: Int\n\n  \"\"\"total amount for this order (doesn't include recurring transactions)\"\"\"\n  totalAmount: Int\n\n  \"\"\"The amount paid in tax (for example VAT) for this order\"\"\"\n  taxAmount: Int\n\n  \"\"\"\n  frequency of the subscription if any (could be either null, 'month' or 'year')\n  \"\"\"\n  interval: String\n  subscription: Subscription\n  stats: StatsOrderType\n  createdByUser: UserDetails\n\n  \"\"\"Description of the order that will show up in the invoice\"\"\"\n  description: String\n\n  \"\"\"\n  Custom user message to show with the order, e.g. a special dedication, \"in\n  memory of\", or to add a custom one liner when RSVP for an event\n  \"\"\"\n  publicMessage: String\n\n  \"\"\"Private message for the admins and the host of the collective\"\"\"\n  privateMessage: String\n\n  \"\"\"\n  Collective ordering (most of the time it will be the collective of the createdByUser)\n  \"\"\"\n  fromCollective: CollectiveInterface\n\n  \"\"\"Collective that receives the order\"\"\"\n  collective: CollectiveInterface\n\n  \"\"\"Referral user collective\"\"\"\n  referral: CollectiveInterface\n  tier: Tier\n\n  \"\"\"\n  Payment method used to pay for the order. The paymentMethod is also attached\n  to individual transactions since a credit card can change over the lifetime of\n  a subscription.\n  \"\"\"\n  paymentMethod: PaymentMethodType\n\n  \"\"\"Payment method used if this order was matched by a matching fund.\"\"\"\n  matchingFund: PaymentMethodType\n\n  \"\"\"transactions for this order ordered by createdAt DESC\"\"\"\n  transactions(\n    limit: Int\n    offset: Int\n\n    \"\"\"type of transaction (DEBIT/CREDIT)\"\"\"\n    type: String\n  ): [Transaction]\n  currency: String\n  createdAt: String\n  updatedAt: String\n\n  \"\"\"Whether this subscription is past due or not\"\"\"\n  isPastDue: Boolean\n\n  \"\"\"If there is a subscription, is it active?\"\"\"\n  isSubscriptionActive: Boolean\n\n  \"\"\"Current status for an order\"\"\"\n  status: OrderStatus\n\n  \"\"\"Additional information on order: tax\"\"\"\n  data: JSON\n}\n\n\"\"\"This represents a Organization Collective\"\"\"\ntype Organization implements CollectiveInterface {\n  id: Int\n  createdByUser: UserDetails\n  parentCollective: CollectiveInterface\n  type: String\n  isActive: Boolean\n  name: String\n  company: String\n  description: String\n  longDescription: String\n  expensePolicy: String\n  mission: String\n  tags: [String]\n  countryISO: String @deprecated(reason: \"From 03/20/2019 - use `location.country` instead\")\n\n  \"\"\"Name, address, lat, long of the location.\"\"\"\n  location: LocationType\n  createdAt: String\n  startsAt: String\n  endsAt: String\n  timezone: String\n  maxAmount: Int\n  hostFeePercent: Int\n  currency: String\n  image: String\n  imageUrl(height: Int, format: ImageFormat): String\n  backgroundImage: String\n  backgroundImageUrl(height: Int, format: ImageFormat): String\n  settings: JSON\n\n  \"\"\"Defines if a collective is pledged\"\"\"\n  isPledged: Boolean\n  data: JSON\n  slug: String\n  path: String\n\n  \"\"\"\n  Returns whether this collective can host other collectives (ie. has a Stripe Account connected)\n  \"\"\"\n  isHost: Boolean\n\n  \"\"\"Returns whether this host accepts applications for new collectives\"\"\"\n  canApply: Boolean\n\n  \"\"\"Returns whether this collective is archived\"\"\"\n  isArchived: Boolean\n\n  \"\"\"Returns whether this collective is deletable\"\"\"\n  isDeletable: Boolean\n\n  \"\"\"\n  Get the host collective that is receiving the money on behalf of this collective\n  \"\"\"\n  host: CollectiveInterface\n\n  \"\"\"A host might have a collective attached to it\"\"\"\n  hostCollective: CollectiveInterface\n\n  \"\"\"\n  Get all the members of this collective (admins, members, backers, followers)\n  \"\"\"\n  members(limit: Int, offset: Int, type: String, role: String, TierId: Int, tierSlug: String, roles: [String]): [Member]\n\n  \"\"\"\n  Get all the collective this collective is a member of (as a member, backer, follower, etc.)\n  \"\"\"\n  memberOf(\n    limit: Int\n    offset: Int\n\n    \"\"\"Type of collective (COLLECTIVE, EVENT, ORGANIZATION)\"\"\"\n    type: String\n    role: String\n    roles: [String]\n  ): [Member]\n  collectives(orderBy: CollectiveOrderField = name, orderDirection: OrderDirection = ASC, expenseStatus: String = null, limit: Int, offset: Int, isActive: Boolean, isArchived: Boolean): CollectiveSearchResults\n  followers(limit: Int, offset: Int): [CollectiveInterface]\n  notifications(limit: Int, offset: Int, channel: String, type: String, active: Boolean): [NotificationType]\n  maxQuantity: Int\n  tiers(id: Int, slug: String, slugs: [String]): [Tier]\n  orders(status: OrderStatus): [OrderType]\n  ordersFromCollective(subscriptionsOnly: Boolean): [OrderType]\n  transactions(\n    \"\"\"type of transaction (DEBIT/CREDIT)\"\"\"\n    type: String\n    limit: Int\n    offset: Int\n  ): [Transaction]\n  expenses(type: String, limit: Int, offset: Int, includeHostedCollectives: Boolean, status: String): [ExpenseType]\n  role: String\n  twitterHandle: String\n  githubHandle: String\n  website: String\n  updates(limit: Int, offset: Int): [Event]\n  events(limit: Int, offset: Int): [Event]\n  paymentMethods(service: String, limit: Int, hasBalanceAboveZero: Boolean, isConfirmed: Boolean = true, types: [String], orderBy: PaymenMethodOrderField = type): [PaymentMethodType]\n\n  \"\"\"\n  Get the virtual cards created by this collective. RemoteUser must be a collective admin.\n  \"\"\"\n  createdVirtualCards(\n    limit: Int\n    offset: Int\n\n    \"\"\"Wether the virtual card has been claimed or not\"\"\"\n    isConfirmed: Boolean\n  ): PaginatedPaymentMethod\n  connectedAccounts: [ConnectedAccountType]\n  stats: CollectiveStatsType\n  email: String\n}\n\n\"\"\"A list of expenses with pagination info\"\"\"\ntype PaginatedExpenses {\n  expenses: [ExpenseType]\n  limit: Int\n  offset: Int\n  total: Int\n}\n\n\"\"\"A list of PaymentMethod with pagination info\"\"\"\ntype PaginatedPaymentMethod {\n  paymentMethods: [PaymentMethodType]\n  total: Int\n  limit: Int\n  offset: Int\n}\n\n\"\"\"List of transactions with pagination data\"\"\"\ntype PaginatedTransactions {\n  transactions: [Transaction]\n  limit: Int\n  offset: Int\n  total: Int\n}\n\n\"\"\"Properties by which PaymenMethods can be ordered\"\"\"\nenum PaymenMethodOrderField {\n  \"\"\"Order payment methods by type (creditcard, virtualcard...)\"\"\"\n  type\n}\n\n\"\"\"Input for virtual card (meta)data\"\"\"\ninput PaymentMethodDataVirtualCardInputType {\n  \"\"\"The email virtual card is generated for\"\"\"\n  email: String\n}\n\n\"\"\"Input type for PaymentMethod (paypal/stripe)\"\"\"\ninput PaymentMethodInputType {\n  id: Int\n  uuid: String\n  token: String\n  service: String\n\n  \"\"\"creditcard, bitcoin, prepaid, manual\"\"\"\n  type: String\n  customerId: String\n  data: JSON\n  name: String\n  primary: Boolean\n  monthlyLimitPerMember: Int\n  currency: String\n  save: Boolean\n}\n\n\"\"\"Sanitized PaymentMethod Info (PaymentMethod model)\"\"\"\ntype PaymentMethodType {\n  id: Int\n  uuid: String\n  createdAt: String\n\n  \"\"\"\n  Will be true for virtual card if claimed. Always true for other payment methods.\n  \"\"\"\n  isConfirmed: Boolean\n  expiryDate: String\n  service: String\n  SourcePaymentMethodId: Int\n  type: String\n  data: JSON\n  name: String\n  description: String\n  primary: Boolean\n\n  \"\"\"Matching factor\"\"\"\n  matching: Int\n  monthlyLimitPerMember: Int\n  initialBalance: Int\n\n  \"\"\"Returns the balance in the currency of this paymentMethod\"\"\"\n  balance: Int\n  collective: CollectiveInterface\n  emitter: CollectiveInterface\n  limitedToTags: JSON\n  limitedToCollectiveIds: [Int]\n  limitedToHostCollectiveIds: [Int]\n  orders(\n    \"\"\"Only returns orders that have an active subscription (monthly/yearly)\"\"\"\n    hasActiveSubscription: Boolean\n  ): [OrderType]\n\n  \"\"\"\n  Get the list of collectives that used this payment method. Useful to select\n  the list of a backers for which the host has manually added funds or to get\n  the list of backers that used a matching fund\n  \"\"\"\n  fromCollectives(limit: Int, offset: Int): CollectiveSearchResults\n  currency: String\n}\n\n\"\"\"This is a root query\"\"\"\ntype Query {\n  Collective(slug: String, id: Int): CollectiveInterface\n  Tier(id: Int!): Tier\n\n  \"\"\"\n  Fetch data about a matching fund from the short version of its UUID (first part)\n  \"\"\"\n  MatchingFund(uuid: String!, ForCollectiveId: Int): PaymentMethodType\n  LoggedInUser: UserDetails\n  AuthenticatedUser: CollectiveInterface\n  allInvoices(fromCollectiveSlug: String!): [InvoiceType]\n  Invoice(\n    \"\"\"\n    Slug of the invoice. Format: :year:2digitMonth.:hostSlug.:fromCollectiveSlug\n    \"\"\"\n    invoiceSlug: String!\n  ): InvoiceType\n  InvoiceByDateRange(\n    \"\"\"\n    Like the Slug of the invoice but spilt out into parts and includes dateFrom\n    + dateTo for getting an invoice over a date range.\n    \"\"\"\n    invoiceInputType: InvoiceInputType!\n  ): InvoiceType\n  TransactionInvoice(\n    \"\"\"Slug of the transaction.\"\"\"\n    transactionUuid: String!\n  ): InvoiceType\n\n  \"\"\"\n  \n      Given a collective, returns all its transactions:\n      - Debit transactions made by collective without using a virtual card\n      - Debit transactions made using a virtual card from collective\n      - Credit transactions made to collective\n      \n  \"\"\"\n  allTransactions(CollectiveId: Int, collectiveSlug: String, type: String, limit: Int, offset: Int, dateFrom: String, dateTo: String, includeVirtualCards: Boolean, fetchDataFromLedger: Boolean, includeHostedCollectivesTransactions: Boolean): [Transaction]\n  transactions(\n    \"\"\"Defaults to 100\"\"\"\n    limit: Int = 100\n    offset: Int = 0\n    orderBy: TransactionOrder = {field: CREATED_AT, direction: DESC}\n\n    \"\"\"CREDIT or DEBIT are accepted values\"\"\"\n    type: TransactionType\n  ): PaginatedTransactions\n  Update(collectiveSlug: String, updateSlug: String, id: Int): UpdateType\n  Application(id: Int): Application\n  allComments(ExpenseId: Int, UpdateId: Int, limit: Int, offset: Int): [UpdateType]\n  allUpdates(CollectiveId: Int!, includeHostedCollectives: Boolean, limit: Int, offset: Int): [UpdateType]\n  allOrders(\n    CollectiveId: Int\n    collectiveSlug: String\n    includeHostedCollectives: Boolean\n\n    \"\"\"Filter by status (PAID, PENDING, ERROR, ACTIVE, CANCELLED)\"\"\"\n    status: String\n    limit: Int\n    offset: Int\n  ): [OrderType]\n  allExpenses(CollectiveId: Int!, includeHostedCollectives: Boolean, status: String, category: String, FromCollectiveId: Int, fromCollectiveSlug: String, limit: Int, offset: Int): [ExpenseType]\n  expenses(\n    CollectiveId: Int\n    CollectiveSlug: String\n    status: ExpenseStatus\n    category: String\n    FromCollectiveId: Int\n    FromCollectiveSlug: String\n\n    \"\"\"Defaults to 100\"\"\"\n    limit: Int = 100\n    offset: Int = 0\n    orderBy: OrderByType = {field: createdAt, direction: DESC}\n  ): PaginatedExpenses\n  Expense(id: Int!): ExpenseType\n  Transaction(id: Int, uuid: String): Transaction\n  allCollectives(\n    \"\"\"Fetch all collectives that match at least one of the tags\"\"\"\n    tags: [String]\n\n    \"\"\"COLLECTIVE, USER, ORGANIZATION, EVENT\"\"\"\n    type: TypeOfCollective\n\n    \"\"\"Fetch all collectives hosted by HostCollectiveId\"\"\"\n    HostCollectiveId: Int\n\n    \"\"\"Fetch all collectives hosted by hostCollectiveSlug\"\"\"\n    hostCollectiveSlug: String\n\n    \"\"\"Only return active collectives\"\"\"\n    isActive: Boolean\n\n    \"\"\"Only return pledged or non-pledged collectives\"\"\"\n    isPledged: Boolean\n\n    \"\"\"Fetch all collectives that `memberOfCollectiveSlug` is a member of\"\"\"\n    memberOfCollectiveSlug: String\n\n    \"\"\"Filter collectives with this minimum number of backers\"\"\"\n    minBackerCount: Int\n\n    \"\"\"\n    Only fetch the collectives where `memberOfCollectiveSlug` has the specified role\n    \"\"\"\n    role: String\n\n    \"\"\"\n    Fetch all collectives that are a child of `ParentCollectiveId`. Used for \"SuperCollectives\"\n    \"\"\"\n    ParentCollectiveId: Int\n    orderBy: CollectiveOrderField = name\n    orderDirection: OrderDirection = ASC\n    limit: Int = 10\n    offset: Int = 0\n  ): CollectiveSearchResults\n\n  \"\"\"Returns all public hosts that are open for applications\"\"\"\n  allHosts(\n    \"\"\"Fetch all collectives that match at least one of the tags\"\"\"\n    tags: [String]\n\n    \"\"\"Filter hosts by currency\"\"\"\n    currency: String\n    orderBy: HostCollectiveOrderFieldType = collectives\n    orderDirection: OrderDirection = DESC\n    limit: Int = 10\n    offset: Int = 0\n  ): CollectiveSearchResults\n  allCollectiveTags: [String]\n  allMembers(\n    CollectiveId: Int\n    collectiveSlug: String\n\n    \"\"\"\n    Include the members of the hosted collectives. Useful to get the list of all users/organizations from a host.\n    \"\"\"\n    includeHostedCollectives: Boolean\n    memberCollectiveSlug: String\n    TierId: Int\n    role: String\n    type: String\n    isActive: Boolean\n    orderBy: String\n    orderDirection: String\n    limit: Int\n    offset: Int\n  ): [Member]\n  allEvents(slug: String, limit: Int, offset: Int): [CollectiveInterface]\n  ocPaymentMethod(token: String!): PaymentMethodType\n  PaymentMethod(id: Int, code: String): PaymentMethodType\n  search(\n    \"\"\"\n    Fetch collectives related to this term based on name, description, tags, slug, mission, and location\n    \"\"\"\n    term: String\n\n    \"\"\"Limit the amount of results. Defaults to 20\"\"\"\n    limit: Int = 20\n    offset: Int = 0\n  ): CollectiveSearchResults\n  allTransactionsFromPaymentMethod(uuid: String!, type: String, limit: Int, offset: Int, dateFrom: String, dateTo: String): [Transaction]\n  Order(id: Int!): OrderType\n}\n\n\"\"\"Stats about a membership\"\"\"\ntype StatsMemberType {\n  id: Int\n\n  \"\"\"total amount donated directly by this member\"\"\"\n  directDonations: Int\n\n  \"\"\"total amount donated by this member through gift cards\"\"\"\n  donationsThroughEmittedVirtualCards: Int\n\n  \"\"\"\n  total amount donated by this member either directly or using a virtual card it has emitted\n  \"\"\"\n  totalDonations: Int\n\n  \"\"\"total amount raised by this member\"\"\"\n  totalRaised: Int\n}\n\n\"\"\"Stats about an order\"\"\"\ntype StatsOrderType {\n  id: Int\n\n  \"\"\"\n  number of transactions for this order (includes past recurring transactions)\n  \"\"\"\n  transactions: Int\n\n  \"\"\"\n  total amount of all the transactions for this order (includes past recurring transactions)\n  \"\"\"\n  totalTransactions: Int\n}\n\n\"\"\"Input for stripe credit card data\"\"\"\ninput StripeCreditCardDataInputType {\n  fullName: String\n  expMonth: Int\n  expYear: Int\n  brand: String\n  country: String\n  funding: String\n  zip: String\n}\n\n\"\"\"Subscription model\"\"\"\ntype Subscription {\n  id: Int\n  amount: Int\n  currency: String\n  interval: String\n  stripeSubscriptionId: String\n  isActive: Boolean\n}\n\n\"\"\"This represents an Tier\"\"\"\ntype Tier {\n  id: Int\n  slug: String\n  type: String\n  name: String\n  description: String\n\n  \"\"\"A long, html-formatted description.\"\"\"\n  longDescription: String\n  button: String\n  amount: Int\n  minimumAmount: Int\n  currency: String\n  interval: String\n  presets: [Int]\n  maxQuantity: Int\n  maxQuantityPerUser: Int\n  goal: Int\n  password: String\n  startsAt: String\n  endsAt: String\n  collective: CollectiveInterface\n  event: CollectiveInterface\n  orders(\n    isActive: Boolean\n\n    \"\"\"only return orders that have been processed (fulfilled)\"\"\"\n    isProcessed: Boolean\n    limit: Int\n  ): [OrderType]\n  stats: TierStatsType\n}\n\n\"\"\"Input type for TierType\"\"\"\ninput TierInputType {\n  id: Int\n  type: String\n  name: String\n  description: String\n\n  \"\"\"A long, html-formatted description.\"\"\"\n  longDescription: String\n\n  \"\"\"amount in the lowest unit of the currency of the host (ie. in cents)\"\"\"\n  amount: Int\n  currency: String\n  presets: [Int]\n  interval: String\n  maxQuantity: Int\n  minimumAmount: Int\n  maxQuantityPerUser: Int\n\n  \"\"\"amount that you are trying to raise with this tier\"\"\"\n  goal: Int\n  password: String\n\n  \"\"\"Start of the campaign\"\"\"\n  startsAt: String\n\n  \"\"\"End of the campaign\"\"\"\n  endsAt: String\n}\n\n\"\"\"Stats about a tier\"\"\"\ntype TierStatsType {\n  id: Int\n\n  \"\"\"total number of individual orders\"\"\"\n  totalOrders: Int\n\n  \"\"\"Total amount donated for this tier, in cents.\"\"\"\n  totalDonated: Int\n\n  \"\"\"\n  How much money is given for this tier for each tier.interval (monthly/yearly)\n  \"\"\"\n  totalRecurringDonations: Int\n\n  \"\"\"total number of people/organizations in this tier\"\"\"\n  totalDistinctOrders: Int\n\n  \"\"\"total number of active people/organizations in this tier\"\"\"\n  totalActiveDistinctOrders: Int\n  availableQuantity: Int\n}\n\n\"\"\"Transaction interface\"\"\"\ninterface Transaction {\n  id: Int\n  uuid: String\n  amount: Int\n  currency: String\n  hostCurrency: String\n  hostCurrencyFxRate: Float\n  netAmountInCollectiveCurrency: Int\n  hostFeeInHostCurrency: Int\n  platformFeeInHostCurrency: Int\n  paymentProcessorFeeInHostCurrency: Int\n  taxAmount: Int\n  createdByUser: UserDetails\n  host: CollectiveInterface\n  paymentMethod: PaymentMethodType\n  fromCollective: CollectiveInterface\n  usingVirtualCardFromCollective: CollectiveInterface\n  collective: CollectiveInterface\n  type: String\n  description: String\n  privateMessage: String\n  createdAt: String\n  updatedAt: String\n  refundTransaction: Transaction\n}\n\n\"\"\"Ordering options for transactions\"\"\"\ninput TransactionOrder {\n  \"\"\"The field to order transactions by.\"\"\"\n  field: TransactionOrderField = CREATED_AT\n\n  \"\"\"The ordering direction.\"\"\"\n  direction: OrderDirection = DESC\n}\n\n\"\"\"Properties by which transactions can be ordered.\"\"\"\nenum TransactionOrderField {\n  \"\"\"Order transactions by creation time.\"\"\"\n  CREATED_AT\n}\n\n\"\"\"Breakdown of transactions per type (ALL/CREDIT/DEBIT)\"\"\"\ntype TransactionsStatsType {\n  id: Int\n  all: Int\n\n  \"\"\"Returns the number of CREDIT transactions\"\"\"\n  credit: Int\n\n  \"\"\"Returns the number of DEBIT transactions\"\"\"\n  debit: Int\n}\n\n\"\"\"Type of transaction in the ledger\"\"\"\nenum TransactionType {\n  CREDIT\n  DEBIT\n}\n\nenum TypeOfCollective {\n  COLLECTIVE\n  EVENT\n  ORGANIZATION\n  USER\n  BOT\n}\n\n\"\"\"Input type for UpdateType\"\"\"\ninput UpdateAttributesInputType {\n  id: Int\n  views: Int\n  slug: String\n  title: String\n  image: String\n  markdown: String\n  html: String\n  fromCollective: CollectiveAttributesInputType\n  tier: TierInputType\n}\n\n\"\"\"Input type for UpdateType\"\"\"\ninput UpdateInputType {\n  id: Int\n  views: Int\n  slug: String\n  title: String\n  image: String\n  markdown: String\n  html: String\n  fromCollective: CollectiveAttributesInputType\n  collective: CollectiveAttributesInputType!\n  tier: TierInputType\n}\n\n\"\"\"This represents an Update\"\"\"\ntype UpdateType {\n  id: Int\n  views: Int\n  slug: String\n  image: String\n  title: String\n  createdAt: String\n  updatedAt: String\n  publishedAt: String\n  summary: String\n  html: String\n  markdown: String\n  tags: [String]\n  createdByUser: UserDetails\n  fromCollective: CollectiveInterface\n  collective: CollectiveInterface\n  tier: Tier\n  comments(limit: Int, offset: Int): CommentListType\n}\n\n\"\"\"This represents a User Collective\"\"\"\ntype User implements CollectiveInterface {\n  id: Int\n  createdByUser: UserDetails\n  parentCollective: CollectiveInterface\n  type: String\n  isActive: Boolean\n  name: String\n  company: String\n  description: String\n  longDescription: String\n  expensePolicy: String\n  mission: String\n  tags: [String]\n  countryISO: String @deprecated(reason: \"From 03/20/2019 - use `location.country` instead\")\n\n  \"\"\"Name, address, lat, long of the location.\"\"\"\n  location: LocationType\n  createdAt: String\n  startsAt: String\n  endsAt: String\n  timezone: String\n  maxAmount: Int\n  hostFeePercent: Int\n  currency: String\n  image: String\n  imageUrl(height: Int, format: ImageFormat): String\n  backgroundImage: String\n  backgroundImageUrl(height: Int, format: ImageFormat): String\n  settings: JSON\n\n  \"\"\"Defines if a collective is pledged\"\"\"\n  isPledged: Boolean\n  data: JSON\n  slug: String\n  path: String\n\n  \"\"\"\n  Returns whether this collective can host other collectives (ie. has a Stripe Account connected)\n  \"\"\"\n  isHost: Boolean\n\n  \"\"\"Returns whether this host accepts applications for new collectives\"\"\"\n  canApply: Boolean\n\n  \"\"\"Returns whether this collective is archived\"\"\"\n  isArchived: Boolean\n\n  \"\"\"Returns whether this collective is deletable\"\"\"\n  isDeletable: Boolean\n\n  \"\"\"\n  Get the host collective that is receiving the money on behalf of this collective\n  \"\"\"\n  host: CollectiveInterface\n\n  \"\"\"A host might have a collective attached to it\"\"\"\n  hostCollective: CollectiveInterface\n\n  \"\"\"\n  Get all the members of this collective (admins, members, backers, followers)\n  \"\"\"\n  members(limit: Int, offset: Int, type: String, role: String, TierId: Int, tierSlug: String, roles: [String]): [Member]\n\n  \"\"\"\n  Get all the collective this collective is a member of (as a member, backer, follower, etc.)\n  \"\"\"\n  memberOf(\n    limit: Int\n    offset: Int\n\n    \"\"\"Type of collective (COLLECTIVE, EVENT, ORGANIZATION)\"\"\"\n    type: String\n    role: String\n    roles: [String]\n  ): [Member]\n  collectives(orderBy: CollectiveOrderField = name, orderDirection: OrderDirection = ASC, expenseStatus: String = null, limit: Int, offset: Int, isActive: Boolean, isArchived: Boolean): CollectiveSearchResults\n  followers(limit: Int, offset: Int): [CollectiveInterface]\n  notifications(limit: Int, offset: Int, channel: String, type: String, active: Boolean): [NotificationType]\n  maxQuantity: Int\n  tiers(id: Int, slug: String, slugs: [String]): [Tier]\n  orders(status: OrderStatus): [OrderType]\n  ordersFromCollective(subscriptionsOnly: Boolean): [OrderType]\n  transactions(\n    \"\"\"type of transaction (DEBIT/CREDIT)\"\"\"\n    type: String\n    limit: Int\n    offset: Int\n  ): [Transaction]\n  expenses(type: String, limit: Int, offset: Int, includeHostedCollectives: Boolean, status: String): [ExpenseType]\n  role: String\n  twitterHandle: String\n  githubHandle: String\n  website: String\n  updates(limit: Int, offset: Int): [Event]\n  events(limit: Int, offset: Int): [Event]\n  paymentMethods(service: String, limit: Int, hasBalanceAboveZero: Boolean, isConfirmed: Boolean = true, types: [String], orderBy: PaymenMethodOrderField = type): [PaymentMethodType]\n\n  \"\"\"\n  Get the virtual cards created by this collective. RemoteUser must be a collective admin.\n  \"\"\"\n  createdVirtualCards(\n    limit: Int\n    offset: Int\n\n    \"\"\"Wether the virtual card has been claimed or not\"\"\"\n    isConfirmed: Boolean\n  ): PaginatedPaymentMethod\n  connectedAccounts: [ConnectedAccountType]\n  stats: CollectiveStatsType\n  firstName: String\n  lastName: String\n  email: String\n  applications: [Application]\n}\n\n\"\"\"This represents the details of a User\"\"\"\ntype UserDetails {\n  id: Int\n  CollectiveId: Int\n  collective: CollectiveInterface\n  username: String\n  firstName: String\n  lastName: String\n  name: String\n  image: String\n  email: String\n  emailWaitingForValidation: String\n  memberOf: [Member]\n  billingAddress: String\n  paypalEmail: String\n}\n\n\"\"\"Input type for UserType\"\"\"\ninput UserInputType {\n  id: Int\n  email: Email\n  firstName: String\n  lastName: String\n  name: String\n  company: String\n  image: String\n  username: String\n  description: String\n  twitterHandle: String\n  githubHandle: String\n  website: String\n  paypalEmail: String\n  newsletterOptIn: Boolean\n}\n",
      "containsQueryType": true,
      "typesUndefined": [],
      "directivesUndefined": [
        "deprecated"
      ],
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 36,
      "containsCycle": true,
      "numDefinitions": 74
    }
  ],
  "metrics": {
    "created_at": "2016-12-12T04:36:39Z",
    "updated_at": "2019-07-19T21:55:01Z",
    "pushed_at": "2019-07-19T21:54:56Z",
    "issues": 100,
    "watchers": 21,
    "fork_count": 93,
    "has_wiki_enabled": false,
    "license": "mit",
    "pull_requests": 2107,
    "pull_requests_open": 22,
    "pull_requests_closed": 237,
    "pull_requests_merged": 1848,
    "releases": 4,
    "stargazers": 171
  }
}