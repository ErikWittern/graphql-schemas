{
  "repo_name": "example-relay-app",
  "repo_full_name": "stanlemon/example-relay-app",
  "repo_owner": "stanlemon",
  "repo_description": "An example using react, react and postgraphile that queries and mutates data with graphql.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema/schema.graphql",
      "sha": "484bae2737cea85b2910b7fdd2273887c4f51547",
      "url": "https://api.github.com/repositories/166572813/contents/schema/schema.graphql?ref=6db5d8ff5c2036c14582ffd0c6465e1a94341fb7",
      "git_url": "https://api.github.com/repositories/166572813/git/blobs/484bae2737cea85b2910b7fdd2273887c4f51547",
      "html_url": "https://github.com/stanlemon/example-relay-app/blob/6db5d8ff5c2036c14582ffd0c6465e1a94341fb7/schema/schema.graphql",
      "content": "\"\"\"All input for the create `Person` mutation.\"\"\"\ninput CreatePersonInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Person` to be created by this mutation.\"\"\"\n  person: PersonInput!\n}\n\n\"\"\"The output of our create `Person` mutation.\"\"\"\ntype CreatePersonPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Person` that was created by this mutation.\"\"\"\n  person: Person\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Person`. May be used by Relay 1.\"\"\"\n  personEdge(\n    \"\"\"The method to use when ordering `Person`.\"\"\"\n    orderBy: [PeopleOrderBy!] = PRIMARY_KEY_ASC\n  ): PeopleEdge\n}\n\n\"\"\"A location in a connection that can be used for resuming pagination.\"\"\"\nscalar Cursor\n\n\"\"\"All input for the `deletePersonByRowId` mutation.\"\"\"\ninput DeletePersonByRowIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n  rowId: Int!\n}\n\n\"\"\"All input for the `deletePerson` mutation.\"\"\"\ninput DeletePersonInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Person` to be deleted.\n  \"\"\"\n  id: ID!\n}\n\n\"\"\"The output of our delete `Person` mutation.\"\"\"\ntype DeletePersonPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Person` that was deleted by this mutation.\"\"\"\n  person: Person\n  deletedPersonId: ID\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Person`. May be used by Relay 1.\"\"\"\n  personEdge(\n    \"\"\"The method to use when ordering `Person`.\"\"\"\n    orderBy: [PeopleOrderBy!] = PRIMARY_KEY_ASC\n  ): PeopleEdge\n}\n\n\"\"\"\nThe root mutation type which contains root level fields which mutate data.\n\"\"\"\ntype Mutation {\n  \"\"\"Creates a single `Person`.\"\"\"\n  createPerson(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: CreatePersonInput!\n  ): CreatePersonPayload\n\n  \"\"\"Updates a single `Person` using its globally unique id and a patch.\"\"\"\n  updatePerson(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePersonInput!\n  ): UpdatePersonPayload\n\n  \"\"\"Updates a single `Person` using a unique key and a patch.\"\"\"\n  updatePersonByRowId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: UpdatePersonByRowIdInput!\n  ): UpdatePersonPayload\n\n  \"\"\"Deletes a single `Person` using its globally unique id.\"\"\"\n  deletePerson(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePersonInput!\n  ): DeletePersonPayload\n\n  \"\"\"Deletes a single `Person` using a unique key.\"\"\"\n  deletePersonByRowId(\n    \"\"\"\n    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n    \"\"\"\n    input: DeletePersonByRowIdInput!\n  ): DeletePersonPayload\n}\n\n\"\"\"An object with a globally unique `ID`.\"\"\"\ninterface Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  id: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: Cursor\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: Cursor\n}\n\n\"\"\"A connection to a list of `Person` values.\"\"\"\ntype PeopleConnection {\n  \"\"\"A list of `Person` objects.\"\"\"\n  nodes: [Person]!\n\n  \"\"\"\n  A list of edges which contains the `Person` and cursor to aid in pagination.\n  \"\"\"\n  edges: [PeopleEdge!]!\n\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"The count of *all* `Person` you could get from the connection.\"\"\"\n  totalCount: Int\n}\n\n\"\"\"A `Person` edge in the connection.\"\"\"\ntype PeopleEdge {\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: Cursor\n\n  \"\"\"The `Person` at the end of the edge.\"\"\"\n  node: Person\n}\n\n\"\"\"Methods to use when ordering `Person`.\"\"\"\nenum PeopleOrderBy {\n  NATURAL\n  ID_ASC\n  ID_DESC\n  FIRST_NAME_ASC\n  FIRST_NAME_DESC\n  LAST_NAME_ASC\n  LAST_NAME_DESC\n  PRIMARY_KEY_ASC\n  PRIMARY_KEY_DESC\n}\n\ntype Person implements Node {\n  \"\"\"\n  A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  \"\"\"\n  id: ID!\n  rowId: Int!\n  firstName: String!\n  lastName: String!\n}\n\n\"\"\"\nA condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’\n\"\"\"\ninput PersonCondition {\n  \"\"\"Checks for equality with the object’s `rowId` field.\"\"\"\n  rowId: Int\n\n  \"\"\"Checks for equality with the object’s `firstName` field.\"\"\"\n  firstName: String\n\n  \"\"\"Checks for equality with the object’s `lastName` field.\"\"\"\n  lastName: String\n}\n\n\"\"\"An input for mutations affecting `Person`\"\"\"\ninput PersonInput {\n  rowId: Int\n  firstName: String!\n  lastName: String!\n}\n\n\"\"\"\nRepresents an update to a `Person`. Fields that are set will be updated.\n\"\"\"\ninput PersonPatch {\n  rowId: Int\n  firstName: String\n  lastName: String\n}\n\n\"\"\"The root query type which gives access points into the data universe.\"\"\"\ntype Query implements Node {\n  \"\"\"\n  Exposes the root query type nested one level down. This is helpful for Relay 1\n  which can only query top level fields if they are in a particular form.\n  \"\"\"\n  query: Query!\n\n  \"\"\"\n  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\n  \"\"\"\n  id: ID!\n\n  \"\"\"Fetches an object given its globally unique `ID`.\"\"\"\n  node(\n    \"\"\"The globally unique `ID`.\"\"\"\n    id: ID!\n  ): Node\n\n  \"\"\"Reads and enables pagination through a set of `Person`.\"\"\"\n  allPeople(\n    \"\"\"Only read the first `n` values of the set.\"\"\"\n    first: Int\n\n    \"\"\"Only read the last `n` values of the set.\"\"\"\n    last: Int\n\n    \"\"\"\n    Skip the first `n` values from our `after` cursor, an alternative to cursor\n    based pagination. May not be used with `last`.\n    \"\"\"\n    offset: Int\n\n    \"\"\"Read all values in the set before (above) this cursor.\"\"\"\n    before: Cursor\n\n    \"\"\"Read all values in the set after (below) this cursor.\"\"\"\n    after: Cursor\n\n    \"\"\"The method to use when ordering `Person`.\"\"\"\n    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]\n\n    \"\"\"\n    A condition to be used in determining which values should be returned by the collection.\n    \"\"\"\n    condition: PersonCondition\n  ): PeopleConnection\n  personByRowId(rowId: Int!): Person\n\n  \"\"\"Reads a single `Person` using its globally unique `ID`.\"\"\"\n  person(\n    \"\"\"The globally unique `ID` to be used in selecting a single `Person`.\"\"\"\n    id: ID!\n  ): Person\n}\n\n\"\"\"All input for the `updatePersonByRowId` mutation.\"\"\"\ninput UpdatePersonByRowIdInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An object where the defined keys will be set on the `Person` being updated.\n  \"\"\"\n  personPatch: PersonPatch!\n  rowId: Int!\n}\n\n\"\"\"All input for the `updatePerson` mutation.\"\"\"\ninput UpdatePersonInput {\n  \"\"\"\n  An arbitrary string value with no semantic meaning. Will be included in the\n  payload verbatim. May be used to track mutations by the client.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The globally unique `ID` which will identify a single `Person` to be updated.\n  \"\"\"\n  id: ID!\n\n  \"\"\"\n  An object where the defined keys will be set on the `Person` being updated.\n  \"\"\"\n  personPatch: PersonPatch!\n}\n\n\"\"\"The output of our update `Person` mutation.\"\"\"\ntype UpdatePersonPayload {\n  \"\"\"\n  The exact same `clientMutationId` that was provided in the mutation input,\n  unchanged and unused. May be used by a client to track mutations.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"The `Person` that was updated by this mutation.\"\"\"\n  person: Person\n\n  \"\"\"\n  Our root query field type. Allows us to run any query from our mutation payload.\n  \"\"\"\n  query: Query\n\n  \"\"\"An edge for our `Person`. May be used by Relay 1.\"\"\"\n  personEdge(\n    \"\"\"The method to use when ordering `Person`.\"\"\"\n    orderBy: [PeopleOrderBy!] = PRIMARY_KEY_ASC\n  ): PeopleEdge\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 9,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 20
    }
  ],
  "metrics": {
    "created_at": "2019-01-19T17:17:19Z",
    "updated_at": "2019-07-19T09:30:07Z",
    "pushed_at": "2019-01-19T17:17:49Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 2
  }
}