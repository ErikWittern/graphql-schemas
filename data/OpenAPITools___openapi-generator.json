{
  "repo_name": "openapi-generator",
  "repo_full_name": "openapitools/openapi-generator",
  "repo_owner": "OpenAPITools",
  "repo_description": "OpenAPI Generator allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically given an OpenAPI Spec (v2, v3)",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "pet_api.graphql",
      "path": "samples/server/petstore/graphql-nodejs-express-server/petstore/api/pet_api.graphql",
      "sha": "78d17f95b05c83123abca8a198209ee27931d969",
      "url": "https://api.github.com/repositories/133134007/contents/samples/server/petstore/graphql-nodejs-express-server/petstore/api/pet_api.graphql?ref=03711d572f580d188dd4f698f933ca3a8db630af",
      "git_url": "https://api.github.com/repositories/133134007/git/blobs/78d17f95b05c83123abca8a198209ee27931d969",
      "html_url": "https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/api/pet_api.graphql",
      "content": "# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# package petstore\n\n# pet_api\n\n\n\ninput AddPetInput {\n    # Pet object that needs to be added to the store\n    body: PetInput\n}\n\ninput DeletePetInput {\n    # Pet id to delete\n    petId: Int!, \n    \n    apiKey: String!\n}\n\ninput UpdatePetInput {\n    # Pet object that needs to be added to the store\n    body: PetInput\n}\n\ninput UpdatePetWithFormInput {\n    # ID of pet that needs to be updated\n    petId: Int!, \n    # Updated name of the pet\n    name: String!, \n    # Updated status of the pet\n    status: String!\n}\n\ninput UploadFileInput {\n    # ID of pet to update\n    petId: Int!, \n    # Additional data to pass to server\n    additionalMetadata: String!, \n    # file to upload\n    file: String!\n}\n\ntype Mutation {\n  # Add a new pet to the store\n  # @param Pet body Pet object that needs to be added to the store\n  # @return [Boolean]\n  AddPet(input: AddPetInput!): Boolean\n  # Deletes a pet\n  # @param Int! petId Pet id to delete\n  # @param String! apiKey \n  # @return [Boolean]\n  DeletePet(input: DeletePetInput!): Boolean\n  # Update an existing pet\n  # @param Pet body Pet object that needs to be added to the store\n  # @return [Boolean]\n  UpdatePet(input: UpdatePetInput!): Boolean\n  # Updates a pet in the store with form data\n  # @param Int! petId ID of pet that needs to be updated\n  # @param String! name Updated name of the pet\n  # @param String! status Updated status of the pet\n  # @return [Boolean]\n  UpdatePetWithForm(input: UpdatePetWithFormInput!): Boolean\n  # uploads an image\n  # @param Int! petId ID of pet to update\n  # @param String! additionalMetadata Additional data to pass to server\n  # @param String! file file to upload\n  # @return [ApiResponse]\n  UploadFile(input: UploadFileInput!): ApiResponse\n}\n\ntype Query {\n  # Finds Pets by status\n  # Multiple status values can be provided with comma separated strings\n  # @param String! status Status values that need to be considered for filter\n  # @return [Pet]\n  FindPetsByStatus(status: String!): Pet\n  # Finds Pets by tags\n  # Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n  # @param String! tags Tags to filter by\n  # @return [Pet]\n  FindPetsByTags(tags: String!): Pet\n  # Find pet by ID\n  # Returns a single pet\n  # @param Int! petId ID of pet to return\n  # @return [Pet]\n  GetPetById(petId: Int!): Pet\n}\n\n",
      "containsQueryType": true,
      "merged": {
        "mergedContent": "# https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/api/pet_api.graphql:\n# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# package petstore\n\n# pet_api\n\n\n\ninput AddPetInput {\n    # Pet object that needs to be added to the store\n    body: PetInput\n}\n\ninput DeletePetInput {\n    # Pet id to delete\n    petId: Int!, \n    \n    apiKey: String!\n}\n\ninput UpdatePetInput {\n    # Pet object that needs to be added to the store\n    body: PetInput\n}\n\ninput UpdatePetWithFormInput {\n    # ID of pet that needs to be updated\n    petId: Int!, \n    # Updated name of the pet\n    name: String!, \n    # Updated status of the pet\n    status: String!\n}\n\ninput UploadFileInput {\n    # ID of pet to update\n    petId: Int!, \n    # Additional data to pass to server\n    additionalMetadata: String!, \n    # file to upload\n    file: String!\n}\n\ntype Mutation {\n  # Add a new pet to the store\n  # @param Pet body Pet object that needs to be added to the store\n  # @return [Boolean]\n  AddPet(input: AddPetInput!): Boolean\n  # Deletes a pet\n  # @param Int! petId Pet id to delete\n  # @param String! apiKey \n  # @return [Boolean]\n  DeletePet(input: DeletePetInput!): Boolean\n  # Update an existing pet\n  # @param Pet body Pet object that needs to be added to the store\n  # @return [Boolean]\n  UpdatePet(input: UpdatePetInput!): Boolean\n  # Updates a pet in the store with form data\n  # @param Int! petId ID of pet that needs to be updated\n  # @param String! name Updated name of the pet\n  # @param String! status Updated status of the pet\n  # @return [Boolean]\n  UpdatePetWithForm(input: UpdatePetWithFormInput!): Boolean\n  # uploads an image\n  # @param Int! petId ID of pet to update\n  # @param String! additionalMetadata Additional data to pass to server\n  # @param String! file file to upload\n  # @return [ApiResponse]\n  UploadFile(input: UploadFileInput!): ApiResponse\n}\n\ntype Query {\n  # Finds Pets by status\n  # Multiple status values can be provided with comma separated strings\n  # @param String! status Status values that need to be considered for filter\n  # @return [Pet]\n  FindPetsByStatus(status: String!): Pet\n  # Finds Pets by tags\n  # Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n  # @param String! tags Tags to filter by\n  # @return [Pet]\n  FindPetsByTags(tags: String!): Pet\n  # Find pet by ID\n  # Returns a single pet\n  # @param Int! petId ID of pet to return\n  # @return [Pet]\n  GetPetById(petId: Int!): Pet\n}\n\n\n# https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/model/pet.graphql:\n# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# A pet for sale in the pet store\ntype Pet {\n  id: Int!\n  category: Category\n  name: String!\n  photoUrls: String!\n  tags: Tag\n  # pet status in the store\n  status: PetStatusEnum\n}\n\ninput PetInput {\n    id: Int!\n    category: CategoryInput\n    name: String!\n    photoUrls: [String!]\n    tags: [TagInput]\n    # pet status in the store\n    status: PetStatusEnum\n}\n\n# pet status in the store\nenum PetStatusEnum {\n  available\n  pending\n  sold\n}\n\n# https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/model/api_response.graphql:\n# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# Describes the result of uploading an image resource\ntype ApiResponse {\n  code: Int!\n  type: String!\n  message: String!\n}\n\ninput ApiResponseInput {\n    code: Int!\n    type: String!\n    message: String!\n}\n\n# https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/model/category.graphql:\n# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# A category for a pet\ntype Category {\n  id: Int!\n  name: String!\n}\n\ninput CategoryInput {\n    id: Int!\n    name: String!\n}\n\n# https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/model/tag.graphql:\n# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# A tag for a pet\ntype Tag {\n  id: Int!\n  name: String!\n}\n\ninput TagInput {\n    id: Int!\n    name: String!\n}\n",
        "mergedPaths": [
          "samples/server/petstore/graphql-nodejs-express-server/petstore/model/pet.graphql",
          "samples/server/petstore/graphql-nodejs-express-server/petstore/model/api_response.graphql",
          "samples/server/petstore/graphql-nodejs-express-server/petstore/model/category.graphql",
          "samples/server/petstore/graphql-nodejs-express-server/petstore/model/tag.graphql"
        ],
        "typesDefinedByMerge": [
          "Pet",
          "PetInput",
          "ApiResponse",
          "Category",
          "CategoryInput",
          "Tag",
          "TagInput"
        ],
        "directivesDefinedByMerge": [],
        "validSchema": true,
        "contentDuplicate": false,
        "numObjectTypes": 6,
        "containsCycle": false,
        "polynomialLevel": 0,
        "numDefinitions": 16
      },
      "validSchema": false
    },
    {
      "name": "tag.graphql",
      "path": "samples/server/petstore/graphql-nodejs-express-server/petstore/model/tag.graphql",
      "sha": "d1bafdfd225193937a2a2a743b619f0d8319cc14",
      "url": "https://api.github.com/repositories/133134007/contents/samples/server/petstore/graphql-nodejs-express-server/petstore/model/tag.graphql?ref=03711d572f580d188dd4f698f933ca3a8db630af",
      "git_url": "https://api.github.com/repositories/133134007/git/blobs/d1bafdfd225193937a2a2a743b619f0d8319cc14",
      "html_url": "https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/model/tag.graphql",
      "content": "# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# A tag for a pet\ntype Tag {\n  id: Int!\n  name: String!\n}\n\ninput TagInput {\n    id: Int!\n    name: String!\n}\n",
      "containsQueryType": false,
      "validSchema": true,
      "contentDuplicate": false,
      "numDefinitions": 2
    },
    {
      "name": "category.graphql",
      "path": "samples/server/petstore/graphql-nodejs-express-server/petstore/model/category.graphql",
      "sha": "cb07f7c3e43235de44827b4a1f1b6826c63df159",
      "url": "https://api.github.com/repositories/133134007/contents/samples/server/petstore/graphql-nodejs-express-server/petstore/model/category.graphql?ref=03711d572f580d188dd4f698f933ca3a8db630af",
      "git_url": "https://api.github.com/repositories/133134007/git/blobs/cb07f7c3e43235de44827b4a1f1b6826c63df159",
      "html_url": "https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/model/category.graphql",
      "content": "# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# A category for a pet\ntype Category {\n  id: Int!\n  name: String!\n}\n\ninput CategoryInput {\n    id: Int!\n    name: String!\n}\n",
      "containsQueryType": false,
      "validSchema": true,
      "contentDuplicate": false,
      "numDefinitions": 2
    },
    {
      "name": "api_response.graphql",
      "path": "samples/server/petstore/graphql-nodejs-express-server/petstore/model/api_response.graphql",
      "sha": "311545783693bea0c2f966ebe1fac291df201680",
      "url": "https://api.github.com/repositories/133134007/contents/samples/server/petstore/graphql-nodejs-express-server/petstore/model/api_response.graphql?ref=03711d572f580d188dd4f698f933ca3a8db630af",
      "git_url": "https://api.github.com/repositories/133134007/git/blobs/311545783693bea0c2f966ebe1fac291df201680",
      "html_url": "https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/model/api_response.graphql",
      "content": "# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# Describes the result of uploading an image resource\ntype ApiResponse {\n  code: Int!\n  type: String!\n  message: String!\n}\n\ninput ApiResponseInput {\n    code: Int!\n    type: String!\n    message: String!\n}\n",
      "containsQueryType": false,
      "validSchema": true,
      "contentDuplicate": false,
      "numDefinitions": 2
    },
    {
      "name": "pet.graphql",
      "path": "samples/server/petstore/graphql-nodejs-express-server/petstore/model/pet.graphql",
      "sha": "14f10c8062e04b3b465892e5f479a5eeb35a0c41",
      "url": "https://api.github.com/repositories/133134007/contents/samples/server/petstore/graphql-nodejs-express-server/petstore/model/pet.graphql?ref=03711d572f580d188dd4f698f933ca3a8db630af",
      "git_url": "https://api.github.com/repositories/133134007/git/blobs/14f10c8062e04b3b465892e5f479a5eeb35a0c41",
      "html_url": "https://github.com/OpenAPITools/openapi-generator/blob/03711d572f580d188dd4f698f933ca3a8db630af/samples/server/petstore/graphql-nodejs-express-server/petstore/model/pet.graphql",
      "content": "# \n# OpenAPI Petstore\n# \n# \n# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n# \n# Version: 1.0.0\n# \n# Generated by OpenAPI Generator: https://openapi-generator.tech\n\n# A pet for sale in the pet store\ntype Pet {\n  id: Int!\n  category: Category\n  name: String!\n  photoUrls: String!\n  tags: Tag\n  # pet status in the store\n  status: PetStatusEnum\n}\n\ninput PetInput {\n    id: Int!\n    category: CategoryInput\n    name: String!\n    photoUrls: [String!]\n    tags: [TagInput]\n    # pet status in the store\n    status: PetStatusEnum\n}\n\n# pet status in the store\nenum PetStatusEnum {\n  available\n  pending\n  sold\n}\n",
      "containsQueryType": false,
      "validSchema": false,
      "numDefinitions": 3
    }
  ],
  "metrics": {
    "created_at": "2018-05-12T09:57:56Z",
    "updated_at": "2019-07-19T15:50:39Z",
    "pushed_at": "2019-07-19T21:33:14Z",
    "issues": 1473,
    "watchers": 99,
    "fork_count": 925,
    "has_wiki_enabled": true,
    "license": "apache-2.0",
    "pull_requests": 1929,
    "pull_requests_open": 95,
    "pull_requests_closed": 188,
    "pull_requests_merged": 1646,
    "releases": 23,
    "stargazers": 2684
  }
}