{
  "repo_name": "graphqlc",
  "repo_full_name": "samlitowitz/graphqlc",
  "repo_owner": "samlitowitz",
  "repo_description": "graphqlc is a protoc style code generator for GraphQL.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.echo.graphql",
      "path": "cmd/graphqlc-gen-echo/testData/schema.echo.graphql",
      "sha": "0e86d89c3c99fae1e3513a6f750fc33b1151884d",
      "url": "https://api.github.com/repositories/186892936/contents/cmd/graphqlc-gen-echo/testData/schema.echo.graphql?ref=ccc7314bb4734741fd117ead9714dfc39420d23e",
      "git_url": "https://api.github.com/repositories/186892936/git/blobs/0e86d89c3c99fae1e3513a6f750fc33b1151884d",
      "html_url": "https://github.com/samlitowitz/graphqlc/blob/ccc7314bb4734741fd117ead9714dfc39420d23e/cmd/graphqlc-gen-echo/testData/schema.echo.graphql",
      "content": "schema {\n  query: Query\n  mutation: Mutation\n}\n\nscalar Time\n\ntype Query {\n  hero(episode: Episode = NEWHOPE): Character\n  reviews(episode: Episode!, since: Time): [Review!]!\n  search(text: String!): [SearchResult!]!\n  character(id: ID!): Character\n  droid(id: ID!): Droid\n  human(id: ID!): Human\n  starship(id: ID!): Starship\n}\n\ntype Mutation {\n  createReview(episode: Episode!, review: ReviewInput!): Review\n}\n\ntype Human implements Character {\n  id: ID!\n  name: String!\n  height(unit: LengthUnit = METER): Float!\n  mass: Float\n  friends: [Character!]\n  friendsConnection(first: Int, after: ID): FriendsConnection!\n  appearsIn: [Episode!]!\n  starships: [Starship!]\n}\n\ntype Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Character!]\n  friendsConnection(first: Int, after: ID): FriendsConnection!\n  appearsIn: [Episode!]!\n  primaryFunction: String\n}\n\ntype FriendsConnection {\n  totalCount: Int!\n  edges: [FriendsEdge!]\n  friends: [Character!]\n  pageInfo: PageInfo!\n}\n\ntype FriendsEdge {\n  cursor: ID!\n  node: Character\n}\n\ntype PageInfo {\n  startCursor: ID!\n  endCursor: ID!\n  hasNextPage: Boolean!\n}\n\ntype Review {\n  stars: Int!\n  commentary: String\n  time: Time\n}\n\ntype Starship {\n  id: ID!\n  name: String!\n  length(unit: LengthUnit = METER): Float!\n  history: [[Int!]!]!\n}\n\ninterface Character {\n  id: ID!\n  name: String!\n  friends: [Character!]\n  friendsConnection(first: Int, after: ID): FriendsConnection!\n  appearsIn: [Episode!]!\n}\n\nunion SearchResult = Human | Droid | Starship\n\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n\nenum LengthUnit {\n  METER\n  FOOT\n}\n\ninput ReviewInput {\n  stars: Int!\n  commentary: String\n  time: Time\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 9,
      "containsCycle": true,
      "numDefinitions": 16
    },
    {
      "name": "starwars.echo.graphql",
      "path": "cmd/graphqlc-gen-echo/testData/starwars.echo.graphql",
      "sha": "0e86d89c3c99fae1e3513a6f750fc33b1151884d",
      "url": "https://api.github.com/repositories/186892936/contents/cmd/graphqlc-gen-echo/testData/starwars.echo.graphql?ref=ccc7314bb4734741fd117ead9714dfc39420d23e",
      "git_url": "https://api.github.com/repositories/186892936/git/blobs/0e86d89c3c99fae1e3513a6f750fc33b1151884d",
      "html_url": "https://github.com/samlitowitz/graphqlc/blob/ccc7314bb4734741fd117ead9714dfc39420d23e/cmd/graphqlc-gen-echo/testData/starwars.echo.graphql",
      "content": "schema {\n  query: Query\n  mutation: Mutation\n}\n\nscalar Time\n\ntype Query {\n  hero(episode: Episode = NEWHOPE): Character\n  reviews(episode: Episode!, since: Time): [Review!]!\n  search(text: String!): [SearchResult!]!\n  character(id: ID!): Character\n  droid(id: ID!): Droid\n  human(id: ID!): Human\n  starship(id: ID!): Starship\n}\n\ntype Mutation {\n  createReview(episode: Episode!, review: ReviewInput!): Review\n}\n\ntype Human implements Character {\n  id: ID!\n  name: String!\n  height(unit: LengthUnit = METER): Float!\n  mass: Float\n  friends: [Character!]\n  friendsConnection(first: Int, after: ID): FriendsConnection!\n  appearsIn: [Episode!]!\n  starships: [Starship!]\n}\n\ntype Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Character!]\n  friendsConnection(first: Int, after: ID): FriendsConnection!\n  appearsIn: [Episode!]!\n  primaryFunction: String\n}\n\ntype FriendsConnection {\n  totalCount: Int!\n  edges: [FriendsEdge!]\n  friends: [Character!]\n  pageInfo: PageInfo!\n}\n\ntype FriendsEdge {\n  cursor: ID!\n  node: Character\n}\n\ntype PageInfo {\n  startCursor: ID!\n  endCursor: ID!\n  hasNextPage: Boolean!\n}\n\ntype Review {\n  stars: Int!\n  commentary: String\n  time: Time\n}\n\ntype Starship {\n  id: ID!\n  name: String!\n  length(unit: LengthUnit = METER): Float!\n  history: [[Int!]!]!\n}\n\ninterface Character {\n  id: ID!\n  name: String!\n  friends: [Character!]\n  friendsConnection(first: Int, after: ID): FriendsConnection!\n  appearsIn: [Episode!]!\n}\n\nunion SearchResult = Human | Droid | Starship\n\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n\nenum LengthUnit {\n  METER\n  FOOT\n}\n\ninput ReviewInput {\n  stars: Int!\n  commentary: String\n  time: Time\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 16
    },
    {
      "name": "schema.graphql",
      "path": "cmd/graphqlc-gen-echo/testData/schema.graphql",
      "sha": "8ba548c9d8402175aaa4f61ca49cf11179ed532e",
      "url": "https://api.github.com/repositories/186892936/contents/cmd/graphqlc-gen-echo/testData/schema.graphql?ref=f2f1d80a9e0eaffb075cfbe3d056f0bcd44ee4b6",
      "git_url": "https://api.github.com/repositories/186892936/git/blobs/8ba548c9d8402175aaa4f61ca49cf11179ed532e",
      "html_url": "https://github.com/samlitowitz/graphqlc/blob/f2f1d80a9e0eaffb075cfbe3d056f0bcd44ee4b6/cmd/graphqlc-gen-echo/testData/schema.graphql",
      "content": "# The query type, represents all of the entry points into our object graph\ntype Query {\n    hero(episode: Episode = NEWHOPE): Character\n    reviews(episode: Episode!, since: Time): [Review!]!\n    search(text: String!): [SearchResult!]!\n    character(id: ID!): Character\n    droid(id: ID!): Droid\n    human(id: ID!): Human\n    starship(id: ID!): Starship\n}\n# The mutation type, represents all updates we can make to our data\ntype Mutation {\n    createReview(episode: Episode!, review: ReviewInput!): Review\n}\n# The episodes in the Star Wars trilogy\nenum Episode {\n    # Star Wars Episode IV: A New Hope, released in 1977.\n    NEWHOPE\n    # Star Wars Episode V: The Empire Strikes Back, released in 1980.\n    EMPIRE\n    # Star Wars Episode VI: Return of the Jedi, released in 1983.\n    JEDI\n}\n# A character from the Star Wars universe\ninterface Character {\n    # The ID of the character\n    id: ID!\n    # The name of the character\n    name: String!\n    # The friends of the character, or an empty list if they have none\n    friends: [Character!]\n    # The friends of the character exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this character appears in\n    appearsIn: [Episode!]!\n}\n# Units of height\nenum LengthUnit {\n    # The standard unit around the world\n    METER\n    # Primarily used in the United States\n    FOOT\n}\n# A humanoid creature from the Star Wars universe\ntype Human implements Character {\n    # The ID of the human\n    id: ID!\n    # What this human calls themselves\n    name: String!\n    # Height in the preferred unit, default is meters\n    height(unit: LengthUnit = METER): Float!\n    # Mass in kilograms, or null if unknown\n    mass: Float\n    # This human's friends, or an empty list if they have none\n    friends: [Character!]\n    # The friends of the human exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this human appears in\n    appearsIn: [Episode!]!\n    # A list of starships this person has piloted, or an empty list if none\n    starships: [Starship!]\n}\n# An autonomous mechanical character in the Star Wars universe\ntype Droid implements Character {\n    # The ID of the droid\n    id: ID!\n    # What others call this droid\n    name: String!\n    # This droid's friends, or an empty list if they have none\n    friends: [Character!]\n    # The friends of the droid exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this droid appears in\n    appearsIn: [Episode!]!\n    # This droid's primary function\n    primaryFunction: String\n}\n# A connection object for a character's friends\ntype FriendsConnection {\n    # The total number of friends\n    totalCount: Int!\n    # The edges for each of the character's friends.\n    edges: [FriendsEdge!]\n    # A list of the friends, as a convenience when edges are not needed.\n    friends: [Character!]\n    # Information for paginating this connection\n    pageInfo: PageInfo!\n}\n# An edge object for a character's friends\ntype FriendsEdge {\n    # A cursor used for pagination\n    cursor: ID!\n    # The character represented by this friendship edge\n    node: Character\n}\n# Information for paginating this connection\ntype PageInfo {\n    startCursor: ID!\n    endCursor: ID!\n    hasNextPage: Boolean!\n}\n# Represents a review for a movie\ntype Review {\n    # The number of stars this review gave, 1-5\n    stars: Int!\n    # Comment about the movie\n    commentary: String\n    # when the review was posted\n    time: Time\n}\n# The input object sent when someone is creating a new review\ninput ReviewInput {\n    # 0-5 stars\n    stars: Int!\n    # Comment about the movie, optional\n    commentary: String\n    # when the review was posted\n    time: Time\n}\ntype Starship {\n    # The ID of the starship\n    id: ID!\n    # The name of the starship\n    name: String!\n    # Length of the starship, along the longest axis\n    length(unit: LengthUnit = METER): Float!\n    # coordinates tracking this ship\n    history: [[Int!]!]!\n}\nunion SearchResult = Human | Droid | Starship\nscalar Time",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 15
    },
    {
      "name": "starwars.graphql",
      "path": "cmd/graphqlc-gen-echo/testData/starwars.graphql",
      "sha": "8ba548c9d8402175aaa4f61ca49cf11179ed532e",
      "url": "https://api.github.com/repositories/186892936/contents/cmd/graphqlc-gen-echo/testData/starwars.graphql?ref=f2f1d80a9e0eaffb075cfbe3d056f0bcd44ee4b6",
      "git_url": "https://api.github.com/repositories/186892936/git/blobs/8ba548c9d8402175aaa4f61ca49cf11179ed532e",
      "html_url": "https://github.com/samlitowitz/graphqlc/blob/f2f1d80a9e0eaffb075cfbe3d056f0bcd44ee4b6/cmd/graphqlc-gen-echo/testData/starwars.graphql",
      "content": "# The query type, represents all of the entry points into our object graph\ntype Query {\n    hero(episode: Episode = NEWHOPE): Character\n    reviews(episode: Episode!, since: Time): [Review!]!\n    search(text: String!): [SearchResult!]!\n    character(id: ID!): Character\n    droid(id: ID!): Droid\n    human(id: ID!): Human\n    starship(id: ID!): Starship\n}\n# The mutation type, represents all updates we can make to our data\ntype Mutation {\n    createReview(episode: Episode!, review: ReviewInput!): Review\n}\n# The episodes in the Star Wars trilogy\nenum Episode {\n    # Star Wars Episode IV: A New Hope, released in 1977.\n    NEWHOPE\n    # Star Wars Episode V: The Empire Strikes Back, released in 1980.\n    EMPIRE\n    # Star Wars Episode VI: Return of the Jedi, released in 1983.\n    JEDI\n}\n# A character from the Star Wars universe\ninterface Character {\n    # The ID of the character\n    id: ID!\n    # The name of the character\n    name: String!\n    # The friends of the character, or an empty list if they have none\n    friends: [Character!]\n    # The friends of the character exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this character appears in\n    appearsIn: [Episode!]!\n}\n# Units of height\nenum LengthUnit {\n    # The standard unit around the world\n    METER\n    # Primarily used in the United States\n    FOOT\n}\n# A humanoid creature from the Star Wars universe\ntype Human implements Character {\n    # The ID of the human\n    id: ID!\n    # What this human calls themselves\n    name: String!\n    # Height in the preferred unit, default is meters\n    height(unit: LengthUnit = METER): Float!\n    # Mass in kilograms, or null if unknown\n    mass: Float\n    # This human's friends, or an empty list if they have none\n    friends: [Character!]\n    # The friends of the human exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this human appears in\n    appearsIn: [Episode!]!\n    # A list of starships this person has piloted, or an empty list if none\n    starships: [Starship!]\n}\n# An autonomous mechanical character in the Star Wars universe\ntype Droid implements Character {\n    # The ID of the droid\n    id: ID!\n    # What others call this droid\n    name: String!\n    # This droid's friends, or an empty list if they have none\n    friends: [Character!]\n    # The friends of the droid exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this droid appears in\n    appearsIn: [Episode!]!\n    # This droid's primary function\n    primaryFunction: String\n}\n# A connection object for a character's friends\ntype FriendsConnection {\n    # The total number of friends\n    totalCount: Int!\n    # The edges for each of the character's friends.\n    edges: [FriendsEdge!]\n    # A list of the friends, as a convenience when edges are not needed.\n    friends: [Character!]\n    # Information for paginating this connection\n    pageInfo: PageInfo!\n}\n# An edge object for a character's friends\ntype FriendsEdge {\n    # A cursor used for pagination\n    cursor: ID!\n    # The character represented by this friendship edge\n    node: Character\n}\n# Information for paginating this connection\ntype PageInfo {\n    startCursor: ID!\n    endCursor: ID!\n    hasNextPage: Boolean!\n}\n# Represents a review for a movie\ntype Review {\n    # The number of stars this review gave, 1-5\n    stars: Int!\n    # Comment about the movie\n    commentary: String\n    # when the review was posted\n    time: Time\n}\n# The input object sent when someone is creating a new review\ninput ReviewInput {\n    # 0-5 stars\n    stars: Int!\n    # Comment about the movie, optional\n    commentary: String\n    # when the review was posted\n    time: Time\n}\ntype Starship {\n    # The ID of the starship\n    id: ID!\n    # The name of the starship\n    name: String!\n    # Length of the starship, along the longest axis\n    length(unit: LengthUnit = METER): Float!\n    # coordinates tracking this ship\n    history: [[Int!]!]!\n}\nunion SearchResult = Human | Droid | Starship\nscalar Time",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 15
    },
    {
      "name": "todo.echo.graphql",
      "path": "cmd/graphqlc-gen-echo/testData/todo.echo.graphql",
      "sha": "e47dd7ad00facd464064f9ec8a5580d1d2bf87cd",
      "url": "https://api.github.com/repositories/186892936/contents/cmd/graphqlc-gen-echo/testData/todo.echo.graphql?ref=d79fc433bbfb9eaf70cea8de09373adbfb726ab7",
      "git_url": "https://api.github.com/repositories/186892936/git/blobs/e47dd7ad00facd464064f9ec8a5580d1d2bf87cd",
      "html_url": "https://github.com/samlitowitz/graphqlc/blob/d79fc433bbfb9eaf70cea8de09373adbfb726ab7/cmd/graphqlc-gen-echo/testData/todo.echo.graphql",
      "content": "schema {\n  query: MyQuery\n  mutation: MyMutation\n}\n\ndirective @hasRole(role: Role!) on FIELD_DEFINITION\n\nscalar Map\n\ntype MyQuery {\n  todo(id: ID!): Todo\n  lastTodo: Todo\n  todos: [Todo!]!\n}\n\ntype MyMutation {\n  createTodo(todo: TodoInput!): Todo!\n  updateTodo(id: ID!, changes: Map!): Todo\n}\n\ntype Todo {\n  id: ID!\n  text: String!\n  done: Boolean! @hasRole(role: OWNER)\n}\n\nenum Role {\n  ADMIN\n  OWNER\n}\n\ninput TodoInput {\n  text: String!\n  done: Boolean\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 3,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 8
    },
    {
      "name": "scalars.echo.graphql",
      "path": "cmd/graphqlc-gen-echo/testData/scalars.echo.graphql",
      "sha": "d27d28e6ac0c6fa98eb7f1a1447d757f5f4c075e",
      "url": "https://api.github.com/repositories/186892936/contents/cmd/graphqlc-gen-echo/testData/scalars.echo.graphql?ref=05f8f8a88fda17567f679ae23eb03a4ac54c04fd",
      "git_url": "https://api.github.com/repositories/186892936/git/blobs/d27d28e6ac0c6fa98eb7f1a1447d757f5f4c075e",
      "html_url": "https://github.com/samlitowitz/graphqlc/blob/05f8f8a88fda17567f679ae23eb03a4ac54c04fd/cmd/graphqlc-gen-echo/testData/scalars.echo.graphql",
      "content": "schema {\n  query: Query\n}\n\nscalar Timestamp\n\nscalar Point\n\nscalar Banned\n\ntype Query {\n  user(id: ID!): User\n  search(input: SearchArgs = {}): [User!]!\n}\n\ntype User {\n  id: ID!\n  name: String!\n  created: Timestamp\n  isBanned: Banned!\n  primitiveResolver: String!\n  customResolver: Point!\n  address: Address\n  tier: Tier\n}\n\ntype Address {\n  id: ID!\n  location: Point\n}\n\nenum Tier {\n  A\n  B\n  C\n}\n\ninput SearchArgs {\n  location: Point\n  createdAfter: Timestamp\n  isBanned: Banned\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 3,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 9
    },
    {
      "name": "scalars.graphql",
      "path": "cmd/graphqlc-gen-echo/testData/scalars.graphql",
      "sha": "2bf00540ff559ddb3f2cd850be2bd8a595e749eb",
      "url": "https://api.github.com/repositories/186892936/contents/cmd/graphqlc-gen-echo/testData/scalars.graphql?ref=05f8f8a88fda17567f679ae23eb03a4ac54c04fd",
      "git_url": "https://api.github.com/repositories/186892936/git/blobs/2bf00540ff559ddb3f2cd850be2bd8a595e749eb",
      "html_url": "https://github.com/samlitowitz/graphqlc/blob/05f8f8a88fda17567f679ae23eb03a4ac54c04fd/cmd/graphqlc-gen-echo/testData/scalars.graphql",
      "content": "type Query {\n    user(id: ID!): User\n    search(input: SearchArgs = {location: \"37,144\", isBanned: false}): [User!]!\n}\n\ntype User {\n    id: ID!\n    name: String!\n    created: Timestamp\n    isBanned: Banned!\n    primitiveResolver: String!\n    customResolver: Point!\n    address: Address\n    tier: Tier\n}\n\ntype Address {\n    id: ID!\n    location: Point\n}\n\ninput SearchArgs {\n    location: Point\n    createdAfter: Timestamp\n    isBanned: Banned # TODO: This can be a Boolean again once multiple backing types are allowed\n}\n\nenum Tier {\n    A\n    B\n    C\n}\n\nscalar Timestamp\nscalar Point\nscalar Banned\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 8
    },
    {
      "name": "todo.graphql",
      "path": "cmd/graphqlc-gen-echo/testData/todo.graphql",
      "sha": "8adac85147e1dec4779d5b488454c317b138e123",
      "url": "https://api.github.com/repositories/186892936/contents/cmd/graphqlc-gen-echo/testData/todo.graphql?ref=d79fc433bbfb9eaf70cea8de09373adbfb726ab7",
      "git_url": "https://api.github.com/repositories/186892936/git/blobs/8adac85147e1dec4779d5b488454c317b138e123",
      "html_url": "https://github.com/samlitowitz/graphqlc/blob/d79fc433bbfb9eaf70cea8de09373adbfb726ab7/cmd/graphqlc-gen-echo/testData/todo.graphql",
      "content": "schema {\n    query: MyQuery\n    mutation: MyMutation\n}\n\ntype MyQuery {\n    todo(id: ID!): Todo\n    lastTodo: Todo\n    todos: [Todo!]!\n}\n\ntype MyMutation {\n    createTodo(todo: TodoInput!): Todo!\n    updateTodo(id: ID!, changes: Map!): Todo\n}\n\ntype Todo {\n    id: ID!\n    text: String!\n    done: Boolean! @hasRole(role: OWNER) # only the owner can see if a todo is done\n}\n\n\"Passed to createTodo to create a new todo\"\ninput TodoInput {\n    \"The body text\"\n    text: String!\n    \"Is it done already?\"\n    done: Boolean\n}\n\nscalar Map\n\n\"Prevents access to a field if the user doesnt have the matching role\"\ndirective @hasRole(role: Role!) on FIELD_DEFINITION\n\nenum Role {\n    ADMIN\n    OWNER\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 8
    }
  ],
  "metrics": {
    "created_at": "2019-05-15T19:48:42Z",
    "updated_at": "2019-05-26T19:32:25Z",
    "pushed_at": "2019-05-26T19:32:23Z",
    "issues": 1,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "apache-2.0",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 6
  }
}