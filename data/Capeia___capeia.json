{
  "repo_name": "capeia",
  "repo_full_name": "capeia/capeia",
  "repo_owner": "Capeia",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "src/server/data/schema.graphql",
      "sha": "27d8ff52dbce361adb78bc06daa246a5eb649b9b",
      "url": "https://api.github.com/repositories/93520780/contents/src/server/data/schema.graphql?ref=8ffef214972f7879d33fc3d2117150091ef761fe",
      "git_url": "https://api.github.com/repositories/93520780/git/blobs/27d8ff52dbce361adb78bc06daa246a5eb649b9b",
      "html_url": "https://github.com/Capeia/capeia/blob/8ffef214972f7879d33fc3d2117150091ef761fe/src/server/data/schema.graphql",
      "content": "input AddCommentInput {\n  postId: ID!\n  respondTo: ID\n  authorName: String\n  authorEmail: String\n  content: String!\n  clientMutationId: String\n}\n\ntype AddCommentPayload {\n  newCommentEdge: CommentEdge!\n  clientMutationId: String\n}\n\ninput AddDonationInfosInput {\n  donationId: ID!\n  infoToken: String!\n  name: String\n  country: String\n  location: String\n  note: String\n  clientMutationId: String\n}\n\ntype AddDonationInfosPayload {\n  updatedDonation: Donation\n  clientMutationId: String\n}\n\ntype Affiliation {\n  institute: Institute\n\n  # Custom identifier used to route funds internally at institute (can be anything).\n  identifier: String\n}\n\ntype Application implements Node {\n  # The ID of an object\n  id: ID!\n  applicant: User!\n  date: String!\n  modified: String!\n  status: ApplicationStatus!\n\n  # Name of the institute the applicant is currently affiliated with\n  institute: String\n\n  # Country of the institute the applicant is currently affiliated with\n  instituteCountry: String\n  facultyWebsite: String\n  pub1Title: String\n  pub1Url: String\n  pub2Title: String\n  pub2Url: String\n  notes: String\n}\n\n# A connection to a list of items.\ntype ApplicationConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ApplicationEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype ApplicationEdge {\n  # The item at the end of the edge\n  node: Application\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum ApplicationStatus {\n  active\n  accepted\n  denied\n}\n\ntype Auth {\n  me: User\n  realUser: User\n}\n\ntype AuthorOfTheMonth {\n  year: Int!\n  month: Int!\n  author: User\n  score: Float\n  bonus: Int\n  articles: [Post]\n\n  # All AotM donations (independent of given year / month)\n  donations(after: String, first: Int, before: String, last: Int, page: Int): DonationConnection\n}\n\nenum AuthorType {\n  guest\n  author\n  editor\n  instituteManager\n}\n\ntype Category implements Node {\n  # The ID of an object\n  id: ID!\n  name: String!\n  slug: String!\n  posts(search: String, after: String, first: Int, before: String, last: Int, page: Int): PostConnection\n}\n\n# A connection to a list of items.\ntype CategoryConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [CategoryEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype CategoryEdge {\n  # The item at the end of the edge\n  node: Category\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype Comment implements Node {\n  # The ID of an object\n  id: ID!\n  post: Post!\n  parent: Comment\n\n  # Author of the comment, if one exists.\n  author: User\n  authorName: String\n  date: String!\n  content: String!\n  comments(after: String, first: Int, before: String, last: Int, page: Int): CommentConnection\n}\n\n# A connection to a list of items.\ntype CommentConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [CommentEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype CommentEdge {\n  # The item at the end of the edge\n  node: Comment\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput ConnectStripeInput {\n  institute: ID!\n  clientMutationId: String\n}\n\ntype ConnectStripePayload {\n  clientId: String!\n  csrfToken: String!\n  clientMutationId: String\n}\n\ninput CreateAuthorInput {\n  firstName: String!\n  lastName: String!\n  email: String!\n  password: String\n  handle: String!\n  fieldOfExpertise: ID!\n  institute: ID!\n  type: AuthorType!\n  clientMutationId: String\n}\n\ntype CreateAuthorPayload {\n  newAuthorEdge: UserEdge!\n  clientMutationId: String\n}\n\ninput CreateInstituteInput {\n  name: String!\n  country: String!\n  website: String!\n  clientMutationId: String\n}\n\ntype CreateInstitutePayload {\n  newInstituteEdge: InstituteEdge!\n  clientMutationId: String\n}\n\ninput CreatePostInput {\n  title: String!\n  category: ID!\n  clientMutationId: String\n}\n\ntype CreatePostPayload {\n  newPostEdge: PostEdge!\n  clientMutationId: String\n}\n\ninput CreateRewardInput {\n  title: String!\n  description: String!\n  minAmount: Int!\n  clientMutationId: String\n}\n\ntype CreateRewardPayload {\n  newRewardEdge: RewardEdge!\n  clientMutationId: String\n}\n\ntype Donation implements Node {\n  # The ID of an object\n  id: ID!\n  modified: String\n  amount: Int\n  status: String\n  error: String\n  stripeChargeId: String\n  isTest: Boolean\n  donorName: String\n  donorCountry: String\n  donorFlagUrl: String\n  donorLocation: String\n  donorNote: String\n  donorEmail: String\n  donee: User\n}\n\n# A connection to a list of items.\ntype DonationConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [DonationEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype DonationEdge {\n  # The item at the end of the edge\n  node: Donation\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype Donations {\n  made(after: String, first: Int, before: String, last: Int, page: Int): DonationConnection\n  received(after: String, first: Int, before: String, last: Int, page: Int): DonationConnection\n}\n\nenum ImageSize {\n  thumbnail\n  full\n}\n\ntype Institute implements Node {\n  # The ID of an object\n  id: ID!\n  name: String\n  slug: String\n  website: String\n  country: String\n  stripeAccountId: String\n\n  # Whether this institute has an associated Stripe account id.\n  hasStripeAccount: Boolean!\n  authors(after: String, first: Int, before: String, last: Int, page: Int): UserConnection\n}\n\n# A connection to a list of items.\ntype InstituteConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [InstituteEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype InstituteEdge {\n  # The item at the end of the edge\n  node: Institute\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput MakeAotmDonationInput {\n  donorEmail: String!\n  token: String!\n  amount: Int!\n  clientMutationId: String\n}\n\ntype MakeAotmDonationPayload {\n  newDonationEdge: DonationEdge!\n  infoToken: String!\n  clientMutationId: String\n}\n\ninput MakeDonationInput {\n  donee: ID!\n  donorEmail: String!\n  token: String!\n  amount: Int!\n  reward: String\n  clientMutationId: String\n}\n\ntype MakeDonationPayload {\n  newDonationEdge: DonationEdge!\n  infoToken: String!\n  clientMutationId: String\n}\n\ninput MarkRewardClaimCompleteInput {\n  rewardClaim: ID!\n  clientMutationId: String\n}\n\ntype MarkRewardClaimCompletePayload {\n  updatedRewardClaim: RewardClaim!\n  clientMutationId: String\n}\n\ntype Media implements Node {\n  # The ID of an object\n  id: ID!\n  title: String\n  description: String\n  date: String\n  url(size: ImageSize): String\n  createdByAuthor: Boolean\n\n  # The person who uploaded this image\n  author: User\n  license: String\n  creator: String\n  originalUrl: String\n  havePermission: Boolean\n}\n\n# A connection to a list of items.\ntype MediaConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [MediaEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype MediaEdge {\n  # The item at the end of the edge\n  node: Media\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype MorePageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  page: Int\n  totalPages: Int\n}\n\ntype Mutation {\n  signIn(input: SignInInput!): SignInPayload\n  setEffectiveUser(input: SetEffectiveUserInput!): SetEffectiveUserPayload\n  revertToRealUser(input: RevertToRealUserInput!): RevertToRealUserPayload\n  createPost(input: CreatePostInput!): CreatePostPayload\n  updatePost(input: UpdatePostInput!): UpdatePostPayload\n  setPostExcerpt(input: SetPostExcerptInput!): SetPostExcerptPayload\n  setPostEditorial(input: SetPostEditorialInput!): SetPostEditorialPayload\n  publishPost(input: PublishPostInput!): PublishPostPayload\n  submitPostForReview(input: SubmitPostForReviewInput!): SubmitPostForReviewPayload\n  uploadMedia(input: UploadMediaInput!): UploadMediaPayload\n  updateMedia(input: UpdateMediaInput!): UpdateMediaPayload\n  registerAuthor(input: RegisterAuthorInput!): RegisterAuthorPayload\n  createAuthor(input: CreateAuthorInput!): CreateAuthorPayload\n  updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload\n  setAuthorInstitute(input: SetAuthorInstituteInput!): SetAuthorInstitutePayload\n  setAffiliationIdentifier(input: SetAffiliationIdentifierInput!): SetAffiliationIdentifierPayload\n  setAllowSiteDonations(input: SetAllowSiteDonationsInput!): SetAllowSiteDonationsPayload\n  createInstitute(input: CreateInstituteInput!): CreateInstitutePayload\n  connectStripe(input: ConnectStripeInput!): ConnectStripePayload\n  makeDonation(input: MakeDonationInput!): MakeDonationPayload\n  makeAotmDonation(input: MakeAotmDonationInput!): MakeAotmDonationPayload\n  addDonationInfos(input: AddDonationInfosInput!): AddDonationInfosPayload\n  addComment(input: AddCommentInput!): AddCommentPayload\n  setApplicationStatus(input: SetApplicationStatusInput!): SetApplicationStatusPayload\n  createReward(input: CreateRewardInput!): CreateRewardPayload\n  setRewardActive(input: SetRewardActiveInput!): SetRewardActivePayload\n  markRewardClaimComplete(input: MarkRewardClaimCompleteInput!): MarkRewardClaimCompletePayload\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype Post implements Node {\n  # The ID of an object\n  id: ID!\n  url: String\n  status: String\n  title: String!\n  slug: String!\n  excerpt: String!\n  content: String!\n  editorial: String!\n  date: String\n  modified: String\n\n  # A globally unique ID for this article.\n  citationId: String\n  category: Category!\n  author: User!\n  image: Media\n  comments(after: String, first: Int, before: String, last: Int, page: Int): CommentConnection\n\n  # The total score this article has accumulated\n  totalScore: Float\n}\n\n# A connection to a list of items.\ntype PostConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [PostEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype PostEdge {\n  # The item at the end of the edge\n  node: Post\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput PublishPostInput {\n  id: ID!\n  clientMutationId: String\n}\n\ntype PublishPostPayload {\n  publishedPost: Post\n  clientMutationId: String\n}\n\ntype Query {\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n  postBySlug(slug: String): Post\n  categoryBySlug(slug: String): Category\n  viewer: Viewer\n  auth: Auth\n  authorByHandle(handle: String): User\n}\n\ninput RegisterAuthorInput {\n  firstName: String!\n  lastName: String!\n  email: String!\n  handle: String!\n  password: String!\n  confirmPassword: String!\n  degree: String!\n  customDegree: String\n  fieldOfExpertise: ID!\n  institute: String!\n  instituteCountry: String!\n  facultyWebsite: String!\n  pub1Title: String!\n  pub1Url: String!\n  pub2Title: String!\n  pub2Url: String!\n  notes: String\n  agreement: String!\n  clientMutationId: String\n}\n\ntype RegisterAuthorPayload {\n  clientMutationId: String\n}\n\ninput RevertToRealUserInput {\n  clientMutationId: String\n}\n\ntype RevertToRealUserPayload {\n  authToken: String\n  clientMutationId: String\n}\n\ntype Reward implements Node {\n  # The ID of an object\n  id: ID!\n  title: String!\n  description: String!\n  minAmount: Int!\n  limit: RewardLimit\n  active: Boolean!\n  author: User!\n}\n\ntype RewardClaim implements Node {\n  # The ID of an object\n  id: ID!\n  date: String!\n  modified: String!\n  reward: Reward!\n  status: RewardClaimStatus!\n  donation: Donation!\n}\n\n# A connection to a list of items.\ntype RewardClaimConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [RewardClaimEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype RewardClaimEdge {\n  # The item at the end of the edge\n  node: RewardClaim\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum RewardClaimStatus {\n  # This claim has yet to be fulfilled\n  ACTIVE\n\n  # This claim has been completed\n  COMPLETE\n}\n\n# A connection to a list of items.\ntype RewardConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [RewardEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype RewardEdge {\n  # The item at the end of the edge\n  node: Reward\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ntype RewardLimit {\n  total: Int!\n  available: Int!\n}\n\ninput SetAffiliationIdentifierInput {\n  authorId: ID!\n  identifier: String!\n  clientMutationId: String\n}\n\ntype SetAffiliationIdentifierPayload {\n  updatedAuthor: User\n  clientMutationId: String\n}\n\ninput SetAllowSiteDonationsInput {\n  id: ID!\n  allow: Boolean!\n  clientMutationId: String\n}\n\ntype SetAllowSiteDonationsPayload {\n  updatedAuthor: User\n  clientMutationId: String\n}\n\ninput SetApplicationStatusInput {\n  applicationId: ID!\n  status: ApplicationStatus!\n  clientMutationId: String\n}\n\ntype SetApplicationStatusPayload {\n  application: Application\n  user: User\n  clientMutationId: String\n}\n\ninput SetAuthorInstituteInput {\n  id: ID!\n  institute: ID!\n  clientMutationId: String\n}\n\ntype SetAuthorInstitutePayload {\n  updatedAuthor: User\n  clientMutationId: String\n}\n\ninput SetEffectiveUserInput {\n  effectiveUserId: String!\n  clientMutationId: String\n}\n\ntype SetEffectiveUserPayload {\n  authToken: String\n  clientMutationId: String\n}\n\ninput SetPostEditorialInput {\n  postId: ID!\n  editorial: String!\n  clientMutationId: String\n}\n\ntype SetPostEditorialPayload {\n  updatedPost: Post\n  clientMutationId: String\n}\n\ninput SetPostExcerptInput {\n  postId: ID!\n  excerpt: String!\n  clientMutationId: String\n}\n\ntype SetPostExcerptPayload {\n  updatedPost: Post\n  clientMutationId: String\n}\n\ninput SetRewardActiveInput {\n  reward: ID!\n  active: Boolean!\n  clientMutationId: String\n}\n\ntype SetRewardActivePayload {\n  updatedReward: Reward!\n  clientMutationId: String\n}\n\ninput SignInInput {\n  email: String!\n  password: String!\n  clientMutationId: String\n}\n\ntype SignInPayload {\n  authToken: String\n  clientMutationId: String\n}\n\ninput SubmitPostForReviewInput {\n  id: ID!\n  clientMutationId: String\n}\n\ntype SubmitPostForReviewPayload {\n  post: Post\n  clientMutationId: String\n}\n\ninput UpdateAuthorInput {\n  id: ID!\n  firstName: String\n  lastName: String\n  shortBio: String\n  pictureId: ID\n  profileBio: String\n  profileResearch: String\n  profileIncentive: String\n  profilePublications: String\n  profileRecommendations: String\n  twitterHandle: String\n  facebookPage: String\n  youtubeChannel: String\n  clientMutationId: String\n}\n\ntype UpdateAuthorPayload {\n  updatedAuthor: User\n  clientMutationId: String\n}\n\ninput UpdateMediaInput {\n  id: ID!\n  title: String\n  description: String\n  createdByAuthor: Boolean\n  license: String\n  creator: String\n  originalUrl: String\n  havePermission: Boolean\n  clientMutationId: String\n}\n\ntype UpdateMediaPayload {\n  updatedMedia: Media\n  clientMutationId: String\n}\n\ninput UpdatePostInput {\n  id: ID!\n  title: String\n  content: String\n  imageId: String\n  clientMutationId: String\n}\n\ntype UpdatePostPayload {\n  updatedPost: Post\n  clientMutationId: String\n}\n\ninput UploadMediaInput {\n  clientMutationId: String\n}\n\ntype UploadMediaPayload {\n  newMediaEdge: MediaEdge!\n  clientMutationId: String\n}\n\ntype User implements Node {\n  # The ID of an object\n  id: ID!\n  name: String!\n  firstName: String!\n  lastName: String!\n  slug: String!\n  email: String\n  type: String\n  degree: String\n  fieldOfExpertise: Category\n  affiliation: Affiliation!\n  canReceiveDonations: Boolean!\n  canReceiveSiteDonations: Boolean\n  shortBio: String\n  profileBio: String\n  profileResearch: String\n  profileIncentive: String\n  profilePublications: String\n  profileRecommendations: String\n  picture: Media\n  twitterHandle: String!\n  facebookPage: String!\n  youtubeChannel: String!\n  posts(publishedOnly: Boolean = true, after: String, first: Int, before: String, last: Int, page: Int): PostConnection\n  media(after: String, first: Int, before: String, last: Int, page: Int): MediaConnection\n  donations: Donations\n  rewards(active: Boolean = true, after: String, first: Int, before: String, last: Int, page: Int): RewardConnection\n  rewardClaims(after: String, first: Int, before: String, last: Int, page: Int): RewardClaimConnection\n}\n\n# A connection to a list of items.\ntype UserConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UserEdge!]!\n  morePageInfo: MorePageInfo!\n}\n\n# An edge in a connection.\ntype UserEdge {\n  # The item at the end of the edge\n  node: User\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\n# Common entry-point for paginated objects.\ntype Viewer implements Node {\n  # The ID of an object\n  id: ID!\n  posts(after: String, first: Int, before: String, last: Int, page: Int): PostConnection\n  applications(after: String, first: Int, before: String, last: Int, page: Int): ApplicationConnection\n  authors(after: String, first: Int, before: String, last: Int, page: Int): UserConnection\n  institutes(after: String, first: Int, before: String, last: Int, page: Int, search: String): InstituteConnection\n  categories(after: String, first: Int, before: String, last: Int, page: Int): CategoryConnection!\n  aotm(year: Int, month: Int): AuthorOfTheMonth!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 67,
      "containsCycle": true,
      "numDefinitions": 99
    }
  ],
  "metrics": {
    "created_at": "2017-06-06T13:19:58Z",
    "updated_at": "2019-01-17T15:27:04Z",
    "pushed_at": "2017-10-09T08:14:48Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 1
  }
}