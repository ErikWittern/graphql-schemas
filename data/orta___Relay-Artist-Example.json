{
  "repo_name": "Relay-Artist-Example",
  "repo_full_name": "orta/relay-artist-example",
  "repo_owner": "orta",
  "repo_description": "An example React Native app using Relay to access the Artsy GraphQL API",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "data/schema.graphql",
      "sha": "7c60ca4410376c8ff85af25aefcc4ab795113f18",
      "url": "https://api.github.com/repositories/81137768/contents/data/schema.graphql?ref=6288e9c18cd606414fac2ad14053a9a15f7a18c4",
      "git_url": "https://api.github.com/repositories/81137768/git/blobs/7c60ca4410376c8ff85af25aefcc4ab795113f18",
      "html_url": "https://github.com/orta/Relay-Artist-Example/blob/6288e9c18cd606414fac2ad14053a9a15f7a18c4/data/schema.graphql",
      "content": "schema {\n  query: RootQueryType\n}\n\n# One item in an aggregation\ntype AggregationCount {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  name: String\n  count: Int\n}\n\ntype Article implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  title: String\n  published_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  updated_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  thumbnail_title: String\n  thumbnail_teaser: String\n  author: Author\n  thumbnail_image: Image\n  slug: String\n  href: String\n}\n\nenum ArticleSorts {\n  PUBLISHED_AT_ASC\n  PUBLISHED_AT_DESC\n}\n\ntype Artist implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  href: String\n\n  # Use this attribute to sort by when sorting a collection of Artists\n  sortable_id: String\n  name: String\n  initials(length: Int = 3): String\n  gender: String\n  years: String\n  is_public: Boolean\n  is_consignable: Boolean\n  public: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  consignable: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n\n  # Only specific Artists should show a link to auction results.\n  is_display_auction_link: Boolean\n  display_auction_link: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  has_metadata: Boolean\n  hometown: String\n  location: String\n  nationality: String\n  birthday: String\n  deathday: String\n\n  # A string of the form \"Nationality, Birthday (or Birthday-Deathday)\"\n  formatted_nationality_and_birthday: String\n\n  # The Artist biography article written by Artsy\n  biography: Article\n  alternate_names: [String]\n  meta: ArtistMeta\n  blurb(format: Format): String\n  biography_blurb(\n    # If true, will return featured bio over Artsy one.\n    partner_bio: Boolean = false\n    format: Format\n  ): ArtistBlurb\n  is_shareable: Boolean\n  bio: String\n  counts: ArtistCounts\n  artworks(\n    # The number of Artworks to return\n    size: Int\n    page: Int\n    sort: ArtworkSorts\n    published: Boolean = true\n    filter: [ArtistArtworksFilters]\n    exclude: [String]\n  ): [Artwork]\n\n  # A string showing the total number of works and those for sale\n  formatted_artworks_count: String\n  image: Image\n  artists(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  contemporary(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  carousel: ArtistCarousel\n  statuses: ArtistStatuses\n\n  # Custom-sorted list of shows for an artist, in order of significance.\n  exhibition_highlights(\n    # The number of Shows to return\n    size: Int = 5\n  ): [Show]\n  partner_shows(\n    at_a_fair: Boolean\n    active: Boolean\n    status: String\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    top_tier: Boolean\n    is_reference: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [PartnerShow] @deprecated(reason: \"Prefer to use shows attribute\")\n  shows(\n    at_a_fair: Boolean\n    active: Boolean\n    status: String\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    top_tier: Boolean\n    is_reference: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [Show]\n  partner_artists(\n    # The number of PartnerArtists to return\n    size: Int\n  ): [PartnerArtist]\n  sales(\n    live: Boolean\n    is_auction: Boolean\n\n    # The number of Sales to return\n    size: Int\n    sort: SaleSorts\n  ): [Sale]\n  articles(sort: ArticleSorts, limit: Int): [Article]\n}\n\nenum ArtistArtworksFilters {\n  IS_FOR_SALE\n  IS_NOT_FOR_SALE\n}\n\ntype ArtistBlurb {\n  text: String\n  credit: String\n\n  # The partner id of the partner who submitted the featured bio.\n  partner_id: String\n}\n\ntype ArtistCarousel {\n  images: [Image]\n}\n\ntype ArtistCounts {\n  artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  follows(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  for_sale_artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  partner_shows(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  related_artists(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  articles(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype ArtistItem implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  href: String\n\n  # Use this attribute to sort by when sorting a collection of Artists\n  sortable_id: String\n  name: String\n  initials(length: Int = 3): String\n  gender: String\n  years: String\n  is_public: Boolean\n  is_consignable: Boolean\n  public: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  consignable: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n\n  # Only specific Artists should show a link to auction results.\n  is_display_auction_link: Boolean\n  display_auction_link: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  has_metadata: Boolean\n  hometown: String\n  location: String\n  nationality: String\n  birthday: String\n  deathday: String\n\n  # A string of the form \"Nationality, Birthday (or Birthday-Deathday)\"\n  formatted_nationality_and_birthday: String\n\n  # The Artist biography article written by Artsy\n  biography: Article\n  alternate_names: [String]\n  meta: ArtistMeta\n  blurb(format: Format): String\n  biography_blurb(\n    # If true, will return featured bio over Artsy one.\n    partner_bio: Boolean = false\n    format: Format\n  ): ArtistBlurb\n  is_shareable: Boolean\n  bio: String\n  counts: ArtistCounts\n  artworks(\n    # The number of Artworks to return\n    size: Int\n    page: Int\n    sort: ArtworkSorts\n    published: Boolean = true\n    filter: [ArtistArtworksFilters]\n    exclude: [String]\n  ): [Artwork]\n\n  # A string showing the total number of works and those for sale\n  formatted_artworks_count: String\n  image: Image\n  artists(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  contemporary(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  carousel: ArtistCarousel\n  statuses: ArtistStatuses\n\n  # Custom-sorted list of shows for an artist, in order of significance.\n  exhibition_highlights(\n    # The number of Shows to return\n    size: Int = 5\n  ): [Show]\n  partner_shows(\n    at_a_fair: Boolean\n    active: Boolean\n    status: String\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    top_tier: Boolean\n    is_reference: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [PartnerShow] @deprecated(reason: \"Prefer to use shows attribute\")\n  shows(\n    at_a_fair: Boolean\n    active: Boolean\n    status: String\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    top_tier: Boolean\n    is_reference: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [Show]\n  partner_artists(\n    # The number of PartnerArtists to return\n    size: Int\n  ): [PartnerArtist]\n  sales(\n    live: Boolean\n    is_auction: Boolean\n\n    # The number of Sales to return\n    size: Int\n    sort: SaleSorts\n  ): [Sale]\n  articles(sort: ArticleSorts, limit: Int): [Article]\n}\n\ntype ArtistMeta {\n  title: String\n  description: String\n}\n\ntype ArtistSearchEntity implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  href: String\n\n  # Use this attribute to sort by when sorting a collection of Artists\n  sortable_id: String\n  name: String\n  initials(length: Int = 3): String\n  gender: String\n  years: String\n  is_public: Boolean\n  is_consignable: Boolean\n  public: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  consignable: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n\n  # Only specific Artists should show a link to auction results.\n  is_display_auction_link: Boolean\n  display_auction_link: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  has_metadata: Boolean\n  hometown: String\n  location: String\n  nationality: String\n  birthday: String\n  deathday: String\n\n  # A string of the form \"Nationality, Birthday (or Birthday-Deathday)\"\n  formatted_nationality_and_birthday: String\n\n  # The Artist biography article written by Artsy\n  biography: Article\n  alternate_names: [String]\n  meta: ArtistMeta\n  blurb(format: Format): String\n  biography_blurb(\n    # If true, will return featured bio over Artsy one.\n    partner_bio: Boolean = false\n    format: Format\n  ): ArtistBlurb\n  is_shareable: Boolean\n  bio: String\n  counts: ArtistCounts\n  artworks(\n    # The number of Artworks to return\n    size: Int\n    page: Int\n    sort: ArtworkSorts\n    published: Boolean = true\n    filter: [ArtistArtworksFilters]\n    exclude: [String]\n  ): [Artwork]\n\n  # A string showing the total number of works and those for sale\n  formatted_artworks_count: String\n  image: Image\n  artists(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  contemporary(\n    # The number of Artists to return\n    size: Int\n    exclude_artists_without_artworks: Boolean = true\n  ): [Artist]\n  carousel: ArtistCarousel\n  statuses: ArtistStatuses\n\n  # Custom-sorted list of shows for an artist, in order of significance.\n  exhibition_highlights(\n    # The number of Shows to return\n    size: Int = 5\n  ): [Show]\n  partner_shows(\n    at_a_fair: Boolean\n    active: Boolean\n    status: String\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    top_tier: Boolean\n    is_reference: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [PartnerShow] @deprecated(reason: \"Prefer to use shows attribute\")\n  shows(\n    at_a_fair: Boolean\n    active: Boolean\n    status: String\n\n    # The number of PartnerShows to return\n    size: Int\n    solo_show: Boolean\n    top_tier: Boolean\n    is_reference: Boolean\n    visible_to_public: Boolean\n    sort: PartnerShowSorts\n  ): [Show]\n  partner_artists(\n    # The number of PartnerArtists to return\n    size: Int\n  ): [PartnerArtist]\n  sales(\n    live: Boolean\n    is_auction: Boolean\n\n    # The number of Sales to return\n    size: Int\n    sort: SaleSorts\n  ): [Sale]\n  articles(sort: ArticleSorts, limit: Int): [Article]\n}\n\nenum ArtistSorts {\n  sortable_id_asc\n  sortable_id_desc\n  trending_desc\n}\n\ntype ArtistStatuses {\n  artworks: Boolean\n  shows: Boolean\n  cv: Boolean\n  artists: Boolean\n  contemporary: Boolean\n  articles: Boolean\n  auction_lots: Boolean\n  biography: Boolean\n}\n\ntype Artwork implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  to_s: String\n  href: String\n  title: String\n  category: String\n  medium: String\n  date: String\n  image_rights: String\n  website: String\n  collecting_institution: String\n  partner(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): Partner\n\n  # Returns an HTML string representing the embedded content (video)\n  embed(width: Int = 853, height: Int = 450, autoplay: Boolean = false): String\n  can_share_image: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  is_embeddable_video: Boolean\n  is_shareable: Boolean\n  is_hangable: Boolean\n\n  # True for inquireable artworks that have an exact price.\n  is_purchasable: Boolean\n\n  # Do we want to encourage inquiries on this work?\n  is_inquireable: Boolean\n\n  # Are we able to display a contact form on artwork pages?\n  is_contactable: Boolean @deprecated(reason: \"Prefer to use is_inquireable\")\n\n  # Is this artwork part of an auction?\n  is_in_auction: Boolean\n\n  # Is this artwork part of a current show\n  is_in_show: Boolean\n  is_for_sale: Boolean\n\n  # Is this artwork part of an auction that is currently running?\n  is_biddable: Boolean\n  is_unique: Boolean\n  is_sold: Boolean\n  is_ecommerce: Boolean @deprecated(reason: \"Should not be used to determine anything UI-level\")\n\n  # Whether work can be purchased through e-commerce\n  is_acquireable: Boolean\n\n  # When in an auction, can the work be bought before any bids are placed\n  is_buy_nowable: Boolean\n  is_comparable_with_auction_results: Boolean\n  is_downloadable: Boolean\n  is_price_hidden: Boolean\n  is_price_range: Boolean\n  availability: String\n  sale_message: String\n  artist(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): Artist\n  price: String\n  contact_label: String\n  cultural_maker: String\n  artists(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): [Artist]\n  artist_names: String\n  dimensions: dimensions\n  image: Image\n  images(size: Int): [Image]\n\n  # Returns the associated Fair/Sale/PartnerShow\n  context: ArtworkContext\n\n  # Returns the highlighted shows and articles\n  highlights: [Highlighted]\n  articles(size: Int): [Article]\n  shows(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): [PartnerShow]\n  show(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): PartnerShow\n  sale_artwork: SaleArtwork\n  sale: Sale\n  fair: Fair\n  edition_of: String\n  edition_sets: [EditionSet]\n  description(format: Format): String\n  exhibition_history(format: Format): String\n  provenance(format: Format): String\n  signature(format: Format): String\n  additional_information(format: Format): String\n  literature(format: Format): String\n  publisher(format: Format): String\n  manufacturer(format: Format): String\n  series(format: Format): String\n  meta: ArtworkMeta\n  related(size: Int): [Artwork]\n  layer(id: String): ArtworkLayer\n  layers: [ArtworkLayer]\n}\n\nenum ArtworkAggregation {\n  PRICE_RANGE\n  DIMENSION_RANGE\n  COLOR\n  PERIOD\n  MAJOR_PERIOD\n  PARTNER_CITY\n  MEDIUM\n  GALLERY\n  INSTITUTION\n  TOTAL\n  FOLLOWED_ARTISTS\n  MERCHANDISABLE_ARTISTS\n}\n\nunion ArtworkContext = ArtworkContextAuction | ArtworkContextSale | ArtworkContextFair | ArtworkContextPartnerShow\n\ntype ArtworkContextAuction {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  name: String\n  href: String\n  description: String\n  sale_type: String\n  is_auction: Boolean\n  is_auction_promo: Boolean\n  is_preview: Boolean\n  is_open: Boolean\n  is_live_open: Boolean\n  is_closed: Boolean\n  is_with_buyers_premium: Boolean\n  auction_state: String @deprecated(reason: \"Favor `status` for consistency with other models\")\n  status: String\n  registration_ends_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  live_start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  event_start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  event_end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  currency: String\n  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]\n  artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  cover_image: Image\n  sale_artwork(id: String!): SaleArtwork\n  profile: Profile\n\n  # A bid increment policy that explains minimum bids in ranges.\n  bid_increments: [BidIncrement]\n\n  # Auction's buyer's premium policy.\n  buyers_premium: [BuyersPremium]\n}\n\ntype ArtworkContextFair {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  banner_size: String\n  profile: Profile\n  has_full_feature: Boolean\n  has_homepage_section: Boolean\n  has_listing: Boolean\n  has_large_banner: Boolean\n  href: String\n  image: Image\n  location: Location\n\n  # Are we currently in the fair's active period?\n  is_active: Boolean\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  name: String\n  tagline: String\n  published: Boolean @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  is_published: Boolean\n  organizer: organizer\n}\n\ntype ArtworkContextPartnerShow implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  href: String\n  kind: String\n\n  # The exhibition title\n  name: String\n  description: String\n  type: String\n  displayable: Boolean @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  press_release(format: Format): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  artists: [Artist]\n  partner: Partner\n  fair: Fair\n  location: Location\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  events: [PartnerShowEventType]\n  counts: PartnerShowCounts\n  artworks(\n    # Number of artworks to return\n    size: Int = 25\n    published: Boolean = true\n    page: Int = 1\n    all: Boolean\n    for_sale: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  meta_image: Image\n  cover_image: Image\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n}\n\ntype ArtworkContextSale {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  name: String\n  href: String\n  description: String\n  sale_type: String\n  is_auction: Boolean\n  is_auction_promo: Boolean\n  is_preview: Boolean\n  is_open: Boolean\n  is_live_open: Boolean\n  is_closed: Boolean\n  is_with_buyers_premium: Boolean\n  auction_state: String @deprecated(reason: \"Favor `status` for consistency with other models\")\n  status: String\n  registration_ends_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  live_start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  event_start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  event_end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  currency: String\n  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]\n  artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  cover_image: Image\n  sale_artwork(id: String!): SaleArtwork\n  profile: Profile\n\n  # A bid increment policy that explains minimum bids in ranges.\n  bid_increments: [BidIncrement]\n\n  # Auction's buyer's premium policy.\n  buyers_premium: [BuyersPremium]\n}\n\ntype ArtworkLayer {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  type: String\n  name: String\n  href: String\n  description: String\n  artworks: [Artwork]\n}\n\ntype ArtworkMeta {\n  title: String\n  description(limit: Int = 155): String\n  image: String\n}\n\n# The results for one of the requested aggregations\ntype ArtworksAggregationResults {\n  slice: ArtworkAggregation\n  counts: [AggregationCount]\n}\n\ntype ArtworkSearchEntity implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  to_s: String\n  href: String\n  title: String\n  category: String\n  medium: String\n  date: String\n  image_rights: String\n  website: String\n  collecting_institution: String\n  partner(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): Partner\n\n  # Returns an HTML string representing the embedded content (video)\n  embed(width: Int = 853, height: Int = 450, autoplay: Boolean = false): String\n  can_share_image: Boolean @deprecated(reason: \"Favor `is_`-prefixed boolean attributes\")\n  is_embeddable_video: Boolean\n  is_shareable: Boolean\n  is_hangable: Boolean\n\n  # True for inquireable artworks that have an exact price.\n  is_purchasable: Boolean\n\n  # Do we want to encourage inquiries on this work?\n  is_inquireable: Boolean\n\n  # Are we able to display a contact form on artwork pages?\n  is_contactable: Boolean @deprecated(reason: \"Prefer to use is_inquireable\")\n\n  # Is this artwork part of an auction?\n  is_in_auction: Boolean\n\n  # Is this artwork part of a current show\n  is_in_show: Boolean\n  is_for_sale: Boolean\n\n  # Is this artwork part of an auction that is currently running?\n  is_biddable: Boolean\n  is_unique: Boolean\n  is_sold: Boolean\n  is_ecommerce: Boolean @deprecated(reason: \"Should not be used to determine anything UI-level\")\n\n  # Whether work can be purchased through e-commerce\n  is_acquireable: Boolean\n\n  # When in an auction, can the work be bought before any bids are placed\n  is_buy_nowable: Boolean\n  is_comparable_with_auction_results: Boolean\n  is_downloadable: Boolean\n  is_price_hidden: Boolean\n  is_price_range: Boolean\n  availability: String\n  sale_message: String\n  artist(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): Artist\n  price: String\n  contact_label: String\n  cultural_maker: String\n  artists(\n    # Use whatever is in the original response instead of making a request\n    shallow: Boolean\n  ): [Artist]\n  artist_names: String\n  dimensions: dimensions\n  image: Image\n  images(size: Int): [Image]\n\n  # Returns the associated Fair/Sale/PartnerShow\n  context: ArtworkContext\n\n  # Returns the highlighted shows and articles\n  highlights: [Highlighted]\n  articles(size: Int): [Article]\n  shows(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): [PartnerShow]\n  show(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): PartnerShow\n  sale_artwork: SaleArtwork\n  sale: Sale\n  fair: Fair\n  edition_of: String\n  edition_sets: [EditionSet]\n  description(format: Format): String\n  exhibition_history(format: Format): String\n  provenance(format: Format): String\n  signature(format: Format): String\n  additional_information(format: Format): String\n  literature(format: Format): String\n  publisher(format: Format): String\n  manufacturer(format: Format): String\n  series(format: Format): String\n  meta: ArtworkMeta\n  related(size: Int): [Artwork]\n  layer(id: String): ArtworkLayer\n  layers: [ArtworkLayer]\n}\n\nenum ArtworkSorts {\n  title_asc\n  title_desc\n  created_at_asc\n  created_at_desc\n  deleted_at_asc\n  deleted_at_desc\n  iconicity_desc\n  merchandisability_desc\n  published_at_asc\n  published_at_desc\n  partner_updated_at_desc\n  availability_desc\n}\n\ntype Author {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  name: String\n  profile_handle: String\n  href: String @deprecated(reason: \"Profiles have been removed and thus author hrefs don't exist anymore.\")\n}\n\ntype Bidder {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  created_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  pin: String\n  sale: Sale\n  qualified_for_bidding: Boolean\n}\n\ntype BidderPosition {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  created_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  updated_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  processed_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  is_active: Boolean\n  is_retracted: Boolean\n  is_with_bid_max: Boolean\n  is_winning: Boolean\n  max_bid: BidderPositionMaxBid\n  suggested_next_bid: BidderPositionSuggestedNextBid\n  sale_artwork: SaleArtwork\n  highest_bid: HighestBid\n  display_max_bid_amount_dollars: String @deprecated(reason: \"Favor `max_bid`\")\n  display_suggested_next_bid_dollars: String @deprecated(reason: \"Favor `suggested_next_bid`\")\n  max_bid_amount_cents: Int @deprecated(reason: \"Favor `max_bid`\")\n  suggested_next_bid_cents: Int @deprecated(reason: \"Favor `suggested_next_bid`\")\n}\n\ntype BidderPositionMaxBid {\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n}\n\ntype BidderPositionSuggestedNextBid {\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n}\n\ntype BidIncrement {\n  from: Int\n  to: Int\n  amount: Int\n}\n\ntype BuyersPremium {\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n  cents: Int\n  percent: Float\n}\n\nenum CategoryType {\n  GALLERY\n  INSTITUTION\n}\n\ntype coordinates {\n  lat: Float\n  lng: Float\n}\n\ntype CroppedImageUrl {\n  width: Int\n  height: Int\n  url: String\n}\n\ntype DaySchedule {\n  start_time: Int\n  end_time: Int\n  day_of_week: String\n}\n\ntype DeepZoom {\n  Image: DeepZoomImage\n}\n\ntype DeepZoomImage {\n  xmlns: String\n  Url: String\n  Format: String\n  TileSize: Int\n  Overlap: Int\n  Size: DeepZoomImageSize\n}\n\ntype DeepZoomImageSize {\n  Width: Int\n  Height: Int\n}\n\ntype dimensions {\n  in: String\n  cm: String\n}\n\ntype EditionSet {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  dimensions: dimensions\n  edition_of: String\n  is_acquireable: Boolean\n  is_sold: Boolean\n  is_for_sale: Boolean\n  price: String\n}\n\nenum EventStatus {\n  current\n  running\n  closed\n  upcoming\n}\n\ntype ExternalPartner {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  name: String\n  city: String\n}\n\ntype Fair {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  banner_size: String\n  profile: Profile\n  has_full_feature: Boolean\n  has_homepage_section: Boolean\n  has_listing: Boolean\n  has_large_banner: Boolean\n  href: String\n  image: Image\n  location: Location\n\n  # Are we currently in the fair's active period?\n  is_active: Boolean\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  name: String\n  tagline: String\n  published: Boolean @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  is_published: Boolean\n  organizer: organizer\n}\n\nenum FairSorts {\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  START_AT_ASC\n  START_AT_DESC\n  NAME_ASC\n  NAME_DESC\n}\n\ntype FeaturedLinkItem {\n  # Attempt to get the ID of the entity of the FeaturedLink\n  id: String\n  title: String\n  initials(length: Int = 3): String\n  subtitle: String\n  href: String\n  image: Image\n}\n\ntype FilterArtworks {\n  # Artwork results.\n  hits: [Artwork]\n  total: Int\n  followed_artists_total: Int\n\n  # Returns a list of merchandisable artists sorted by merch score.\n  merchandisable_artists: [Artist]\n\n  # Returns aggregation counts for the given filter query.\n  aggregations: [ArtworksAggregationResults]\n}\n\ntype FilterPartners {\n  hits: [Partner]\n  total: Int\n  aggregations: [PartnersAggregationResults]\n}\n\ntype FollowArtistCounts {\n  artists: Int\n}\n\ntype FollowArtists {\n  artists: [Artist]\n  counts: FollowArtistCounts\n}\n\nenum Format {\n  HTML\n  PLAIN\n  markdown\n}\n\n# The `FormattedNumber` type represents a number that can optionally be returnedas\n# a formatted String. It does not try to coerce the type.\nscalar FormattedNumber\n\ntype Gene implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    size: Int\n    sort: String\n  ): FilterArtworks\n  href: String\n  name: String\n  description: String\n  image: Image\n  artists: [Artist]\n  trending_artists(sample: Int): [Artist]\n}\n\ntype GeneItem implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    size: Int\n    sort: String\n  ): FilterArtworks\n  href: String\n  name: String\n  description: String\n  image: Image\n  artists: [Artist]\n  trending_artists(sample: Int): [Artist]\n}\n\ntype HighestBid {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  created_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  number: Int\n  is_cancelled: Boolean\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n  cents: Int\n  display: String\n  amount_cents: Int @deprecated(reason: \"Favor `cents`\")\n  display_amount_dollars: String @deprecated(reason: \"Favor `display`\")\n}\n\nunion Highlighted = HighlightedShow | HighlightedArticle\n\ntype HighlightedArticle implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  title: String\n  published_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  updated_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  thumbnail_title: String\n  thumbnail_teaser: String\n  author: Author\n  thumbnail_image: Image\n  slug: String\n  href: String\n}\n\ntype HighlightedShow implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  href: String\n  kind: String\n\n  # The exhibition title\n  name: String\n  description: String\n  type: String\n  displayable: Boolean @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  press_release(format: Format): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  artists: [Artist]\n  partner: Partner\n  fair: Fair\n  location: Location\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  events: [PartnerShowEventType]\n  counts: PartnerShowCounts\n  artworks(\n    # Number of artworks to return\n    size: Int = 25\n    published: Boolean = true\n    page: Int = 1\n    all: Boolean\n    for_sale: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  meta_image: Image\n  cover_image: Image\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n}\n\ntype HomePage {\n  # Single artwork module to show on the home screen\n  artwork_module(\n    # Module key\n    key: String\n\n    # ID of generic gene rail to target\n    id: String\n\n    # ID of generic gene rail to target\n    generic_gene_id: String\n\n    # ID of followed artist to target for related artist rails\n    followed_artist_id: String\n\n    # ID of related artist to target for related artist rails\n    related_artist_id: String\n  ): HomePageArtworkModule\n\n  # Artwork modules to show on the home screen\n  artwork_modules(\n    # Maximum number of modules to return, disable limit with a negative number\n    max_rails: Int = 8\n\n    # Maximum number of followed genes to return, disable with a negative number\n    max_followed_gene_rails: Int = 1\n\n    # The preferred order of modules, defaults to order returned by Gravity\n    order: [HomePageArtworkModuleTypes]\n  ): [HomePageArtworkModule]\n\n  # Single artist module to show on the home screen.\n  artist_module(\n    # Module identifier.\n    key: HomePageArtistModuleTypes\n  ): HomePageArtistModule\n\n  # Artist modules to show on the home screen\n  artist_modules: [HomePageArtistModule]\n\n  # A list of enabled hero units to show on the requested platform\n  hero_units(platform: HomePageHeroUnitPlatform!): [HomePageHeroUnit]\n}\n\ntype HomePageArtistModule implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # Module identifier.\n  key: String\n  results: [Artist]\n}\n\nenum HomePageArtistModuleTypes {\n  # Artists recommended for the specific user.\n  SUGGESTED\n\n  # The trending artists.\n  TRENDING\n\n  # The most searched for artists.\n  POPULAR\n}\n\ntype HomePageArtworkModule implements Node {\n  # A globally unique ID.\n  __id: ID!\n  key: String\n  display: String @deprecated(reason: \"Favor `is_`-prefixed Booleans (*and* this should be a Boolean)\")\n  is_displayable: Boolean\n  params: HomePageModulesParams\n  context: HomePageModuleContext\n  title: String\n  results: [Artwork]\n}\n\nenum HomePageArtworkModuleTypes {\n  ACTIVE_BIDS\n  FOLLOWED_ARTISTS\n  FOLLOWED_GALLERIES\n  SAVED_WORKS\n  RECOMMENDED_WORKS\n  LIVE_AUCTIONS\n  CURRENT_FAIRS\n  FOLLOWED_ARTIST\n  RELATED_ARTISTS\n  FOLLOWED_GENES\n  GENERIC_GENES\n}\n\ntype HomePageHeroUnit {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  heading: String\n  href: String\n  title: String\n\n  # The image to show, on desktop this defaults to the wide version.\n  background_image_url(version: HomePageHeroUnitImageVersion): String\n}\n\nenum HomePageHeroUnitImageVersion {\n  WIDE\n  NARROW\n}\n\nenum HomePageHeroUnitPlatform {\n  MOBILE\n  DESKTOP\n  MARTSY\n}\n\nunion HomePageModuleContext = HomePageModuleContextFair | HomePageModuleContextSale | HomePageModuleContextGene | HomePageModuleContextTrending | HomePageModuleContextFollowArtists | HomePageModuleContextRelatedArtist | HomePageModuleContextFollowedArtist\n\ntype HomePageModuleContextFair {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  banner_size: String\n  profile: Profile\n  has_full_feature: Boolean\n  has_homepage_section: Boolean\n  has_listing: Boolean\n  has_large_banner: Boolean\n  href: String\n  image: Image\n  location: Location\n\n  # Are we currently in the fair's active period?\n  is_active: Boolean\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  name: String\n  tagline: String\n  published: Boolean @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n  is_published: Boolean\n  organizer: organizer\n}\n\ntype HomePageModuleContextFollowArtists {\n  artists: [Artist]\n  counts: FollowArtistCounts\n}\n\ntype HomePageModuleContextFollowedArtist {\n  artist: Artist\n}\n\ntype HomePageModuleContextGene implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n\n  # Artworks Elastic Search results\n  filtered_artworks(\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    size: Int\n    sort: String\n  ): FilterArtworks\n  href: String\n  name: String\n  description: String\n  image: Image\n  artists: [Artist]\n  trending_artists(sample: Int): [Artist]\n}\n\ntype HomePageModuleContextRelatedArtist {\n  artist: Artist\n  based_on: Artist\n}\n\ntype HomePageModuleContextSale {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  name: String\n  href: String\n  description: String\n  sale_type: String\n  is_auction: Boolean\n  is_auction_promo: Boolean\n  is_preview: Boolean\n  is_open: Boolean\n  is_live_open: Boolean\n  is_closed: Boolean\n  is_with_buyers_premium: Boolean\n  auction_state: String @deprecated(reason: \"Favor `status` for consistency with other models\")\n  status: String\n  registration_ends_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  live_start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  event_start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  event_end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  currency: String\n  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]\n  artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  cover_image: Image\n  sale_artwork(id: String!): SaleArtwork\n  profile: Profile\n\n  # A bid increment policy that explains minimum bids in ranges.\n  bid_increments: [BidIncrement]\n\n  # Auction's buyer's premium policy.\n  buyers_premium: [BuyersPremium]\n}\n\ntype HomePageModuleContextTrending {\n  artists: [Artist]\n}\n\ntype HomePageModulesParams {\n  gene_id: String\n  medium: String\n  price_range: String\n  id: ID\n  followed_artist_id: ID\n  related_artist_id: ID\n}\n\ntype Image {\n  # A type-specific ID.\n  id: String\n  href: String\n  title: String\n  width: Int\n  height: Int\n  orientation: String\n  aspect_ratio: Float\n  versions: [String]\n  caption: String\n  is_default: Boolean\n  position: Int\n  url(version: [String]): String\n  cropped(width: Int!, height: Int!, version: [String]): CroppedImageUrl\n  resized(width: Int, height: Int, version: [String]): ResizedImageUrl\n  deep_zoom: DeepZoom\n  is_zoomable: Boolean\n\n  # Value to use when `padding-bottom` for fluid image placeholders\n  placeholder: String\n}\n\nunion Item = ArtistItem | FeaturedLinkItem | GeneItem\n\ntype Location {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  city: String\n  country: String\n  coordinates: coordinates\n  display: String\n  address: String\n  address_2: String\n  postal_code: String\n  state: String\n  phone: String\n  day_schedules: [DaySchedule]\n}\n\ntype LotStanding {\n  bidder: Bidder\n  sale_artwork: SaleArtwork\n\n  # You are winning and reserve is met\n  is_highest_bidder: Boolean\n\n  # You are the leading bidder without regard to reserve\n  is_leading_bidder: Boolean\n\n  # Your bid if it is currently winning\n  active_bid: BidderPosition\n\n  # Your most recent bid—which is not necessarily winning (may be higher or lower)\n  most_recent_bid: BidderPosition\n}\n\ntype Me {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  type: String\n  created_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  email: String\n  name: String\n  paddle_number: String\n\n  # A list of the current user’s bidder registrations\n  bidders(\n    # The slug or ID of a Sale\n    sale_id: String\n  ): [Bidder]\n\n  # The current user's status relating to bids on artworks\n  bidder_status(sale_id: String!, artwork_id: String!): LotStanding\n\n  # A list of the current user's bidder positions\n  bidder_positions(\n    # Only the most recent bidder positions per artwork.\n    current: Boolean\n\n    # Only the bidder positions on a specific artwork\n    artwork_id: String\n\n    # Only the bidder positions for a specific auction\n    sale_id: String\n  ): [BidderPosition]\n\n  # The current user's status relating to bids on artworks\n  lot_standing(sale_id: String!, artwork_id: String!): LotStanding\n\n  # A list of the current user's auction standings for given lots\n  lot_standings(\n    # Only the lot standings for currently open or closed auctions.\n    live: Boolean\n\n    # Only includes lots on which you have a leading bidder position.\n    active_positions: Boolean\n\n    # Only the lot standings on a specific artwork\n    artwork_id: String\n\n    # Only the lot standings for a specific auction\n    sale_id: String\n  ): [LotStanding]\n  sale_registrations(\n    size: Int\n\n    # Limit by auction.\n    is_auction: Boolean = true\n\n    # Limit by published status.\n    published: Boolean = true\n\n    # Limit by live status.\n    live: Boolean = true\n    sort: SaleSorts\n  ): [SaleRegistration]\n\n  # A list of the current user’s artist follows\n  follow_artists(size: Int, page: Int): FollowArtists\n\n  # A list of the current user’s suggested artists, based on a single artist\n  suggested_artists(\n    # The slug or ID of an artist\n    artist_id: String\n\n    # Exclude artists without for sale works\n    exclude_artists_without_forsale_artworks: Boolean\n\n    # Exclude artists without any artworks\n    exclude_artists_without_artworks: Boolean\n\n    # Exclude artists the user already follows\n    exclude_followed_artists: Boolean\n\n    # Amount of artists to return\n    size: Int\n\n    # Pagination, need I say more?\n    page: Int\n  ): [Artist]\n}\n\ninput Near {\n  lat: Float!\n  lng: Float!\n  max_distance: Float\n}\n\n# An object with a Globally Unique ID\ninterface Node {\n  # The ID of the object.\n  __id: ID!\n}\n\ntype OrderedSet {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  key: String\n  name: String\n  description: String\n  item_type: String\n  items: [Item]\n}\n\ntype organizer {\n  profile_id: ID\n}\n\ntype Partner implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  name: String\n  collecting_institution: String\n  is_default_profile_public: Boolean\n  has_fair_partnership: Boolean\n  type: String\n  href: String\n  is_linkable: Boolean\n  is_pre_qualify: Boolean\n  initials(length: Int = 3): String\n  default_profile_id: String\n  profile: Profile\n  shows(size: Int, sort: PartnerShowSorts, status: EventStatus, fair_id: String, near: Near, displayable: Boolean = true, featured: Boolean, at_a_fair: Boolean): [PartnerShow]\n  artworks(size: Int, for_sale: Boolean, sort: ArtworkSorts, exclude: [String]): [Artwork]\n  locations(size: Int = 25): [Location]\n  contact_message: String\n  counts: PartnerCounts\n}\n\ntype PartnerArtist {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  counts: PartnerArtistCounts\n  is_display_on_partner_profile: Boolean\n  is_represented_by: Boolean\n  sortable_id: String\n  is_use_default_biography: Boolean\n  biography: String\n  partner: Partner\n  artist: Artist\n}\n\ntype PartnerArtistCounts {\n  artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  for_sale_artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype PartnerCategory {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n  cached: Int\n  name: String\n  category_type: CategoryType\n  partners(\n    size: Int\n    page: Int\n\n    # Coordinates to find partners closest to\n    near: String\n\n    # Indicates tier 1/2 for gallery, 1 for institution\n    eligible_for_primary_bucket: Boolean\n\n    # Indicates tier 3/4 for gallery, 2 for institution\n    eligible_for_secondary_bucket: Boolean\n\n    # Indicates an active subscription\n    eligible_for_listing: Boolean\n    eligible_for_carousel: Boolean\n    has_full_profile: Boolean\n    default_profile_public: Boolean\n    sort: PartnersSortType\n\n    #\n    #         Only return partners of the specified partner categories.\n    #         Accepts list of slugs.\n    #       \n    partner_categories: [String]\n    type: [PartnerClassification]\n\n    # term used for searching Partners\n    term: String\n  ): [Partner]\n}\n\nenum PartnerClassification {\n  AUCTION\n  DEMO\n  GALLERY\n  PRIVATE_COLLECTOR\n  PRIVATE_DEALER\n  INSTITUTION\n  INSTITUTIONAL_SELLER\n  BRAND\n}\n\ntype PartnerCounts {\n  artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  artists(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  partner_artists(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  eligible_artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  published_for_sale_artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  published_not_for_sale_artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  shows(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  displayable_shows(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  current_displayable_shows(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  artist_documents(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n  partner_show_documents(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\nenum PartnersAggregation {\n  LOCATION\n  CATEGORY\n  TOTAL\n}\n\n# The results for one of the requested aggregations\ntype PartnersAggregationResults {\n  slice: PartnersAggregation\n  counts: [AggregationCount]\n}\n\ntype PartnerShow implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  href: String\n  kind: String\n\n  # The exhibition title\n  name: String\n  description: String\n  type: String\n  displayable: Boolean @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  press_release(format: Format): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  artists: [Artist]\n  partner: Partner\n  fair: Fair\n  location: Location\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  events: [PartnerShowEventType]\n  counts: PartnerShowCounts\n  artworks(\n    # Number of artworks to return\n    size: Int = 25\n    published: Boolean = true\n    page: Int = 1\n    all: Boolean\n    for_sale: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  meta_image: Image\n  cover_image: Image\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n}\n\ntype PartnerShowCounts {\n  artworks(\n    # The slug or ID of an artist in the show.\n    artist_id: String\n  ): Int\n  eligible_artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype PartnerShowEventType {\n  title: String\n  description: String\n  event_type: String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n}\n\ntype PartnerShowSearchEntity implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  href: String\n  kind: String\n\n  # The exhibition title\n  name: String\n  description: String\n  type: String\n  displayable: Boolean @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  press_release(format: Format): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  artists: [Artist]\n  partner: Partner\n  fair: Fair\n  location: Location\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  events: [PartnerShowEventType]\n  counts: PartnerShowCounts\n  artworks(\n    # Number of artworks to return\n    size: Int = 25\n    published: Boolean = true\n    page: Int = 1\n    all: Boolean\n    for_sale: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  meta_image: Image\n  cover_image: Image\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n}\n\nenum PartnerShowSorts {\n  created_at_asc\n  created_at_desc\n  end_at_asc\n  end_at_desc\n  start_at_asc\n  start_at_desc\n  name_asc\n  name_desc\n  publish_at_asc\n  publish_at_desc\n}\n\nenum PartnersSortType {\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  SORTABLE_ID_ASC\n  SORTABLE_ID_DESC\n  RELATIVE_SIZE_ASC\n  RELATIVE_SIZE_DESC\n  PUBLISHED_AT_DESC\n  RANDOM_SCORE_DESC\n}\n\nunion PartnerTypes = Partner | ExternalPartner\n\ntype Profile {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  name: String\n  image: Image\n  initials(length: Int = 3): String\n  icon: Image\n  href: String\n  is_published: Boolean\n  bio: String\n  counts: ProfileCounts\n}\n\ntype ProfileCounts {\n  follows(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype ProfileSearchEntity {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  name: String\n  image: Image\n  initials(length: Int = 3): String\n  icon: Image\n  href: String\n  is_published: Boolean\n  bio: String\n  counts: ProfileCounts\n}\n\ntype ResizedImageUrl {\n  factor: Float\n  width: Int\n  height: Int\n  url: String\n}\n\nenum Role {\n  PARTICIPANT\n  OPERATOR\n}\n\ntype RootQueryType {\n  # Fetches an object given its Globally Unique ID\n  node(\n    # The ID of the object\n    __id: ID!\n  ): Node\n  status: Status\n\n  # An Article\n  article(\n    # The ID of the Article\n    id: String!\n  ): Article\n\n  # A list of Articles\n  articles(show_id: String, sort: ArticleSorts, published: Boolean = true): [Article]\n\n  # An Artwork\n  artwork(\n    # The slug or ID of the Artwork\n    id: String!\n  ): Artwork\n\n  # A list of Artworks\n  artworks(ids: [String]): [Artwork]\n\n  # An Artist\n  artist(\n    # The slug or ID of the Artist\n    id: String!\n  ): Artist\n\n  # A list of Artists\n  artists(size: Int, sort: ArtistSorts): [Artist]\n\n  # An External Partner not on the platform\n  external_partner(\n    # The ID of the Partner\n    id: String!\n  ): ExternalPartner\n\n  # A Fair\n  fair(\n    # The slug or ID of the Fair\n    id: String!\n  ): Fair\n\n  # A list of Fairs\n  fairs(size: Int, page: Int, sort: FairSorts, status: EventStatus, fair_organizer_id: String, near: Near, has_full_feature: Boolean, has_homepage_section: Boolean, has_listing: Boolean): [Fair]\n  gene(\n    # The slug or ID of the Gene\n    id: String!\n  ): Gene\n\n  # Home screen content\n  home_page: HomePage\n\n  # A Profile\n  profile(\n    # The slug or ID of the Profile\n    id: String!\n  ): Profile\n\n  # A collection of OrderedSets\n  ordered_sets(\n    # Key to the OrderedSet or group of OrderedSets\n    key: String!\n    public: Boolean = true\n  ): [OrderedSet]\n\n  # A Partner\n  partner(\n    # The slug or ID of the Partner\n    id: String!\n  ): Partner\n\n  # A list of Partners\n  partners(\n    size: Int\n    page: Int\n\n    # Coordinates to find partners closest to\n    near: String\n\n    # Indicates tier 1/2 for gallery, 1 for institution\n    eligible_for_primary_bucket: Boolean\n\n    # Indicates tier 3/4 for gallery, 2 for institution\n    eligible_for_secondary_bucket: Boolean\n\n    # Indicates an active subscription\n    eligible_for_listing: Boolean\n    eligible_for_carousel: Boolean\n    has_full_profile: Boolean\n    default_profile_public: Boolean\n    sort: PartnersSortType\n\n    #\n    #         Only return partners of the specified partner categories.\n    #         Accepts list of slugs.\n    #       \n    partner_categories: [String]\n    type: [PartnerClassification]\n\n    # term used for searching Partners\n    term: String\n  ): [Partner]\n\n  # Partners Elastic Search results\n  filter_partners(\n    size: Int\n    page: Int\n\n    # Coordinates to find partners closest to\n    near: String\n\n    # Indicates tier 1/2 for gallery, 1 for institution\n    eligible_for_primary_bucket: Boolean\n\n    # Indicates tier 3/4 for gallery, 2 for institution\n    eligible_for_secondary_bucket: Boolean\n\n    # Indicates an active subscription\n    eligible_for_listing: Boolean\n    eligible_for_carousel: Boolean\n    has_full_profile: Boolean\n    default_profile_public: Boolean\n    sort: PartnersSortType\n\n    #\n    #         Only return partners of the specified partner categories.\n    #         Accepts list of slugs.\n    #       \n    partner_categories: [String]\n    type: [PartnerClassification]\n\n    # term used for searching Partners\n    term: String\n    aggregations: [PartnersAggregation]!\n  ): FilterPartners\n\n  # Artworks Elastic Search results\n  filter_artworks(\n    aggregation_partner_cities: [String]\n    aggregations: [ArtworkAggregation]\n    artist_id: String\n    color: String\n    dimension_range: String\n    extra_aggregation_gene_ids: [String]\n    include_artworks_by_followed_artists: Boolean\n    for_sale: Boolean\n    gene_id: String\n    gene_ids: [String]\n    height: String\n    width: String\n\n    # A string from the list of allocations, or * to denote all mediums\n    medium: String\n    period: String\n    periods: [String]\n    major_periods: [String]\n    partner_id: ID\n    partner_cities: [String]\n    price_range: String\n    page: Int\n    size: Int\n    sort: String\n  ): FilterArtworks\n\n  # A PartnerCategory\n  partner_category(\n    # The slug or ID of the PartnerCategory\n    id: String!\n  ): PartnerCategory\n\n  # A list of PartnerCategories\n  partner_categories(\n    size: Int\n    category_type: CategoryType\n\n    # Filter by whether category is internal\n    internal: Boolean = false\n  ): [PartnerCategory]\n\n  # A Partner Show\n  partner_show(\n    # The slug or ID of the PartnerShow\n    id: String!\n  ): PartnerShow\n\n  # A list of PartnerShows\n  partner_shows(size: Int, sort: PartnerShowSorts, status: EventStatus, fair_id: String, partner_id: String, near: Near, displayable: Boolean = true, featured: Boolean, at_a_fair: Boolean): [PartnerShow]\n\n  # A Sale\n  sale(\n    # The slug or ID of the Sale\n    id: String!\n  ): Sale\n\n  # A list of Sales\n  sales(\n    size: Int\n\n    # Limit by auction.\n    is_auction: Boolean = true\n\n    # Limit by published status.\n    published: Boolean = true\n\n    # Limit by live status.\n    live: Boolean = true\n    sort: SaleSorts\n  ): [Sale]\n\n  # A Sale Artwork\n  sale_artwork(\n    # The slug or ID of the SaleArtwork\n    id: String!\n  ): SaleArtwork\n\n  # A Search\n  search(\n    # Your search term\n    term: String!\n  ): Search\n\n  # A Show\n  show(\n    # The slug or ID of the Show\n    id: String!\n  ): Show\n\n  # Trending artists\n  trending_artists(\n    # Trending method\n    method: String = \"fetch\"\n\n    # Trending metric name\n    name: TrendingMetrics!\n\n    # Number of results to return\n    size: Int = 40\n\n    # Fetch the top artists for each metric within double the base time period\n    double_time_period: Boolean = false\n  ): TrendingArtists\n  me: Me\n\n  # Creates, and authorizes, a JWT custom for Causality\n  causality_jwt(\n    # The id of the auction to participate in\n    sale_id: String!\n    role: Role\n  ): String\n}\n\ntype Sale {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  name: String\n  href: String\n  description: String\n  sale_type: String\n  is_auction: Boolean\n  is_auction_promo: Boolean\n  is_preview: Boolean\n  is_open: Boolean\n  is_live_open: Boolean\n  is_closed: Boolean\n  is_with_buyers_premium: Boolean\n  auction_state: String @deprecated(reason: \"Favor `status` for consistency with other models\")\n  status: String\n  registration_ends_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  live_start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  event_start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  event_end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  currency: String\n  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]\n  artworks(\n    page: Int = 1\n    size: Int = 25\n    all: Boolean = false\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  cover_image: Image\n  sale_artwork(id: String!): SaleArtwork\n  profile: Profile\n\n  # A bid increment policy that explains minimum bids in ranges.\n  bid_increments: [BidIncrement]\n\n  # Auction's buyer's premium policy.\n  buyers_premium: [BuyersPremium]\n}\n\ntype SaleArtwork {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  sale_id: String\n  sale: Sale\n  position: Int\n  lot_number: String\n\n  # Currency abbreviation (e.g. \"USD\")\n  currency: String\n\n  # Currency symbol (e.g. \"$\")\n  symbol: String\n  reserve_status: String\n  is_with_reserve: Boolean\n  is_bid_on: Boolean\n\n  # Can bids be placed on the artwork?\n  is_biddable: Boolean\n  reserve_message: String\n  reserve: SaleArtworkReserve\n  low_estimate: SaleArtworkLowEstimate\n  high_estimate: SaleArtworkHighEstimate\n  opening_bid: SaleArtworkOpeningBid\n  minimum_next_bid: SaleArtworkMinimumNextBid\n  current_bid: SaleArtworkCurrentBid\n  highest_bid: SaleArtworkHighestBid\n  artwork: Artwork\n  estimate: String\n  counts: SaleArtworkCounts\n  low_estimate_cents: Int @deprecated(reason: \"Favor `low_estimate`\")\n  high_estimate_cents: Int @deprecated(reason: \"Favor `high_estimate\")\n  opening_bid_cents: Int @deprecated(reason: \"Favor `opening_bid`\")\n  minimum_next_bid_cents: Int @deprecated(reason: \"Favor `minimum_next_bid`\")\n  bidder_positions_count: Int @deprecated(reason: \"Favor `counts.bidder_positions`\")\n  bid_increments: [Int]\n}\n\ntype SaleArtworkCounts {\n  bidder_positions(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype SaleArtworkCurrentBid {\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n}\n\ntype SaleArtworkHighestBid {\n  id: ID\n  created_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  is_cancelled: Boolean\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n  cents: Int\n  display: String\n  amount_cents: Int @deprecated(reason: \"Favor `cents`\")\n}\n\ntype SaleArtworkHighEstimate {\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n}\n\ntype SaleArtworkLowEstimate {\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n}\n\ntype SaleArtworkMinimumNextBid {\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n}\n\ntype SaleArtworkOpeningBid {\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n}\n\ntype SaleArtworkReserve {\n  # An amount of money expressed in cents.\n  cents: Float\n\n  # A pre-formatted price.\n  display: String\n\n  # A formatted price with various currency formatting options.\n  amount(\n    symbol: String\n    thousand: String = \",\"\n    decimal: String = \".\"\n\n    # Allows control of symbol position (%v = value, %s = symbol)\n    format: String = \"%s%v\"\n    precision: Int = 0\n  ): String\n}\n\ntype SaleRegistration {\n  is_registered: Boolean\n  bidder: Bidder\n  sale: Sale\n}\n\nenum SaleSorts {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATED_AT_ASC\n  CREATED_AT_DESC\n  END_AT_ASC\n  END_AT_DESC\n  START_AT_ASC\n  START_AT_DESC\n  ELIGIBLE_SALE_ARTWORKS_COUNT_ASC\n  ELIGIBLE_SALE_ARTWORKS_COUNT_DESC\n  TIMELY_AT_NAME_ASC\n  TIMELY_AT_NAME_DESC\n}\n\ntype Search {\n  cached: Int\n  total: Int\n  results: [SearchResult]\n}\n\nunion SearchEntity = ArtistSearchEntity | ArtworkSearchEntity | ProfileSearchEntity | PartnerShowSearchEntity\n\ntype SearchResult {\n  id: ID\n  title: String\n  href: String\n  snippet: String\n  image: Image\n  type: String\n  entity: SearchEntity\n}\n\ntype Show implements Node {\n  # A globally unique ID.\n  __id: ID!\n\n  # A type-specific ID.\n  id: String!\n\n  # A type-specific Gravity Mongo Document ID.\n  _id: String!\n  cached: Int\n  href: String\n  kind: String\n\n  # The exhibition title\n  name: String\n  description: String\n  type: String\n  displayable: Boolean @deprecated(reason: \"Prefix Boolean returning fields with `is_`\")\n\n  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.\n  is_active: Boolean\n  is_displayable: Boolean\n  is_fair_booth: Boolean\n  is_reference: Boolean\n  press_release(format: Format): String\n  start_at(format: String, timezone: String, convert_to_utc: Boolean): String\n  end_at(format: String, timezone: String, convert_to_utc: Boolean): String\n\n  # A formatted description of the start to end dates\n  exhibition_period: String\n  artists: [Artist]\n  artists_without_artworks: [Artist]\n  partner: PartnerTypes\n  fair: Fair\n  location: Location\n  city: String\n  status: String\n\n  # A formatted update on upcoming status changes\n  status_update(\n    # Before this many days no update will be generated\n    max_days: Int\n  ): String\n  events: [PartnerShowEventType]\n  counts: ShowCounts\n  artworks(\n    # Number of artworks to return\n    size: Int = 25\n    published: Boolean = true\n    page: Int = 1\n    all: Boolean\n    for_sale: Boolean\n\n    # List of artwork IDs to exclude from the response (irrespective of size)\n    exclude: [String]\n  ): [Artwork]\n  meta_image: Image\n  cover_image: Image\n  images(\n    # Number of images to return\n    size: Int\n\n    # Pass true/false to include cover or not\n    default: Boolean\n    page: Int\n  ): [Image]\n}\n\ntype ShowCounts {\n  artworks(\n    # The slug or ID of an artist in the show.\n    artist_id: String\n  ): Int\n  eligible_artworks(\n    # Returns a `String` when format is specified. e.g.`\"0,0.0000\"`\n    format: String\n    label: String\n  ): FormattedNumber\n}\n\ntype Status {\n  gravity: StatusGravity\n\n  # Metaphysics ping\n  ping: Boolean\n}\n\n# Gravity ping\ntype StatusGravity {\n  ping: Boolean\n}\n\ntype TrendingArtists {\n  artists: [Artist]\n}\n\nenum TrendingMetrics {\n  # Base time period: 2 weeks\n  ARTIST_FOLLOW\n\n  # Base time period: 1 month\n  ARTIST_INQUIRY\n\n  # Base time period: 2 weeks\n  ARTIST_SEARCH\n\n  # Base time period: 1 month\n  ARTIST_SAVE\n\n  # Number of artworks in fairs. Base time period: 12 weeks.\n  ARTIST_FAIR\n\n  # Cumulative price achieved at auction. Base time period: 12 weeks\n  ARTIST_AUCTION_LOT\n}\n",
      "containsQueryType": true,
      "typesUndefined": [],
      "directivesUndefined": [
        "deprecated"
      ],
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 97,
      "containsCycle": true,
      "numDefinitions": 127
    }
  ],
  "metrics": {
    "created_at": "2017-02-06T21:56:05Z",
    "updated_at": "2019-02-08T06:36:17Z",
    "pushed_at": "2017-02-28T23:39:51Z",
    "issues": 0,
    "watchers": 2,
    "fork_count": 3,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 1,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 1,
    "releases": 0,
    "stargazers": 16
  }
}