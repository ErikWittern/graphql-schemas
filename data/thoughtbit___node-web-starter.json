{
  "repo_name": "node-web-starter",
  "repo_full_name": "thoughtbit/node-web-starter",
  "repo_owner": "thoughtbit",
  "repo_description": "üêõ  Node.js Web Framework for Boilerplate",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "app.graphql",
      "path": "nest-boilerplate/src/modules/main/app.graphql",
      "sha": "00bc6ee60e2a4b14cf6ec3d167ea8b56e8f4711a",
      "url": "https://api.github.com/repositories/77882288/contents/nest-boilerplate/src/modules/main/app.graphql?ref=ff51ac77f1293ffda263a968f53df081002a151a",
      "git_url": "https://api.github.com/repositories/77882288/git/blobs/00bc6ee60e2a4b14cf6ec3d167ea8b56e8f4711a",
      "html_url": "https://github.com/thoughtbit/node-web-starter/blob/ff51ac77f1293ffda263a968f53df081002a151a/nest-boilerplate/src/modules/main/app.graphql",
      "content": "type Query {\n  sayHello(name: String!): String\n}\n\ntype Mutation {\n  pubMessage(msg: String!): String\n}\n\ntype Subscription {\n  subMessage: String\n}",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 3
    },
    {
      "name": "typeDefs.graphql",
      "path": "bear-ts-apollo/server/src/graphql/typeDefs.graphql",
      "sha": "d2c1ffe1fbafb25667b71a075ceab34d3b5083a6",
      "url": "https://api.github.com/repositories/77882288/contents/bear-ts-apollo/server/src/graphql/typeDefs.graphql?ref=efae13ea5a96e14398e0ece3f726a9e266633abd",
      "git_url": "https://api.github.com/repositories/77882288/git/blobs/d2c1ffe1fbafb25667b71a075ceab34d3b5083a6",
      "html_url": "https://github.com/thoughtbit/node-web-starter/blob/efae13ea5a96e14398e0ece3f726a9e266633abd/bear-ts-apollo/server/src/graphql/typeDefs.graphql",
      "content": "################################################################################\n## Custom Scalar Types\n################################################################################\n\n# Date represented as an ISO8601 string.\nscalar Date\n\n################################################################################\n## Reliability\n################################################################################\n\n# Reliability defines how a given user should be considered reliable for their\n# comment or flag activity.\ntype Reliability {\n\n  # flagger will be `true` when the flagger is reliable, `false` if not, or\n  # `null` if the reliability cannot be determined.\n  flagger: Boolean\n\n  # commenter will be `true` when the commenter is reliable, `false` if not, or\n  # `null` if the reliability cannot be determined.\n  commenter: Boolean\n}\n\n################################################################################\n## Users\n################################################################################\n\n# Roles that a user can have, these can be combined.\nenum USER_ROLES {\n\n  # an administrator of the site\n  ADMIN\n\n  # a moderator of the site\n  MODERATOR\n}\n\n# Token is a personal access token associated with a given user.\ntype Token {\n\n  # ID is the unique identifier for the token.\n  id: ID!\n\n  # Name is the description for the token.\n  name: String!\n\n  # Active determines if the token is available to hit the API.\n  active: Boolean!\n\n  # JWT is the actual token to use for authentication, this is only available\n  # on token creation, otherwise it will be null.\n  jwt: String\n}\n\ntype UserProfile {\n  # the id is an identifier for the user profile (email, facebook id, etc)\n  id: String!\n\n  # name of the provider attached to the authentication mode\n  provider: String!\n}\n\ntype SuspensionInfo {\n  until: Date\n}\n\n# Any person who can author comments, create actions, and view comments on a\n# stream.\ntype User {\n\n  # The ID of the User.\n  id: ID!\n\n  # Username of a user.\n  username: String!\n\n  # creation date of user\n  created_at: String!\n\n  # Action summaries against the user.\n  action_summaries: [ActionSummary!]!\n\n  # Actions completed on the parent.\n  actions: [Action!]\n\n  # the current roles of the user.\n  roles: [USER_ROLES!]\n\n  # the current profiles of the user.\n  profiles: [UserProfile]\n\n  # the tags on the user\n  tags: [TagLink!]\n\n  # determines whether the user can edit their username\n  canEditName: Boolean\n\n  # ignored users.\n  ignoredUsers: [User!]\n\n  # Tokens are the personal access tokens for a given user.\n  tokens: [Token!]\n\n  # returns all comments based on a query.\n  comments(query: CommentsQuery): CommentConnection!\n\n  # reliable is the reference to a given user's Reliability. If the requesting\n  # user does not have permission to access the reliability, null will be\n  # returned.\n  reliable: Reliability\n\n  # returns user status\n  status: USER_STATUS\n\n  # returns suspension info. Only available to Admins and Moderators\n  # or on own logged in User.\n  suspension: SuspensionInfo\n}\n\n# UsersQuery allows the ability to query users by a specific fields.\ninput UsersQuery {\n  action_type: ACTION_TYPE\n\n  # Limit the number of results to be returned.\n  limit: Int = 10\n\n  # Skip results from the last created_at timestamp.\n  cursor: Date\n\n  # Sort the results by created_at.\n  sort: SORT_ORDER = REVERSE_CHRONOLOGICAL\n}\n\n# AssetsQuery allows teh ability to query assets by specific fields\ninput AssetsQuery {\n\n  # a search string to match against titles, authors, urls, etc.\n  value: String = \"\"\n\n  # Limit the number of results to be returned\n  limit: Int = 10\n}\n################################################################################\n## Tags\n################################################################################\n\n# Used to represent the item type for a tag.\nenum TAGGABLE_ITEM_TYPE {\n\n  # The action references a entity of type Asset.\n  ASSETS\n\n  # The action references a entity of type Comment.\n  COMMENTS\n\n  # The action references a entity of type User.\n  USERS\n}\n\n# Tag represents the underlying Tag that can be either stored in a global list\n# or added uniquely to the entity.\ntype Tag {\n\n  # The actual name of the tag entry.\n  name: String!\n\n  # The time that this Tag was created.\n  created_at: Date!\n}\n\n# TagLink is used to associate a given Tag with a Model via a TagLink.\ntype TagLink {\n\n  # The underlying Tag that is either duplicated from the global list or created\n  # uniquely for this specific model.\n  tag: Tag!\n\n  # The user that assigned the tag. This TagLink could have been created by the\n  # system, in which case this will be null. It could also be null if the\n  # current user is not an Admin/Moderator.\n  assigned_by: User\n\n  # The date that the TagLink was created.\n  created_at: Date!\n}\n\n################################################################################\n## Comments\n################################################################################\n\n# The statuses that a comment may have.\nenum COMMENT_STATUS {\n\n  # The comment is not PREMOD, but was not applied a moderation status by a\n  # moderator.\n  NONE\n\n  # The comment has been accepted by a moderator.\n  ACCEPTED\n\n  # The comment has been rejected by a moderator.\n  REJECTED\n\n  # The comment was created while the asset's premoderation option was on, and\n  # new comments that haven't been moderated yet are referred to as\n  # \"premoderated\" or \"premod\" comments.\n  PREMOD\n}\n\n# The types of action there are as enum's.\nenum ACTION_TYPE {\n\n  # Represents a FlagAction.\n  FLAG\n\n  # Represents a don't agree action\n  DONTAGREE\n}\n\n# CommentsQuery allows the ability to query comments by a specific methods.\ninput CommentsQuery {\n\n  # Author of the comments\n  author_id: ID\n\n  # Current status of a comment. Requires the `ADMIN` role.\n  statuses: [COMMENT_STATUS!]\n\n  # Asset that a comment is on.\n  asset_id: ID\n\n  # The parent of the comment that we want to retrieve.\n  parent_id: ID\n\n  # Comments returned will only be ones which have at least one action of this\n  # type. Requires the `ADMIN` role.\n  action_type: ACTION_TYPE\n\n  # Limit the number of results to be returned.\n  limit: Int = 10\n\n  # Skip results from the last created_at timestamp.\n  cursor: Date\n\n  # Sort the results by created_at.\n  sort: SORT_ORDER = REVERSE_CHRONOLOGICAL\n\n  # Filter by a specific tag name.\n  tags: [String!]\n\n  # Exclude comments ignored by the requesting user\n  excludeIgnored: Boolean\n}\n\n# CommentCountQuery allows the ability to query comment counts by specific\n# methods.\ninput CommentCountQuery {\n\n  # Current status of a comment. Requires the `ADMIN` role.\n  statuses: [COMMENT_STATUS!]\n\n  # Asset that a comment is on.\n  asset_id: ID\n\n  # The URL that the asset is located on.\n  asset_url: String\n\n  # the parent of the comment that we want to retrieve.\n  parent_id: ID\n\n  # comments returned will only be ones which have at least one action of this\n  # type.\n  action_type: ACTION_TYPE\n\n  # author_id allows the querying of comment counts based on the author of the\n  # comments.\n  author_id: ID\n\n  # Filter by a specific tag name.\n  tags: [String!]\n}\n\ntype EditInfo {\n  edited: Boolean!\n  editableUntil: Date\n}\n\ntype CommentStatusHistory {\n  type: COMMENT_STATUS!\n  created_at: Date!\n  assigned_by: User\n}\n\n# Comment is the base representation of user interaction in Talk.\ntype Comment {\n\n  # The parent of the comment (if there is one).\n  parent: Comment\n\n  # The ID of the comment.\n  id: ID!\n\n  # The actual comment data.\n  body: String!\n\n  # the tags on the comment\n  tags: [TagLink!]\n\n  # the user who authored the comment.\n  user: User\n\n  # the recent replies made against this comment.\n  recentReplies: [Comment!]\n\n  # the replies that were made to the comment.\n  replies(sort: SORT_ORDER = CHRONOLOGICAL, limit: Int = 3, excludeIgnored: Boolean): CommentConnection!\n\n  # The count of replies on a comment.\n  replyCount(excludeIgnored: Boolean): Int\n\n  # Actions completed on the parent. Requires the `ADMIN` role.\n  actions: [Action]\n\n  # Action summaries against a comment.\n  action_summaries: [ActionSummary]!\n\n  # The asset that a comment was made on.\n  asset: Asset\n\n  # The current status of a comment.\n  status: COMMENT_STATUS!\n\n  # The status history of the comment. Requires the `ADMIN` or `MODERATOR` role.\n  status_history: [CommentStatusHistory!]\n\n  # The time when the comment was created\n  created_at: Date!\n\n  # describes how the comment can be edited\n  editing: EditInfo\n}\n\n# CommentConnection represents a paginable subset of a comment list.\ntype CommentConnection {\n\n  # Indicates that there are more comments after this subset.\n  hasNextPage: Boolean!\n\n  # Cursor of first comment in subset.\n  startCursor: Date\n\n  # Cursor of last comment in subset.\n  endCursor: Date\n\n  # Subset of comments.\n  nodes: [Comment!]!\n}\n\n################################################################################\n## Actions\n################################################################################\n\n# An action rendered against a parent entity item.\ninterface Action {\n\n  # The ID of the action.\n  id: ID!\n\n  # The author of the action.\n  user: User\n\n  # The time when the Action was updated.\n  updated_at: Date\n\n  # The time when the Action was created.\n  created_at: Date\n}\n\n# DefaultAction is the Action provided for undefined types.\ntype DefaultAction implements Action {\n\n  # The ID of the action.\n  id: ID!\n\n  # The author of the action.\n  user: User\n\n  # The time when the Action was updated.\n  updated_at: Date\n\n  # The time when the Action was created.\n  created_at: Date\n}\n\n# A summary of actions based on the specific grouping of the group_id.\ninterface ActionSummary {\n\n  # The count of actions with this group.\n  count: Int\n\n  # The current user's action.\n  current_user: Action\n}\n\n# DefaultActionSummary is the ActionSummary provided for undefined types.\ntype DefaultActionSummary implements ActionSummary {\n\n  # The count of actions with this group.\n  count: Int\n\n  # The current user's action.\n  current_user: Action\n}\n\n# A summary of actions for a specific action type on an Asset.\ninterface AssetActionSummary {\n\n  # Number of actions associated with actionable types on this this Asset.\n  actionCount: Int\n\n  # Number of unique actionable types that are referenced by the actions.\n  actionableItemCount: Int\n}\n\n# DefaultAssetActionSummary is the AssetActionSummary provided for undefined types.\ntype DefaultAssetActionSummary implements AssetActionSummary {\n\n  # Number of actions associated with actionable types on this this Asset.\n  actionCount: Int\n\n  # Number of unique actionable types that are referenced by the actions.\n  actionableItemCount: Int\n}\n\n# A summary of counts related to all the Flags on an Asset.\ntype FlagAssetActionSummary implements AssetActionSummary {\n\n  # Number of flags associated with actionable types on this this Asset.\n  actionCount: Int\n\n  # Number of unique actionable types that are referenced by the flags.\n  actionableItemCount: Int\n}\n\n# A FLAG action that contains flag metadata.\ntype FlagAction implements Action {\n\n  # The ID of the Flag Action.\n  id: ID!\n\n  # The reason for which the Flag Action was created.\n  reason: String\n\n  # An optional message sent with the flagging action by the user.\n  message: String\n\n  # The user who created the action.\n  user: User\n\n  # The time when the Flag Action was updated.\n  updated_at: Date\n\n  # The time when the Flag Action was created.\n  created_at: Date\n}\n\n# A DONTAGREE action that contains do not agree metadata.\ntype DontAgreeAction implements Action {\n\n  # The ID of the DontAgree Action.\n  id: ID!\n\n  # The reason for which the DontAgree Action was created.\n  reason: String\n\n  # An optional message sent with the flagging action by the user.\n  message: String\n\n  # The user who created the action.\n  user: User\n\n  # The time when the DontAgree Action was updated.\n  updated_at: Date\n\n  # The time when the DontAgree Action was created.\n  created_at: Date\n}\n\n# Summary for Flag Action with a a unique reason.\ntype FlagActionSummary implements ActionSummary {\n\n  # The total count of flags with this reason.\n  count: Int!\n\n  # The reason for which the Flag Action was created.\n  reason: String\n\n  # The flag by the current user against the parent entity with this reason.\n  current_user: FlagAction\n}\n\n# Summary for Don't Agree Action with a a unique reason.\ntype DontAgreeActionSummary implements ActionSummary {\n\n  # The total count of flags with this reason.\n  count: Int!\n\n  # The reason for which the Flag Action was created.\n  reason: String\n\n  # The don't agree action by the current user against the parent entity with this reason.\n  current_user: DontAgreeAction\n}\n\n################################################################################\n## Settings\n################################################################################\n\n# The moderation mode of the site.\nenum MODERATION_MODE {\n\n  # Comments posted while in `PRE` mode will be labeled with a `PREMOD`\n  # status and will require a moderator decision before being visible.\n  PRE\n\n  # Comments posted while in `POST` will be visible immediately.\n  POST\n}\n\n# Site wide global settings.\ntype Settings {\n\n  # Moderation mode for the site.\n  moderation: MODERATION_MODE!\n\n  # Enables a requirement for email confirmation before a user can login.\n  requireEmailConfirmation: Boolean\n\n  infoBoxEnable: Boolean\n  infoBoxContent: String\n  premodLinksEnable: Boolean\n  questionBoxEnable: Boolean\n  questionBoxContent: String\n  closeTimeout: Int\n  closedMessage: String\n  charCountEnable: Boolean\n  charCount: Int\n\n  organizationName: String\n}\n\n################################################################################\n## Assets\n################################################################################\n\n# Where comments are made on.\ntype Asset {\n\n  # The current ID of the asset.\n  id: ID!\n\n  # The scraped title of the asset.\n  title: String\n\n  # The URL that the asset is located on.\n  url: String\n\n  # Returns recent comments\n  recentComments: [Comment!]\n\n  # The comments that are attached to the asset.\n  # If `deep` is true, it will return comments of all depths,\n  # otherwise only top-level comments are returned.\n  comments(\n    sort: SORT_ORDER = REVERSE_CHRONOLOGICAL,\n    limit: Int = 10,\n    excludeIgnored: Boolean,\n    tags: [String!]\n    deep: Boolean,\n  ): CommentConnection!\n\n  # A Comment from the Asset by comment's ID\n  comment(id: ID!): Comment\n\n  # The count of top level comments on the asset.\n  commentCount(excludeIgnored: Boolean, tags: [String!]): Int\n\n  # The total count of all comments made on the asset.\n  totalCommentCount(excludeIgnored: Boolean, tags: [String!]): Int\n\n  # The settings (rectified with the global settings) that should be applied to\n  # this asset.\n  settings: Settings!\n\n  # The date that the asset was closed at.\n  closedAt: Date\n\n  # True if asset is closed.\n  isClosed: Boolean!\n\n  # Summary of all Actions against all entities associated with the Asset.\n  # (likes, flags, etc.). Requires the `ADMIN` role.\n  action_summaries: [AssetActionSummary!]\n\n  # The date that the asset was created.\n  created_at: Date\n\n  # the tags on the asset\n  tags: [TagLink!]\n\n  # The author(s) of the asset.\n  author: String\n}\n\n################################################################################\n## Errors\n################################################################################\n\n# Any error rendered due to the user's input.\ninterface UserError {\n\n  # Translation key relating to a translatable string containing details to be\n  # displayed to the end user.\n  translation_key: String!\n}\n\n# A generic error not related to validation reasons.\ntype GenericUserError implements UserError {\n\n  # Translation key relating to a translatable string containing details to be\n  # displayed to the end user.\n  translation_key: String!\n}\n\n# A validation error that affects the input.\ntype ValidationUserError implements UserError {\n\n  # Translation key relating to a translatable string containing details to be\n  # displayed to the end user.\n  translation_key: String!\n\n  # The field in question that caused the error.\n  field_name: String!\n}\n\n################################################################################\n## Queries\n################################################################################\n\n# Establishes the ordering of the content by their created_at time stamp.\nenum SORT_ORDER {\n\n  # newest to oldest order.\n  REVERSE_CHRONOLOGICAL\n\n  # oldest to newer order.\n  CHRONOLOGICAL\n}\n\n# All queries that can be executed.\nenum USER_STATUS {\n  ACTIVE\n  BANNED\n  PENDING\n  APPROVED\n}\n\n# Metrics for the assets.\nenum ASSET_METRICS_SORT {\n\n  # Represents a FlagAction.\n  FLAG\n\n  # Represents a don't agree action.\n  DONTAGREE\n\n  # Represents activity.\n  ACTIVITY\n}\n\ntype RootQuery {\n\n  # Site wide settings and defaults.\n  settings: Settings\n\n  # Finds a specific comment based on it's id.\n  comment(id: ID!): Comment\n\n  # All assets. Requires the `ADMIN` role.\n  assets(query: AssetsQuery): [Asset]\n\n  # Find or create an asset by url, or just find with the ID.\n  asset(id: ID, url: String): Asset\n\n  # Comments returned based on a query.\n  comments(query: CommentsQuery!): CommentConnection\n\n  # Return the count of comments satisfied by the query. Note that this edge is\n  # expensive as it is not batched. Requires the `ADMIN` role.\n  commentCount(query: CommentCountQuery!): Int\n\n  # The currently logged in user based on the request. Requires any logged in\n  # role.\n  me: User\n\n  # Users returned based on a query.\n  users(query: UsersQuery): [User]\n\n  # a single User by id\n  user(id: ID!): User\n\n  # Asset metrics related to user actions are saturated into the assets\n  # returned. Parameters `from` and `to` are related to the action created_at field.\n  assetMetrics(from: Date!, to: Date!, sort: ASSET_METRICS_SORT!, limit: Int = 10): [Asset!]\n\n  # Comment metrics related to user actions are saturated into the comments\n  # returned. Parameters `from` and `to` are related to the action created_at field.\n  commentMetrics(from: Date!, to: Date!, sort: ACTION_TYPE!, limit: Int = 10): [Comment!]\n}\n\n################################################################################\n## Mutations\n################################################################################\n\n# Response defines what can be expected from any response to a mutation action.\ninterface Response {\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\n# CreateCommentResponse is returned with the comment that was created and any\n# errors that may have occurred in the attempt to create it.\ntype CreateCommentResponse implements Response {\n\n  # The comment that was created.\n  comment: Comment\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\n# Used to represent the item type for an action.\nenum ACTION_ITEM_TYPE {\n\n  # The action references a entity of type Asset.\n  ASSETS\n\n  # The action references a entity of type Comment.\n  COMMENTS\n\n  # The action references a entity of type User.\n  USERS\n}\n\ninput CreateLikeInput {\n\n  # The item's id for which we are to create a like.\n  item_id: ID!\n\n  # The type of the item for which we are to create the like.\n  item_type: ACTION_ITEM_TYPE!\n}\n\n# CreateCommentInput is the input content used to create a new comment.\ninput CreateCommentInput {\n\n  # The asset id\n  asset_id: ID!\n\n  # The id of the parent comment\n  parent_id: ID\n\n  # The body of the comment\n  body: String!\n\n  # Tags\n  tags: [String]\n\n}\n\ninput CreateFlagInput {\n\n  # The item's id for which we are to create a flag.\n  item_id: ID!\n\n  # The type of the item for which we are to create the flag.\n  item_type: ACTION_ITEM_TYPE!\n\n  # The reason for flagging the item.\n  reason: String!\n\n  # An optional message sent with the flagging action by the user.\n  message: String\n}\n\n# CreateFlagResponse is the response returned with possibly some errors\n# relating to the creating the flag action attempt and possibly the flag that\n# was created.\ntype CreateFlagResponse implements Response {\n\n  # The flag that was created.\n  flag: FlagAction\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\n\n# CreateDontAgreeResponse is the response returned with possibly some errors\n# relating to the creating the don't agree action attempt and possibly the don't agree that\n# was created.\ntype CreateDontAgreeResponse implements Response {\n\n  # The don't agree that was created.\n  dontagree: DontAgreeAction\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\ninput CreateDontAgreeInput {\n\n  # The item's id for which we are to create a don't agree.\n  item_id: ID!\n\n  # The type of the item for which we are to create the don't agree.\n  item_type: ACTION_ITEM_TYPE!\n\n  # The reason for not agreeing with the item.\n  reason: String\n\n  # An optional message sent with the don't agree action by the user.\n  message: String\n}\n\n# Input for suspendUser mutation.\ninput SuspendUserInput {\n\n  # id of target user.\n  id: ID!\n\n  # message to be sent to the user.\n  message: String!\n\n  # target user will be suspended until this date.\n  until: Date!\n}\n\n# Input for rejectUsername mutation.\ninput RejectUsernameInput {\n\n  # id of target user.\n  id: ID!\n\n  # message to be sent to the user.\n  message: String!\n}\n\n# DeleteActionResponse is the response returned with possibly some errors\n# relating to the delete action attempt.\ntype DeleteActionResponse implements Response {\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\n# SetUserStatusResponse is the response returned with possibly some errors\n# relating to the delete action attempt.\ntype SetUserStatusResponse implements Response {\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\n# SuspendUserResponse is the response returned with possibly some errors\n# relating to the suspend action attempt.\ntype SuspendUserResponse implements Response {\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\n# RejectUsernameResponse is the response returned with possibly some errors\n# relating to the reject username action attempt.\ntype RejectUsernameResponse implements Response {\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\n# SetCommentStatusResponse is the response returned with possibly some errors\n# relating to the delete action attempt.\ntype SetCommentStatusResponse implements Response {\n\n  # An array of errors relating to the mutation that occurred.\n  errors: [UserError!]\n}\n\n# ModifyTagInput is the input used to modify a tag.\ninput ModifyTagInput {\n\n  # name is the actual tag to add to the model.\n  name: String!\n\n  # id is the ID of the model in question that we are modifying the tag of.\n  id: ID!\n\n  # item_type is the type of item that we are modifying the tag if.\n  item_type: TAGGABLE_ITEM_TYPE!\n\n  # asset_id is used when the item_type is `COMMENTS`, the is needed to rectify\n  # the settings to get the asset specific tags/settings.\n  asset_id: ID\n}\n\n# Response to the addTag or removeTag mutations.\ntype ModifyTagResponse implements Response {\n\n  # An array of errors relating to the mutation that occured.\n  errors: [UserError!]\n}\n\n# Response to ignoreUser mutation\ntype IgnoreUserResponse implements Response {\n  # An array of errors relating to the mutation that occured.\n  errors: [UserError!]\n}\n\n# Response to stopIgnoringUser mutation\ntype StopIgnoringUserResponse implements Response {\n  # An array of errors relating to the mutation that occured.\n  errors: [UserError!]\n}\n\n# Input to editComment mutation.\ninput EditCommentInput {\n\n  # Update body of the comment\n  body: String!\n}\n\n# EditCommentResponse contains the updated comment and any errors that occured.\ntype EditCommentResponse implements Response {\n\n  # The edited comment.\n  comment: Comment\n\n  # An array of errors relating to the mutation that occured.\n  errors: [UserError!]\n}\n\n# CreateTokenInput contains the input to create the token.\ninput CreateTokenInput {\n\n  # Name is the description for the token.\n  name: String!\n}\n\n# CreateTokenResponse contains the errors related to creating a token.\ntype CreateTokenResponse implements Response {\n\n  # Token is the Token that was created, or null if it failed.\n  token: Token\n\n  # An array of errors relating to the mutation that occured.\n  errors: [UserError!]\n}\n\n# RevokeTokenInput contains the input to revoke the token.\ninput RevokeTokenInput {\n\n  # ID is the JTI for the token.\n  id: ID!\n}\n\n# RevokeTokenResponse contains the errors related to revoking a token.\ntype RevokeTokenResponse implements Response {\n\n  # An array of errors relating to the mutation that occured.\n  errors: [UserError!]\n}\n\n# All mutations for the application are defined on this object.\ntype RootMutation {\n\n  # Creates a comment on the asset.\n  createComment(comment: CreateCommentInput!): CreateCommentResponse\n\n  # Creates a flag on an entity.\n  createFlag(flag: CreateFlagInput!): CreateFlagResponse\n\n  # Creates a don't agree action on an entity.\n  createDontAgree(dontagree: CreateDontAgreeInput!): CreateDontAgreeResponse\n\n  # Delete an action based on the action id.\n  deleteAction(id: ID!): DeleteActionResponse\n\n  # Edit a comment\n  editComment(id: ID!, asset_id: ID!, edit: EditCommentInput): EditCommentResponse\n\n  # Sets User status. Requires the `ADMIN` role.\n  setUserStatus(id: ID!, status: USER_STATUS!): SetUserStatusResponse\n\n  # Suspends a user. Requires the `ADMIN` role.\n  suspendUser(input: SuspendUserInput!): SuspendUserResponse\n\n  # Reject a username. Requires the `ADMIN` role.\n  rejectUsername(input: RejectUsernameInput!): RejectUsernameResponse\n\n  # Sets Comment status. Requires the `ADMIN` role.\n  setCommentStatus(id: ID!, status: COMMENT_STATUS!): SetCommentStatusResponse\n\n  # Add a tag.\n  addTag(tag: ModifyTagInput!): ModifyTagResponse!\n\n  # Removes a tag.\n  removeTag(tag: ModifyTagInput!): ModifyTagResponse!\n\n  # Ignore comments by another user\n  ignoreUser(id: ID!): IgnoreUserResponse\n\n  # CreateToken will create a token that is attached to the current user.\n  createToken(input: CreateTokenInput!): CreateTokenResponse!\n\n  # RevokeToken will revoke an existing token.\n  revokeToken(input: RevokeTokenInput!): RevokeTokenResponse!\n\n  # Stop Ignoring comments by another user\n  stopIgnoringUser(id: ID!): StopIgnoringUserResponse\n}\n\n################################################################################\n## Subscriptions\n################################################################################\n\ntype Subscription {\n\n  # Get an update whenever a comment was added.\n  # `asset_id` is required except for users with the `ADMIN` or `MODERATOR` role.\n  commentAdded(asset_id: ID): Comment\n\n  # Get an update whenever a comment was edited.\n  # `asset_id` is required except for users with the `ADMIN` or `MODERATOR` role.\n  commentEdited(asset_id: ID): Comment\n\n  # Get an update whenever a comment was flagged.\n  # Requires the `ADMIN` or `MODERATOR` role.\n  commentFlagged(asset_id: ID): Comment\n\n  # Get an update whenever a comment has been accepted.\n  # Requires the `ADMIN` or `MODERATOR` role.\n  commentAccepted(asset_id: ID): Comment\n\n  # Get an update whenever a comment has been rejected.\n  # Requires the `ADMIN` or `MODERATOR` role.\n  commentRejected(asset_id: ID): Comment\n\n  # Get an update whenever a user has been suspended.\n  # `user_id` must match id of current user except for\n  # users with the `ADMIN` or `MODERATOR` role.\n  userSuspended(user_id: ID): User\n\n  # Get an update whenever a user has been banned.\n  # `user_id` must match id of current user except for\n  # users with the `ADMIN` or `MODERATOR` role.\n  userBanned(user_id: ID): User\n\n  # Get an update whenever a username has been rejected.\n  # `user_id` must match id of current user except for\n  # users with the `ADMIN` or `MODERATOR` role.\n  usernameRejected(user_id: ID): User\n}\n\n################################################################################\n## Schema\n################################################################################\n\nschema {\n  query: RootQuery\n  mutation: RootMutation\n  subscription: Subscription\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 40,
      "containsCycle": true,
      "numDefinitions": 70
    },
    {
      "name": "cats.graphql",
      "path": "nest-boilerplate/src/modules/cats/cats.graphql",
      "sha": "43121f4935ac0e835c0921fb8c787a4a7eab2152",
      "url": "https://api.github.com/repositories/77882288/contents/nest-boilerplate/src/modules/cats/cats.graphql?ref=ff51ac77f1293ffda263a968f53df081002a151a",
      "git_url": "https://api.github.com/repositories/77882288/git/blobs/43121f4935ac0e835c0921fb8c787a4a7eab2152",
      "html_url": "https://github.com/thoughtbit/node-web-starter/blob/ff51ac77f1293ffda263a968f53df081002a151a/nest-boilerplate/src/modules/cats/cats.graphql",
      "content": "type Query {\n  # #ÊòØ‰ª£Á†ÅÈáåÁöÑÊ≥®ÈáäÔºå\"\"\" \"\"\"ÊòØ graphql ÊñáÊ°£‰∏≠ÁöÑÊ≥®Èáä\n  \"\"\"Êü•ËØ¢‰∏Ä‰∏™Áå´Áå´\"\"\"\n  findOneCat(id: Int!): CatResponse\n  findCats: CatsResponse\n}\n\ntype Mutation {\n  createCat(cat: CatInput!): CommonResponse\n  deleteCat(id: Int!): CommonResponse\n  updateCat(id: Int!, cat: CatInput): CommonResponse\n}\n\ntype CommonResponse {\n  code: Int\n  message: String\n}\n\ntype CatResponse {\n  code: Int\n  message: String\n  data: Cat\n}\n\ntype CatsResponse {\n  code: Int\n  message: String\n  data: [Cat]\n}\n\ntype Cat {\n  id: Int\n  nickname: String\n  species: String\n}\n\ninput CatInput {\n  nickname: String\n  species: String\n}",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 7
    }
  ],
  "metrics": {
    "created_at": "2017-01-03T03:54:13Z",
    "updated_at": "2019-05-19T09:53:58Z",
    "pushed_at": "2019-05-19T09:53:57Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 2
  }
}