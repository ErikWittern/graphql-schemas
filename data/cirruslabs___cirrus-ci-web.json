{
  "repo_name": "cirrus-ci-web",
  "repo_full_name": "cirruslabs/cirrus-ci-web",
  "repo_owner": "cirruslabs",
  "repo_description": "Web front end for Cirrus CI",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema.graphql",
      "sha": "78faa5f8f7f28d2bde705e9080f73afbde69de9e",
      "url": "https://api.github.com/repositories/97406578/contents/schema.graphql?ref=73e36edb777ca817a677807cb757a646d6082d1e",
      "git_url": "https://api.github.com/repositories/97406578/git/blobs/78faa5f8f7f28d2bde705e9080f73afbde69de9e",
      "html_url": "https://github.com/cirruslabs/cirrus-ci-web/blob/73e36edb777ca817a677807cb757a646d6082d1e/schema.graphql",
      "content": "schema {\n  query: Root\n  mutation: Mutation\n  subscription: Subscription\n}\n\n\"\"\"This directive allows results to be deferred during execution\"\"\"\ndirective @defer on FIELD\n\ntype AccountTransaction {\n  accountId: Long!\n  taskId: Long!\n  repositoryId: Long!\n  timestamp: Long!\n  microCreditsAmount: Long!\n  creditsAmount: String!\n  task: Task\n  repository: Repository\n}\n\n\"\"\"An edge in a connection\"\"\"\ntype AccountTransactionEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: AccountTransaction\n\n  \"\"\"cursor marks a unique position or index into the connection\"\"\"\n  cursor: String!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype AccountTransactionsConnection {\n  \"\"\"a list of edges\"\"\"\n  edges: [AccountTransactionEdge]\n\n  \"\"\"details about this specific page\"\"\"\n  pageInfo: PageInfo!\n}\n\ntype ApiAccessToken {\n  maskedToken: String\n  creationTimestamp: Long\n}\n\ntype ArtifactFileInfo {\n  path: String!\n  size: Long!\n}\n\ntype Artifacts {\n  name: String!\n  type: String\n  format: String\n  files: [ArtifactFileInfo]\n}\n\ntype BillingSettings {\n  accountId: Long!\n  enabled: Boolean!\n  billingCreditsLimit: Long!\n  billingEmailAddress: String!\n  invoiceTemplate: String\n}\n\ninput BillingSettingsInput {\n  accountId: ID!\n  enabled: Boolean!\n  billingEmailAddress: String!\n  invoiceTemplate: String\n  clientMutationId: String\n}\n\ntype BillingSettingsPayload {\n  settings: BillingSettings\n  clientMutationId: String\n}\n\ntype Build {\n  id: ID!\n  repositoryId: ID!\n  branch: String!\n  changeIdInRepo: String!\n  changeMessageTitle: String\n  changeMessage: String\n  durationInSeconds: Long\n  pullRequest: Long\n  isSenderUserCollaborator: Boolean\n  senderUserPermissions: String\n  changeTimestamp: Long!\n  buildCreatedTimestamp: Long!\n  status: BuildStatus\n  notifications: [Notification]\n  tasks: [Task]\n  latestGroupTasks: [Task]\n  repository: Repository!\n  viewerPermission: PermissionType!\n}\n\ninput BuildApproveInput {\n  buildId: ID!\n  clientMutationId: String\n}\n\ntype BuildApprovePayload {\n  build: Build!\n  clientMutationId: String\n}\n\ninput BuildReTriggerInput {\n  buildId: ID!\n  clientMutationId: String\n}\n\ntype BuildReTriggerPayload {\n  build: Build!\n  clientMutationId: String\n}\n\n\"\"\"Build status.\"\"\"\nenum BuildStatus {\n  CREATED\n  NEEDS_APPROVAL\n  TRIGGERED\n  EXECUTING\n  FAILED\n  COMPLETED\n  ABORTED\n  ERRORED\n}\n\ninput BuyComputeCreditsInput {\n  accountId: ID!\n  amountOfCredits: String!\n  paymentTokenId: String!\n  clientMutationId: String\n}\n\ntype BuyComputeCreditsPayload {\n  error: String\n  info: GitHubOrganizationInfo\n  user: User\n  clientMutationId: String\n}\n\n\"\"\"Repository Setting to choose how to decrypt variables.\"\"\"\nenum DecryptEnvironmentVariablesFor {\n  USERS_WITH_WRITE_PERMISSIONS\n  EVERYONE\n}\n\ninput GenerateNewAccessTokenInput {\n  accountId: ID\n  clientMutationId: String\n}\n\ntype GenerateNewAccessTokenPayload {\n  token: String!\n  clientMutationId: String\n}\n\ntype GitHubMarketplacePurchase {\n  accountId: Long!\n  login: String!\n  planId: Long!\n  planName: String!\n  unitCount: Long!\n  onFreeTrial: Boolean!\n  freeTrialDaysLeft: Int!\n}\n\ntype GitHubOrganizationInfo {\n  id: ID!\n  name: String!\n  role: String!\n  purchase: GitHubMarketplacePurchase\n  activeUsersAmount: Int!\n  activeUserNames: [String]\n  balanceInCredits: String!\n  transactions(\n    \"\"\"fetching only nodes before this node (exclusive)\"\"\"\n    before: String\n\n    \"\"\"fetching only nodes after this node (exclusive)\"\"\"\n    after: String\n\n    \"\"\"fetching only the first certain number of nodes\"\"\"\n    first: Int\n\n    \"\"\"fetching only the last certain number of nodes\"\"\"\n    last: Int\n  ): AccountTransactionsConnection\n  billingSettings: BillingSettings\n  webhookSettings: WebHookSettings\n  webhookDeliveries(\n    \"\"\"fetching only nodes before this node (exclusive)\"\"\"\n    before: String\n\n    \"\"\"fetching only nodes after this node (exclusive)\"\"\"\n    after: String\n\n    \"\"\"fetching only the first certain number of nodes\"\"\"\n    first: Int\n\n    \"\"\"fetching only the last certain number of nodes\"\"\"\n    last: Int\n  ): WebhookDeliveriesConnection\n  apiToken: ApiAccessToken\n}\n\n\"\"\"Long type\"\"\"\nscalar Long\n\ntype Mutation {\n  securedVariable(input: RepositorySecuredVariableInput!): RepositorySecuredVariablePayload\n  createBuild(input: RepositoryCreateBuildInput!): RepositoryCreateBuildPayload\n  rerun(input: TaskInput!): TaskPayload\n  abortTask(input: TaskAbortInput!): TaskAbortPayload\n  retrigger(input: BuildReTriggerInput!): BuildReTriggerPayload\n  saveSettings(input: RepositorySettingsInput!): RepositorySettingsPayload\n  approve(input: BuildApproveInput!): BuildApprovePayload\n  trigger(input: TaskTriggerInput!): TaskTriggerPayload\n  buyComputeCredits(input: BuyComputeCreditsInput!): BuyComputeCreditsPayload\n  saveWebHookSettings(input: SaveWebHookSettingsInput!): SaveWebHookSettingsPayload\n  saveBillingSettings(input: BillingSettingsInput!): BillingSettingsPayload\n  generateNewAccessToken(input: GenerateNewAccessTokenInput!): GenerateNewAccessTokenPayload\n}\n\ntype Notification {\n  level: NotificationLevel\n  message: String!\n  link: String\n}\n\n\"\"\"Notification level.\"\"\"\nenum NotificationLevel {\n  INFO\n  WARNING\n  ERROR\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\n\"\"\"User access level.\"\"\"\nenum PermissionType {\n  NONE\n  READ\n  WRITE\n  ADMIN\n}\n\ntype Repository {\n  id: ID!\n  owner: String!\n  name: String!\n  cloneUrl: String!\n  masterBranch: String!\n  isPrivate: Boolean!\n  builds(\n    \"\"\"fetching only nodes before this node (exclusive)\"\"\"\n    before: String\n\n    \"\"\"fetching only nodes after this node (exclusive)\"\"\"\n    after: String\n\n    \"\"\"fetching only the first certain number of nodes\"\"\"\n    first: Int\n\n    \"\"\"fetching only the last certain number of nodes\"\"\"\n    last: Int\n\n    \"\"\"branch to fetch builds for\"\"\"\n    branch: String\n  ): RepositoryBuildsConnection\n  settings: RepositorySettings\n  viewerPermission: PermissionType\n  lastDefaultBranchBuild: Build\n}\n\n\"\"\"An edge in a connection\"\"\"\ntype RepositoryBuildEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: Build\n\n  \"\"\"cursor marks a unique position or index into the connection\"\"\"\n  cursor: String!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype RepositoryBuildsConnection {\n  \"\"\"a list of edges\"\"\"\n  edges: [RepositoryBuildEdge]\n\n  \"\"\"details about this specific page\"\"\"\n  pageInfo: PageInfo!\n}\n\ninput RepositoryCreateBuildInput {\n  repositoryId: ID!\n  branch: String!\n  sha: String\n  configOverride: String\n  clientMutationId: String\n}\n\ntype RepositoryCreateBuildPayload {\n  build: Build!\n  clientMutationId: String\n}\n\ninput RepositorySecuredVariableInput {\n  repositoryId: ID!\n  valueToSecure: String!\n  clientMutationId: String\n}\n\ntype RepositorySecuredVariablePayload {\n  variableName: String!\n  clientMutationId: String\n}\n\ntype RepositorySettings {\n  needsApproval: Boolean\n  decryptEnvironmentVariables: DecryptEnvironmentVariablesFor\n}\n\ninput RepositorySettingsInput {\n  repositoryId: ID!\n  needsApproval: Boolean\n  decryptEnvironmentVariables: DecryptEnvironmentVariablesFor\n  clientMutationId: String\n}\n\ntype RepositorySettingsPayload {\n  settings: RepositorySettings!\n  clientMutationId: String\n}\n\ntype Root {\n  viewer: User\n  repository(id: ID!): Repository\n  githubRepository(owner: String!, name: String!): Repository\n  githubRepositories(owner: String!): [Repository]\n  githubOrganizationInfo(organization: String!): GitHubOrganizationInfo\n  build(id: ID!): Build\n  task(id: ID!): Task\n  webhookDelivery(id: String!): WebHookDelivery\n}\n\ninput SaveWebHookSettingsInput {\n  accountId: ID!\n  webhookURL: String!\n  clientMutationId: String\n}\n\ntype SaveWebHookSettingsPayload {\n  error: String\n  info: GitHubOrganizationInfo\n  clientMutationId: String\n}\n\ntype Subscription {\n  task(id: ID!): Task\n  build(id: ID!): Build\n  repository(id: ID!): Repository\n}\n\ntype Task {\n  id: ID!\n  buildId: ID!\n  repositoryId: ID!\n  name: String!\n  status: TaskStatus\n  notifications: [Notification]\n  commands: [TaskCommand]\n  artifacts: [Artifacts]\n  commandLogsTail(name: String!): [String]\n  statusTimestamp: Long!\n  creationTimestamp: Long!\n  scheduledTimestamp: Long!\n  executingTimestamp: Long!\n  finalStatusTimestamp: Long!\n  durationInSeconds: Long!\n  labels: [String]\n  uniqueLabels: [String]\n  statusDurations: [TaskStatusDuration]\n  repository: Repository!\n  build: Build!\n  previousRuns: [Task]\n  allOtherRuns: [Task]\n  dependencies: [Task]\n  automaticReRun: Boolean!\n  useComputeCredits: Boolean!\n  usedComputeCredits: Boolean!\n  transaction: AccountTransaction\n}\n\ninput TaskAbortInput {\n  taskId: ID!\n  clientMutationId: String\n}\n\ntype TaskAbortPayload {\n  abortedTask: Task!\n  clientMutationId: String\n}\n\ntype TaskCommand {\n  name: String\n  type: TaskCommandType\n  status: TaskCommandStatus\n  durationInSeconds: Int\n}\n\n\"\"\"Task Command status.\"\"\"\nenum TaskCommandStatus {\n  UNDEFINED\n  SUCCESS\n  FAILURE\n  EXECUTING\n  SKIPPED\n  ABORTED\n}\n\n\"\"\"Task Command type.\"\"\"\nenum TaskCommandType {\n  WAIT\n  EXIT\n  EXECUTE_SCRIPT\n  CACHE\n  UPLOAD_CACHE\n  CLONE\n  EXECUTE_BACKGROUND_SCRIPT\n}\n\ninput TaskInput {\n  taskId: ID!\n  clientMutationId: String\n}\n\ntype TaskPayload {\n  newTask: Task!\n  clientMutationId: String\n}\n\n\"\"\"Task status.\"\"\"\nenum TaskStatus {\n  CREATED\n  TRIGGERED\n  SCHEDULED\n  EXECUTING\n  ABORTED\n  FAILED\n  COMPLETED\n  SKIPPED\n  PAUSED\n}\n\ntype TaskStatusDuration {\n  status: TaskStatus!\n  durationInSeconds: Long!\n}\n\ninput TaskTriggerInput {\n  taskId: ID!\n  clientMutationId: String\n}\n\ntype TaskTriggerPayload {\n  task: Task!\n  clientMutationId: String\n}\n\ntype User {\n  id: ID!\n  githubUserId: Long\n  githubUserName: String!\n  avatarURL: String\n  builds(\n    \"\"\"fetching only nodes before this node (exclusive)\"\"\"\n    before: String\n\n    \"\"\"fetching only nodes after this node (exclusive)\"\"\"\n    after: String\n\n    \"\"\"fetching only the first certain number of nodes\"\"\"\n    first: Int\n\n    \"\"\"fetching only the last certain number of nodes\"\"\"\n    last: Int\n  ): UserBuildsConnection\n  githubMarketplacePurchase: GitHubMarketplacePurchase\n  topActiveRepositories: [Repository]\n  organizations: [GitHubOrganizationInfo]\n  balanceInCredits: String!\n  transactions(\n    \"\"\"fetching only nodes before this node (exclusive)\"\"\"\n    before: String\n\n    \"\"\"fetching only nodes after this node (exclusive)\"\"\"\n    after: String\n\n    \"\"\"fetching only the first certain number of nodes\"\"\"\n    first: Int\n\n    \"\"\"fetching only the last certain number of nodes\"\"\"\n    last: Int\n  ): UserTransactionsConnection\n  apiToken: ApiAccessToken\n}\n\n\"\"\"An edge in a connection\"\"\"\ntype UserBuildEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: Build\n\n  \"\"\"cursor marks a unique position or index into the connection\"\"\"\n  cursor: String!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype UserBuildsConnection {\n  \"\"\"a list of edges\"\"\"\n  edges: [UserBuildEdge]\n\n  \"\"\"details about this specific page\"\"\"\n  pageInfo: PageInfo!\n}\n\n\"\"\"An edge in a connection\"\"\"\ntype UserTransactionEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: AccountTransaction\n\n  \"\"\"cursor marks a unique position or index into the connection\"\"\"\n  cursor: String!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype UserTransactionsConnection {\n  \"\"\"a list of edges\"\"\"\n  edges: [UserTransactionEdge]\n\n  \"\"\"details about this specific page\"\"\"\n  pageInfo: PageInfo!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype WebhookDeliveriesConnection {\n  \"\"\"a list of edges\"\"\"\n  edges: [WebHookDeliveryEdge]\n\n  \"\"\"details about this specific page\"\"\"\n  pageInfo: PageInfo!\n}\n\ntype WebHookDelivery {\n  id: String!\n  accountId: Long!\n  repositoryId: Long!\n  timestamp: Long!\n  payload: WebHookDeliveryPayload!\n  response: WebHookDeliveryResponse!\n}\n\n\"\"\"An edge in a connection\"\"\"\ntype WebHookDeliveryEdge {\n  \"\"\"The item at the end of the edge\"\"\"\n  node: WebHookDelivery\n\n  \"\"\"cursor marks a unique position or index into the connection\"\"\"\n  cursor: String!\n}\n\ntype WebHookDeliveryPayload {\n  event: String!\n  action: String!\n  data: String!\n}\n\ntype WebHookDeliveryResponse {\n  status: Int!\n  duration: Long!\n  data: String!\n}\n\ntype WebHookSettings {\n  webhookURL: String\n}\n\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 45,
      "containsCycle": true,
      "numDefinitions": 67
    }
  ],
  "metrics": {
    "created_at": "2017-07-16T19:38:33Z",
    "updated_at": "2019-07-09T00:23:16Z",
    "pushed_at": "2019-07-09T00:23:15Z",
    "issues": 37,
    "watchers": 4,
    "fork_count": 4,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 32,
    "pull_requests_open": 0,
    "pull_requests_closed": 9,
    "pull_requests_merged": 23,
    "releases": 0,
    "stargazers": 12
  }
}