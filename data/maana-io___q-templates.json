{
  "repo_name": "q-templates",
  "repo_full_name": "maana-io/q-templates",
  "repo_owner": "maana-io",
  "repo_description": "A collection of language-specific (Javascript, Python, Scala, ...) Maana Knowledge Service template projects.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.gql",
      "path": "node/basic/service/src/graphql/sample/schema.gql",
      "sha": "1c9741c3d5b457d0fa19c26bd1df12544786931f",
      "url": "https://api.github.com/repositories/119682769/contents/node/basic/service/src/graphql/sample/schema.gql?ref=3066006bd3ed25e5687ee091f0f5a9b843eedc3d",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/1c9741c3d5b457d0fa19c26bd1df12544786931f",
      "html_url": "https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/basic/service/src/graphql/sample/schema.gql",
      "content": "# Scalars\nscalar Date\nscalar JSON\n\n# Boilerplate\ntype Info {\n  id: ID!\n  name: String!\n  description: String\n}\n\n# Custom Types\ntype Person {\n  # Kind fields\n  id: ID! # internal identifier (unique)\n  name: String # external identifier (non-unique)\n  givenName: String\n  familyName: String\n  dateOfBirth: Date\n}\n\n# Custom Inputs\ninput PersonInput {\n  id: ID # if known, otherwise one will be generated\n  name: String\n  givenName: String\n  familyName: String\n  dateOfBirth: Date\n}\n\n# Query Root\ntype Query {\n  # Boilerplate\n  info: Info\n\n  # Custom queries\n  allPeople: [Person!]!\n  person(id: ID!): Person\n}\n\n# Mutation Root\ntype Mutation {\n  # Custom mutations\n  addPerson(input: PersonInput): ID\n  updatePerson(input: PersonInput): ID\n  deletePerson(id: ID!): Person\n}\n\n# Custom Event Types\ntype PersonEvent {\n  id: ID\n  name: String\n  givenName: String\n  familyName: String\n  dateOfBirth: Date\n}\n\n# Subscription Root\ntype Subscription {\n  # Custom events\n  personAdded: PersonEvent!\n  personUpdated: PersonEvent!\n  personDeleted: PersonEvent!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 9
    },
    {
      "name": "schema.gql",
      "path": "node/__archive/basic-ts/src/schema.gql",
      "sha": "9b7615ea8acd071e1bdf01f7c136be0e846796ca",
      "url": "https://api.github.com/repositories/119682769/contents/node/__archive/basic-ts/src/schema.gql?ref=3066006bd3ed25e5687ee091f0f5a9b843eedc3d",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/9b7615ea8acd071e1bdf01f7c136be0e846796ca",
      "html_url": "https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/basic-ts/src/schema.gql",
      "content": "scalar Date\n\nscalar JSON\n\ntype Info {\n  id: ID!\n  name: String!\n  description: String\n}\n\ntype Person {\n  # Kind fields\n  id: ID! # internal identifier (unique)\n  name: String! # external identifier (non-unique)\n  # Domain-specific fields\n  givenName: String\n  familyName: String\n  dateOfBirth: Date\n}\n\n# Create a Person instance\ninput AddPersonInput {\n  id: ID # if known, otherwise one will be generated\n  # these are all optional, but the resolver(s) must produce a 'name' value, since it is required\n  name: String\n  givenName: String\n  familyName: String\n  dateOfBirth: Date\n}\n\n# Create a Person instance\ninput UpdatePersonInput {\n  id: ID! # required\n  # only what is changing\n  name: String\n  givenName: String\n  familyName: String\n  dateOfBirth: Date\n}\n\n# Standard queries (instance and batch)\ntype Query {\n  info: Info\n  # unique people\n  person(id: ID!): Person\n  persons(ids: [ID!]!): [Person] # order preserved\n  # specialized queries\n  personsByName(name: String!): [Person]\n  personsByDateOfBirth(date: Date!): [Person]\n}\n\n# Standard mutations (instance and batch)\ntype Mutation {\n  addPerson(input: AddPersonInput): ID\n  addPersons(input: [AddPersonInput!]!): [ID]\n  updatePerson(input: UpdatePersonInput): ID\n  updatePersons(input: [UpdatePersonInput!]!): [ID]\n  deletePerson(id: ID!): Person\n  deletePersons(ids: [ID!]!): [Person]\n}\n\n# Standard events\ntype PersonAddedEvent {\n  id: ID!\n  name: String!\n}\n\ntype PersonUpdatedEvent {\n  id: ID!\n  name: String!\n  # only what changed\n  givenName: String\n  familyName: String\n  dateOfBirth: Date\n}\n\ntype PersonDeletedEvent {\n  id: ID!\n  name: String!\n  # only what was known\n  givenName: String\n  familyName: String\n  dateOfBirth: Date\n}\n\ntype Subscription {\n  personAdded: PersonAddedEvent!\n  personUpdated: PersonUpdatedEvent!\n  personDeleted: PersonDeletedEvent!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 8,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 12
    },
    {
      "name": "query.gql",
      "path": "python/basic/docker_base/schema/query.gql",
      "sha": "4e87bf49faf632cc890b85e34301cdb2534b2565",
      "url": "https://api.github.com/repositories/119682769/contents/python/basic/docker_base/schema/query.gql?ref=392f9970e621fd6551bd5ca036262f5a0a2cc439",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/4e87bf49faf632cc890b85e34301cdb2534b2565",
      "html_url": "https://github.com/maana-io/q-templates/blob/392f9970e621fd6551bd5ca036262f5a0a2cc439/python/basic/docker_base/schema/query.gql",
      "content": "type Query {\n  info: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 1
    },
    {
      "name": "query.gql",
      "path": "python/basic/service/schema/query.gql",
      "sha": "4e87bf49faf632cc890b85e34301cdb2534b2565",
      "url": "https://api.github.com/repositories/119682769/contents/python/basic/service/schema/query.gql?ref=392f9970e621fd6551bd5ca036262f5a0a2cc439",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/4e87bf49faf632cc890b85e34301cdb2534b2565",
      "html_url": "https://github.com/maana-io/q-templates/blob/392f9970e621fd6551bd5ca036262f5a0a2cc439/python/basic/service/schema/query.gql",
      "content": "type Query {\n  info: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 1
    },
    {
      "name": "schema.graphql",
      "path": "node/__archive/advanced/packages/model/schema.graphql",
      "sha": "eb1cdbec770b72f670dec4251427b655994e5cc9",
      "url": "https://api.github.com/repositories/119682769/contents/node/__archive/advanced/packages/model/schema.graphql?ref=3066006bd3ed25e5687ee091f0f5a9b843eedc3d",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/eb1cdbec770b72f670dec4251427b655994e5cc9",
      "html_url": "https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/advanced/packages/model/schema.graphql",
      "content": "# source: http://localhost:4468\n# timestamp: Wed Jul 18 2018 06:51:42 GMT-0700 (PDT)\n\ntype AggregateEdge {\n  count: Int!\n}\n\ntype AggregateGraph {\n  count: Int!\n}\n\ntype AggregateVertex {\n  count: Int!\n}\n\ntype BatchPayload {\n  \"\"\"The number of nodes that have been affected by the Batch operation.\"\"\"\n  count: Long!\n}\n\ntype Edge implements Node {\n  id: ID!\n  graph(where: GraphWhereInput): Graph!\n  source(where: VertexWhereInput): Vertex!\n  target(where: VertexWhereInput): Vertex!\n  title: String\n  type: EdgeType\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype EdgeConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [EdgeEdge]!\n  aggregate: AggregateEdge!\n}\n\ninput EdgeCreateInput {\n  title: String\n  type: EdgeType\n  graph: GraphCreateOneWithoutEdgesInput!\n  source: VertexCreateOneWithoutEdgesSourceInput!\n  target: VertexCreateOneWithoutEdgesTargetInput!\n}\n\ninput EdgeCreateManyWithoutGraphInput {\n  create: [EdgeCreateWithoutGraphInput!]\n  connect: [EdgeWhereUniqueInput!]\n}\n\ninput EdgeCreateManyWithoutSourceInput {\n  create: [EdgeCreateWithoutSourceInput!]\n  connect: [EdgeWhereUniqueInput!]\n}\n\ninput EdgeCreateManyWithoutTargetInput {\n  create: [EdgeCreateWithoutTargetInput!]\n  connect: [EdgeWhereUniqueInput!]\n}\n\ninput EdgeCreateWithoutGraphInput {\n  title: String\n  type: EdgeType\n  source: VertexCreateOneWithoutEdgesSourceInput!\n  target: VertexCreateOneWithoutEdgesTargetInput!\n}\n\ninput EdgeCreateWithoutSourceInput {\n  title: String\n  type: EdgeType\n  graph: GraphCreateOneWithoutEdgesInput!\n  target: VertexCreateOneWithoutEdgesTargetInput!\n}\n\ninput EdgeCreateWithoutTargetInput {\n  title: String\n  type: EdgeType\n  graph: GraphCreateOneWithoutEdgesInput!\n  source: VertexCreateOneWithoutEdgesSourceInput!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype EdgeEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Edge!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum EdgeOrderByInput {\n  id_ASC\n  id_DESC\n  title_ASC\n  title_DESC\n  type_ASC\n  type_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype EdgePreviousValues {\n  id: ID!\n  title: String\n  type: EdgeType\n}\n\ntype EdgeSubscriptionPayload {\n  mutation: MutationType!\n  node: Edge\n  updatedFields: [String!]\n  previousValues: EdgePreviousValues\n}\n\ninput EdgeSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [EdgeSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [EdgeSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [EdgeSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: EdgeWhereInput\n}\n\nenum EdgeType {\n  EmptyEdge\n  SpecialEdge\n}\n\ninput EdgeUpdateInput {\n  title: String\n  type: EdgeType\n  graph: GraphUpdateOneWithoutEdgesInput\n  source: VertexUpdateOneWithoutEdgesSourceInput\n  target: VertexUpdateOneWithoutEdgesTargetInput\n}\n\ninput EdgeUpdateManyWithoutGraphInput {\n  create: [EdgeCreateWithoutGraphInput!]\n  connect: [EdgeWhereUniqueInput!]\n  disconnect: [EdgeWhereUniqueInput!]\n  delete: [EdgeWhereUniqueInput!]\n  update: [EdgeUpdateWithWhereUniqueWithoutGraphInput!]\n  upsert: [EdgeUpsertWithWhereUniqueWithoutGraphInput!]\n}\n\ninput EdgeUpdateManyWithoutSourceInput {\n  create: [EdgeCreateWithoutSourceInput!]\n  connect: [EdgeWhereUniqueInput!]\n  disconnect: [EdgeWhereUniqueInput!]\n  delete: [EdgeWhereUniqueInput!]\n  update: [EdgeUpdateWithWhereUniqueWithoutSourceInput!]\n  upsert: [EdgeUpsertWithWhereUniqueWithoutSourceInput!]\n}\n\ninput EdgeUpdateManyWithoutTargetInput {\n  create: [EdgeCreateWithoutTargetInput!]\n  connect: [EdgeWhereUniqueInput!]\n  disconnect: [EdgeWhereUniqueInput!]\n  delete: [EdgeWhereUniqueInput!]\n  update: [EdgeUpdateWithWhereUniqueWithoutTargetInput!]\n  upsert: [EdgeUpsertWithWhereUniqueWithoutTargetInput!]\n}\n\ninput EdgeUpdateWithoutGraphDataInput {\n  title: String\n  type: EdgeType\n  source: VertexUpdateOneWithoutEdgesSourceInput\n  target: VertexUpdateOneWithoutEdgesTargetInput\n}\n\ninput EdgeUpdateWithoutSourceDataInput {\n  title: String\n  type: EdgeType\n  graph: GraphUpdateOneWithoutEdgesInput\n  target: VertexUpdateOneWithoutEdgesTargetInput\n}\n\ninput EdgeUpdateWithoutTargetDataInput {\n  title: String\n  type: EdgeType\n  graph: GraphUpdateOneWithoutEdgesInput\n  source: VertexUpdateOneWithoutEdgesSourceInput\n}\n\ninput EdgeUpdateWithWhereUniqueWithoutGraphInput {\n  where: EdgeWhereUniqueInput!\n  data: EdgeUpdateWithoutGraphDataInput!\n}\n\ninput EdgeUpdateWithWhereUniqueWithoutSourceInput {\n  where: EdgeWhereUniqueInput!\n  data: EdgeUpdateWithoutSourceDataInput!\n}\n\ninput EdgeUpdateWithWhereUniqueWithoutTargetInput {\n  where: EdgeWhereUniqueInput!\n  data: EdgeUpdateWithoutTargetDataInput!\n}\n\ninput EdgeUpsertWithWhereUniqueWithoutGraphInput {\n  where: EdgeWhereUniqueInput!\n  update: EdgeUpdateWithoutGraphDataInput!\n  create: EdgeCreateWithoutGraphInput!\n}\n\ninput EdgeUpsertWithWhereUniqueWithoutSourceInput {\n  where: EdgeWhereUniqueInput!\n  update: EdgeUpdateWithoutSourceDataInput!\n  create: EdgeCreateWithoutSourceInput!\n}\n\ninput EdgeUpsertWithWhereUniqueWithoutTargetInput {\n  where: EdgeWhereUniqueInput!\n  update: EdgeUpdateWithoutTargetDataInput!\n  create: EdgeCreateWithoutTargetInput!\n}\n\ninput EdgeWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [EdgeWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [EdgeWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [EdgeWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  title: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  title_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  title_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  title_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  title_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  title_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  title_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  title_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  title_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  title_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  title_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  title_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  title_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  title_not_ends_with: String\n  type: EdgeType\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  type_not: EdgeType\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  type_in: [EdgeType!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  type_not_in: [EdgeType!]\n  graph: GraphWhereInput\n  source: VertexWhereInput\n  target: VertexWhereInput\n}\n\ninput EdgeWhereUniqueInput {\n  id: ID\n}\n\ntype Graph implements Node {\n  id: ID!\n  name: String\n  vertices(where: VertexWhereInput, orderBy: VertexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vertex!]\n  edges(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Edge!]\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype GraphConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [GraphEdge]!\n  aggregate: AggregateGraph!\n}\n\ninput GraphCreateInput {\n  name: String\n  vertices: VertexCreateManyWithoutGraphInput\n  edges: EdgeCreateManyWithoutGraphInput\n}\n\ninput GraphCreateOneWithoutEdgesInput {\n  create: GraphCreateWithoutEdgesInput\n  connect: GraphWhereUniqueInput\n}\n\ninput GraphCreateOneWithoutVerticesInput {\n  create: GraphCreateWithoutVerticesInput\n  connect: GraphWhereUniqueInput\n}\n\ninput GraphCreateWithoutEdgesInput {\n  name: String\n  vertices: VertexCreateManyWithoutGraphInput\n}\n\ninput GraphCreateWithoutVerticesInput {\n  name: String\n  edges: EdgeCreateManyWithoutGraphInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype GraphEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Graph!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum GraphOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype GraphPreviousValues {\n  id: ID!\n  name: String\n}\n\ntype GraphSubscriptionPayload {\n  mutation: MutationType!\n  node: Graph\n  updatedFields: [String!]\n  previousValues: GraphPreviousValues\n}\n\ninput GraphSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [GraphSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [GraphSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [GraphSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: GraphWhereInput\n}\n\ninput GraphUpdateInput {\n  name: String\n  vertices: VertexUpdateManyWithoutGraphInput\n  edges: EdgeUpdateManyWithoutGraphInput\n}\n\ninput GraphUpdateOneWithoutEdgesInput {\n  create: GraphCreateWithoutEdgesInput\n  connect: GraphWhereUniqueInput\n  delete: Boolean\n  update: GraphUpdateWithoutEdgesDataInput\n  upsert: GraphUpsertWithoutEdgesInput\n}\n\ninput GraphUpdateOneWithoutVerticesInput {\n  create: GraphCreateWithoutVerticesInput\n  connect: GraphWhereUniqueInput\n  delete: Boolean\n  update: GraphUpdateWithoutVerticesDataInput\n  upsert: GraphUpsertWithoutVerticesInput\n}\n\ninput GraphUpdateWithoutEdgesDataInput {\n  name: String\n  vertices: VertexUpdateManyWithoutGraphInput\n}\n\ninput GraphUpdateWithoutVerticesDataInput {\n  name: String\n  edges: EdgeUpdateManyWithoutGraphInput\n}\n\ninput GraphUpsertWithoutEdgesInput {\n  update: GraphUpdateWithoutEdgesDataInput!\n  create: GraphCreateWithoutEdgesInput!\n}\n\ninput GraphUpsertWithoutVerticesInput {\n  update: GraphUpdateWithoutVerticesDataInput!\n  create: GraphCreateWithoutVerticesInput!\n}\n\ninput GraphWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [GraphWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [GraphWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [GraphWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  vertices_every: VertexWhereInput\n  vertices_some: VertexWhereInput\n  vertices_none: VertexWhereInput\n  edges_every: EdgeWhereInput\n  edges_some: EdgeWhereInput\n  edges_none: EdgeWhereInput\n}\n\ninput GraphWhereUniqueInput {\n  id: ID\n}\n\n\"\"\"\nThe `Long` scalar type represents non-fractional signed whole numeric values.\nLong can represent values between -(2^63) and 2^63 - 1.\n\"\"\"\nscalar Long\n\ntype Mutation {\n  createGraph(data: GraphCreateInput!): Graph!\n  createVertex(data: VertexCreateInput!): Vertex!\n  createEdge(data: EdgeCreateInput!): Edge!\n  updateGraph(data: GraphUpdateInput!, where: GraphWhereUniqueInput!): Graph\n  updateVertex(data: VertexUpdateInput!, where: VertexWhereUniqueInput!): Vertex\n  updateEdge(data: EdgeUpdateInput!, where: EdgeWhereUniqueInput!): Edge\n  deleteGraph(where: GraphWhereUniqueInput!): Graph\n  deleteVertex(where: VertexWhereUniqueInput!): Vertex\n  deleteEdge(where: EdgeWhereUniqueInput!): Edge\n  upsertGraph(where: GraphWhereUniqueInput!, create: GraphCreateInput!, update: GraphUpdateInput!): Graph!\n  upsertVertex(where: VertexWhereUniqueInput!, create: VertexCreateInput!, update: VertexUpdateInput!): Vertex!\n  upsertEdge(where: EdgeWhereUniqueInput!, create: EdgeCreateInput!, update: EdgeUpdateInput!): Edge!\n  updateManyGraphs(data: GraphUpdateInput!, where: GraphWhereInput): BatchPayload!\n  updateManyVertexes(data: VertexUpdateInput!, where: VertexWhereInput): BatchPayload!\n  updateManyEdges(data: EdgeUpdateInput!, where: EdgeWhereInput): BatchPayload!\n  deleteManyGraphs(where: GraphWhereInput): BatchPayload!\n  deleteManyVertexes(where: VertexWhereInput): BatchPayload!\n  deleteManyEdges(where: EdgeWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\ntype Query {\n  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph]!\n  vertexes(where: VertexWhereInput, orderBy: VertexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vertex]!\n  edges(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Edge]!\n  graph(where: GraphWhereUniqueInput!): Graph\n  vertex(where: VertexWhereUniqueInput!): Vertex\n  edge(where: EdgeWhereUniqueInput!): Edge\n  graphsConnection(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GraphConnection!\n  vertexesConnection(where: VertexWhereInput, orderBy: VertexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VertexConnection!\n  edgesConnection(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EdgeConnection!\n\n  \"\"\"Fetches an object given its ID\"\"\"\n  node(\n    \"\"\"The ID of an object\"\"\"\n    id: ID!\n  ): Node\n}\n\ntype Subscription {\n  graph(where: GraphSubscriptionWhereInput): GraphSubscriptionPayload\n  vertex(where: VertexSubscriptionWhereInput): VertexSubscriptionPayload\n  edge(where: EdgeSubscriptionWhereInput): EdgeSubscriptionPayload\n}\n\ntype Vertex implements Node {\n  id: ID!\n  graph(where: GraphWhereInput): Graph!\n  x: Float!\n  y: Float!\n  edgesTarget(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Edge!]\n  edgesSource(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Edge!]\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype VertexConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [VertexEdge]!\n  aggregate: AggregateVertex!\n}\n\ninput VertexCreateInput {\n  x: Float!\n  y: Float!\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n  graph: GraphCreateOneWithoutVerticesInput!\n  edgesTarget: EdgeCreateManyWithoutTargetInput\n  edgesSource: EdgeCreateManyWithoutSourceInput\n}\n\ninput VertexCreateManyWithoutGraphInput {\n  create: [VertexCreateWithoutGraphInput!]\n  connect: [VertexWhereUniqueInput!]\n}\n\ninput VertexCreateOneWithoutEdgesSourceInput {\n  create: VertexCreateWithoutEdgesSourceInput\n  connect: VertexWhereUniqueInput\n}\n\ninput VertexCreateOneWithoutEdgesTargetInput {\n  create: VertexCreateWithoutEdgesTargetInput\n  connect: VertexWhereUniqueInput\n}\n\ninput VertexCreateWithoutEdgesSourceInput {\n  x: Float!\n  y: Float!\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n  graph: GraphCreateOneWithoutVerticesInput!\n  edgesTarget: EdgeCreateManyWithoutTargetInput\n}\n\ninput VertexCreateWithoutEdgesTargetInput {\n  x: Float!\n  y: Float!\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n  graph: GraphCreateOneWithoutVerticesInput!\n  edgesSource: EdgeCreateManyWithoutSourceInput\n}\n\ninput VertexCreateWithoutGraphInput {\n  x: Float!\n  y: Float!\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n  edgesTarget: EdgeCreateManyWithoutTargetInput\n  edgesSource: EdgeCreateManyWithoutSourceInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype VertexEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Vertex!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum VertexOrderByInput {\n  id_ASC\n  id_DESC\n  x_ASC\n  x_DESC\n  y_ASC\n  y_DESC\n  title_ASC\n  title_DESC\n  type_ASC\n  type_DESC\n  subtype_ASC\n  subtype_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype VertexPreviousValues {\n  id: ID!\n  x: Float!\n  y: Float!\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n}\n\ntype VertexSubscriptionPayload {\n  mutation: MutationType!\n  node: Vertex\n  updatedFields: [String!]\n  previousValues: VertexPreviousValues\n}\n\ninput VertexSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [VertexSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [VertexSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [VertexSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: VertexWhereInput\n}\n\nenum VertexSubtype {\n  SpecialChild\n}\n\nenum VertexType {\n  Empty\n  Special\n}\n\ninput VertexUpdateInput {\n  x: Float\n  y: Float\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n  graph: GraphUpdateOneWithoutVerticesInput\n  edgesTarget: EdgeUpdateManyWithoutTargetInput\n  edgesSource: EdgeUpdateManyWithoutSourceInput\n}\n\ninput VertexUpdateManyWithoutGraphInput {\n  create: [VertexCreateWithoutGraphInput!]\n  connect: [VertexWhereUniqueInput!]\n  disconnect: [VertexWhereUniqueInput!]\n  delete: [VertexWhereUniqueInput!]\n  update: [VertexUpdateWithWhereUniqueWithoutGraphInput!]\n  upsert: [VertexUpsertWithWhereUniqueWithoutGraphInput!]\n}\n\ninput VertexUpdateOneWithoutEdgesSourceInput {\n  create: VertexCreateWithoutEdgesSourceInput\n  connect: VertexWhereUniqueInput\n  delete: Boolean\n  update: VertexUpdateWithoutEdgesSourceDataInput\n  upsert: VertexUpsertWithoutEdgesSourceInput\n}\n\ninput VertexUpdateOneWithoutEdgesTargetInput {\n  create: VertexCreateWithoutEdgesTargetInput\n  connect: VertexWhereUniqueInput\n  delete: Boolean\n  update: VertexUpdateWithoutEdgesTargetDataInput\n  upsert: VertexUpsertWithoutEdgesTargetInput\n}\n\ninput VertexUpdateWithoutEdgesSourceDataInput {\n  x: Float\n  y: Float\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n  graph: GraphUpdateOneWithoutVerticesInput\n  edgesTarget: EdgeUpdateManyWithoutTargetInput\n}\n\ninput VertexUpdateWithoutEdgesTargetDataInput {\n  x: Float\n  y: Float\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n  graph: GraphUpdateOneWithoutVerticesInput\n  edgesSource: EdgeUpdateManyWithoutSourceInput\n}\n\ninput VertexUpdateWithoutGraphDataInput {\n  x: Float\n  y: Float\n  title: String\n  type: VertexType\n  subtype: VertexSubtype\n  edgesTarget: EdgeUpdateManyWithoutTargetInput\n  edgesSource: EdgeUpdateManyWithoutSourceInput\n}\n\ninput VertexUpdateWithWhereUniqueWithoutGraphInput {\n  where: VertexWhereUniqueInput!\n  data: VertexUpdateWithoutGraphDataInput!\n}\n\ninput VertexUpsertWithoutEdgesSourceInput {\n  update: VertexUpdateWithoutEdgesSourceDataInput!\n  create: VertexCreateWithoutEdgesSourceInput!\n}\n\ninput VertexUpsertWithoutEdgesTargetInput {\n  update: VertexUpdateWithoutEdgesTargetDataInput!\n  create: VertexCreateWithoutEdgesTargetInput!\n}\n\ninput VertexUpsertWithWhereUniqueWithoutGraphInput {\n  where: VertexWhereUniqueInput!\n  update: VertexUpdateWithoutGraphDataInput!\n  create: VertexCreateWithoutGraphInput!\n}\n\ninput VertexWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [VertexWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [VertexWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [VertexWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  x: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  x_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  x_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  x_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  x_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  x_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  x_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  x_gte: Float\n  y: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  y_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  y_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  y_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  y_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  y_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  y_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  y_gte: Float\n  title: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  title_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  title_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  title_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  title_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  title_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  title_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  title_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  title_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  title_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  title_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  title_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  title_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  title_not_ends_with: String\n  type: VertexType\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  type_not: VertexType\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  type_in: [VertexType!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  type_not_in: [VertexType!]\n  subtype: VertexSubtype\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  subtype_not: VertexSubtype\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  subtype_in: [VertexSubtype!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  subtype_not_in: [VertexSubtype!]\n  graph: GraphWhereInput\n  edgesTarget_every: EdgeWhereInput\n  edgesTarget_some: EdgeWhereInput\n  edgesTarget_none: EdgeWhereInput\n  edgesSource_every: EdgeWhereInput\n  edgesSource_some: EdgeWhereInput\n  edgesSource_none: EdgeWhereInput\n}\n\ninput VertexWhereUniqueInput {\n  id: ID\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 23,
      "containsCycle": true,
      "numDefinitions": 91
    },
    {
      "name": "prisma.graphql",
      "path": "node/__archive/cloud/src/generated/prisma.graphql",
      "sha": "a4f810ae9d3cbad8abeb2bd2206371482f2a19a9",
      "url": "https://api.github.com/repositories/119682769/contents/node/__archive/cloud/src/generated/prisma.graphql?ref=3066006bd3ed25e5687ee091f0f5a9b843eedc3d",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/a4f810ae9d3cbad8abeb2bd2206371482f2a19a9",
      "html_url": "https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/cloud/src/generated/prisma.graphql",
      "content": "# source: https://us1.prisma.sh/roie-schwaber-cohen-c0f7d8/procurement/dev\n# timestamp: Fri Aug 03 2018 10:41:31 GMT-0700 (PDT)\n\ntype AggregateCost {\n  count: Int!\n}\n\ntype AggregateGeoCoordinate {\n  count: Int!\n}\n\ntype AggregateLocation {\n  count: Int!\n}\n\ntype AggregateManufacturer {\n  count: Int!\n}\n\ntype AggregateOrder {\n  count: Int!\n}\n\ntype AggregatePart {\n  count: Int!\n}\n\ntype BatchPayload {\n  \"\"\"The number of nodes that have been affected by the Batch operation.\"\"\"\n  count: Long!\n}\n\ntype Cost {\n  currency: String\n  value: Float\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype CostConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [CostEdge]!\n  aggregate: AggregateCost!\n}\n\ninput CostCreateInput {\n  currency: String\n  value: Float\n}\n\ninput CostCreateOneInput {\n  create: CostCreateInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype CostEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Cost!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum CostOrderByInput {\n  currency_ASC\n  currency_DESC\n  value_ASC\n  value_DESC\n  id_ASC\n  id_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype CostPreviousValues {\n  currency: String\n  value: Float\n}\n\ntype CostSubscriptionPayload {\n  mutation: MutationType!\n  node: Cost\n  updatedFields: [String!]\n  previousValues: CostPreviousValues\n}\n\ninput CostSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [CostSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [CostSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [CostSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: CostWhereInput\n}\n\ninput CostUpdateDataInput {\n  currency: String\n  value: Float\n}\n\ninput CostUpdateInput {\n  currency: String\n  value: Float\n}\n\ninput CostUpdateOneInput {\n  create: CostCreateInput\n  disconnect: Boolean\n  delete: Boolean\n  update: CostUpdateDataInput\n  upsert: CostUpsertNestedInput\n}\n\ninput CostUpsertNestedInput {\n  update: CostUpdateDataInput!\n  create: CostCreateInput!\n}\n\ninput CostWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [CostWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [CostWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [CostWhereInput!]\n  currency: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  currency_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  currency_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  currency_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  currency_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  currency_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  currency_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  currency_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  currency_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  currency_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  currency_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  currency_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  currency_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  currency_not_ends_with: String\n  value: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  value_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  value_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  value_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  value_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  value_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  value_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  value_gte: Float\n}\n\nscalar DateTime\n\ntype GeoCoordinate {\n  lat: Float\n  long: Float\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype GeoCoordinateConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [GeoCoordinateEdge]!\n  aggregate: AggregateGeoCoordinate!\n}\n\ninput GeoCoordinateCreateInput {\n  lat: Float\n  long: Float\n}\n\ninput GeoCoordinateCreateOneInput {\n  create: GeoCoordinateCreateInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype GeoCoordinateEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: GeoCoordinate!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum GeoCoordinateOrderByInput {\n  lat_ASC\n  lat_DESC\n  long_ASC\n  long_DESC\n  id_ASC\n  id_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype GeoCoordinatePreviousValues {\n  lat: Float\n  long: Float\n}\n\ntype GeoCoordinateSubscriptionPayload {\n  mutation: MutationType!\n  node: GeoCoordinate\n  updatedFields: [String!]\n  previousValues: GeoCoordinatePreviousValues\n}\n\ninput GeoCoordinateSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [GeoCoordinateSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [GeoCoordinateSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [GeoCoordinateSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: GeoCoordinateWhereInput\n}\n\ninput GeoCoordinateUpdateDataInput {\n  lat: Float\n  long: Float\n}\n\ninput GeoCoordinateUpdateInput {\n  lat: Float\n  long: Float\n}\n\ninput GeoCoordinateUpdateOneInput {\n  create: GeoCoordinateCreateInput\n  disconnect: Boolean\n  delete: Boolean\n  update: GeoCoordinateUpdateDataInput\n  upsert: GeoCoordinateUpsertNestedInput\n}\n\ninput GeoCoordinateUpsertNestedInput {\n  update: GeoCoordinateUpdateDataInput!\n  create: GeoCoordinateCreateInput!\n}\n\ninput GeoCoordinateWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [GeoCoordinateWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [GeoCoordinateWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [GeoCoordinateWhereInput!]\n  lat: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  lat_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  lat_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  lat_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  lat_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  lat_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  lat_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  lat_gte: Float\n  long: Float\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  long_not: Float\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  long_in: [Float!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  long_not_in: [Float!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  long_lt: Float\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  long_lte: Float\n\n  \"\"\"All values greater than the given value.\"\"\"\n  long_gt: Float\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  long_gte: Float\n}\n\ntype Location implements Node {\n  id: ID!\n  name: String\n  coordinates(where: GeoCoordinateWhereInput): GeoCoordinate\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype LocationConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [LocationEdge]!\n  aggregate: AggregateLocation!\n}\n\ninput LocationCreateInput {\n  name: String\n  coordinates: GeoCoordinateCreateOneInput\n}\n\ninput LocationCreateOneInput {\n  create: LocationCreateInput\n  connect: LocationWhereUniqueInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype LocationEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Location!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum LocationOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype LocationPreviousValues {\n  id: ID!\n  name: String\n}\n\ntype LocationSubscriptionPayload {\n  mutation: MutationType!\n  node: Location\n  updatedFields: [String!]\n  previousValues: LocationPreviousValues\n}\n\ninput LocationSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [LocationSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [LocationSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [LocationSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: LocationWhereInput\n}\n\ninput LocationUpdateDataInput {\n  name: String\n  coordinates: GeoCoordinateUpdateOneInput\n}\n\ninput LocationUpdateInput {\n  name: String\n  coordinates: GeoCoordinateUpdateOneInput\n}\n\ninput LocationUpdateOneInput {\n  create: LocationCreateInput\n  connect: LocationWhereUniqueInput\n  disconnect: Boolean\n  delete: Boolean\n  update: LocationUpdateDataInput\n  upsert: LocationUpsertNestedInput\n}\n\ninput LocationUpsertNestedInput {\n  update: LocationUpdateDataInput!\n  create: LocationCreateInput!\n}\n\ninput LocationWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [LocationWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [LocationWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [LocationWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  coordinates: GeoCoordinateWhereInput\n}\n\ninput LocationWhereUniqueInput {\n  id: ID\n}\n\n\"\"\"\nThe `Long` scalar type represents non-fractional signed whole numeric values.\nLong can represent values between -(2^63) and 2^63 - 1.\n\"\"\"\nscalar Long\n\ntype Manufacturer implements Node {\n  id: ID!\n  name: String\n  parts(where: PartWhereInput, orderBy: PartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Part!]\n  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]\n  location(where: LocationWhereInput): Location\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype ManufacturerConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [ManufacturerEdge]!\n  aggregate: AggregateManufacturer!\n}\n\ninput ManufacturerCreateInput {\n  name: String\n  parts: PartCreateManyWithoutManufacturerInput\n  orders: OrderCreateManyWithoutSupplierInput\n  location: LocationCreateOneInput\n}\n\ninput ManufacturerCreateOneWithoutOrdersInput {\n  create: ManufacturerCreateWithoutOrdersInput\n  connect: ManufacturerWhereUniqueInput\n}\n\ninput ManufacturerCreateOneWithoutPartsInput {\n  create: ManufacturerCreateWithoutPartsInput\n  connect: ManufacturerWhereUniqueInput\n}\n\ninput ManufacturerCreateWithoutOrdersInput {\n  name: String\n  parts: PartCreateManyWithoutManufacturerInput\n  location: LocationCreateOneInput\n}\n\ninput ManufacturerCreateWithoutPartsInput {\n  name: String\n  orders: OrderCreateManyWithoutSupplierInput\n  location: LocationCreateOneInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype ManufacturerEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Manufacturer!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum ManufacturerOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype ManufacturerPreviousValues {\n  id: ID!\n  name: String\n}\n\ntype ManufacturerSubscriptionPayload {\n  mutation: MutationType!\n  node: Manufacturer\n  updatedFields: [String!]\n  previousValues: ManufacturerPreviousValues\n}\n\ninput ManufacturerSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [ManufacturerSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [ManufacturerSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [ManufacturerSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: ManufacturerWhereInput\n}\n\ninput ManufacturerUpdateInput {\n  name: String\n  parts: PartUpdateManyWithoutManufacturerInput\n  orders: OrderUpdateManyWithoutSupplierInput\n  location: LocationUpdateOneInput\n}\n\ninput ManufacturerUpdateOneWithoutOrdersInput {\n  create: ManufacturerCreateWithoutOrdersInput\n  connect: ManufacturerWhereUniqueInput\n  disconnect: Boolean\n  delete: Boolean\n  update: ManufacturerUpdateWithoutOrdersDataInput\n  upsert: ManufacturerUpsertWithoutOrdersInput\n}\n\ninput ManufacturerUpdateOneWithoutPartsInput {\n  create: ManufacturerCreateWithoutPartsInput\n  connect: ManufacturerWhereUniqueInput\n  disconnect: Boolean\n  delete: Boolean\n  update: ManufacturerUpdateWithoutPartsDataInput\n  upsert: ManufacturerUpsertWithoutPartsInput\n}\n\ninput ManufacturerUpdateWithoutOrdersDataInput {\n  name: String\n  parts: PartUpdateManyWithoutManufacturerInput\n  location: LocationUpdateOneInput\n}\n\ninput ManufacturerUpdateWithoutPartsDataInput {\n  name: String\n  orders: OrderUpdateManyWithoutSupplierInput\n  location: LocationUpdateOneInput\n}\n\ninput ManufacturerUpsertWithoutOrdersInput {\n  update: ManufacturerUpdateWithoutOrdersDataInput!\n  create: ManufacturerCreateWithoutOrdersInput!\n}\n\ninput ManufacturerUpsertWithoutPartsInput {\n  update: ManufacturerUpdateWithoutPartsDataInput!\n  create: ManufacturerCreateWithoutPartsInput!\n}\n\ninput ManufacturerWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [ManufacturerWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [ManufacturerWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [ManufacturerWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  parts_every: PartWhereInput\n  parts_some: PartWhereInput\n  parts_none: PartWhereInput\n  orders_every: OrderWhereInput\n  orders_some: OrderWhereInput\n  orders_none: OrderWhereInput\n  location: LocationWhereInput\n}\n\ninput ManufacturerWhereUniqueInput {\n  id: ID\n}\n\ntype Mutation {\n  createPart(data: PartCreateInput!): Part!\n  createManufacturer(data: ManufacturerCreateInput!): Manufacturer!\n  createOrder(data: OrderCreateInput!): Order!\n  createGeoCoordinate(data: GeoCoordinateCreateInput!): GeoCoordinate!\n  createCost(data: CostCreateInput!): Cost!\n  createLocation(data: LocationCreateInput!): Location!\n  updatePart(data: PartUpdateInput!, where: PartWhereUniqueInput!): Part\n  updateManufacturer(data: ManufacturerUpdateInput!, where: ManufacturerWhereUniqueInput!): Manufacturer\n  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order\n  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location\n  deletePart(where: PartWhereUniqueInput!): Part\n  deleteManufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer\n  deleteOrder(where: OrderWhereUniqueInput!): Order\n  deleteLocation(where: LocationWhereUniqueInput!): Location\n  upsertPart(where: PartWhereUniqueInput!, create: PartCreateInput!, update: PartUpdateInput!): Part!\n  upsertManufacturer(where: ManufacturerWhereUniqueInput!, create: ManufacturerCreateInput!, update: ManufacturerUpdateInput!): Manufacturer!\n  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!\n  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!\n  updateManyParts(data: PartUpdateInput!, where: PartWhereInput): BatchPayload!\n  updateManyManufacturers(data: ManufacturerUpdateInput!, where: ManufacturerWhereInput): BatchPayload!\n  updateManyOrders(data: OrderUpdateInput!, where: OrderWhereInput): BatchPayload!\n  updateManyGeoCoordinates(data: GeoCoordinateUpdateInput!, where: GeoCoordinateWhereInput): BatchPayload!\n  updateManyCosts(data: CostUpdateInput!, where: CostWhereInput): BatchPayload!\n  updateManyLocations(data: LocationUpdateInput!, where: LocationWhereInput): BatchPayload!\n  deleteManyParts(where: PartWhereInput): BatchPayload!\n  deleteManyManufacturers(where: ManufacturerWhereInput): BatchPayload!\n  deleteManyOrders(where: OrderWhereInput): BatchPayload!\n  deleteManyGeoCoordinates(where: GeoCoordinateWhereInput): BatchPayload!\n  deleteManyCosts(where: CostWhereInput): BatchPayload!\n  deleteManyLocations(where: LocationWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\ntype Order implements Node {\n  id: ID!\n  part(where: PartWhereInput): Part!\n  supplier(where: ManufacturerWhereInput): Manufacturer\n  deliveryDate: DateTime\n  cost(where: CostWhereInput): Cost\n  status: Status\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype OrderConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [OrderEdge]!\n  aggregate: AggregateOrder!\n}\n\ninput OrderCreateInput {\n  deliveryDate: DateTime\n  status: Status\n  part: PartCreateOneWithoutOrderInput!\n  supplier: ManufacturerCreateOneWithoutOrdersInput\n  cost: CostCreateOneInput\n}\n\ninput OrderCreateManyWithoutSupplierInput {\n  create: [OrderCreateWithoutSupplierInput!]\n  connect: [OrderWhereUniqueInput!]\n}\n\ninput OrderCreateOneWithoutPartInput {\n  create: OrderCreateWithoutPartInput\n  connect: OrderWhereUniqueInput\n}\n\ninput OrderCreateWithoutPartInput {\n  deliveryDate: DateTime\n  status: Status\n  supplier: ManufacturerCreateOneWithoutOrdersInput\n  cost: CostCreateOneInput\n}\n\ninput OrderCreateWithoutSupplierInput {\n  deliveryDate: DateTime\n  status: Status\n  part: PartCreateOneWithoutOrderInput!\n  cost: CostCreateOneInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype OrderEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Order!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum OrderOrderByInput {\n  id_ASC\n  id_DESC\n  deliveryDate_ASC\n  deliveryDate_DESC\n  status_ASC\n  status_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype OrderPreviousValues {\n  id: ID!\n  deliveryDate: DateTime\n  status: Status\n}\n\ntype OrderSubscriptionPayload {\n  mutation: MutationType!\n  node: Order\n  updatedFields: [String!]\n  previousValues: OrderPreviousValues\n}\n\ninput OrderSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [OrderSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [OrderSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [OrderSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: OrderWhereInput\n}\n\ninput OrderUpdateInput {\n  deliveryDate: DateTime\n  status: Status\n  part: PartUpdateOneWithoutOrderInput\n  supplier: ManufacturerUpdateOneWithoutOrdersInput\n  cost: CostUpdateOneInput\n}\n\ninput OrderUpdateManyWithoutSupplierInput {\n  create: [OrderCreateWithoutSupplierInput!]\n  connect: [OrderWhereUniqueInput!]\n  disconnect: [OrderWhereUniqueInput!]\n  delete: [OrderWhereUniqueInput!]\n  update: [OrderUpdateWithWhereUniqueWithoutSupplierInput!]\n  upsert: [OrderUpsertWithWhereUniqueWithoutSupplierInput!]\n}\n\ninput OrderUpdateOneWithoutPartInput {\n  create: OrderCreateWithoutPartInput\n  connect: OrderWhereUniqueInput\n  disconnect: Boolean\n  delete: Boolean\n  update: OrderUpdateWithoutPartDataInput\n  upsert: OrderUpsertWithoutPartInput\n}\n\ninput OrderUpdateWithoutPartDataInput {\n  deliveryDate: DateTime\n  status: Status\n  supplier: ManufacturerUpdateOneWithoutOrdersInput\n  cost: CostUpdateOneInput\n}\n\ninput OrderUpdateWithoutSupplierDataInput {\n  deliveryDate: DateTime\n  status: Status\n  part: PartUpdateOneWithoutOrderInput\n  cost: CostUpdateOneInput\n}\n\ninput OrderUpdateWithWhereUniqueWithoutSupplierInput {\n  where: OrderWhereUniqueInput!\n  data: OrderUpdateWithoutSupplierDataInput!\n}\n\ninput OrderUpsertWithoutPartInput {\n  update: OrderUpdateWithoutPartDataInput!\n  create: OrderCreateWithoutPartInput!\n}\n\ninput OrderUpsertWithWhereUniqueWithoutSupplierInput {\n  where: OrderWhereUniqueInput!\n  update: OrderUpdateWithoutSupplierDataInput!\n  create: OrderCreateWithoutSupplierInput!\n}\n\ninput OrderWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [OrderWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [OrderWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [OrderWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  deliveryDate: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  deliveryDate_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  deliveryDate_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  deliveryDate_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  deliveryDate_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  deliveryDate_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  deliveryDate_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  deliveryDate_gte: DateTime\n  status: Status\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  status_not: Status\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  status_in: [Status!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  status_not_in: [Status!]\n  part: PartWhereInput\n  supplier: ManufacturerWhereInput\n  cost: CostWhereInput\n}\n\ninput OrderWhereUniqueInput {\n  id: ID\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\ntype Part implements Node {\n  id: ID!\n  name: String!\n  manufacturer(where: ManufacturerWhereInput): Manufacturer\n  descriptor: String!\n  order(where: OrderWhereInput): Order\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype PartConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [PartEdge]!\n  aggregate: AggregatePart!\n}\n\ninput PartCreateInput {\n  name: String!\n  descriptor: String!\n  manufacturer: ManufacturerCreateOneWithoutPartsInput\n  order: OrderCreateOneWithoutPartInput\n}\n\ninput PartCreateManyWithoutManufacturerInput {\n  create: [PartCreateWithoutManufacturerInput!]\n  connect: [PartWhereUniqueInput!]\n}\n\ninput PartCreateOneWithoutOrderInput {\n  create: PartCreateWithoutOrderInput\n  connect: PartWhereUniqueInput\n}\n\ninput PartCreateWithoutManufacturerInput {\n  name: String!\n  descriptor: String!\n  order: OrderCreateOneWithoutPartInput\n}\n\ninput PartCreateWithoutOrderInput {\n  name: String!\n  descriptor: String!\n  manufacturer: ManufacturerCreateOneWithoutPartsInput\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype PartEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Part!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum PartOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  descriptor_ASC\n  descriptor_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype PartPreviousValues {\n  id: ID!\n  name: String!\n  descriptor: String!\n}\n\ntype PartSubscriptionPayload {\n  mutation: MutationType!\n  node: Part\n  updatedFields: [String!]\n  previousValues: PartPreviousValues\n}\n\ninput PartSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [PartSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [PartSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [PartSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: PartWhereInput\n}\n\ninput PartUpdateInput {\n  name: String\n  descriptor: String\n  manufacturer: ManufacturerUpdateOneWithoutPartsInput\n  order: OrderUpdateOneWithoutPartInput\n}\n\ninput PartUpdateManyWithoutManufacturerInput {\n  create: [PartCreateWithoutManufacturerInput!]\n  connect: [PartWhereUniqueInput!]\n  disconnect: [PartWhereUniqueInput!]\n  delete: [PartWhereUniqueInput!]\n  update: [PartUpdateWithWhereUniqueWithoutManufacturerInput!]\n  upsert: [PartUpsertWithWhereUniqueWithoutManufacturerInput!]\n}\n\ninput PartUpdateOneWithoutOrderInput {\n  create: PartCreateWithoutOrderInput\n  connect: PartWhereUniqueInput\n  delete: Boolean\n  update: PartUpdateWithoutOrderDataInput\n  upsert: PartUpsertWithoutOrderInput\n}\n\ninput PartUpdateWithoutManufacturerDataInput {\n  name: String\n  descriptor: String\n  order: OrderUpdateOneWithoutPartInput\n}\n\ninput PartUpdateWithoutOrderDataInput {\n  name: String\n  descriptor: String\n  manufacturer: ManufacturerUpdateOneWithoutPartsInput\n}\n\ninput PartUpdateWithWhereUniqueWithoutManufacturerInput {\n  where: PartWhereUniqueInput!\n  data: PartUpdateWithoutManufacturerDataInput!\n}\n\ninput PartUpsertWithoutOrderInput {\n  update: PartUpdateWithoutOrderDataInput!\n  create: PartCreateWithoutOrderInput!\n}\n\ninput PartUpsertWithWhereUniqueWithoutManufacturerInput {\n  where: PartWhereUniqueInput!\n  update: PartUpdateWithoutManufacturerDataInput!\n  create: PartCreateWithoutManufacturerInput!\n}\n\ninput PartWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [PartWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [PartWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [PartWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  descriptor: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  descriptor_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  descriptor_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  descriptor_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  descriptor_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  descriptor_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  descriptor_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  descriptor_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  descriptor_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  descriptor_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  descriptor_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  descriptor_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  descriptor_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  descriptor_not_ends_with: String\n  manufacturer: ManufacturerWhereInput\n  order: OrderWhereInput\n}\n\ninput PartWhereUniqueInput {\n  id: ID\n}\n\ntype Query {\n  parts(where: PartWhereInput, orderBy: PartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Part]!\n  manufacturers(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Manufacturer]!\n  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!\n  geoCoordinates(where: GeoCoordinateWhereInput, orderBy: GeoCoordinateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GeoCoordinate]!\n  costs(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cost]!\n  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!\n  part(where: PartWhereUniqueInput!): Part\n  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer\n  order(where: OrderWhereUniqueInput!): Order\n  location(where: LocationWhereUniqueInput!): Location\n  partsConnection(where: PartWhereInput, orderBy: PartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PartConnection!\n  manufacturersConnection(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ManufacturerConnection!\n  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!\n  geoCoordinatesConnection(where: GeoCoordinateWhereInput, orderBy: GeoCoordinateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GeoCoordinateConnection!\n  costsConnection(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CostConnection!\n  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!\n\n  \"\"\"Fetches an object given its ID\"\"\"\n  node(\n    \"\"\"The ID of an object\"\"\"\n    id: ID!\n  ): Node\n}\n\nenum Status {\n  OPEN\n  PURCHASED\n  ON_ROUTE\n  CLOSE\n}\n\ntype Subscription {\n  part(where: PartSubscriptionWhereInput): PartSubscriptionPayload\n  manufacturer(where: ManufacturerSubscriptionWhereInput): ManufacturerSubscriptionPayload\n  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload\n  geoCoordinate(where: GeoCoordinateSubscriptionWhereInput): GeoCoordinateSubscriptionPayload\n  cost(where: CostSubscriptionWhereInput): CostSubscriptionPayload\n  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 124
    },
    {
      "name": "schema.graphql",
      "path": "node/__archive/basic-with-model/packages/logic/src/schema.graphql",
      "sha": "dfc49d26179966492d04e7892c68d3d875cbc3d7",
      "url": "https://api.github.com/repositories/119682769/contents/node/__archive/basic-with-model/packages/logic/src/schema.graphql?ref=3066006bd3ed25e5687ee091f0f5a9b843eedc3d",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/dfc49d26179966492d04e7892c68d3d875cbc3d7",
      "html_url": "https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/basic-with-model/packages/logic/src/schema.graphql",
      "content": "type Query {\n  info: Info\n}\n\ntype Mutation {\n  info: Info\n}\n",
      "containsQueryType": true,
      "merged": {
        "mergedContent": "# https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/basic-with-model/packages/logic/src/schema.graphql:\ntype Query {\n  info: Info\n}\n\ntype Mutation {\n  info: Info\n}\n\n# https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/basic-with-model/packages/model/datamodel.graphql:\ntype Info {\n  name: String!\n  version: String\n}\n",
        "mergedPaths": [
          "node/__archive/basic-with-model/packages/model/datamodel.graphql"
        ],
        "typesDefinedByMerge": [
          "Info"
        ],
        "directivesDefinedByMerge": [],
        "validSchema": true,
        "contentDuplicate": false,
        "numObjectTypes": 3,
        "containsCycle": false,
        "polynomialLevel": 0,
        "numDefinitions": 3
      },
      "validSchema": false
    },
    {
      "name": "datamodel.graphql",
      "path": "node/__archive/basic-with-model/packages/model/datamodel.graphql",
      "sha": "7267532e4d6710a84dbfbecbe27272bf660be4d4",
      "url": "https://api.github.com/repositories/119682769/contents/node/__archive/basic-with-model/packages/model/datamodel.graphql?ref=3066006bd3ed25e5687ee091f0f5a9b843eedc3d",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/7267532e4d6710a84dbfbecbe27272bf660be4d4",
      "html_url": "https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/basic-with-model/packages/model/datamodel.graphql",
      "content": "type Info {\n  name: String!\n  version: String\n}\n",
      "containsQueryType": false,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 1
    },
    {
      "name": "schema.graphql",
      "path": "node/__archive/cloud/src/schema.graphql",
      "sha": "dfc49d26179966492d04e7892c68d3d875cbc3d7",
      "url": "https://api.github.com/repositories/119682769/contents/node/__archive/cloud/src/schema.graphql?ref=3066006bd3ed25e5687ee091f0f5a9b843eedc3d",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/dfc49d26179966492d04e7892c68d3d875cbc3d7",
      "html_url": "https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/cloud/src/schema.graphql",
      "content": "type Query {\n  info: Info\n}\n\ntype Mutation {\n  info: Info\n}\n",
      "containsQueryType": true,
      "merged": {
        "mergedContent": "# https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/cloud/src/schema.graphql:\ntype Query {\n  info: Info\n}\n\ntype Mutation {\n  info: Info\n}\n\n# https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/cloud/database/datamodel.graphql:\ntype Info {\n  name: String! \n  version: String\n}\n",
        "mergedPaths": [
          "node/__archive/cloud/database/datamodel.graphql"
        ],
        "typesDefinedByMerge": [
          "Info"
        ],
        "directivesDefinedByMerge": [],
        "validSchema": true,
        "contentDuplicate": true,
        "numDefinitions": 3
      },
      "validSchema": false
    },
    {
      "name": "datamodel.graphql",
      "path": "node/__archive/cloud/database/datamodel.graphql",
      "sha": "ca5f41d51b1df3f41e96693115dc91319cd3bf62",
      "url": "https://api.github.com/repositories/119682769/contents/node/__archive/cloud/database/datamodel.graphql?ref=3066006bd3ed25e5687ee091f0f5a9b843eedc3d",
      "git_url": "https://api.github.com/repositories/119682769/git/blobs/ca5f41d51b1df3f41e96693115dc91319cd3bf62",
      "html_url": "https://github.com/maana-io/q-templates/blob/3066006bd3ed25e5687ee091f0f5a9b843eedc3d/node/__archive/cloud/database/datamodel.graphql",
      "content": "type Info {\n  name: String! \n  version: String\n}\n",
      "containsQueryType": false,
      "validSchema": true,
      "contentDuplicate": true,
      "numDefinitions": 1
    }
  ],
  "metrics": {
    "created_at": "2018-01-31T12:12:31Z",
    "updated_at": "2019-06-07T14:22:13Z",
    "pushed_at": "2019-06-21T00:01:16Z",
    "issues": 0,
    "watchers": 11,
    "fork_count": 5,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 24,
    "pull_requests_open": 3,
    "pull_requests_closed": 3,
    "pull_requests_merged": 18,
    "releases": 0,
    "stargazers": 4
  }
}