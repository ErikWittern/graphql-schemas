{
  "repo_name": "futugram",
  "repo_full_name": "mulder90/futugram",
  "repo_owner": "Mulder90",
  "repo_description": "Futugram - A small web application that allows a user to upload photos and share them with the wider world.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "prisma.graphql",
      "path": "backend/src/generated/prisma.graphql",
      "sha": "b451c77173bc26afb87355bd74885ea87af3a763",
      "url": "https://api.github.com/repositories/162039450/contents/backend/src/generated/prisma.graphql?ref=e67fa1822db3d1be6dc44026a963c2d64bfed4dc",
      "git_url": "https://api.github.com/repositories/162039450/git/blobs/b451c77173bc26afb87355bd74885ea87af3a763",
      "html_url": "https://github.com/Mulder90/futugram/blob/e67fa1822db3d1be6dc44026a963c2d64bfed4dc/backend/src/generated/prisma.graphql",
      "content": "type AggregateLocation {\n  count: Int!\n}\n\ntype AggregatePhoto {\n  count: Int!\n}\n\ntype AggregateUser {\n  count: Int!\n}\n\ntype BatchPayload {\n  count: Long!\n}\n\nscalar DateTime\n\ntype Location {\n  city: String!\n  latitude: Float!\n  longitude: Float!\n}\n\ntype LocationConnection {\n  pageInfo: PageInfo!\n  edges: [LocationEdge]!\n  aggregate: AggregateLocation!\n}\n\ninput LocationCreateInput {\n  city: String!\n  latitude: Float!\n  longitude: Float!\n}\n\ninput LocationCreateOneInput {\n  create: LocationCreateInput\n}\n\ntype LocationEdge {\n  node: Location!\n  cursor: String!\n}\n\nenum LocationOrderByInput {\n  city_ASC\n  city_DESC\n  latitude_ASC\n  latitude_DESC\n  longitude_ASC\n  longitude_DESC\n  id_ASC\n  id_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype LocationPreviousValues {\n  city: String!\n  latitude: Float!\n  longitude: Float!\n}\n\ntype LocationSubscriptionPayload {\n  mutation: MutationType!\n  node: Location\n  updatedFields: [String!]\n  previousValues: LocationPreviousValues\n}\n\ninput LocationSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: LocationWhereInput\n  AND: [LocationSubscriptionWhereInput!]\n  OR: [LocationSubscriptionWhereInput!]\n  NOT: [LocationSubscriptionWhereInput!]\n}\n\ninput LocationUpdateDataInput {\n  city: String\n  latitude: Float\n  longitude: Float\n}\n\ninput LocationUpdateManyMutationInput {\n  city: String\n  latitude: Float\n  longitude: Float\n}\n\ninput LocationUpdateOneInput {\n  create: LocationCreateInput\n  update: LocationUpdateDataInput\n  upsert: LocationUpsertNestedInput\n  delete: Boolean\n  disconnect: Boolean\n}\n\ninput LocationUpsertNestedInput {\n  update: LocationUpdateDataInput!\n  create: LocationCreateInput!\n}\n\ninput LocationWhereInput {\n  city: String\n  city_not: String\n  city_in: [String!]\n  city_not_in: [String!]\n  city_lt: String\n  city_lte: String\n  city_gt: String\n  city_gte: String\n  city_contains: String\n  city_not_contains: String\n  city_starts_with: String\n  city_not_starts_with: String\n  city_ends_with: String\n  city_not_ends_with: String\n  latitude: Float\n  latitude_not: Float\n  latitude_in: [Float!]\n  latitude_not_in: [Float!]\n  latitude_lt: Float\n  latitude_lte: Float\n  latitude_gt: Float\n  latitude_gte: Float\n  longitude: Float\n  longitude_not: Float\n  longitude_in: [Float!]\n  longitude_not_in: [Float!]\n  longitude_lt: Float\n  longitude_lte: Float\n  longitude_gt: Float\n  longitude_gte: Float\n  AND: [LocationWhereInput!]\n  OR: [LocationWhereInput!]\n  NOT: [LocationWhereInput!]\n}\n\nscalar Long\n\ntype Mutation {\n  createLocation(data: LocationCreateInput!): Location!\n  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!\n  deleteManyLocations(where: LocationWhereInput): BatchPayload!\n  createPhoto(data: PhotoCreateInput!): Photo!\n  updatePhoto(data: PhotoUpdateInput!, where: PhotoWhereUniqueInput!): Photo\n  updateManyPhotos(data: PhotoUpdateManyMutationInput!, where: PhotoWhereInput): BatchPayload!\n  upsertPhoto(where: PhotoWhereUniqueInput!, create: PhotoCreateInput!, update: PhotoUpdateInput!): Photo!\n  deletePhoto(where: PhotoWhereUniqueInput!): Photo\n  deleteManyPhotos(where: PhotoWhereInput): BatchPayload!\n  createUser(data: UserCreateInput!): User!\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  deleteUser(where: UserWhereUniqueInput!): User\n  deleteManyUsers(where: UserWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Photo {\n  id: ID!\n  image: String!\n  user: User!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  location: Location\n}\n\ntype PhotoConnection {\n  pageInfo: PageInfo!\n  edges: [PhotoEdge]!\n  aggregate: AggregatePhoto!\n}\n\ninput PhotoCreateInput {\n  image: String!\n  user: UserCreateOneInput!\n  location: LocationCreateOneInput\n}\n\ntype PhotoEdge {\n  node: Photo!\n  cursor: String!\n}\n\nenum PhotoOrderByInput {\n  id_ASC\n  id_DESC\n  image_ASC\n  image_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype PhotoPreviousValues {\n  id: ID!\n  image: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype PhotoSubscriptionPayload {\n  mutation: MutationType!\n  node: Photo\n  updatedFields: [String!]\n  previousValues: PhotoPreviousValues\n}\n\ninput PhotoSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: PhotoWhereInput\n  AND: [PhotoSubscriptionWhereInput!]\n  OR: [PhotoSubscriptionWhereInput!]\n  NOT: [PhotoSubscriptionWhereInput!]\n}\n\ninput PhotoUpdateInput {\n  image: String\n  user: UserUpdateOneRequiredInput\n  location: LocationUpdateOneInput\n}\n\ninput PhotoUpdateManyMutationInput {\n  image: String\n}\n\ninput PhotoWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  image: String\n  image_not: String\n  image_in: [String!]\n  image_not_in: [String!]\n  image_lt: String\n  image_lte: String\n  image_gt: String\n  image_gte: String\n  image_contains: String\n  image_not_contains: String\n  image_starts_with: String\n  image_not_starts_with: String\n  image_ends_with: String\n  image_not_ends_with: String\n  user: UserWhereInput\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n  updatedAt_not: DateTime\n  updatedAt_in: [DateTime!]\n  updatedAt_not_in: [DateTime!]\n  updatedAt_lt: DateTime\n  updatedAt_lte: DateTime\n  updatedAt_gt: DateTime\n  updatedAt_gte: DateTime\n  location: LocationWhereInput\n  AND: [PhotoWhereInput!]\n  OR: [PhotoWhereInput!]\n  NOT: [PhotoWhereInput!]\n}\n\ninput PhotoWhereUniqueInput {\n  id: ID\n}\n\ntype Query {\n  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!\n  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!\n  photo(where: PhotoWhereUniqueInput!): Photo\n  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo]!\n  photosConnection(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoConnection!\n  user(where: UserWhereUniqueInput!): User\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  node(id: ID!): Node\n}\n\ntype Subscription {\n  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload\n  photo(where: PhotoSubscriptionWhereInput): PhotoSubscriptionPayload\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n}\n\ntype User {\n  id: ID!\n  name: String!\n  email: String!\n  password: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype UserConnection {\n  pageInfo: PageInfo!\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  name: String!\n  email: String!\n  password: String!\n}\n\ninput UserCreateOneInput {\n  create: UserCreateInput\n  connect: UserWhereUniqueInput\n}\n\ntype UserEdge {\n  node: User!\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  email_ASC\n  email_DESC\n  password_ASC\n  password_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  name: String!\n  email: String!\n  password: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n  AND: [UserSubscriptionWhereInput!]\n  OR: [UserSubscriptionWhereInput!]\n  NOT: [UserSubscriptionWhereInput!]\n}\n\ninput UserUpdateDataInput {\n  name: String\n  email: String\n  password: String\n}\n\ninput UserUpdateInput {\n  name: String\n  email: String\n  password: String\n}\n\ninput UserUpdateManyMutationInput {\n  name: String\n  email: String\n  password: String\n}\n\ninput UserUpdateOneRequiredInput {\n  create: UserCreateInput\n  update: UserUpdateDataInput\n  upsert: UserUpsertNestedInput\n  connect: UserWhereUniqueInput\n}\n\ninput UserUpsertNestedInput {\n  update: UserUpdateDataInput!\n  create: UserCreateInput!\n}\n\ninput UserWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  email: String\n  email_not: String\n  email_in: [String!]\n  email_not_in: [String!]\n  email_lt: String\n  email_lte: String\n  email_gt: String\n  email_gte: String\n  email_contains: String\n  email_not_contains: String\n  email_starts_with: String\n  email_not_starts_with: String\n  email_ends_with: String\n  email_not_ends_with: String\n  password: String\n  password_not: String\n  password_in: [String!]\n  password_not_in: [String!]\n  password_lt: String\n  password_lte: String\n  password_gt: String\n  password_gte: String\n  password_contains: String\n  password_not_contains: String\n  password_starts_with: String\n  password_not_starts_with: String\n  password_ends_with: String\n  password_not_ends_with: String\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n  updatedAt_not: DateTime\n  updatedAt_in: [DateTime!]\n  updatedAt_not_in: [DateTime!]\n  updatedAt_lt: DateTime\n  updatedAt_lte: DateTime\n  updatedAt_gt: DateTime\n  updatedAt_gte: DateTime\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  NOT: [UserWhereInput!]\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n  email: String\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 23,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 54
    }
  ],
  "metrics": {
    "created_at": "2018-12-16T20:45:09Z",
    "updated_at": "2019-04-27T04:31:40Z",
    "pushed_at": "2018-12-16T22:17:40Z",
    "issues": 0,
    "watchers": 1,
    "fork_count": 1,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 9
  }
}