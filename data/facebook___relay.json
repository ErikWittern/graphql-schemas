{
  "repo_name": "relay",
  "repo_full_name": "facebook/relay",
  "repo_owner": "facebook",
  "repo_description": "Relay is a JavaScript framework for building data-driven React applications.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "testschema.graphql",
      "path": "packages/relay-test-utils/testschema.graphql",
      "sha": "8050c2cc7c1f0312acc5cefbbf966eab75471b0f",
      "url": "https://api.github.com/repositories/40508605/contents/packages/relay-test-utils/testschema.graphql?ref=af86f95880995286da6a4dc7fca066081641b0d6",
      "git_url": "https://api.github.com/repositories/40508605/git/blobs/8050c2cc7c1f0312acc5cefbbf966eab75471b0f",
      "html_url": "https://github.com/facebook/relay/blob/af86f95880995286da6a4dc7fca066081641b0d6/packages/relay-test-utils/testschema.graphql",
      "content": "# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @customDirective(level: Int!) on FIELD\n\ndirective @defer(\n  label: String!\n  if: Boolean = true\n) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @stream(\n  label: String!\n  initial_count: Int!\n  if: Boolean = true\n) on FIELD\n\ntype Query {\n  checkinSearchQuery(query: CheckinSearchInput): CheckinSearchResult\n  defaultSettings: Settings,\n  route(waypoints: [WayPoint!]!): Route\n  items(filter: ItemFilterInput): ItemFilterResult\n  maybeNode: MaybeNode\n  neverNode: NeverNode\n  named: Named\n  me: User\n  node(id: ID): Node\n  node_id_required(id: ID!): Node\n  nodes(ids: [ID!]): [Node]\n  settings(environment: Environment): Settings\n  story: Story\n  task(number: Int): Task\n  username(name: String!): Actor\n  usernames(names: [String!]!): [Actor]\n  viewer: Viewer\n  _mutation: Mutation\n}\n\nunion MaybeNode = Story | FakeNode | NonNode\n\ntype FakeNode {\n  id: ID!\n}\n\ntype NonNode {\n  id: String\n  name: String\n}\n\nunion NeverNode = FakeNode | NonNode\n\ntype Task {\n  title: String\n}\n\ninput WayPoint {\n  lat: String\n  lon: String\n}\n\ntype Route {\n  steps: [RouteStep]\n}\n\ntype RouteStep {\n  lat: String\n  lon: String\n  note: String\n}\n\ntype Mutation {\n  actorSubscribe(input: ActorSubscribeInput): ActorSubscribeResponsePayload\n  actorNameChange(input: ActorNameChangeInput): ActorNameChangePayload\n  applicationRequestDeleteAll(input: ApplicationRequestDeleteAllInput): ApplicationRequestDeleteAllResponsePayload\n  commentCreate(input: CommentCreateInput): CommentCreateResponsePayload\n  commentDelete(input: CommentDeleteInput): CommentDeleteResponsePayload\n  feedbackLike(input: FeedbackLikeInput): FeedbackLikeResponsePayload\n  feedbackLikeSubscribe(input: FeedbackLikeInput): FeedbackLikeResponsePayload\n  nodeSavedState(input: NodeSaveStateInput): NodeSavedStateResponsePayload\n  unfriend(input: UnfriendInput): UnfriendResponsePayload\n  viewerNotificationsUpdateAllSeenState(input: UpdateAllSeenStateInput): ViewerNotificationsUpdateAllSeenStateResponsePayload\n}\n\ntype Subscription {\n  feedbackLikeSubscribe(input: FeedbackLikeInput): FeedbackLikeResponsePayload\n  commentCreateSubscribe(input: CommentCreateSubscriptionInput): CommentCreateResponsePayload\n}\n\ninput ActorSubscribeInput {\n  clientMutationId: String\n  subscribeeId: ID\n}\n\ninput ActorNameChangeInput {\n  clientMutationId: String\n  newName: String\n}\n\ninput ApplicationRequestDeleteAllInput {\n  clientMutationId: String\n  deletedRequestIds: [ID]\n}\n\ninput CommentCreateInput {\n  clientMutationId: String\n  feedbackId: ID\n  feedback: CommentfeedbackFeedback\n}\n\ninput CommentfeedbackFeedback {\n  comment: FeedbackcommentComment\n}\n\ninput FeedbackcommentComment {\n  feedback: CommentfeedbackFeedback\n}\n\ninput CommentCreateSubscriptionInput {\n  clientSubscriptionId: String\n  feedbackId: ID\n  text: String\n}\n\ninput CommentDeleteInput {\n  clientMutationId: String\n  commentId: ID\n}\n\ninput FeedbackLikeInput {\n  clientMutationId: String\n  feedbackId: ID\n}\n\ninput NodeSaveStateInput {\n  clientMutationId: String\n  nodeId: ID\n}\n\ninput UpdateAllSeenStateInput {\n  clientMutationId: String\n  storyIds: [ID]\n}\n\ntype ActorSubscribeResponsePayload {\n  clientMutationId: String\n  subscribee: Actor\n}\n\ntype ActorNameChangePayload {\n  clientMutationId: String\n  actor: Actor\n}\n\ntype ApplicationRequestDeleteAllResponsePayload {\n  clientMutationId: String\n  deletedRequestIds: [ID]\n}\n\ntype CheckinSearchResult {\n  query: String\n}\n\ninput CheckinSearchInput {\n  query: String\n  inputs: [CheckinSearchInput]\n}\n\ntype PlainCommentBody {\n  text: Text\n}\n\ntype MarkdownCommentBody {\n  text: Text\n}\n\nunion CommentBody = PlainCommentBody | MarkdownCommentBody\n\ntype Comment implements Node {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  commentBody(supported: [String!]!): CommentBody\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: [Int], preset: PhotoSize): Image\n  # This is added in RelayTestSchema\n  # profilePicture2(\n  #   size: [Int],\n  #   preset: PhotoSize,\n  #   cropPosition: CropPosition,\n  #   fileExtension: FileExtension,\n  #   additionalParameters: JSON\n  # ): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype CommentCreateResponsePayload {\n  clientMutationId: String\n  comment: Comment\n  feedback: Feedback\n  feedbackCommentEdge: CommentsEdge\n  viewer: Viewer\n}\n\ntype CommentDeleteResponsePayload {\n  clientMutationId: String\n  deletedCommentId: ID\n  feedback: Feedback\n}\n\ntype CommentsConnection {\n  count: Int\n  edges: [CommentsEdge]\n  pageInfo: PageInfo\n}\n\ntype CommentsEdge {\n  cursor: String\n  node: Comment\n  source: Feedback\n}\n\ntype ConfigsConnection {\n  edges: [ConfigsConnectionEdge]\n  pageInfo: PageInfo\n}\n\ntype ConfigsConnectionEdge {\n  node: Config\n}\n\ntype Config {\n  name: String\n  isEnabled: Boolean\n}\n\ntype Date {\n  day: Int\n  month: Int\n  year: Int\n}\n\ntype Feedback implements Node {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: [Int], preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(orderBy: [TopLevelCommentsOrdering], first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewedBy: [Actor]\n  viewerSavedState: String\n}\n\ntype FeedbackLikeResponsePayload {\n  clientMutationId: String\n  clientSubscriptionId: String\n  feedback: Feedback\n}\n\ninterface FeedUnit {\n  actor: Actor\n  actorCount: Int\n  feedback: Feedback\n  id: ID!\n  message: Text\n  tracking: String\n}\n\ntype FriendsConnection {\n  count: Int\n  edges: [FriendsEdge]\n  pageInfo: PageInfo\n}\n\ntype FriendsEdge {\n  cursor: String\n  node: User\n  source: User\n}\n\ntype Image {\n  uri: String\n  width: Int\n  height: Int\n}\n\ntype LikersOfContentConnection {\n  count: Int\n  edges: [LikersEdge]\n  pageInfo: PageInfo\n}\n\ntype LikersEdge {\n  cursor: String\n  node: Actor\n}\n\ninterface Named {\n  name: String\n}\n\ntype SimpleNamed implements Named {\n  name: String\n}\n\ntype NewsFeedConnection {\n  edges: [NewsFeedEdge]\n  pageInfo: PageInfo\n}\n\ntype NewsFeedEdge {\n  cursor: String\n  node: FeedUnit\n  sortKey: String\n  showBeeper: Boolean\n}\n\ninterface Node {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: [Int], preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ninterface Actor {\n  address: StreetAddress\n  allPhones: [Phone]\n  birthdate: Date\n  emailAddresses: [String]\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  name: String\n  nameRenderer(supported: [String!]!): UserNameRenderer\n  nameRenderable(supported: [String!]!): UserNameRenderable\n  profilePicture(size: [Int], preset: PhotoSize): Image\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n}\n\ntype NodeSavedStateResponsePayload {\n  node: Node\n}\n\ntype Page implements Node & Actor {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  nameRenderer(supported: [String!]!): UserNameRenderer\n  nameRenderable(supported: [String!]!): UserNameRenderable\n  profilePicture(size: [Int], preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype PageInfo {\n  hasPreviousPage: Boolean\n  hasNextPage: Boolean\n  endCursor: String\n  startCursor: String\n}\n\ntype PendingPostsConnection {\n  count: Int\n  edges: [PendingPostsConnectionEdge]\n  pageInfo: PageInfo\n}\n\ntype PendingPostsConnectionEdge {\n  cursor: String\n  node: PendingPost\n}\n\ntype PendingPost {\n  text: String\n}\n\ntype Phone {\n  isVerified: Boolean\n  phoneNumber: PhoneNumber\n}\n\ntype PhoneNumber {\n  displayNumber: String\n  countryCode: String\n}\n\ntype Screenname {\n  name: String\n  service: String\n}\n\ntype Segments {\n  edges: SegmentsEdge\n}\n\ntype SegmentsEdge {\n  node: String\n}\n\ntype NonNodeStory implements FeedUnit {\n  actor: Actor\n  actorCount: Int\n  feedback: Feedback\n  id: ID!\n  message: Text\n  tracking: String\n}\n\ntype PhotoStory implements FeedUnit & Node {\n  # PhotoStory\n  photo: Image\n\n  # FeedUnit\n  canViewerDelete: Boolean\n  seenState: String\n\n  # Node\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: [Int], preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype Story implements FeedUnit & Node {\n  attachments: [StoryAttachment]\n\n  # FeedUnit\n  canViewerDelete: Boolean\n  seenState: String\n\n  # Node\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: [Int], preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype StoryAttachment {\n  cache_id: ID!\n  target: Story\n  styleList: [String]\n}\n\ntype StreetAddress {\n  city: String\n  country: String\n  postal_code: String\n  street: String\n}\n\n\ntype SubscribersConnection {\n  count: Int\n  edges: [FriendsEdge]\n  pageInfo: PageInfo\n}\n\ntype SubscribersEdge {\n  cursor: String\n  node: User\n  source: User\n}\n\ntype Text {\n  text: String\n  ranges: [String]\n}\n\ntype TimezoneInfo {\n  timezone: String\n}\n\ntype TopLevelCommentsConnection {\n  count: Int\n  edges: [CommentsEdge]\n  pageInfo: PageInfo\n  totalCount: Int\n}\n\ninput UnfriendInput {\n  clientMutationId: String\n  friendId: ID\n}\n\ntype UnfriendResponsePayload {\n  actor: Actor\n  clientMutationId: String\n  formerFriend: User\n}\n\nscalar JSDependency\n\ninterface HasJsField {\n  js(module: String): JSDependency\n}\n\ntype PlainUserNameRenderer implements HasJsField & UserNameRenderable {\n  plaintext: String\n  data: PlainUserNameData\n  user: User\n  js(module: String): JSDependency\n  name: String\n}\n\ntype PlainUserNameData {\n  id: ID\n  text: String\n}\n\ntype MarkdownUserNameRenderer implements HasJsField & UserNameRenderable {\n  markdown: String\n  data: MarkdownUserNameData\n  user: User\n  js(module: String): JSDependency\n  name: String\n}\n\ntype MarkdownUserNameData {\n  id: ID\n  markup: String\n}\n\ntype CustomNameRenderer {\n  customField: String\n}\n\nunion UserNameRenderer = PlainUserNameRenderer | MarkdownUserNameRenderer | CustomNameRenderer\n\ninterface UserNameRenderable {\n  name: String\n}\n\ntype User implements Named & Node & Actor & HasJsField {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  checkins(environments: [Environment!]!): CheckinSearchResult\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  environment: Environment\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(\n    after: ID\n    before: ID\n    first: Int\n    last: Int\n    orderby: [String]\n    named: String\n    scale: Float\n    find: String\n    isViewerFriend: Boolean\n    if: Boolean\n    unless: Boolean\n    traits: [PersonalityTraits]\n  ): FriendsConnection\n  hometown: Page\n  id: ID!\n  js(module: String): JSDependency\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  nameRenderer(supported: [String!]!): UserNameRenderer\n  nameRenderable(supported: [String!]!): UserNameRenderable\n  nameRenderers(supported: [String!]!): [UserNameRenderer]\n  storySearch(query: StorySearchInput): [Story]\n  storyCommentSearch(query: StoryCommentSearchInput): [Comment]\n  profilePicture(\n    size: [Int],\n    preset: PhotoSize\n  ): Image\n  profile_picture(scale: Float): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  traits: [PersonalityTraits]\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ninput StorySearchInput {\n  text: String\n  limit: Int\n  offset: Int\n  type: StoryType\n}\n\ninput StoryCommentSearchInput {\n  text: String\n  limit: Int\n  offset: Int\n}\n\ntype ItemFilterResult {\n  date: String\n}\n\ninput ItemFilterInput {\n  date: String\n}\n\ntype Viewer {\n  configs(named: [String]): ConfigsConnection\n  actor: Actor\n  allTimezones: [TimezoneInfo]\n  isFbEmployee: Boolean\n  newsFeed(after: ID, first: Int, find: ID): NewsFeedConnection\n  notificationStories(after: ID, first: Int): NewsFeedConnection\n  pendingPosts(first: Int): PendingPostsConnection\n  primaryEmail: String\n  timezoneEstimate: TimezoneInfo\n  marketplace_explore(\n    marketplace_browse_context: MarketplaceBrowseContext,\n    with_price_between: [Float],\n  ): MarketplaceExploreConnection\n}\n\ntype MarketplaceExploreConnection {\n  count: Int\n}\n\ntype ViewerNotificationsUpdateAllSeenStateResponsePayload {\n  stories: [Story]\n}\n\nenum Environment {\n  WEB\n  MOBILE\n}\n\nenum MarketplaceBrowseContext {\n  BROWSE_FEED\n  CATEGORY_FEED\n}\n\nenum PhotoSize {\n  SMALL\n  LARGE\n}\n\nenum PersonalityTraits {\n  CHEERFUL\n  DERISIVE\n  HELPFUL\n  SNARKY\n}\n\nenum StoryType {\n  DIRECTED\n  UNDIRECTED\n}\n\nenum TopLevelCommentsOrdering {\n  chronological\n  ranked_threaded\n  recent_activity\n  toplevel\n}\n\n# This is added in RelayTestSchema\n# enum CropPosition {\n#   TOP\n#   CENTER\n#   BOTTOM\n#   LEFT\n#   RIGHT\n# }\n#\n# enum FileExtension {\n#   JPG\n#   PNG\n# }\n\ntype Settings {\n  cache_id: ID\n  notificationSounds: Boolean\n  notifications(environment: Environment): Boolean\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 66,
      "containsCycle": true,
      "numDefinitions": 104
    },
    {
      "name": "testschema.rfc.graphql",
      "path": "packages/babel-plugin-relay/__tests__/testschema.rfc.graphql",
      "sha": "952aa49e97f6c3b9a2c2ed73b14e20a45aaee11c",
      "url": "https://api.github.com/repositories/40508605/contents/packages/babel-plugin-relay/__tests__/testschema.rfc.graphql?ref=23298d861ff7867586abbfd38a11e0dc9b4a1a2e",
      "git_url": "https://api.github.com/repositories/40508605/git/blobs/952aa49e97f6c3b9a2c2ed73b14e20a45aaee11c",
      "html_url": "https://github.com/facebook/relay/blob/23298d861ff7867586abbfd38a11e0dc9b4a1a2e/packages/babel-plugin-relay/__tests__/testschema.rfc.graphql",
      "content": "# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n\ntype Root {\n  customScalar(arg: JSON): [SearchResult]\n  node(id: ID!): Node\n  nodes(ids: [ID!]): [Node]\n  media(id: Int): Media\n  viewer: Viewer\n  search(query: SearchInput!): [SearchResult]\n  searchAll(queries: [SearchInput!]!): [SearchResult]\n  _invalid: InvalidType\n  actor: Actor\n}\n\nscalar JSON\n\ninterface Actor {\n  name: String\n}\n\ntype InvalidType {\n  node(id: Int): Node\n}\n\ntype SearchResult {\n  title: String\n}\n\ninput SearchInput {\n  queryText: String\n}\n\ntype Mutation {\n  actorSubscribe(input: ActorSubscribeInput): ActorSubscribeResponsePayload\n  actorSubscribeSubscribe(input: ActorSubscribeInput!): ActorSubscribeResponsePayload\n  mutationMissingArg: FakeResponsePayload\n  mutationWrongArgs(foo: String): FakeResponsePayload\n}\n\ninput ActorSubscribeInput {\n  clientMutationId: String\n  actorId: String\n}\n\ntype ActorSubscribeResponsePayload {\n  clientMutationId: String\n  actor: User\n}\n\ntype FakeResponsePayload {\n  clientMutationId: String\n}\n\ntype Subscription {\n  likeStory(input: LikeStorySubscriptionInput): LikeStorySubscriptionPayload\n}\n\ninput LikeStorySubscriptionInput {\n  clientSubscriptionId: String\n  story: String\n}\n\ntype LikeStorySubscriptionPayload {\n  clientSubscriptionId: String\n  doesViewerLike: Boolean\n}\n\ntype ActorSubscribeSubscription {\n  clientMutationId: String\n}\n\ntype Viewer {\n  configs: ConfigsConnection\n  newsFeed(first: Int): NewsFeedConnection\n  pendingPosts(first: Int): PendingPostsConnection\n  actor: User\n}\n\ntype ConfigsConnection {\n  edges: [ConfigsConnectionEdge]\n}\n\ntype ConfigsConnectionEdge {\n  cursor: String\n  node: Config\n}\n\ntype Config {\n  name: String\n}\n\ntype NewsFeedConnection {\n  edges: [NewsFeedConnectionEdge]\n  pageInfo: PageInfo\n}\n\ntype NewsFeedConnectionEdge {\n  cursor: String\n  node: Node\n}\n\ntype Story implements Node {\n  message: String\n  actors: [User]\n  attachments: [Node]\n  id: String\n}\n\ntype PendingPostsConnection {\n  count: Int\n  edges: [PendingPostsConnectionEdge]\n  pageInfo: PageInfo\n}\n\ntype PendingPostsConnectionEdge {\n  cursor: String\n  node: PendingPost\n}\n\ntype PendingPost {\n  text: String\n}\n\ntype UserConnection {\n  count: Int\n  edges: [UserConnectionEdge]\n  nodes: [User]\n  pageInfo: PageInfo\n}\n\ntype UserConnectionEdge {\n  cursor: String\n  node: User\n  source: User\n}\n\ninterface Node {\n  id: String\n}\n\ntype User implements Node & Actor {\n  friends(first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, gender: Gender, before: ID, after: ID): UserConnection\n  id: String\n  name: String\n  profilePicture(size: Int): ProfilePicture\n  websites: [String]\n  userOnlyField: String\n  gender: Gender\n  firstName(if: Boolean, unless: Boolean): String\n  fakeConnection: FakeConnection\n}\n\ntype Page implements Actor {\n  name: String\n}\n\ntype FakeConnection {\n  edges: [FakeEdge]\n}\n\ntype FakeEdge {\n  cursor: String\n  node: FakeNode\n}\n\ntype FakeNode implements Node {\n  id: String\n}\n\ntype ProfilePicture {\n  uri: String\n  width: Int\n  height: Int\n}\n\ntype PageInfo {\n  hasPreviousPage: Boolean\n  hasNextPage: Boolean\n  endCursor: String\n  startCursor: String\n}\n\nenum Gender {\n  MALE,\n  FEMALE,\n  UNKNOWN\n}\n\nunion Media = Story | ProfilePicture\n\nschema {\n  query: Root\n  mutation: Mutation\n  subscription: Subscription\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 28,
      "containsCycle": true,
      "numDefinitions": 37
    }
  ],
  "metrics": {
    "created_at": "2015-08-10T22:09:16Z",
    "updated_at": "2019-07-19T05:12:14Z",
    "pushed_at": "2019-07-19T10:32:35Z",
    "issues": 1464,
    "watchers": 399,
    "fork_count": 1292,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 1331,
    "pull_requests_open": 37,
    "pull_requests_closed": 1193,
    "pull_requests_merged": 101,
    "releases": 49,
    "stargazers": 13132
  }
}