{
  "repo_name": "Twitter-Clone-GraphQL-Backend",
  "repo_full_name": "lxspandora/twitter-clone-graphql-backend",
  "repo_owner": "lXSPandora",
  "repo_description": "A Simple CRUD using GraphQL",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "data/schema.graphql",
      "sha": "3c20399d5d52089b4137d48577a73e378ea92ab2",
      "url": "https://api.github.com/repositories/99354376/contents/data/schema.graphql?ref=aac401ddd2b34808cec12fb367ea8f4279736207",
      "git_url": "https://api.github.com/repositories/99354376/git/blobs/3c20399d5d52089b4137d48577a73e378ea92ab2",
      "html_url": "https://github.com/lXSPandora/Twitter-Clone-GraphQL-Backend/blob/aac401ddd2b34808cec12fb367ea8f4279736207/data/schema.graphql",
      "content": "input ChangePasswordInput {\n  oldPassword: String!\n\n  # user new password\n  password: String!\n  clientMutationId: String\n}\n\ntype ChangePasswordPayload {\n  error: String\n  me: User\n  clientMutationId: String\n}\n\ninput LoginEmailInput {\n  email: String!\n  password: String!\n  clientMutationId: String\n}\n\ntype LoginEmailPayload {\n  token: String\n  error: String\n  clientMutationId: String\n}\n\ntype Mutation {\n  LoginEmail(input: LoginEmailInput!): LoginEmailPayload\n  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload\n  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload\n  TweetAdd(input: TweetAddInput!): TweetAddPayload\n  TweetEdit(input: TweetEditInput!): TweetEditPayload\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\n# The root of all... queries\ntype Query {\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n  me: User\n  user(id: ID!): User\n  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection\n  tweet(id: ID!): Tweet\n  tweets(after: String, first: Int, before: String, last: Int, search: String): TweetConnection\n}\n\ninput RegisterEmailInput {\n  name: String!\n  username: String!\n  image: String!\n  email: String!\n  password: String!\n  clientMutationId: String\n}\n\ntype RegisterEmailPayload {\n  token: String\n  error: String\n  clientMutationId: String\n}\n\n# Represents Tweet\ntype Tweet implements Node {\n  # The ID of an object\n  id: ID!\n\n  # User id of the owner\n  userId: String\n\n  # user node\n  user: User\n\n  # tweet body\n  text: String\n\n  # tweet likes\n  likes: [String]\n}\n\ninput TweetAddInput {\n  # user id of the owner\n  userId: String\n\n  # tweet body\n  text: String\n\n  # tweet likes\n  likes: [String]\n  clientMutationId: String\n}\n\ntype TweetAddPayload {\n  tweetEdge: TweetEdge\n  error: String\n  clientMutationId: String\n}\n\n# A connection to a list of items.\ntype TweetConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [TweetEdge]\n  count: Int\n}\n\n# An edge in a connection.\ntype TweetEdge {\n  # The item at the end of the edge\n  node: Tweet\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\ninput TweetEditInput {\n  id: ID!\n  likes: [String]\n  text: String\n  clientMutationId: String\n}\n\ntype TweetEditPayload {\n  tweet: Tweet\n  error: String\n  clientMutationId: String\n}\n\n# User data\ntype User implements Node {\n  # The ID of an object\n  id: ID!\n  _id: String\n  name: String\n  username: String\n  image: String\n  email: String\n  active: Boolean\n}\n\n# A connection to a list of items.\ntype UserConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UserEdge]\n  count: Int\n}\n\n# An edge in a connection.\ntype UserEdge {\n  # The item at the end of the edge\n  node: User\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 14,
      "containsCycle": false,
      "polynomialLevel": 1,
      "numDefinitions": 20
    }
  ],
  "metrics": {
    "created_at": "2017-08-04T15:08:01Z",
    "updated_at": "2019-03-23T13:43:29Z",
    "pushed_at": "2018-12-13T08:27:26Z",
    "issues": 3,
    "watchers": 5,
    "fork_count": 5,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 6,
    "pull_requests_open": 1,
    "pull_requests_closed": 2,
    "pull_requests_merged": 3,
    "releases": 0,
    "stargazers": 39
  }
}