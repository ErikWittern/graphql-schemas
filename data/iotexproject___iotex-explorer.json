{
  "repo_name": "iotex-explorer",
  "repo_full_name": "iotexproject/iotex-explorer",
  "repo_owner": "iotexproject",
  "repo_description": "Official explorer of IoTeX blockchain! ",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "api-gateway.graphql",
      "path": "src/api-gateway/api-gateway.graphql",
      "sha": "9e799dc57d9353556f09dba6f488c39ab359c8c2",
      "url": "https://api.github.com/repositories/153857785/contents/src/api-gateway/api-gateway.graphql?ref=66c23e934c134e68b3075e93fdda992dad40416a",
      "git_url": "https://api.github.com/repositories/153857785/git/blobs/9e799dc57d9353556f09dba6f488c39ab359c8c2",
      "html_url": "https://github.com/iotexproject/iotex-explorer/blob/66c23e934c134e68b3075e93fdda992dad40416a/src/api-gateway/api-gateway.graphql",
      "content": "# -----------------------------------------------\n# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!\n# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!\n# -----------------------------------------------\n\n# meta data describing the account\ntype AccountMeta {\n  # iotex address\n  address: String!\n  balance: String!\n  nonce: Int!\n  pendingNonce: Int!\n  numActions: Int!\n}\n\ntype Action {\n  core: ActionCore!\n  senderPubKey: Buffer!\n  signature: Buffer!\n}\n\ntype ActionCore {\n  version: Int!\n  nonce: BigNumber!\n  gasLimit: BigNumber!\n  gasPrice: String!\n  transfer: Transfer\n  vote: Vote\n  execution: Execution\n  startSubChain: StartSubChain\n  stopSubChain: StopSubChain\n  putBlock: PutBlock\n  createDeposit: CreateDeposit\n  settleDeposit: SettleDeposit\n  createPlumChain: CreatePlumChain\n  terminatePlumChain: TerminatePlumChain\n  plumPutBlock: PlumPutBlock\n  plumCreateDeposit: PlumCreateDeposit\n  plumStartExit: PlumStartExit\n  plumChallengeExit: PlumChallengeExit\n  plumResponseChallengeExit: PlumResponseChallengeExit\n  plumFinalizeExit: PlumFinalizeExit\n  plumSettleDeposit: PlumSettleDeposit\n  plumTransfer: PlumTransfer\n  depositToRewardingFund: DepositToRewardingFund\n  claimFromRewardingFund: ClaimFromRewardingFund\n  grantReward: GrantReward\n  putPollResult: PutPollResult\n}\n\ninput ActionCoreInput {\n  version: Int!\n  nonce: BigNumber!\n  gasLimit: BigNumber!\n  gasPrice: String!\n  transfer: TransferInput\n  vote: VoteInput\n  execution: ExecutionInput\n  startSubChain: StartSubChainInput\n  stopSubChain: StopSubChainInput\n  putBlock: PutBlockInput\n  createDeposit: CreateDepositInput\n  settleDeposit: SettleDepositInput\n  createPlumChain: CreatePlumChainInput\n  terminatePlumChain: TerminatePlumChainInput\n  plumPutBlock: PlumPutBlockInput\n  plumCreateDeposit: PlumCreateDepositInput\n  plumStartExit: PlumStartExitInput\n  plumChallengeExit: PlumChallengeExitInput\n  plumResponseChallengeExit: PlumResponseChallengeExitInput\n  plumFinalizeExit: PlumFinalizeExitInput\n  plumSettleDeposit: PlumSettleDepositInput\n  plumTransfer: PlumTransferInput\n  depositToRewardingFund: DepositToRewardingFundInput\n  claimFromRewardingFund: ClaimFromRewardingFundInput\n  grantReward: GrantRewardInput\n  putPollResult: PutPollResultInput\n}\n\ntype ActionInfo {\n  action: Action!\n  actHash: String!\n  blkHash: String!\n  timestamp: Timestamp!\n}\n\ninput ActionInput {\n  core: ActionCoreInput!\n  senderPubKey: Buffer!\n  signature: Buffer!\n}\n\n# The BigNumber scalar type represents numeric values with precision as in https://github.com/MikeMcl/bignumber.js/\nscalar BigNumber\n\n# Properties of an blockMeta\ntype BlockMeta {\n  hash: String!\n  height: Int!\n  timestamp: Timestamp!\n  numActions: Int!\n  producerAddress: String!\n  transferAmount: String!\n  txRoot: String!\n  receiptRoot: String!\n  deltaStateDigest: String!\n}\n\n# Properties of a BlockProducerInfo\ntype BlockProducerInfo {\n  # BlockProducerInfo address\n  address: String!\n\n  # BlockProducerInfo votes\n  votes: String!\n\n  # BlockProducerInfo active\n  active: Boolean!\n\n  # BlockProducerInfo production\n  production: Int!\n}\n\n# JS Buffer or Uint8Array\nscalar Buffer\n\ntype Candidate {\n  address: String!\n  votes: Buffer\n  pubKey: Buffer\n  rewardAddress: String!\n}\n\ninput CandidateInput {\n  address: String!\n  votes: Buffer\n  pubKey: Buffer\n  rewardAddress: String!\n}\n\ntype CandidateList {\n  candidates: [Candidate!]!\n}\n\ninput CandidateListInput {\n  candidates: [CandidateInput!]!\n}\n\ntype ChainMeta {\n  height: String!\n  numActions: String!\n  tps: String!\n  epoch: Epoch!\n}\n\ntype ClaimFromRewardingFund {\n  amount: String!\n  data: Buffer!\n}\n\ninput ClaimFromRewardingFundInput {\n  amount: String!\n  data: Buffer!\n}\n\n# IOTX price information from coinmarketcap\ntype CoinPrice {\n  priceUsd: String!\n  marketCapUsd: String!\n}\n\ntype CreateDeposit {\n  chainID: Int!\n  amount: Buffer!\n  recipient: String!\n}\n\ninput CreateDepositInput {\n  chainID: Int!\n  amount: Buffer!\n  recipient: String!\n}\n\ntype CreatePlumChain {\n  TBD: Boolean\n}\n\ninput CreatePlumChainInput {\n  TBD: Boolean\n}\n\ntype DepositToRewardingFund {\n  amount: String!\n  data: Buffer!\n}\n\ninput DepositToRewardingFundInput {\n  amount: String!\n  data: Buffer!\n}\n\ntype Epoch {\n  num: Int!\n  height: Int!\n  gravityChainStartHeight: Int!\n}\n\n# Properties of a EstimateGasForActionResponse\ntype EstimateGasForActionResponse {\n  gas: String!\n}\n\ntype Execution {\n  amount: String!\n  contract: String!\n  data: Buffer!\n}\n\ninput ExecutionInput {\n  amount: String!\n  contract: String!\n  data: Buffer!\n}\n\ntype GetAccountResponse {\n  accountMeta: AccountMeta!\n}\n\ninput GetActionsByAddressRequest {\n  # iotex address\n  address: String!\n  start: BigNumber!\n  count: BigNumber!\n}\n\ninput GetActionsByBlockRequest {\n  blkHash: String!\n  start: Int!\n  count: Int!\n}\n\ninput GetActionsByHashRequest {\n  actionHash: String!\n  checkingPending: Boolean!\n}\n\ninput GetActionsByIndexRequest {\n  start: BigNumber!\n  count: BigNumber!\n}\n\ntype GetActionsResponse {\n  actionInfo: [ActionInfo!]\n}\n\ninput GetBlockMetasByHashRequest {\n  blkHash: String!\n}\n\ninput GetBlockMetasByIndexRequest {\n  start: Int!\n  count: Int!\n}\n\ntype GetBlockMetasResponse {\n  blkMetas: [BlockMeta!]!\n}\n\n# Properties of a GetEpochMetaResponse\ntype GetEpochMetaResponse {\n  # GetEpochMetaResponse epochData\n  epochData: Epoch!\n\n  # GetEpochMetaResponse totalBlocks\n  totalBlocks: Int!\n\n  # GetEpochMetaResponse blockProducersInfo\n  blockProducersInfo: [BlockProducerInfo!]!\n}\n\ntype GetReceiptByActionResponse {\n  receiptInfo: ReceiptInfo\n}\n\ntype GetServerMetaResponse {\n  serverMeta: ServerMeta!\n}\n\ninput GetUnconfirmedActionsByAddressRequest {\n  # iotex address\n  address: String!\n  start: Int!\n  count: Int!\n}\n\ntype GrantReward {\n  type: RewardType!\n  height: String!\n}\n\ninput GrantRewardInput {\n  type: RewardType!\n  height: String!\n}\n\n# Properties of an Log\ntype Log {\n  # iotex address\n  contractAddress: String!\n  topics: [Buffer!]!\n  data: Buffer!\n  blkHeight: Int!\n  actHash: Buffer!\n  index: Int!\n}\n\n# scalar type of map buffer\nscalar Map\n\ntype MerkleRoot {\n  name: String!\n  value: Buffer!\n}\n\ninput MerkleRootInput {\n  name: String!\n  value: Buffer!\n}\n\ntype PlumChallengeExit {\n  subChainAddress: String!\n  coinID: Int!\n  challengeTransfer: Buffer!\n  challengeTransferBlockProof: Buffer!\n  challengeTransferBlockHeight: Int!\n}\n\ninput PlumChallengeExitInput {\n  subChainAddress: String!\n  coinID: Int!\n  challengeTransfer: Buffer!\n  challengeTransferBlockProof: Buffer!\n  challengeTransferBlockHeight: Int!\n}\n\ntype PlumCreateDeposit {\n  subChainAddress: String!\n  amount: Buffer!\n  recipient: String!\n}\n\ninput PlumCreateDepositInput {\n  subChainAddress: String!\n  amount: Buffer!\n  recipient: String!\n}\n\ntype PlumFinalizeExit {\n  subChainAddress: String!\n  coinID: Int!\n}\n\ninput PlumFinalizeExitInput {\n  subChainAddress: String!\n  coinID: Int!\n}\n\ntype PlumPutBlock {\n  subChainAddress: String!\n  height: Int!\n  roots: Map!\n}\n\ninput PlumPutBlockInput {\n  subChainAddress: String!\n  height: Int!\n  roots: Map!\n}\n\ntype PlumResponseChallengeExit {\n  subChainAddress: String!\n  coinID: Int!\n  challengeTransfer: Buffer!\n  responseTransfer: Buffer!\n  responseTransferBlockProof: Buffer!\n  previousTransferBlockHeight: Int!\n}\n\ninput PlumResponseChallengeExitInput {\n  subChainAddress: String!\n  coinID: Int!\n  challengeTransfer: Buffer!\n  responseTransfer: Buffer!\n  responseTransferBlockProof: Buffer!\n  previousTransferBlockHeight: Int!\n}\n\ntype PlumSettleDeposit {\n  coinID: Int!\n}\n\ninput PlumSettleDepositInput {\n  coinID: Int!\n}\n\ntype PlumStartExit {\n  subChainAddress: String!\n  previousTransfer: Buffer!\n  previousTransferBlockProof: Buffer!\n  previousTransferBlockHeight: Int!\n  exitTransfer: Buffer!\n  exitTransferBlockProof: Buffer!\n  exitTransferBlockHeight: Int!\n}\n\ninput PlumStartExitInput {\n  subChainAddress: String!\n  previousTransfer: Buffer!\n  previousTransferBlockProof: Buffer!\n  previousTransferBlockHeight: Int!\n  exitTransfer: Buffer!\n  exitTransferBlockProof: Buffer!\n  exitTransferBlockHeight: Int!\n}\n\ntype PlumTransfer {\n  coinID: Int!\n  denomination: Buffer!\n  owner: String!\n  recipient: String!\n}\n\ninput PlumTransferInput {\n  coinID: Int!\n  denomination: Buffer!\n  owner: String!\n  recipient: String!\n}\n\ntype PutBlock {\n  subChainAddress: String!\n  height: Int!\n  roots: [MerkleRoot!]!\n}\n\ninput PutBlockInput {\n  subChainAddress: String!\n  height: Int!\n  roots: [MerkleRootInput!]!\n}\n\ntype PutPollResult {\n  height: String!\n  candidates: CandidateList\n}\n\ninput PutPollResultInput {\n  height: String!\n  candidates: CandidateListInput\n}\n\ntype Query {\n  # get chain metadata\n  chainMeta: ChainMeta!\n\n  # get the address detail of an address\n  getAccount(\n    # iotex address\n    address: String!\n  ): GetAccountResponse!\n\n  # get block metadata(s) by:\n  getBlockMetas(\n    # start index and block count\n    byIndex: GetBlockMetasByIndexRequest\n\n    # block hash\n    byHash: GetBlockMetasByHashRequest\n  ): GetBlockMetasResponse!\n\n  # get server meta data by:\n  getServerMeta: GetServerMetaResponse!\n\n  # suggest gas price\n  suggestGasPrice: SuggestGasPriceResponse!\n\n  # get receipt by action Hash\n  getReceiptByAction(\n    # action Hash\n    actionHash: String!\n  ): GetReceiptByActionResponse!\n\n  # get action(s) by:\n  getActions(\n    # start index and action count\n    byIndex: GetActionsByIndexRequest\n\n    # address with start index and action count\n    byAddr: GetActionsByAddressRequest\n\n    # action hash\n    byHash: GetActionsByHashRequest\n    byBlk: GetActionsByBlockRequest\n  ): GetActionsResponse!\n\n  # read contract\n  readContract(action: ActionInput!): ReadContractResponse!\n\n  # sendAction\n  sendAction(action: ActionInput!): SendActionResponse!\n\n  # read state\n  readState(\n    protocolID: Buffer!\n    methodName: Buffer!\n    arguments: [Buffer!]!\n  ): ReadStateResponse!\n\n  # estimate gas for action\n  estimateGasForAction(action: ActionInput!): EstimateGasForActionResponse!\n\n  # get epoch meta\n  getEpochMeta(epochNumber: Int!): GetEpochMetaResponse!\n  health: String!\n  fetchCoinPrice: CoinPrice!\n  fetchVersionInfo: VersionInfo!\n}\n\ntype ReadContractResponse {\n  data: String!\n}\n\ntype ReadStateResponse {\n  data: Buffer!\n}\n\n# Properties of an Receipt\ntype Receipt {\n  status: Int!\n  blkHeight: Int!\n  actHash: Buffer!\n  gasConsumed: Int!\n  contractAddress: String!\n  logs: [Log!]\n}\n\ntype ReceiptInfo {\n  receipt: Receipt\n  blkHash: String!\n}\n\nenum RewardType {\n  BlockReward\n  EpochReward\n}\n\ntype SendActionResponse {\n  actionHash: Boolean\n}\n\n# Server meta data\ntype ServerMeta {\n  packageVersion: String!\n  packageCommitID: String!\n  gitStatus: String!\n  goVersion: String!\n  buildTime: String!\n}\n\ntype SetReward {\n  amount: Buffer!\n  data: Buffer!\n  type: Int!\n}\n\ninput SetRewardInput {\n  amount: Buffer!\n  data: Buffer!\n  type: Int!\n}\n\ntype SettleDeposit {\n  amount: Buffer!\n  recipient: String!\n  index: Int!\n}\n\ninput SettleDepositInput {\n  amount: Buffer!\n  recipient: String!\n  index: Int!\n}\n\ntype StartSubChain {\n  chainID: Int!\n  securityDeposit: Buffer!\n  operationDeposit: Buffer!\n  startHeight: Int!\n  parentHeightOffset: Int!\n}\n\ninput StartSubChainInput {\n  chainID: Int!\n  securityDeposit: Buffer!\n  operationDeposit: Buffer!\n  startHeight: Int!\n  parentHeightOffset: Int!\n}\n\ntype StopSubChain {\n  chainID: Int!\n  stopHeight: Int!\n  subChainAddress: String!\n}\n\ninput StopSubChainInput {\n  chainID: Int!\n  stopHeight: Int!\n  subChainAddress: String!\n}\n\ntype SuggestGasPriceResponse {\n  gasPrice: Int!\n}\n\ntype TerminatePlumChain {\n  subChainAddress: String!\n}\n\ninput TerminatePlumChainInput {\n  subChainAddress: String!\n}\n\ntype Timestamp {\n  seconds: Int!\n  nanos: Int!\n}\n\ninput TimestampInput {\n  seconds: Int!\n  nanos: Int!\n}\n\ntype Transfer {\n  amount: String!\n  recipient: String!\n  payload: Buffer!\n}\n\ninput TransferInput {\n  amount: String!\n  recipient: String!\n  payload: Buffer!\n}\n\ntype VersionInfo {\n  explorerVersion: String!\n  iotexCoreVersion: String\n}\n\ntype Vote {\n  timestamp: Timestamp!\n  voteeAddress: String!\n}\n\ninput VoteInput {\n  timestamp: TimestampInput!\n  voteeAddress: String!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 53,
      "containsCycle": false,
      "polynomialLevel": 2,
      "numDefinitions": 93
    }
  ],
  "metrics": {
    "created_at": "2018-10-20T01:12:56Z",
    "updated_at": "2019-07-19T10:26:16Z",
    "pushed_at": "2019-07-19T10:44:14Z",
    "issues": 385,
    "watchers": 11,
    "fork_count": 19,
    "has_wiki_enabled": true,
    "license": "apache-2.0",
    "pull_requests": 500,
    "pull_requests_open": 25,
    "pull_requests_closed": 67,
    "pull_requests_merged": 408,
    "releases": 10,
    "stargazers": 31
  }
}