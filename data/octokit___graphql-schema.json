{
  "repo_name": "graphql-schema",
  "repo_full_name": "octokit/graphql-schema",
  "repo_owner": "octokit",
  "repo_description": "GitHub’s GraphQL Schema with validation. Automatically updated.",
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema.graphql",
      "sha": "a4f49ee5f4b66bbf80b477c7296edbfa97a2abf6",
      "url": "https://api.github.com/repositories/113731831/contents/schema.graphql?ref=d674675ac8c0ae87df1da46d39070add81e59ddb",
      "git_url": "https://api.github.com/repositories/113731831/git/blobs/a4f49ee5f4b66bbf80b477c7296edbfa97a2abf6",
      "html_url": "https://github.com/octokit/graphql-schema/blob/d674675ac8c0ae87df1da46d39070add81e59ddb/schema.graphql",
      "content": "\"\"\"\nAutogenerated input type of AcceptTopicSuggestion\n\"\"\"\ninput AcceptTopicSuggestionInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of the suggested topic.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The Node ID of the repository.\n  \"\"\"\n  repositoryId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AcceptTopicSuggestion\n\"\"\"\ntype AcceptTopicSuggestionPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The accepted topic.\n  \"\"\"\n  topic: Topic\n}\n\n\"\"\"\nRepresents an object which can take actions on GitHub. Typically a User or Bot.\n\"\"\"\ninterface Actor {\n  \"\"\"\n  A URL pointing to the actor's public avatar.\n  \"\"\"\n  avatarUrl(\n    \"\"\"\n    The size of the resulting square image.\n    \"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"\n  The username of the actor.\n  \"\"\"\n  login: String!\n\n  \"\"\"\n  The HTTP path for this actor.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this actor.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nAutogenerated input type of AddAssigneesToAssignable\n\"\"\"\ninput AddAssigneesToAssignableInput {\n  \"\"\"\n  The id of the assignable object to add assignees to.\n  \"\"\"\n  assignableId: ID!\n\n  \"\"\"\n  The id of users to add as assignees.\n  \"\"\"\n  assigneeIds: [ID!]!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated return type of AddAssigneesToAssignable\n\"\"\"\ntype AddAssigneesToAssignablePayload {\n  \"\"\"\n  The item that was assigned.\n  \"\"\"\n  assignable: Assignable\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated input type of AddComment\n\"\"\"\ninput AddCommentInput {\n  \"\"\"\n  The contents of the comment.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Node ID of the subject to modify.\n  \"\"\"\n  subjectId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AddComment\n\"\"\"\ntype AddCommentPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The edge from the subject's comment connection.\n  \"\"\"\n  commentEdge: IssueCommentEdge\n\n  \"\"\"\n  The subject\n  \"\"\"\n  subject: Node\n\n  \"\"\"\n  The edge from the subject's timeline connection.\n  \"\"\"\n  timelineEdge: IssueTimelineItemEdge\n}\n\n\"\"\"\nAutogenerated input type of AddLabelsToLabelable\n\"\"\"\ninput AddLabelsToLabelableInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ids of the labels to add.\n  \"\"\"\n  labelIds: [ID!]!\n\n  \"\"\"\n  The id of the labelable object to add labels to.\n  \"\"\"\n  labelableId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AddLabelsToLabelable\n\"\"\"\ntype AddLabelsToLabelablePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The item that was labeled.\n  \"\"\"\n  labelable: Labelable\n}\n\n\"\"\"\nAutogenerated input type of AddProjectCard\n\"\"\"\ninput AddProjectCardInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The content of the card. Must be a member of the ProjectCardItem union\n  \"\"\"\n  contentId: ID\n\n  \"\"\"\n  The note on the card.\n  \"\"\"\n  note: String\n\n  \"\"\"\n  The Node ID of the ProjectColumn.\n  \"\"\"\n  projectColumnId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AddProjectCard\n\"\"\"\ntype AddProjectCardPayload {\n  \"\"\"\n  The edge from the ProjectColumn's card connection.\n  \"\"\"\n  cardEdge: ProjectCardEdge\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ProjectColumn\n  \"\"\"\n  projectColumn: ProjectColumn\n}\n\n\"\"\"\nAutogenerated input type of AddProjectColumn\n\"\"\"\ninput AddProjectColumnInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of the column.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The Node ID of the project.\n  \"\"\"\n  projectId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AddProjectColumn\n\"\"\"\ntype AddProjectColumnPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The edge from the project's column connection.\n  \"\"\"\n  columnEdge: ProjectColumnEdge\n\n  \"\"\"\n  The project\n  \"\"\"\n  project: Project\n}\n\n\"\"\"\nAutogenerated input type of AddPullRequestReviewComment\n\"\"\"\ninput AddPullRequestReviewCommentInput {\n  \"\"\"\n  The text of the comment.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The SHA of the commit to comment on.\n  \"\"\"\n  commitOID: GitObjectID\n\n  \"\"\"\n  The comment id to reply to.\n  \"\"\"\n  inReplyTo: ID\n\n  \"\"\"\n  The relative path of the file to comment on.\n  \"\"\"\n  path: String\n\n  \"\"\"\n  The line index in the diff to comment on.\n  \"\"\"\n  position: Int\n\n  \"\"\"\n  The Node ID of the review to modify.\n  \"\"\"\n  pullRequestReviewId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AddPullRequestReviewComment\n\"\"\"\ntype AddPullRequestReviewCommentPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The newly created comment.\n  \"\"\"\n  comment: PullRequestReviewComment\n\n  \"\"\"\n  The edge from the review's comment connection.\n  \"\"\"\n  commentEdge: PullRequestReviewCommentEdge\n}\n\n\"\"\"\nAutogenerated input type of AddPullRequestReview\n\"\"\"\ninput AddPullRequestReviewInput {\n  \"\"\"\n  The contents of the review body comment.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The review line comments.\n  \"\"\"\n  comments: [DraftPullRequestReviewComment]\n\n  \"\"\"\n  The commit OID the review pertains to.\n  \"\"\"\n  commitOID: GitObjectID\n\n  \"\"\"\n  The event to perform on the pull request review.\n  \"\"\"\n  event: PullRequestReviewEvent\n\n  \"\"\"\n  The Node ID of the pull request to modify.\n  \"\"\"\n  pullRequestId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AddPullRequestReview\n\"\"\"\ntype AddPullRequestReviewPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The newly created pull request review.\n  \"\"\"\n  pullRequestReview: PullRequestReview\n\n  \"\"\"\n  The edge from the pull request's review connection.\n  \"\"\"\n  reviewEdge: PullRequestReviewEdge\n}\n\n\"\"\"\nAutogenerated input type of AddReaction\n\"\"\"\ninput AddReactionInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of the emoji to react with.\n  \"\"\"\n  content: ReactionContent!\n\n  \"\"\"\n  The Node ID of the subject to modify.\n  \"\"\"\n  subjectId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AddReaction\n\"\"\"\ntype AddReactionPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The reaction object.\n  \"\"\"\n  reaction: Reaction\n\n  \"\"\"\n  The reactable subject.\n  \"\"\"\n  subject: Reactable\n}\n\n\"\"\"\nAutogenerated input type of AddStar\n\"\"\"\ninput AddStarInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Starrable ID to star.\n  \"\"\"\n  starrableId: ID!\n}\n\n\"\"\"\nAutogenerated return type of AddStar\n\"\"\"\ntype AddStarPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The starrable.\n  \"\"\"\n  starrable: Starrable\n}\n\n\"\"\"\nRepresents a 'added_to_project' event on a given issue or pull request.\n\"\"\"\ntype AddedToProjectEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n}\n\n\"\"\"\nA GitHub App.\n\"\"\"\ntype App implements Node {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The description of the app.\n  \"\"\"\n  description: String\n  id: ID!\n\n  \"\"\"\n  The hex color code, without the leading '#', for the logo background.\n  \"\"\"\n  logoBackgroundColor: String!\n\n  \"\"\"\n  A URL pointing to the app's logo.\n  \"\"\"\n  logoUrl(\n    \"\"\"\n    The size of the resulting image.\n    \"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"\n  The name of the app.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  A slug based on the name of the app for use in URLs.\n  \"\"\"\n  slug: String!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The URL to the app's homepage.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype AppEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: App\n}\n\n\"\"\"\nAn object that can have users assigned to it.\n\"\"\"\ninterface Assignable {\n  \"\"\"\n  A list of Users assigned to this object.\n  \"\"\"\n  assignees(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n}\n\n\"\"\"\nRepresents an 'assigned' event on any assignable object.\n\"\"\"\ntype AssignedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the assignable associated with the event.\n  \"\"\"\n  assignable: Assignable!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the user who was assigned.\n  \"\"\"\n  user: User\n}\n\n\"\"\"\nRepresents a 'base_ref_changed' event on a given issue or pull request.\n\"\"\"\ntype BaseRefChangedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n}\n\n\"\"\"\nRepresents a 'base_ref_force_pushed' event on a given pull request.\n\"\"\"\ntype BaseRefForcePushedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the after commit SHA for the 'base_ref_force_pushed' event.\n  \"\"\"\n  afterCommit: Commit\n\n  \"\"\"\n  Identifies the before commit SHA for the 'base_ref_force_pushed' event.\n  \"\"\"\n  beforeCommit: Commit\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.\n  \"\"\"\n  ref: Ref\n}\n\n\"\"\"\nRepresents a Git blame.\n\"\"\"\ntype Blame {\n  \"\"\"\n  The list of ranges from a Git blame.\n  \"\"\"\n  ranges: [BlameRange!]!\n}\n\n\"\"\"\nRepresents a range of information from a Git blame.\n\"\"\"\ntype BlameRange {\n  \"\"\"\n  Identifies the recency of the change, from 1 (new) to 10 (old). This is\n  calculated as a 2-quantile and determines the length of distance between the\n  median age of all the changes in the file and the recency of the current\n  range's change.\n  \"\"\"\n  age: Int!\n\n  \"\"\"\n  Identifies the line author\n  \"\"\"\n  commit: Commit!\n\n  \"\"\"\n  The ending line for the range\n  \"\"\"\n  endingLine: Int!\n\n  \"\"\"\n  The starting line for the range\n  \"\"\"\n  startingLine: Int!\n}\n\n\"\"\"\nRepresents a Git blob.\n\"\"\"\ntype Blob implements GitObject & Node {\n  \"\"\"\n  An abbreviated version of the Git object ID\n  \"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"\n  Byte size of Blob object\n  \"\"\"\n  byteSize: Int!\n\n  \"\"\"\n  The HTTP path for this Git object\n  \"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this Git object\n  \"\"\"\n  commitUrl: URI!\n  id: ID!\n\n  \"\"\"\n  Indicates whether the Blob is binary or text\n  \"\"\"\n  isBinary: Boolean!\n\n  \"\"\"\n  Indicates whether the contents is truncated\n  \"\"\"\n  isTruncated: Boolean!\n\n  \"\"\"\n  The Git object ID\n  \"\"\"\n  oid: GitObjectID!\n\n  \"\"\"\n  The Repository the Git object belongs to\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  UTF8 text data or null if the Blob is binary\n  \"\"\"\n  text: String\n}\n\n\"\"\"\nA special type of user which takes actions on behalf of GitHub Apps.\n\"\"\"\ntype Bot implements Actor & Node & UniformResourceLocatable {\n  \"\"\"\n  A URL pointing to the GitHub App's public avatar.\n  \"\"\"\n  avatarUrl(\n    \"\"\"\n    The size of the resulting square image.\n    \"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n\n  \"\"\"\n  The username of the actor.\n  \"\"\"\n  login: String!\n\n  \"\"\"\n  The HTTP path for this bot\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this bot\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nA branch protection rule.\n\"\"\"\ntype BranchProtectionRule implements Node {\n  \"\"\"\n  A list of conflicts matching branches protection rule and other branch protection rules\n  \"\"\"\n  branchProtectionRuleConflicts(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): BranchProtectionRuleConflictConnection!\n\n  \"\"\"\n  The actor who created this branch protection rule.\n  \"\"\"\n  creator: Actor\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  Will new commits pushed to matching branches dismiss pull request review approvals.\n  \"\"\"\n  dismissesStaleReviews: Boolean!\n  id: ID!\n\n  \"\"\"\n  Can admins overwrite branch protection.\n  \"\"\"\n  isAdminEnforced: Boolean!\n\n  \"\"\"\n  Repository refs that are protected by this rule\n  \"\"\"\n  matchingRefs(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): RefConnection!\n\n  \"\"\"\n  Identifies the protection rule pattern.\n  \"\"\"\n  pattern: String!\n\n  \"\"\"\n  A list push allowances for this branch protection rule.\n  \"\"\"\n  pushAllowances(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): PushAllowanceConnection!\n\n  \"\"\"\n  The repository associated with this branch protection rule.\n  \"\"\"\n  repository: Repository\n\n  \"\"\"\n  Number of approving reviews required to update matching branches.\n  \"\"\"\n  requiredApprovingReviewCount: Int\n\n  \"\"\"\n  List of required status check contexts that must pass for commits to be accepted to matching branches.\n  \"\"\"\n  requiredStatusCheckContexts: [String]\n\n  \"\"\"\n  Are approving reviews required to update matching branches.\n  \"\"\"\n  requiresApprovingReviews: Boolean!\n\n  \"\"\"\n  Are commits required to be signed.\n  \"\"\"\n  requiresCommitSignatures: Boolean!\n\n  \"\"\"\n  Are status checks required to update matching branches.\n  \"\"\"\n  requiresStatusChecks: Boolean!\n\n  \"\"\"\n  Are branches required to be up to date before merging.\n  \"\"\"\n  requiresStrictStatusChecks: Boolean!\n\n  \"\"\"\n  Is pushing to matching branches restricted.\n  \"\"\"\n  restrictsPushes: Boolean!\n\n  \"\"\"\n  Is dismissal of pull request reviews restricted.\n  \"\"\"\n  restrictsReviewDismissals: Boolean!\n\n  \"\"\"\n  A list review dismissal allowances for this branch protection rule.\n  \"\"\"\n  reviewDismissalAllowances(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ReviewDismissalAllowanceConnection!\n}\n\n\"\"\"\nA conflict between two branch protection rules.\n\"\"\"\ntype BranchProtectionRuleConflict {\n  \"\"\"\n  Identifies the branch protection rule.\n  \"\"\"\n  branchProtectionRule: BranchProtectionRule\n\n  \"\"\"\n  Identifies the conflicting branch protection rule.\n  \"\"\"\n  conflictingBranchProtectionRule: BranchProtectionRule\n\n  \"\"\"\n  Identifies the branch ref that has conflicting rules\n  \"\"\"\n  ref: Ref\n}\n\n\"\"\"\nThe connection type for BranchProtectionRuleConflict.\n\"\"\"\ntype BranchProtectionRuleConflictConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [BranchProtectionRuleConflictEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [BranchProtectionRuleConflict]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype BranchProtectionRuleConflictEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: BranchProtectionRuleConflict\n}\n\n\"\"\"\nThe connection type for BranchProtectionRule.\n\"\"\"\ntype BranchProtectionRuleConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [BranchProtectionRuleEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [BranchProtectionRule]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype BranchProtectionRuleEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: BranchProtectionRule\n}\n\n\"\"\"\nAutogenerated input type of ChangeUserStatus\n\"\"\"\ninput ChangeUserStatusInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.\n  \"\"\"\n  emoji: String\n\n  \"\"\"\n  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.\n  \"\"\"\n  limitedAvailability: Boolean = false\n\n  \"\"\"\n  A short description of your current status.\n  \"\"\"\n  message: String\n\n  \"\"\"\n  The ID of the organization whose members will be allowed to see the status. If\n  omitted, the status will be publicly visible.\n  \"\"\"\n  organizationId: ID\n}\n\n\"\"\"\nAutogenerated return type of ChangeUserStatus\n\"\"\"\ntype ChangeUserStatusPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  Your updated status.\n  \"\"\"\n  status: UserStatus\n}\n\n\"\"\"\nAutogenerated input type of ClearLabelsFromLabelable\n\"\"\"\ninput ClearLabelsFromLabelableInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The id of the labelable object to clear the labels from.\n  \"\"\"\n  labelableId: ID!\n}\n\n\"\"\"\nAutogenerated return type of ClearLabelsFromLabelable\n\"\"\"\ntype ClearLabelsFromLabelablePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The item that was unlabeled.\n  \"\"\"\n  labelable: Labelable\n}\n\n\"\"\"\nAutogenerated input type of CloneProject\n\"\"\"\ninput CloneProjectInput {\n  \"\"\"\n  The description of the project.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  Whether or not to clone the source project's workflows.\n  \"\"\"\n  includeWorkflows: Boolean!\n\n  \"\"\"\n  The name of the project.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The visibility of the project, defaults to false (private).\n  \"\"\"\n  public: Boolean\n\n  \"\"\"\n  The source project to clone.\n  \"\"\"\n  sourceId: ID!\n\n  \"\"\"\n  The owner ID to create the project under.\n  \"\"\"\n  targetOwnerId: ID!\n}\n\n\"\"\"\nAutogenerated return type of CloneProject\n\"\"\"\ntype CloneProjectPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The id of the JobStatus for populating cloned fields.\n  \"\"\"\n  jobStatusId: String\n\n  \"\"\"\n  The new cloned project.\n  \"\"\"\n  project: Project\n}\n\n\"\"\"\nAn object that can be closed\n\"\"\"\ninterface Closable {\n  \"\"\"\n  `true` if the object is closed (definition of closed may depend on type)\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"\n  Identifies the date and time when the object was closed.\n  \"\"\"\n  closedAt: DateTime\n}\n\n\"\"\"\nAutogenerated input type of CloseIssue\n\"\"\"\ninput CloseIssueInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  ID of the issue to be closed.\n  \"\"\"\n  issueId: ID!\n}\n\n\"\"\"\nAutogenerated return type of CloseIssue\n\"\"\"\ntype CloseIssuePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The issue that was closed.\n  \"\"\"\n  issue: Issue\n}\n\n\"\"\"\nAutogenerated input type of ClosePullRequest\n\"\"\"\ninput ClosePullRequestInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  ID of the pull request to be closed.\n  \"\"\"\n  pullRequestId: ID!\n}\n\n\"\"\"\nAutogenerated return type of ClosePullRequest\n\"\"\"\ntype ClosePullRequestPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The pull request that was closed.\n  \"\"\"\n  pullRequest: PullRequest\n}\n\n\"\"\"\nRepresents a 'closed' event on any `Closable`.\n\"\"\"\ntype ClosedEvent implements Node & UniformResourceLocatable {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Object that was closed.\n  \"\"\"\n  closable: Closable!\n\n  \"\"\"\n  Object which triggered the creation of this event.\n  \"\"\"\n  closer: Closer\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  The HTTP path for this closed event.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this closed event.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nThe object which triggered a `ClosedEvent`.\n\"\"\"\nunion Closer = Commit | PullRequest\n\n\"\"\"\nThe Code of Conduct for a repository\n\"\"\"\ntype CodeOfConduct implements Node {\n  \"\"\"\n  The body of the Code of Conduct\n  \"\"\"\n  body: String\n  id: ID!\n\n  \"\"\"\n  The key for the Code of Conduct\n  \"\"\"\n  key: String!\n\n  \"\"\"\n  The formal name of the Code of Conduct\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The HTTP path for this Code of Conduct\n  \"\"\"\n  resourcePath: URI\n\n  \"\"\"\n  The HTTP URL for this Code of Conduct\n  \"\"\"\n  url: URI\n}\n\n\"\"\"\nCollaborators affiliation level with a subject.\n\"\"\"\nenum CollaboratorAffiliation {\n  \"\"\"\n  All collaborators the authenticated user can see.\n  \"\"\"\n  ALL\n\n  \"\"\"\n  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.\n  \"\"\"\n  DIRECT\n\n  \"\"\"\n  All outside collaborators of an organization-owned subject.\n  \"\"\"\n  OUTSIDE\n}\n\n\"\"\"\nTypes that can be inside Collection Items.\n\"\"\"\nunion CollectionItemContent = Organization | Repository | User\n\n\"\"\"\nRepresents a comment.\n\"\"\"\ninterface Comment {\n  \"\"\"\n  The actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the subject of the comment.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\n  The body as Markdown.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  The body rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  The body rendered to text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  The actor who edited the comment.\n  \"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  The moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"\nA comment author association with repository.\n\"\"\"\nenum CommentAuthorAssociation {\n  \"\"\"\n  Author has been invited to collaborate on the repository.\n  \"\"\"\n  COLLABORATOR\n\n  \"\"\"\n  Author has previously committed to the repository.\n  \"\"\"\n  CONTRIBUTOR\n\n  \"\"\"\n  Author has not previously committed to GitHub.\n  \"\"\"\n  FIRST_TIMER\n\n  \"\"\"\n  Author has not previously committed to the repository.\n  \"\"\"\n  FIRST_TIME_CONTRIBUTOR\n\n  \"\"\"\n  Author is a member of the organization that owns the repository.\n  \"\"\"\n  MEMBER\n\n  \"\"\"\n  Author has no association with the repository.\n  \"\"\"\n  NONE\n\n  \"\"\"\n  Author is the owner of the repository.\n  \"\"\"\n  OWNER\n}\n\n\"\"\"\nThe possible errors that will prevent a user from updating a comment.\n\"\"\"\nenum CommentCannotUpdateReason {\n  \"\"\"\n  You cannot update this comment\n  \"\"\"\n  DENIED\n\n  \"\"\"\n  You must be the author or have write access to this repository to update this comment.\n  \"\"\"\n  INSUFFICIENT_ACCESS\n\n  \"\"\"\n  Unable to create comment because issue is locked.\n  \"\"\"\n  LOCKED\n\n  \"\"\"\n  You must be logged in to update this comment.\n  \"\"\"\n  LOGIN_REQUIRED\n\n  \"\"\"\n  Repository is under maintenance.\n  \"\"\"\n  MAINTENANCE\n\n  \"\"\"\n  At least one email address must be verified to update this comment.\n  \"\"\"\n  VERIFIED_EMAIL_REQUIRED\n}\n\n\"\"\"\nRepresents a 'comment_deleted' event on a given issue or pull request.\n\"\"\"\ntype CommentDeletedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n}\n\n\"\"\"\nRepresents a Git commit.\n\"\"\"\ntype Commit implements GitObject & Node & Subscribable & UniformResourceLocatable {\n  \"\"\"\n  An abbreviated version of the Git object ID\n  \"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"\n  The number of additions in this commit.\n  \"\"\"\n  additions: Int!\n\n  \"\"\"\n  The pull requests associated with a commit\n  \"\"\"\n  associatedPullRequests(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for pull requests.\n    \"\"\"\n    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}\n  ): PullRequestConnection\n\n  \"\"\"\n  Authorship details of the commit.\n  \"\"\"\n  author: GitActor\n\n  \"\"\"\n  Check if the committer and the author match.\n  \"\"\"\n  authoredByCommitter: Boolean!\n\n  \"\"\"\n  The datetime when this commit was authored.\n  \"\"\"\n  authoredDate: DateTime!\n\n  \"\"\"\n  Fetches `git blame` information.\n  \"\"\"\n  blame(\n    \"\"\"\n    The file whose Git blame information you want.\n    \"\"\"\n    path: String!\n  ): Blame!\n\n  \"\"\"\n  The number of changed files in this commit.\n  \"\"\"\n  changedFiles: Int!\n\n  \"\"\"\n  Comments made on the commit.\n  \"\"\"\n  comments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): CommitCommentConnection!\n\n  \"\"\"\n  The HTTP path for this Git object\n  \"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this Git object\n  \"\"\"\n  commitUrl: URI!\n\n  \"\"\"\n  The datetime when this commit was committed.\n  \"\"\"\n  committedDate: DateTime!\n\n  \"\"\"\n  Check if commited via GitHub web UI.\n  \"\"\"\n  committedViaWeb: Boolean!\n\n  \"\"\"\n  Committership details of the commit.\n  \"\"\"\n  committer: GitActor\n\n  \"\"\"\n  The number of deletions in this commit.\n  \"\"\"\n  deletions: Int!\n\n  \"\"\"\n  The deployments associated with a commit.\n  \"\"\"\n  deployments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Environments to list deployments for\n    \"\"\"\n    environments: [String!]\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for deployments returned from the connection.\n    \"\"\"\n    orderBy: DeploymentOrder = {field: CREATED_AT, direction: ASC}\n  ): DeploymentConnection\n\n  \"\"\"\n  The linear commit history starting from (and including) this commit, in the same order as `git log`.\n  \"\"\"\n  history(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    If non-null, filters history to only show commits with matching authorship.\n    \"\"\"\n    author: CommitAuthor\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    If non-null, filters history to only show commits touching files under this path.\n    \"\"\"\n    path: String\n\n    \"\"\"\n    Allows specifying a beginning time or date for fetching commits.\n    \"\"\"\n    since: GitTimestamp\n\n    \"\"\"\n    Allows specifying an ending time or date for fetching commits.\n    \"\"\"\n    until: GitTimestamp\n  ): CommitHistoryConnection!\n  id: ID!\n\n  \"\"\"\n  The Git commit message\n  \"\"\"\n  message: String!\n\n  \"\"\"\n  The Git commit message body\n  \"\"\"\n  messageBody: String!\n\n  \"\"\"\n  The commit message body rendered to HTML.\n  \"\"\"\n  messageBodyHTML: HTML!\n\n  \"\"\"\n  The Git commit message headline\n  \"\"\"\n  messageHeadline: String!\n\n  \"\"\"\n  The commit message headline rendered to HTML.\n  \"\"\"\n  messageHeadlineHTML: HTML!\n\n  \"\"\"\n  The Git object ID\n  \"\"\"\n  oid: GitObjectID!\n\n  \"\"\"\n  The parents of a commit.\n  \"\"\"\n  parents(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): CommitConnection!\n\n  \"\"\"\n  The datetime when this commit was pushed.\n  \"\"\"\n  pushedDate: DateTime\n\n  \"\"\"\n  The Repository this commit belongs to\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this commit\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Commit signing information, if present.\n  \"\"\"\n  signature: GitSignature\n\n  \"\"\"\n  Status information for this commit\n  \"\"\"\n  status: Status\n\n  \"\"\"\n  Returns a URL to download a tarball archive for a repository.\n  Note: For private repositories, these links are temporary and expire after five minutes.\n  \"\"\"\n  tarballUrl: URI!\n\n  \"\"\"\n  Commit's root Tree\n  \"\"\"\n  tree: Tree!\n\n  \"\"\"\n  The HTTP path for the tree of this commit\n  \"\"\"\n  treeResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for the tree of this commit\n  \"\"\"\n  treeUrl: URI!\n\n  \"\"\"\n  The HTTP URL for this commit\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState\n\n  \"\"\"\n  Returns a URL to download a zipball archive for a repository.\n  Note: For private repositories, these links are temporary and expire after five minutes.\n  \"\"\"\n  zipballUrl: URI!\n}\n\n\"\"\"\nSpecifies an author for filtering Git commits.\n\"\"\"\ninput CommitAuthor {\n  \"\"\"\n  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.\n  \"\"\"\n  emails: [String!]\n\n  \"\"\"\n  ID of a User to filter by. If non-null, only commits authored by this user\n  will be returned. This field takes precedence over emails.\n  \"\"\"\n  id: ID\n}\n\n\"\"\"\nRepresents a comment on a given Commit.\n\"\"\"\ntype CommitComment implements Comment & Deletable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {\n  \"\"\"\n  The actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the subject of the comment.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\n  Identifies the comment body.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  Identifies the comment body rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  The body rendered to text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  Identifies the commit associated with the comment, if the commit exists.\n  \"\"\"\n  commit: Commit\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The actor who edited the comment.\n  \"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  Returns whether or not a comment has been minimized.\n  \"\"\"\n  isMinimized: Boolean!\n\n  \"\"\"\n  The moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  Returns why the comment was minimized.\n  \"\"\"\n  minimizedReason: String\n\n  \"\"\"\n  Identifies the file path associated with the comment.\n  \"\"\"\n  path: String\n\n  \"\"\"\n  Identifies the line position associated with the comment.\n  \"\"\"\n  position: Int\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  A list of reactions grouped by content left on the subject.\n  \"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"\n  A list of Reactions left on the Issue.\n  \"\"\"\n  reactions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Allows filtering Reactions by emoji.\n    \"\"\"\n    content: ReactionContent\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows specifying the order in which reactions are returned.\n    \"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path permalink for this commit comment.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL permalink for this commit comment.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Check if the current viewer can delete this object.\n  \"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"\n  Check if the current viewer can minimize this object.\n  \"\"\"\n  viewerCanMinimize: Boolean!\n\n  \"\"\"\n  Can user react to this subject\n  \"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"\nThe connection type for CommitComment.\n\"\"\"\ntype CommitCommentConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [CommitCommentEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [CommitComment]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype CommitCommentEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: CommitComment\n}\n\n\"\"\"\nA thread of comments on a commit.\n\"\"\"\ntype CommitCommentThread implements Node & RepositoryNode {\n  \"\"\"\n  The comments that exist in this thread.\n  \"\"\"\n  comments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): CommitCommentConnection!\n\n  \"\"\"\n  The commit the comments were made on.\n  \"\"\"\n  commit: Commit!\n  id: ID!\n\n  \"\"\"\n  The file the comments were made on.\n  \"\"\"\n  path: String\n\n  \"\"\"\n  The position in the diff for the commit that the comment was made on.\n  \"\"\"\n  position: Int\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n}\n\n\"\"\"\nThe connection type for Commit.\n\"\"\"\ntype CommitConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [CommitEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Commit]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nOrdering options for commit contribution connections.\n\"\"\"\ninput CommitContributionOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field by which to order commit contributions.\n  \"\"\"\n  field: CommitContributionOrderField!\n}\n\n\"\"\"\nProperties by which commit contribution connections can be ordered.\n\"\"\"\nenum CommitContributionOrderField {\n  \"\"\"\n  Order commit contributions by how many commits they represent.\n  \"\"\"\n  COMMIT_COUNT\n\n  \"\"\"\n  Order commit contributions by when they were made.\n  \"\"\"\n  OCCURRED_AT\n}\n\n\"\"\"\nThis aggregates commits made by a user within one repository.\n\"\"\"\ntype CommitContributionsByRepository {\n  \"\"\"\n  The commit contributions, each representing a day.\n  \"\"\"\n  contributions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for commit contributions returned from the connection.\n    \"\"\"\n    orderBy: CommitContributionOrder = {field: OCCURRED_AT, direction: DESC}\n  ): CreatedCommitContributionConnection!\n\n  \"\"\"\n  The repository in which the commits were made.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for the user's commits to the repository in this time range.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for the user's commits to the repository in this time range.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype CommitEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Commit\n}\n\n\"\"\"\nThe connection type for Commit.\n\"\"\"\ntype CommitHistoryConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [CommitEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Commit]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nA content attachment\n\"\"\"\ntype ContentAttachment {\n  \"\"\"\n  The body text of the content attachment. This parameter supports markdown.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  The content reference that the content attachment is attached to.\n  \"\"\"\n  contentReference: ContentReference!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int!\n  id: ID!\n\n  \"\"\"\n  The title of the content attachment.\n  \"\"\"\n  title: String!\n}\n\n\"\"\"\nA content reference\n\"\"\"\ntype ContentReference {\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int!\n  id: ID!\n\n  \"\"\"\n  The reference of the content reference.\n  \"\"\"\n  reference: String!\n}\n\n\"\"\"\nRepresents a contribution a user made on GitHub, such as opening an issue.\n\"\"\"\ninterface Contribution {\n  \"\"\"\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  \"\"\"\n  isRestricted: Boolean!\n\n  \"\"\"\n  When this contribution was made.\n  \"\"\"\n  occurredAt: DateTime!\n\n  \"\"\"\n  The HTTP path for this contribution.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this contribution.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  The user who made this contribution.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nA calendar of contributions made on GitHub by a user.\n\"\"\"\ntype ContributionCalendar {\n  \"\"\"\n  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.\n  \"\"\"\n  colors: [String!]!\n\n  \"\"\"\n  Determine if the color set was chosen because it's currently Halloween.\n  \"\"\"\n  isHalloween: Boolean!\n\n  \"\"\"\n  A list of the months of contributions in this calendar.\n  \"\"\"\n  months: [ContributionCalendarMonth!]!\n\n  \"\"\"\n  The count of total contributions in the calendar.\n  \"\"\"\n  totalContributions: Int!\n\n  \"\"\"\n  A list of the weeks of contributions in this calendar.\n  \"\"\"\n  weeks: [ContributionCalendarWeek!]!\n}\n\n\"\"\"\nRepresents a single day of contributions on GitHub by a user.\n\"\"\"\ntype ContributionCalendarDay {\n  \"\"\"\n  The hex color code that represents how many contributions were made on this day compared to others in the calendar.\n  \"\"\"\n  color: String!\n\n  \"\"\"\n  How many contributions were made by the user on this day.\n  \"\"\"\n  contributionCount: Int!\n\n  \"\"\"\n  The day this square represents.\n  \"\"\"\n  date: Date!\n\n  \"\"\"\n  A number representing which day of the week this square represents, e.g., 1 is Monday.\n  \"\"\"\n  weekday: Int!\n}\n\n\"\"\"\nA month of contributions in a user's contribution graph.\n\"\"\"\ntype ContributionCalendarMonth {\n  \"\"\"\n  The date of the first day of this month.\n  \"\"\"\n  firstDay: Date!\n\n  \"\"\"\n  The name of the month.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  How many weeks started in this month.\n  \"\"\"\n  totalWeeks: Int!\n\n  \"\"\"\n  The year the month occurred in.\n  \"\"\"\n  year: Int!\n}\n\n\"\"\"\nA week of contributions in a user's contribution graph.\n\"\"\"\ntype ContributionCalendarWeek {\n  \"\"\"\n  The days of contributions in this week.\n  \"\"\"\n  contributionDays: [ContributionCalendarDay!]!\n\n  \"\"\"\n  The date of the earliest square in this week.\n  \"\"\"\n  firstDay: Date!\n}\n\n\"\"\"\nOrdering options for contribution connections.\n\"\"\"\ninput ContributionOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field by which to order contributions.\n  \"\"\"\n  field: ContributionOrderField!\n}\n\n\"\"\"\nProperties by which contribution connections can be ordered.\n\"\"\"\nenum ContributionOrderField {\n  \"\"\"\n  Order contributions by when they were made.\n  \"\"\"\n  OCCURRED_AT\n}\n\n\"\"\"\nA contributions collection aggregates contributions such as opened issues and commits created by a user.\n\"\"\"\ntype ContributionsCollection {\n  \"\"\"\n  Commit contributions made by the user, grouped by repository.\n  \"\"\"\n  commitContributionsByRepository(\n    \"\"\"\n    How many repositories should be included.\n    \"\"\"\n    maxRepositories: Int = 25\n  ): [CommitContributionsByRepository!]!\n\n  \"\"\"\n  A calendar of this user's contributions on GitHub.\n  \"\"\"\n  contributionCalendar: ContributionCalendar!\n\n  \"\"\"\n  The years the user has been making contributions with the most recent year first.\n  \"\"\"\n  contributionYears: [Int!]!\n\n  \"\"\"\n  Determine if this collection's time span ends in the current month.\n  \"\"\"\n  doesEndInCurrentMonth: Boolean!\n\n  \"\"\"\n  The date of the first restricted contribution the user made in this time\n  period. Can only be non-null when the user has enabled private contribution counts.\n  \"\"\"\n  earliestRestrictedContributionDate: Date\n\n  \"\"\"\n  The ending date and time of this collection.\n  \"\"\"\n  endedAt: DateTime!\n\n  \"\"\"\n  The first issue the user opened on GitHub. This will be null if that issue was\n  opened outside the collection's time range and ignoreTimeRange is false. If\n  the issue is not visible but the user has opted to show private contributions,\n  a RestrictedContribution will be returned.\n  \"\"\"\n  firstIssueContribution(\n    \"\"\"\n    If true, the first issue will be returned even if it was opened outside of the collection's time range.\n\n    **Upcoming Change on 2019-07-01 UTC**\n    **Description:** `ignoreTimeRange` will be removed. Use a `ContributionsCollection` starting sufficiently far back\n    **Reason:** ignore_time_range will be removed\n    \"\"\"\n    ignoreTimeRange: Boolean = false\n  ): CreatedIssueOrRestrictedContribution\n\n  \"\"\"\n  The first pull request the user opened on GitHub. This will be null if that\n  pull request was opened outside the collection's time range and\n  ignoreTimeRange is not true. If the pull request is not visible but the user\n  has opted to show private contributions, a RestrictedContribution will be returned.\n  \"\"\"\n  firstPullRequestContribution(\n    \"\"\"\n    If true, the first pull request will be returned even if it was opened outside of the collection's time range.\n\n    **Upcoming Change on 2019-07-01 UTC**\n    **Description:** `ignoreTimeRange` will be removed. Use a `ContributionsCollection` starting sufficiently far back\n    **Reason:** ignore_time_range will be removed\n    \"\"\"\n    ignoreTimeRange: Boolean = false\n  ): CreatedPullRequestOrRestrictedContribution\n\n  \"\"\"\n  The first repository the user created on GitHub. This will be null if that\n  first repository was created outside the collection's time range and\n  ignoreTimeRange is false. If the repository is not visible, then a\n  RestrictedContribution is returned.\n  \"\"\"\n  firstRepositoryContribution(\n    \"\"\"\n    If true, the first repository will be returned even if it was opened outside of the collection's time range.\n\n    **Upcoming Change on 2019-07-01 UTC**\n    **Description:** `ignoreTimeRange` will be removed. Use a `ContributionsCollection` starting sufficiently far back\n    **Reason:** ignore_time_range will be removed\n    \"\"\"\n    ignoreTimeRange: Boolean = false\n  ): CreatedRepositoryOrRestrictedContribution\n\n  \"\"\"\n  Does the user have any more activity in the timeline that occurred prior to the collection's time range?\n  \"\"\"\n  hasActivityInThePast: Boolean!\n\n  \"\"\"\n  Determine if there are any contributions in this collection.\n  \"\"\"\n  hasAnyContributions: Boolean!\n\n  \"\"\"\n  Determine if the user made any contributions in this time frame whose details\n  are not visible because they were made in a private repository. Can only be\n  true if the user enabled private contribution counts.\n  \"\"\"\n  hasAnyRestrictedContributions: Boolean!\n\n  \"\"\"\n  Whether or not the collector's time span is all within the same day.\n  \"\"\"\n  isSingleDay: Boolean!\n\n  \"\"\"\n  A list of issues the user opened.\n  \"\"\"\n  issueContributions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Should the user's first issue ever be excluded from the result.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Should the user's most commented issue be excluded from the result.\n    \"\"\"\n    excludePopular: Boolean = false\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for contributions returned from the connection.\n    \"\"\"\n    orderBy: ContributionOrder = {field: OCCURRED_AT, direction: DESC}\n  ): CreatedIssueContributionConnection!\n\n  \"\"\"\n  Issue contributions made by the user, grouped by repository.\n  \"\"\"\n  issueContributionsByRepository(\n    \"\"\"\n    Should the user's first issue ever be excluded from the result.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Should the user's most commented issue be excluded from the result.\n    \"\"\"\n    excludePopular: Boolean = false\n\n    \"\"\"\n    How many repositories should be included.\n    \"\"\"\n    maxRepositories: Int = 25\n  ): [IssueContributionsByRepository!]!\n\n  \"\"\"\n  When the user signed up for GitHub. This will be null if that sign up date\n  falls outside the collection's time range and ignoreTimeRange is false.\n  \"\"\"\n  joinedGitHubContribution(\n    \"\"\"\n    If true, the contribution will be returned even if the user signed up outside of the collection's time range.\n\n    **Upcoming Change on 2019-07-01 UTC**\n    **Description:** `ignoreTimeRange` will be removed. Use a `ContributionsCollection` starting sufficiently far back\n    **Reason:** ignore_time_range will be removed\n    \"\"\"\n    ignoreTimeRange: Boolean = false\n  ): JoinedGitHubContribution\n\n  \"\"\"\n  The date of the most recent restricted contribution the user made in this time\n  period. Can only be non-null when the user has enabled private contribution counts.\n  \"\"\"\n  latestRestrictedContributionDate: Date\n\n  \"\"\"\n  When this collection's time range does not include any activity from the user, use this\n  to get a different collection from an earlier time range that does have activity.\n  \"\"\"\n  mostRecentCollectionWithActivity: ContributionsCollection\n\n  \"\"\"\n  Returns a different contributions collection from an earlier time range than this one\n  that does not have any contributions.\n  \"\"\"\n  mostRecentCollectionWithoutActivity: ContributionsCollection\n\n  \"\"\"\n  The issue the user opened on GitHub that received the most comments in the specified\n  time frame.\n  \"\"\"\n  popularIssueContribution: CreatedIssueContribution\n\n  \"\"\"\n  The pull request the user opened on GitHub that received the most comments in the\n  specified time frame.\n  \"\"\"\n  popularPullRequestContribution: CreatedPullRequestContribution\n\n  \"\"\"\n  Pull request contributions made by the user.\n  \"\"\"\n  pullRequestContributions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Should the user's first pull request ever be excluded from the result.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Should the user's most commented pull request be excluded from the result.\n    \"\"\"\n    excludePopular: Boolean = false\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for contributions returned from the connection.\n    \"\"\"\n    orderBy: ContributionOrder = {field: OCCURRED_AT, direction: DESC}\n  ): CreatedPullRequestContributionConnection!\n\n  \"\"\"\n  Pull request contributions made by the user, grouped by repository.\n  \"\"\"\n  pullRequestContributionsByRepository(\n    \"\"\"\n    Should the user's first pull request ever be excluded from the result.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Should the user's most commented pull request be excluded from the result.\n    \"\"\"\n    excludePopular: Boolean = false\n\n    \"\"\"\n    How many repositories should be included.\n    \"\"\"\n    maxRepositories: Int = 25\n  ): [PullRequestContributionsByRepository!]!\n\n  \"\"\"\n  Pull request review contributions made by the user.\n  \"\"\"\n  pullRequestReviewContributions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for contributions returned from the connection.\n    \"\"\"\n    orderBy: ContributionOrder = {field: OCCURRED_AT, direction: DESC}\n  ): CreatedPullRequestReviewContributionConnection!\n\n  \"\"\"\n  Pull request review contributions made by the user, grouped by repository.\n  \"\"\"\n  pullRequestReviewContributionsByRepository(\n    \"\"\"\n    How many repositories should be included.\n    \"\"\"\n    maxRepositories: Int = 25\n  ): [PullRequestReviewContributionsByRepository!]!\n\n  \"\"\"\n  A list of repositories owned by the user that the user created in this time range.\n  \"\"\"\n  repositoryContributions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Should the user's first repository ever be excluded from the result.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for contributions returned from the connection.\n    \"\"\"\n    orderBy: ContributionOrder = {field: OCCURRED_AT, direction: DESC}\n  ): CreatedRepositoryContributionConnection!\n\n  \"\"\"\n  A count of contributions made by the user that the viewer cannot access. Only\n  non-zero when the user has chosen to share their private contribution counts.\n  \"\"\"\n  restrictedContributionsCount: Int!\n\n  \"\"\"\n  The beginning date and time of this collection.\n  \"\"\"\n  startedAt: DateTime!\n\n  \"\"\"\n  How many commits were made by the user in this time span.\n  \"\"\"\n  totalCommitContributions: Int!\n\n  \"\"\"\n  How many issues the user opened.\n  \"\"\"\n  totalIssueContributions(\n    \"\"\"\n    Should the user's first issue ever be excluded from this count.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Should the user's most commented issue be excluded from this count.\n    \"\"\"\n    excludePopular: Boolean = false\n  ): Int!\n\n  \"\"\"\n  How many pull requests the user opened.\n  \"\"\"\n  totalPullRequestContributions(\n    \"\"\"\n    Should the user's first pull request ever be excluded from this count.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Should the user's most commented pull request be excluded from this count.\n    \"\"\"\n    excludePopular: Boolean = false\n  ): Int!\n\n  \"\"\"\n  How many pull request reviews the user left.\n  \"\"\"\n  totalPullRequestReviewContributions: Int!\n\n  \"\"\"\n  How many different repositories the user committed to.\n  \"\"\"\n  totalRepositoriesWithContributedCommits: Int!\n\n  \"\"\"\n  How many different repositories the user opened issues in.\n  \"\"\"\n  totalRepositoriesWithContributedIssues(\n    \"\"\"\n    Should the user's first issue ever be excluded from this count.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Should the user's most commented issue be excluded from this count.\n    \"\"\"\n    excludePopular: Boolean = false\n  ): Int!\n\n  \"\"\"\n  How many different repositories the user left pull request reviews in.\n  \"\"\"\n  totalRepositoriesWithContributedPullRequestReviews: Int!\n\n  \"\"\"\n  How many different repositories the user opened pull requests in.\n  \"\"\"\n  totalRepositoriesWithContributedPullRequests(\n    \"\"\"\n    Should the user's first pull request ever be excluded from this count.\n    \"\"\"\n    excludeFirst: Boolean = false\n\n    \"\"\"\n    Should the user's most commented pull request be excluded from this count.\n    \"\"\"\n    excludePopular: Boolean = false\n  ): Int!\n\n  \"\"\"\n  How many repositories the user created.\n  \"\"\"\n  totalRepositoryContributions(\n    \"\"\"\n    Should the user's first repository ever be excluded from this count.\n    \"\"\"\n    excludeFirst: Boolean = false\n  ): Int!\n\n  \"\"\"\n  The user who made the contributions in this collection.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nAutogenerated input type of ConvertProjectCardNoteToIssue\n\"\"\"\ninput ConvertProjectCardNoteToIssueInput {\n  \"\"\"\n  The body of the newly created issue.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ProjectCard ID to convert.\n  \"\"\"\n  projectCardId: ID!\n\n  \"\"\"\n  The ID of the repository to create the issue in.\n  \"\"\"\n  repositoryId: ID!\n\n  \"\"\"\n  The title of the newly created issue. Defaults to the card's note text.\n  \"\"\"\n  title: String\n}\n\n\"\"\"\nAutogenerated return type of ConvertProjectCardNoteToIssue\n\"\"\"\ntype ConvertProjectCardNoteToIssuePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The updated ProjectCard.\n  \"\"\"\n  projectCard: ProjectCard\n}\n\n\"\"\"\nRepresents a 'converted_note_to_issue' event on a given issue or pull request.\n\"\"\"\ntype ConvertedNoteToIssueEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n}\n\n\"\"\"\nAutogenerated input type of CreateBranchProtectionRule\n\"\"\"\ninput CreateBranchProtectionRuleInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  Will new commits pushed to matching branches dismiss pull request review approvals.\n  \"\"\"\n  dismissesStaleReviews: Boolean\n\n  \"\"\"\n  Can admins overwrite branch protection.\n  \"\"\"\n  isAdminEnforced: Boolean\n\n  \"\"\"\n  The glob-like pattern used to determine matching branches.\n  \"\"\"\n  pattern: String!\n\n  \"\"\"\n  A list of User or Team IDs allowed to push to matching branches.\n  \"\"\"\n  pushActorIds: [ID!]\n\n  \"\"\"\n  The global relay id of the repository in which a new branch protection rule should be created in.\n  \"\"\"\n  repositoryId: ID!\n\n  \"\"\"\n  Number of approving reviews required to update matching branches.\n  \"\"\"\n  requiredApprovingReviewCount: Int\n\n  \"\"\"\n  List of required status check contexts that must pass for commits to be accepted to matching branches.\n  \"\"\"\n  requiredStatusCheckContexts: [String!]\n\n  \"\"\"\n  Are approving reviews required to update matching branches.\n  \"\"\"\n  requiresApprovingReviews: Boolean\n\n  \"\"\"\n  Are reviews from code owners required to update matching branches.\n  \"\"\"\n  requiresCodeOwnerReviews: Boolean\n\n  \"\"\"\n  Are commits required to be signed.\n  \"\"\"\n  requiresCommitSignatures: Boolean\n\n  \"\"\"\n  Are status checks required to update matching branches.\n  \"\"\"\n  requiresStatusChecks: Boolean\n\n  \"\"\"\n  Are branches required to be up to date before merging.\n  \"\"\"\n  requiresStrictStatusChecks: Boolean\n\n  \"\"\"\n  Is pushing to matching branches restricted.\n  \"\"\"\n  restrictsPushes: Boolean\n\n  \"\"\"\n  Is dismissal of pull request reviews restricted.\n  \"\"\"\n  restrictsReviewDismissals: Boolean\n\n  \"\"\"\n  A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.\n  \"\"\"\n  reviewDismissalActorIds: [ID!]\n}\n\n\"\"\"\nAutogenerated return type of CreateBranchProtectionRule\n\"\"\"\ntype CreateBranchProtectionRulePayload {\n  \"\"\"\n  The newly created BranchProtectionRule.\n  \"\"\"\n  branchProtectionRule: BranchProtectionRule\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated input type of CreateContentAttachment\n\"\"\"\ninput CreateContentAttachmentInput {\n  \"\"\"\n  The body of the content attachment, which may contain markdown.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The node ID of the content_reference.\n  \"\"\"\n  contentReferenceId: ID!\n\n  \"\"\"\n  The title of the content attachment.\n  \"\"\"\n  title: String!\n}\n\n\"\"\"\nAutogenerated input type of CreateIssue\n\"\"\"\ninput CreateIssueInput {\n  \"\"\"\n  The Node ID for the user assignee for this issue.\n  \"\"\"\n  assigneeIds: [ID!]\n\n  \"\"\"\n  The body for the issue description.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  An array of Node IDs of labels for this issue.\n  \"\"\"\n  labelIds: [ID!]\n\n  \"\"\"\n  The Node ID of the milestone for this issue.\n  \"\"\"\n  milestoneId: ID\n\n  \"\"\"\n  An array of Node IDs for projects associated with this issue.\n  \"\"\"\n  projectIds: [ID!]\n\n  \"\"\"\n  The Node ID of the repository.\n  \"\"\"\n  repositoryId: ID!\n\n  \"\"\"\n  The title for the issue.\n  \"\"\"\n  title: String!\n}\n\n\"\"\"\nAutogenerated return type of CreateIssue\n\"\"\"\ntype CreateIssuePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The new issue.\n  \"\"\"\n  issue: Issue\n}\n\n\"\"\"\nAutogenerated input type of CreateProject\n\"\"\"\ninput CreateProjectInput {\n  \"\"\"\n  The description of project.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of project.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The owner ID to create the project under.\n  \"\"\"\n  ownerId: ID!\n}\n\n\"\"\"\nAutogenerated return type of CreateProject\n\"\"\"\ntype CreateProjectPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The new project.\n  \"\"\"\n  project: Project\n}\n\n\"\"\"\nAutogenerated input type of CreatePullRequest\n\"\"\"\ninput CreatePullRequestInput {\n  \"\"\"\n  The name of the branch you want your changes pulled into. This should be an existing branch\n  on the current repository. You cannot update the base branch on a pull request to point\n  to another repository.\n  \"\"\"\n  baseRefName: String!\n\n  \"\"\"\n  The contents of the pull request.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of the branch where your changes are implemented. For cross-repository pull requests\n  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.\n  \"\"\"\n  headRefName: String!\n\n  \"\"\"\n  Indicates whether maintainers can modify the pull request.\n  \"\"\"\n  maintainerCanModify: Boolean = true\n\n  \"\"\"\n  The Node ID of the repository.\n  \"\"\"\n  repositoryId: ID!\n\n  \"\"\"\n  The title of the pull request.\n  \"\"\"\n  title: String!\n}\n\n\"\"\"\nAutogenerated return type of CreatePullRequest\n\"\"\"\ntype CreatePullRequestPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The new pull request.\n  \"\"\"\n  pullRequest: PullRequest\n}\n\n\"\"\"\nRepresents the contribution a user made by committing to a repository.\n\"\"\"\ntype CreatedCommitContribution implements Contribution {\n  \"\"\"\n  How many commits were made on this day to this repository by the user.\n  \"\"\"\n  commitCount: Int!\n\n  \"\"\"\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  \"\"\"\n  isRestricted: Boolean!\n\n  \"\"\"\n  When this contribution was made.\n  \"\"\"\n  occurredAt: DateTime!\n\n  \"\"\"\n  The repository the user made a commit in.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this contribution.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this contribution.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  The user who made this contribution.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nThe connection type for CreatedCommitContribution.\n\"\"\"\ntype CreatedCommitContributionConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [CreatedCommitContributionEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [CreatedCommitContribution]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of commits across days and repositories in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype CreatedCommitContributionEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: CreatedCommitContribution\n}\n\n\"\"\"\nRepresents the contribution a user made on GitHub by opening an issue.\n\"\"\"\ntype CreatedIssueContribution implements Contribution {\n  \"\"\"\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  \"\"\"\n  isRestricted: Boolean!\n\n  \"\"\"\n  The issue that was opened.\n  \"\"\"\n  issue: Issue!\n\n  \"\"\"\n  When this contribution was made.\n  \"\"\"\n  occurredAt: DateTime!\n\n  \"\"\"\n  The HTTP path for this contribution.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this contribution.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  The user who made this contribution.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nThe connection type for CreatedIssueContribution.\n\"\"\"\ntype CreatedIssueContributionConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [CreatedIssueContributionEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [CreatedIssueContribution]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype CreatedIssueContributionEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: CreatedIssueContribution\n}\n\n\"\"\"\nRepresents either a issue the viewer can access or a restricted contribution.\n\"\"\"\nunion CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution\n\n\"\"\"\nRepresents the contribution a user made on GitHub by opening a pull request.\n\"\"\"\ntype CreatedPullRequestContribution implements Contribution {\n  \"\"\"\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  \"\"\"\n  isRestricted: Boolean!\n\n  \"\"\"\n  When this contribution was made.\n  \"\"\"\n  occurredAt: DateTime!\n\n  \"\"\"\n  The pull request that was opened.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  The HTTP path for this contribution.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this contribution.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  The user who made this contribution.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nThe connection type for CreatedPullRequestContribution.\n\"\"\"\ntype CreatedPullRequestContributionConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [CreatedPullRequestContributionEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [CreatedPullRequestContribution]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype CreatedPullRequestContributionEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: CreatedPullRequestContribution\n}\n\n\"\"\"\nRepresents either a pull request the viewer can access or a restricted contribution.\n\"\"\"\nunion CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution\n\n\"\"\"\nRepresents the contribution a user made by leaving a review on a pull request.\n\"\"\"\ntype CreatedPullRequestReviewContribution implements Contribution {\n  \"\"\"\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  \"\"\"\n  isRestricted: Boolean!\n\n  \"\"\"\n  When this contribution was made.\n  \"\"\"\n  occurredAt: DateTime!\n\n  \"\"\"\n  The pull request the user reviewed.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  The review the user left on the pull request.\n  \"\"\"\n  pullRequestReview: PullRequestReview!\n\n  \"\"\"\n  The repository containing the pull request that the user reviewed.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this contribution.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this contribution.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  The user who made this contribution.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nThe connection type for CreatedPullRequestReviewContribution.\n\"\"\"\ntype CreatedPullRequestReviewContributionConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [CreatedPullRequestReviewContributionEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [CreatedPullRequestReviewContribution]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype CreatedPullRequestReviewContributionEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: CreatedPullRequestReviewContribution\n}\n\n\"\"\"\nRepresents the contribution a user made on GitHub by creating a repository.\n\"\"\"\ntype CreatedRepositoryContribution implements Contribution {\n  \"\"\"\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  \"\"\"\n  isRestricted: Boolean!\n\n  \"\"\"\n  When this contribution was made.\n  \"\"\"\n  occurredAt: DateTime!\n\n  \"\"\"\n  The repository that was created.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this contribution.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this contribution.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  The user who made this contribution.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nThe connection type for CreatedRepositoryContribution.\n\"\"\"\ntype CreatedRepositoryContributionConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [CreatedRepositoryContributionEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [CreatedRepositoryContribution]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype CreatedRepositoryContributionEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: CreatedRepositoryContribution\n}\n\n\"\"\"\nRepresents either a repository the viewer can access or a restricted contribution.\n\"\"\"\nunion CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution\n\n\"\"\"\nRepresents a mention made by one issue or pull request to another.\n\"\"\"\ntype CrossReferencedEvent implements Node & UniformResourceLocatable {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Reference originated in a different repository.\n  \"\"\"\n  isCrossRepository: Boolean!\n\n  \"\"\"\n  Identifies when the reference was made.\n  \"\"\"\n  referencedAt: DateTime!\n\n  \"\"\"\n  The HTTP path for this pull request.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Issue or pull request that made the reference.\n  \"\"\"\n  source: ReferencedSubject!\n\n  \"\"\"\n  Issue or pull request to which the reference was made.\n  \"\"\"\n  target: ReferencedSubject!\n\n  \"\"\"\n  The HTTP URL for this pull request.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  Checks if the target will be closed when the source is merged.\n  \"\"\"\n  willCloseTarget: Boolean!\n}\n\n\"\"\"\nAn ISO-8601 encoded date string.\n\"\"\"\nscalar Date\n\n\"\"\"\nAn ISO-8601 encoded UTC date string.\n\"\"\"\nscalar DateTime\n\n\"\"\"\nAutogenerated input type of DeclineTopicSuggestion\n\"\"\"\ninput DeclineTopicSuggestionInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of the suggested topic.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The reason why the suggested topic is declined.\n  \"\"\"\n  reason: TopicSuggestionDeclineReason!\n\n  \"\"\"\n  The Node ID of the repository.\n  \"\"\"\n  repositoryId: ID!\n}\n\n\"\"\"\nAutogenerated return type of DeclineTopicSuggestion\n\"\"\"\ntype DeclineTopicSuggestionPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The declined topic.\n  \"\"\"\n  topic: Topic\n}\n\n\"\"\"\nThe possible default permissions for repositories.\n\"\"\"\nenum DefaultRepositoryPermissionField {\n  \"\"\"\n  Can read, write, and administrate repos by default\n  \"\"\"\n  ADMIN\n\n  \"\"\"\n  No access\n  \"\"\"\n  NONE\n\n  \"\"\"\n  Can read repos by default\n  \"\"\"\n  READ\n\n  \"\"\"\n  Can read and write repos by default\n  \"\"\"\n  WRITE\n}\n\n\"\"\"\nEntities that can be deleted.\n\"\"\"\ninterface Deletable {\n  \"\"\"\n  Check if the current viewer can delete this object.\n  \"\"\"\n  viewerCanDelete: Boolean!\n}\n\n\"\"\"\nAutogenerated input type of DeleteBranchProtectionRule\n\"\"\"\ninput DeleteBranchProtectionRuleInput {\n  \"\"\"\n  The global relay id of the branch protection rule to be deleted.\n  \"\"\"\n  branchProtectionRuleId: ID!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated return type of DeleteBranchProtectionRule\n\"\"\"\ntype DeleteBranchProtectionRulePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated input type of DeleteIssueComment\n\"\"\"\ninput DeleteIssueCommentInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the comment to delete.\n  \"\"\"\n  id: ID!\n}\n\n\"\"\"\nAutogenerated return type of DeleteIssueComment\n\"\"\"\ntype DeleteIssueCommentPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated input type of DeleteIssue\n\"\"\"\ninput DeleteIssueInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the issue to delete.\n  \"\"\"\n  issueId: ID!\n}\n\n\"\"\"\nAutogenerated return type of DeleteIssue\n\"\"\"\ntype DeleteIssuePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The repository the issue belonged to\n  \"\"\"\n  repository: Repository\n}\n\n\"\"\"\nAutogenerated input type of DeleteProjectCard\n\"\"\"\ninput DeleteProjectCardInput {\n  \"\"\"\n  The id of the card to delete.\n  \"\"\"\n  cardId: ID!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated return type of DeleteProjectCard\n\"\"\"\ntype DeleteProjectCardPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The column the deleted card was in.\n  \"\"\"\n  column: ProjectColumn\n\n  \"\"\"\n  The deleted card ID.\n  \"\"\"\n  deletedCardId: ID\n}\n\n\"\"\"\nAutogenerated input type of DeleteProjectColumn\n\"\"\"\ninput DeleteProjectColumnInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The id of the column to delete.\n  \"\"\"\n  columnId: ID!\n}\n\n\"\"\"\nAutogenerated return type of DeleteProjectColumn\n\"\"\"\ntype DeleteProjectColumnPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The deleted column ID.\n  \"\"\"\n  deletedColumnId: ID\n\n  \"\"\"\n  The project the deleted column was in.\n  \"\"\"\n  project: Project\n}\n\n\"\"\"\nAutogenerated input type of DeleteProject\n\"\"\"\ninput DeleteProjectInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Project ID to update.\n  \"\"\"\n  projectId: ID!\n}\n\n\"\"\"\nAutogenerated return type of DeleteProject\n\"\"\"\ntype DeleteProjectPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The repository or organization the project was removed from.\n  \"\"\"\n  owner: ProjectOwner\n}\n\n\"\"\"\nAutogenerated input type of DeletePullRequestReviewComment\n\"\"\"\ninput DeletePullRequestReviewCommentInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the comment to delete.\n  \"\"\"\n  id: ID!\n}\n\n\"\"\"\nAutogenerated return type of DeletePullRequestReviewComment\n\"\"\"\ntype DeletePullRequestReviewCommentPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The pull request review the deleted comment belonged to.\n  \"\"\"\n  pullRequestReview: PullRequestReview\n}\n\n\"\"\"\nAutogenerated input type of DeletePullRequestReview\n\"\"\"\ninput DeletePullRequestReviewInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Node ID of the pull request review to delete.\n  \"\"\"\n  pullRequestReviewId: ID!\n}\n\n\"\"\"\nAutogenerated return type of DeletePullRequestReview\n\"\"\"\ntype DeletePullRequestReviewPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The deleted pull request review.\n  \"\"\"\n  pullRequestReview: PullRequestReview\n}\n\n\"\"\"\nRepresents a 'demilestoned' event on a given issue or pull request.\n\"\"\"\ntype DemilestonedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the milestone title associated with the 'demilestoned' event.\n  \"\"\"\n  milestoneTitle: String!\n\n  \"\"\"\n  Object referenced by event.\n  \"\"\"\n  subject: MilestoneItem!\n}\n\n\"\"\"\nA repository deploy key.\n\"\"\"\ntype DeployKey implements Node {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  The deploy key.\n  \"\"\"\n  key: String!\n\n  \"\"\"\n  Whether or not the deploy key is read only.\n  \"\"\"\n  readOnly: Boolean!\n\n  \"\"\"\n  The deploy key title.\n  \"\"\"\n  title: String!\n\n  \"\"\"\n  Whether or not the deploy key has been verified.\n  \"\"\"\n  verified: Boolean!\n}\n\n\"\"\"\nThe connection type for DeployKey.\n\"\"\"\ntype DeployKeyConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [DeployKeyEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [DeployKey]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype DeployKeyEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: DeployKey\n}\n\n\"\"\"\nRepresents a 'deployed' event on a given pull request.\n\"\"\"\ntype DeployedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The deployment associated with the 'deployed' event.\n  \"\"\"\n  deployment: Deployment!\n  id: ID!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  The ref associated with the 'deployed' event.\n  \"\"\"\n  ref: Ref\n}\n\n\"\"\"\nRepresents triggered deployment instance.\n\"\"\"\ntype Deployment implements Node {\n  \"\"\"\n  Identifies the commit sha of the deployment.\n  \"\"\"\n  commit: Commit\n\n  \"\"\"\n  Identifies the oid of the deployment commit, even if the commit has been deleted.\n  \"\"\"\n  commitOid: String!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the actor who triggered the deployment.\n  \"\"\"\n  creator: Actor\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The deployment description.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  The environment to which this deployment was made.\n  \"\"\"\n  environment: String\n  id: ID!\n\n  \"\"\"\n  The latest status of this deployment.\n  \"\"\"\n  latestStatus: DeploymentStatus\n\n  \"\"\"\n  Extra information that a deployment system might need.\n  \"\"\"\n  payload: String\n\n  \"\"\"\n  Identifies the Ref of the deployment, if the deployment was created by ref.\n  \"\"\"\n  ref: Ref\n\n  \"\"\"\n  Identifies the repository associated with the deployment.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The current state of the deployment.\n  \"\"\"\n  state: DeploymentState\n\n  \"\"\"\n  A list of statuses associated with the deployment.\n  \"\"\"\n  statuses(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): DeploymentStatusConnection\n\n  \"\"\"\n  The deployment task.\n  \"\"\"\n  task: String\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n}\n\n\"\"\"\nThe connection type for Deployment.\n\"\"\"\ntype DeploymentConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [DeploymentEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Deployment]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype DeploymentEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Deployment\n}\n\n\"\"\"\nRepresents a 'deployment_environment_changed' event on a given pull request.\n\"\"\"\ntype DeploymentEnvironmentChangedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The deployment status that updated the deployment environment.\n  \"\"\"\n  deploymentStatus: DeploymentStatus!\n  id: ID!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n}\n\n\"\"\"\nOrdering options for deployment connections\n\"\"\"\ninput DeploymentOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order deployments by.\n  \"\"\"\n  field: DeploymentOrderField!\n}\n\n\"\"\"\nProperties by which deployment connections can be ordered.\n\"\"\"\nenum DeploymentOrderField {\n  \"\"\"\n  Order collection by creation time\n  \"\"\"\n  CREATED_AT\n}\n\n\"\"\"\nThe possible states in which a deployment can be.\n\"\"\"\nenum DeploymentState {\n  \"\"\"\n  The pending deployment was not updated after 30 minutes.\n  \"\"\"\n  ABANDONED\n\n  \"\"\"\n  The deployment is currently active.\n  \"\"\"\n  ACTIVE\n\n  \"\"\"\n  An inactive transient deployment.\n  \"\"\"\n  DESTROYED\n\n  \"\"\"\n  The deployment experienced an error.\n  \"\"\"\n  ERROR\n\n  \"\"\"\n  The deployment has failed.\n  \"\"\"\n  FAILURE\n\n  \"\"\"\n  The deployment is inactive.\n  \"\"\"\n  INACTIVE\n\n  \"\"\"\n  The deployment is in progress.\n  \"\"\"\n  IN_PROGRESS\n\n  \"\"\"\n  The deployment is pending.\n  \"\"\"\n  PENDING\n\n  \"\"\"\n  The deployment has queued\n  \"\"\"\n  QUEUED\n}\n\n\"\"\"\nDescribes the status of a given deployment attempt.\n\"\"\"\ntype DeploymentStatus implements Node {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the actor who triggered the deployment.\n  \"\"\"\n  creator: Actor\n\n  \"\"\"\n  Identifies the deployment associated with status.\n  \"\"\"\n  deployment: Deployment!\n\n  \"\"\"\n  Identifies the description of the deployment.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  Identifies the environment URL of the deployment.\n  \"\"\"\n  environmentUrl: URI\n  id: ID!\n\n  \"\"\"\n  Identifies the log URL of the deployment.\n  \"\"\"\n  logUrl: URI\n\n  \"\"\"\n  Identifies the current state of the deployment.\n  \"\"\"\n  state: DeploymentStatusState!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n}\n\n\"\"\"\nThe connection type for DeploymentStatus.\n\"\"\"\ntype DeploymentStatusConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [DeploymentStatusEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [DeploymentStatus]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype DeploymentStatusEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: DeploymentStatus\n}\n\n\"\"\"\nThe possible states for a deployment status.\n\"\"\"\nenum DeploymentStatusState {\n  \"\"\"\n  The deployment experienced an error.\n  \"\"\"\n  ERROR\n\n  \"\"\"\n  The deployment has failed.\n  \"\"\"\n  FAILURE\n\n  \"\"\"\n  The deployment is inactive.\n  \"\"\"\n  INACTIVE\n\n  \"\"\"\n  The deployment is in progress.\n  \"\"\"\n  IN_PROGRESS\n\n  \"\"\"\n  The deployment is pending.\n  \"\"\"\n  PENDING\n\n  \"\"\"\n  The deployment is queued\n  \"\"\"\n  QUEUED\n\n  \"\"\"\n  The deployment was successful.\n  \"\"\"\n  SUCCESS\n}\n\n\"\"\"\nAutogenerated input type of DismissPullRequestReview\n\"\"\"\ninput DismissPullRequestReviewInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The contents of the pull request review dismissal message.\n  \"\"\"\n  message: String!\n\n  \"\"\"\n  The Node ID of the pull request review to modify.\n  \"\"\"\n  pullRequestReviewId: ID!\n}\n\n\"\"\"\nAutogenerated return type of DismissPullRequestReview\n\"\"\"\ntype DismissPullRequestReviewPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The dismissed pull request review.\n  \"\"\"\n  pullRequestReview: PullRequestReview\n}\n\n\"\"\"\nSpecifies a review comment to be left with a Pull Request Review.\n\"\"\"\ninput DraftPullRequestReviewComment {\n  \"\"\"\n  Body of the comment to leave.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  Path to the file being commented on.\n  \"\"\"\n  path: String!\n\n  \"\"\"\n  Position in the file to leave a comment on.\n  \"\"\"\n  position: Int!\n}\n\n\"\"\"\nAn external identity provisioned by SAML SSO or SCIM.\n\"\"\"\ntype ExternalIdentity implements Node {\n  \"\"\"\n  The GUID for this identity\n  \"\"\"\n  guid: String!\n  id: ID!\n\n  \"\"\"\n  Organization invitation for this SCIM-provisioned external identity\n  \"\"\"\n  organizationInvitation: OrganizationInvitation\n\n  \"\"\"\n  SAML Identity attributes\n  \"\"\"\n  samlIdentity: ExternalIdentitySamlAttributes\n\n  \"\"\"\n  SCIM Identity attributes\n  \"\"\"\n  scimIdentity: ExternalIdentityScimAttributes\n\n  \"\"\"\n  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.\n  \"\"\"\n  user: User\n}\n\n\"\"\"\nThe connection type for ExternalIdentity.\n\"\"\"\ntype ExternalIdentityConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ExternalIdentityEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [ExternalIdentity]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ExternalIdentityEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: ExternalIdentity\n}\n\n\"\"\"\nSAML attributes for the External Identity\n\"\"\"\ntype ExternalIdentitySamlAttributes {\n  \"\"\"\n  The NameID of the SAML identity\n  \"\"\"\n  nameId: String\n}\n\n\"\"\"\nSCIM attributes for the External Identity\n\"\"\"\ntype ExternalIdentityScimAttributes {\n  \"\"\"\n  The userName of the SCIM identity\n  \"\"\"\n  username: String\n}\n\n\"\"\"\nThe connection type for User.\n\"\"\"\ntype FollowerConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [UserEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [User]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nThe connection type for User.\n\"\"\"\ntype FollowingConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [UserEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [User]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nA Gist.\n\"\"\"\ntype Gist implements Node & Starrable {\n  \"\"\"\n  A list of comments associated with the gist\n  \"\"\"\n  comments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): GistCommentConnection!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The gist description.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  The files in this gist.\n  \"\"\"\n  files(\n    \"\"\"\n    The maximum number of files to return.\n    \"\"\"\n    limit: Int = 10\n  ): [GistFile]\n  id: ID!\n\n  \"\"\"\n  Identifies if the gist is a fork.\n  \"\"\"\n  isFork: Boolean!\n\n  \"\"\"\n  Whether the gist is public or not.\n  \"\"\"\n  isPublic: Boolean!\n\n  \"\"\"\n  The gist name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The gist owner.\n  \"\"\"\n  owner: RepositoryOwner\n\n  \"\"\"\n  Identifies when the gist was last pushed to.\n  \"\"\"\n  pushedAt: DateTime\n\n  \"\"\"\n  A list of users who have starred this starrable.\n  \"\"\"\n  stargazers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for connection\n    \"\"\"\n    orderBy: StarOrder\n  ): StargazerConnection!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  \"\"\"\n  viewerHasStarred: Boolean!\n}\n\n\"\"\"\nRepresents a comment on an Gist.\n\"\"\"\ntype GistComment implements Comment & Deletable & Node & Updatable & UpdatableComment {\n  \"\"\"\n  The actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the gist.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\n  Identifies the comment body.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  The comment body rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  The body rendered to text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The actor who edited the comment.\n  \"\"\"\n  editor: Actor\n\n  \"\"\"\n  The associated gist.\n  \"\"\"\n  gist: Gist!\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  Returns whether or not a comment has been minimized.\n  \"\"\"\n  isMinimized: Boolean!\n\n  \"\"\"\n  The moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  Returns why the comment was minimized.\n  \"\"\"\n  minimizedReason: String\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Check if the current viewer can delete this object.\n  \"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"\n  Check if the current viewer can minimize this object.\n  \"\"\"\n  viewerCanMinimize: Boolean!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"\nThe connection type for GistComment.\n\"\"\"\ntype GistCommentConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [GistCommentEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [GistComment]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype GistCommentEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: GistComment\n}\n\n\"\"\"\nThe connection type for Gist.\n\"\"\"\ntype GistConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [GistEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Gist]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype GistEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Gist\n}\n\n\"\"\"\nA file in a gist.\n\"\"\"\ntype GistFile {\n  \"\"\"\n  The file name encoded to remove characters that are invalid in URL paths.\n  \"\"\"\n  encodedName: String\n\n  \"\"\"\n  The gist file encoding.\n  \"\"\"\n  encoding: String\n\n  \"\"\"\n  The file extension from the file name.\n  \"\"\"\n  extension: String\n\n  \"\"\"\n  Indicates if this file is an image.\n  \"\"\"\n  isImage: Boolean!\n\n  \"\"\"\n  Whether the file's contents were truncated.\n  \"\"\"\n  isTruncated: Boolean!\n\n  \"\"\"\n  The programming language this file is written in.\n  \"\"\"\n  language: Language\n\n  \"\"\"\n  The gist file name.\n  \"\"\"\n  name: String\n\n  \"\"\"\n  The gist file size in bytes.\n  \"\"\"\n  size: Int\n\n  \"\"\"\n  UTF8 text data or null if the file is binary\n  \"\"\"\n  text(\n    \"\"\"\n    Optionally truncate the returned file to this length.\n    \"\"\"\n    truncate: Int\n  ): String\n}\n\n\"\"\"\nOrdering options for gist connections\n\"\"\"\ninput GistOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order repositories by.\n  \"\"\"\n  field: GistOrderField!\n}\n\n\"\"\"\nProperties by which gist connections can be ordered.\n\"\"\"\nenum GistOrderField {\n  \"\"\"\n  Order gists by creation time\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order gists by push time\n  \"\"\"\n  PUSHED_AT\n\n  \"\"\"\n  Order gists by update time\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nThe privacy of a Gist\n\"\"\"\nenum GistPrivacy {\n  \"\"\"\n  Gists that are public and secret\n  \"\"\"\n  ALL\n\n  \"\"\"\n  Public\n  \"\"\"\n  PUBLIC\n\n  \"\"\"\n  Secret\n  \"\"\"\n  SECRET\n}\n\n\"\"\"\nRepresents an actor in a Git commit (ie. an author or committer).\n\"\"\"\ntype GitActor {\n  \"\"\"\n  A URL pointing to the author's public avatar.\n  \"\"\"\n  avatarUrl(\n    \"\"\"\n    The size of the resulting square image.\n    \"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"\n  The timestamp of the Git action (authoring or committing).\n  \"\"\"\n  date: GitTimestamp\n\n  \"\"\"\n  The email in the Git commit.\n  \"\"\"\n  email: String\n\n  \"\"\"\n  The name in the Git commit.\n  \"\"\"\n  name: String\n\n  \"\"\"\n  The GitHub user corresponding to the email field. Null if no such user exists.\n  \"\"\"\n  user: User\n}\n\n\"\"\"\nRepresents information about the GitHub instance.\n\"\"\"\ntype GitHubMetadata {\n  \"\"\"\n  Returns a String that's a SHA of `github-services`\n  \"\"\"\n  gitHubServicesSha: GitObjectID!\n\n  \"\"\"\n  IP addresses that users connect to for git operations\n  \"\"\"\n  gitIpAddresses: [String!]\n\n  \"\"\"\n  IP addresses that service hooks are sent from\n  \"\"\"\n  hookIpAddresses: [String!]\n\n  \"\"\"\n  IP addresses that the importer connects from\n  \"\"\"\n  importerIpAddresses: [String!]\n\n  \"\"\"\n  Whether or not users are verified\n  \"\"\"\n  isPasswordAuthenticationVerifiable: Boolean!\n\n  \"\"\"\n  IP addresses for GitHub Pages' A records\n  \"\"\"\n  pagesIpAddresses: [String!]\n}\n\n\"\"\"\nRepresents a Git object.\n\"\"\"\ninterface GitObject {\n  \"\"\"\n  An abbreviated version of the Git object ID\n  \"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"\n  The HTTP path for this Git object\n  \"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this Git object\n  \"\"\"\n  commitUrl: URI!\n  id: ID!\n\n  \"\"\"\n  The Git object ID\n  \"\"\"\n  oid: GitObjectID!\n\n  \"\"\"\n  The Repository the Git object belongs to\n  \"\"\"\n  repository: Repository!\n}\n\n\"\"\"\nA Git object ID.\n\"\"\"\nscalar GitObjectID\n\n\"\"\"\nGit SSH string\n\"\"\"\nscalar GitSSHRemote\n\n\"\"\"\nInformation about a signature (GPG or S/MIME) on a Commit or Tag.\n\"\"\"\ninterface GitSignature {\n  \"\"\"\n  Email used to sign this object.\n  \"\"\"\n  email: String!\n\n  \"\"\"\n  True if the signature is valid and verified by GitHub.\n  \"\"\"\n  isValid: Boolean!\n\n  \"\"\"\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  \"\"\"\n  payload: String!\n\n  \"\"\"\n  ASCII-armored signature header from object.\n  \"\"\"\n  signature: String!\n\n  \"\"\"\n  GitHub user corresponding to the email signing this commit.\n  \"\"\"\n  signer: User\n\n  \"\"\"\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  \"\"\"\n  state: GitSignatureState!\n\n  \"\"\"\n  True if the signature was made with GitHub's signing key.\n  \"\"\"\n  wasSignedByGitHub: Boolean!\n}\n\n\"\"\"\nThe state of a Git signature.\n\"\"\"\nenum GitSignatureState {\n  \"\"\"\n  The signing certificate or its chain could not be verified\n  \"\"\"\n  BAD_CERT\n\n  \"\"\"\n  Invalid email used for signing\n  \"\"\"\n  BAD_EMAIL\n\n  \"\"\"\n  Signing key expired\n  \"\"\"\n  EXPIRED_KEY\n\n  \"\"\"\n  Internal error - the GPG verification service misbehaved\n  \"\"\"\n  GPGVERIFY_ERROR\n\n  \"\"\"\n  Internal error - the GPG verification service is unavailable at the moment\n  \"\"\"\n  GPGVERIFY_UNAVAILABLE\n\n  \"\"\"\n  Invalid signature\n  \"\"\"\n  INVALID\n\n  \"\"\"\n  Malformed signature\n  \"\"\"\n  MALFORMED_SIG\n\n  \"\"\"\n  The usage flags for the key that signed this don't allow signing\n  \"\"\"\n  NOT_SIGNING_KEY\n\n  \"\"\"\n  Email used for signing not known to GitHub\n  \"\"\"\n  NO_USER\n\n  \"\"\"\n  Valid siganture, though certificate revocation check failed\n  \"\"\"\n  OCSP_ERROR\n\n  \"\"\"\n  Valid signature, pending certificate revocation checking\n  \"\"\"\n  OCSP_PENDING\n\n  \"\"\"\n  One or more certificates in chain has been revoked\n  \"\"\"\n  OCSP_REVOKED\n\n  \"\"\"\n  Key used for signing not known to GitHub\n  \"\"\"\n  UNKNOWN_KEY\n\n  \"\"\"\n  Unknown signature type\n  \"\"\"\n  UNKNOWN_SIG_TYPE\n\n  \"\"\"\n  Unsigned\n  \"\"\"\n  UNSIGNED\n\n  \"\"\"\n  Email used for signing unverified on GitHub\n  \"\"\"\n  UNVERIFIED_EMAIL\n\n  \"\"\"\n  Valid signature and verified by GitHub\n  \"\"\"\n  VALID\n}\n\n\"\"\"\nAn ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.\n\"\"\"\nscalar GitTimestamp\n\n\"\"\"\nRepresents a GPG signature on a Commit or Tag.\n\"\"\"\ntype GpgSignature implements GitSignature {\n  \"\"\"\n  Email used to sign this object.\n  \"\"\"\n  email: String!\n\n  \"\"\"\n  True if the signature is valid and verified by GitHub.\n  \"\"\"\n  isValid: Boolean!\n\n  \"\"\"\n  Hex-encoded ID of the key that signed this object.\n  \"\"\"\n  keyId: String\n\n  \"\"\"\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  \"\"\"\n  payload: String!\n\n  \"\"\"\n  ASCII-armored signature header from object.\n  \"\"\"\n  signature: String!\n\n  \"\"\"\n  GitHub user corresponding to the email signing this commit.\n  \"\"\"\n  signer: User\n\n  \"\"\"\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  \"\"\"\n  state: GitSignatureState!\n\n  \"\"\"\n  True if the signature was made with GitHub's signing key.\n  \"\"\"\n  wasSignedByGitHub: Boolean!\n}\n\n\"\"\"\nA string containing HTML code.\n\"\"\"\nscalar HTML\n\n\"\"\"\nRepresents a 'head_ref_deleted' event on a given pull request.\n\"\"\"\ntype HeadRefDeletedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the Ref associated with the `head_ref_deleted` event.\n  \"\"\"\n  headRef: Ref\n\n  \"\"\"\n  Identifies the name of the Ref associated with the `head_ref_deleted` event.\n  \"\"\"\n  headRefName: String!\n  id: ID!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n}\n\n\"\"\"\nRepresents a 'head_ref_force_pushed' event on a given pull request.\n\"\"\"\ntype HeadRefForcePushedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the after commit SHA for the 'head_ref_force_pushed' event.\n  \"\"\"\n  afterCommit: Commit\n\n  \"\"\"\n  Identifies the before commit SHA for the 'head_ref_force_pushed' event.\n  \"\"\"\n  beforeCommit: Commit\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.\n  \"\"\"\n  ref: Ref\n}\n\n\"\"\"\nRepresents a 'head_ref_restored' event on a given pull request.\n\"\"\"\ntype HeadRefRestoredEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n}\n\n\"\"\"\nThe possible states in which authentication can be configured with an identity provider.\n\"\"\"\nenum IdentityProviderConfigurationState {\n  \"\"\"\n  Authentication with an identity provider is configured but not enforced.\n  \"\"\"\n  CONFIGURED\n\n  \"\"\"\n  Authentication with an identity provider is configured and enforced.\n  \"\"\"\n  ENFORCED\n\n  \"\"\"\n  Authentication with an identity provider is not configured.\n  \"\"\"\n  UNCONFIGURED\n}\n\n\"\"\"\nAutogenerated input type of ImportProject\n\"\"\"\ninput ImportProjectInput {\n  \"\"\"\n  The description of Project.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  A list of columns containing issues and pull requests.\n  \"\"\"\n  columnImports: [ProjectColumnImport!]!\n\n  \"\"\"\n  The name of Project.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The name of the Organization or User to create the Project under.\n  \"\"\"\n  ownerName: String!\n\n  \"\"\"\n  Whether the Project is public or not.\n  \"\"\"\n  public: Boolean = false\n}\n\n\"\"\"\nAn Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.\n\"\"\"\ntype Issue implements Assignable & Closable & Comment & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {\n  \"\"\"\n  Reason that the conversation was locked.\n  \"\"\"\n  activeLockReason: LockReason\n\n  \"\"\"\n  A list of Users assigned to this object.\n  \"\"\"\n  assignees(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n\n  \"\"\"\n  The actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the subject of the comment.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\n  Identifies the body of the issue.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  Identifies the body of the issue rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  Identifies the body of the issue rendered to text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  `true` if the object is closed (definition of closed may depend on type)\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"\n  Identifies the date and time when the object was closed.\n  \"\"\"\n  closedAt: DateTime\n\n  \"\"\"\n  A list of comments associated with the Issue.\n  \"\"\"\n  comments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): IssueCommentConnection!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The actor who edited the comment.\n  \"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  A list of labels associated with the object.\n  \"\"\"\n  labels(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): LabelConnection\n\n  \"\"\"\n  The moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  `true` if the object is locked\n  \"\"\"\n  locked: Boolean!\n\n  \"\"\"\n  Identifies the milestone associated with the issue.\n  \"\"\"\n  milestone: Milestone\n\n  \"\"\"\n  Identifies the issue number.\n  \"\"\"\n  number: Int!\n\n  \"\"\"\n  A list of Users that are participating in the Issue conversation.\n  \"\"\"\n  participants(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n\n  \"\"\"\n  List of project cards associated with this issue.\n  \"\"\"\n  projectCards(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    A list of archived states to filter the cards by\n    \"\"\"\n    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ProjectCardConnection!\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  A list of reactions grouped by content left on the subject.\n  \"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"\n  A list of Reactions left on the Issue.\n  \"\"\"\n  reactions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Allows filtering Reactions by emoji.\n    \"\"\"\n    content: ReactionContent\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows specifying the order in which reactions are returned.\n    \"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this issue\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the state of the issue.\n  \"\"\"\n  state: IssueState!\n\n  \"\"\"\n  A list of events, comments, commits, etc. associated with the issue.\n  \"\"\"\n  timeline(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows filtering timeline events by a `since` timestamp.\n    \"\"\"\n    since: DateTime\n  ): IssueTimelineConnection!\n\n  \"\"\"\n  A list of events, comments, commits, etc. associated with the issue.\n  \"\"\"\n  timelineItems(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Filter timeline items by type.\n    \"\"\"\n    itemTypes: [IssueTimelineItemsItemType!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter timeline items by a `since` timestamp.\n    \"\"\"\n    since: DateTime\n\n    \"\"\"\n    Skips the first _n_ elements in the list.\n    \"\"\"\n    skip: Int\n  ): IssueTimelineItemsConnection!\n\n  \"\"\"\n  Identifies the issue title.\n  \"\"\"\n  title: String!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this issue\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Can user react to this subject\n  \"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState\n}\n\n\"\"\"\nRepresents a comment on an Issue.\n\"\"\"\ntype IssueComment implements Comment & Deletable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {\n  \"\"\"\n  The actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the subject of the comment.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\n  The body as Markdown.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  The body rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  The body rendered to text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The actor who edited the comment.\n  \"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  Returns whether or not a comment has been minimized.\n  \"\"\"\n  isMinimized: Boolean!\n\n  \"\"\"\n  Identifies the issue associated with the comment.\n  \"\"\"\n  issue: Issue!\n\n  \"\"\"\n  The moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  Returns why the comment was minimized.\n  \"\"\"\n  minimizedReason: String\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  Returns the pull request associated with the comment, if this comment was made on a\n  pull request.\n  \"\"\"\n  pullRequest: PullRequest\n\n  \"\"\"\n  A list of reactions grouped by content left on the subject.\n  \"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"\n  A list of Reactions left on the Issue.\n  \"\"\"\n  reactions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Allows filtering Reactions by emoji.\n    \"\"\"\n    content: ReactionContent\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows specifying the order in which reactions are returned.\n    \"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this issue comment\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this issue comment\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Check if the current viewer can delete this object.\n  \"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"\n  Check if the current viewer can minimize this object.\n  \"\"\"\n  viewerCanMinimize: Boolean!\n\n  \"\"\"\n  Can user react to this subject\n  \"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"\nThe connection type for IssueComment.\n\"\"\"\ntype IssueCommentConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [IssueCommentEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [IssueComment]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype IssueCommentEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: IssueComment\n}\n\n\"\"\"\nThe connection type for Issue.\n\"\"\"\ntype IssueConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [IssueEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Issue]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nThis aggregates issues opened by a user within one repository.\n\"\"\"\ntype IssueContributionsByRepository {\n  \"\"\"\n  The issue contributions.\n  \"\"\"\n  contributions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for contributions returned from the connection.\n    \"\"\"\n    orderBy: ContributionOrder = {field: OCCURRED_AT, direction: DESC}\n  ): CreatedIssueContributionConnection!\n\n  \"\"\"\n  The repository in which the issues were opened.\n  \"\"\"\n  repository: Repository!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype IssueEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Issue\n}\n\n\"\"\"\nWays in which to filter lists of issues.\n\"\"\"\ninput IssueFilters {\n  \"\"\"\n  List issues assigned to given name. Pass in `null` for issues with no assigned\n  user, and `*` for issues assigned to any user.\n  \"\"\"\n  assignee: String\n\n  \"\"\"\n  List issues created by given name.\n  \"\"\"\n  createdBy: String\n\n  \"\"\"\n  List issues where the list of label names exist on the issue.\n  \"\"\"\n  labels: [String!]\n\n  \"\"\"\n  List issues where the given name is mentioned in the issue.\n  \"\"\"\n  mentioned: String\n\n  \"\"\"\n  List issues by given milestone argument. If an string representation of an\n  integer is passed, it should refer to a milestone by its number field. Pass in\n  `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.\n  \"\"\"\n  milestone: String\n\n  \"\"\"\n  List issues that have been updated at or after the given date.\n  \"\"\"\n  since: DateTime\n\n  \"\"\"\n  List issues filtered by the list of states given.\n  \"\"\"\n  states: [IssueState!]\n\n  \"\"\"\n  List issues subscribed to by viewer.\n  \"\"\"\n  viewerSubscribed: Boolean = false\n}\n\n\"\"\"\nUsed for return value of Repository.issueOrPullRequest.\n\"\"\"\nunion IssueOrPullRequest = Issue | PullRequest\n\n\"\"\"\nWays in which lists of issues can be ordered upon return.\n\"\"\"\ninput IssueOrder {\n  \"\"\"\n  The direction in which to order issues by the specified field.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field in which to order issues by.\n  \"\"\"\n  field: IssueOrderField!\n}\n\n\"\"\"\nProperties by which issue connections can be ordered.\n\"\"\"\nenum IssueOrderField {\n  \"\"\"\n  Order issues by comment count\n  \"\"\"\n  COMMENTS\n\n  \"\"\"\n  Order issues by creation time\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order issues by update time\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nThe possible PubSub channels for an issue.\n\"\"\"\nenum IssuePubSubTopic {\n  \"\"\"\n  The channel ID for marking an issue as read.\n  \"\"\"\n  MARKASREAD\n\n  \"\"\"\n  The channel ID for observing issue state updates.\n  \"\"\"\n  STATE\n\n  \"\"\"\n  The channel ID for updating items on the issue timeline.\n  \"\"\"\n  TIMELINE\n\n  \"\"\"\n  The channel ID for observing issue updates.\n  \"\"\"\n  UPDATED\n}\n\n\"\"\"\nThe possible states of an issue.\n\"\"\"\nenum IssueState {\n  \"\"\"\n  An issue that has been closed\n  \"\"\"\n  CLOSED\n\n  \"\"\"\n  An issue that is still open\n  \"\"\"\n  OPEN\n}\n\n\"\"\"\nThe connection type for IssueTimelineItem.\n\"\"\"\ntype IssueTimelineConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [IssueTimelineItemEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [IssueTimelineItem]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn item in an issue timeline\n\"\"\"\nunion IssueTimelineItem = AssignedEvent | ClosedEvent | Commit | CrossReferencedEvent | DemilestonedEvent | IssueComment | LabeledEvent | LockedEvent | MilestonedEvent | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype IssueTimelineItemEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: IssueTimelineItem\n}\n\n\"\"\"\nAn item in an issue timeline\n\"\"\"\nunion IssueTimelineItems = AddedToProjectEvent | AssignedEvent | ClosedEvent | CommentDeletedEvent | ConvertedNoteToIssueEvent | CrossReferencedEvent | DemilestonedEvent | IssueComment | LabeledEvent | LockedEvent | MentionedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent\n\n\"\"\"\nThe connection type for IssueTimelineItems.\n\"\"\"\ntype IssueTimelineItemsConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [IssueTimelineItemsEdge]\n\n  \"\"\"\n  Identifies the count of items after applying `before` and `after` filters.\n  \"\"\"\n  filteredCount: Int!\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [IssueTimelineItems]\n\n  \"\"\"\n  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.\n  \"\"\"\n  pageCount: Int!\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n\n  \"\"\"\n  Identifies the date and time when the timeline was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype IssueTimelineItemsEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: IssueTimelineItems\n}\n\n\"\"\"\nThe possible item types found in a timeline.\n\"\"\"\nenum IssueTimelineItemsItemType {\n  \"\"\"\n  Represents a 'added_to_project' event on a given issue or pull request.\n  \"\"\"\n  ADDED_TO_PROJECT_EVENT\n\n  \"\"\"\n  Represents an 'assigned' event on any assignable object.\n  \"\"\"\n  ASSIGNED_EVENT\n\n  \"\"\"\n  Represents a 'closed' event on any `Closable`.\n  \"\"\"\n  CLOSED_EVENT\n\n  \"\"\"\n  Represents a 'comment_deleted' event on a given issue or pull request.\n  \"\"\"\n  COMMENT_DELETED_EVENT\n\n  \"\"\"\n  Represents a 'converted_note_to_issue' event on a given issue or pull request.\n  \"\"\"\n  CONVERTED_NOTE_TO_ISSUE_EVENT\n\n  \"\"\"\n  Represents a mention made by one issue or pull request to another.\n  \"\"\"\n  CROSS_REFERENCED_EVENT\n\n  \"\"\"\n  Represents a 'demilestoned' event on a given issue or pull request.\n  \"\"\"\n  DEMILESTONED_EVENT\n\n  \"\"\"\n  Represents a comment on an Issue.\n  \"\"\"\n  ISSUE_COMMENT\n\n  \"\"\"\n  Represents a 'labeled' event on a given issue or pull request.\n  \"\"\"\n  LABELED_EVENT\n\n  \"\"\"\n  Represents a 'locked' event on a given issue or pull request.\n  \"\"\"\n  LOCKED_EVENT\n\n  \"\"\"\n  Represents a 'mentioned' event on a given issue or pull request.\n  \"\"\"\n  MENTIONED_EVENT\n\n  \"\"\"\n  Represents a 'milestoned' event on a given issue or pull request.\n  \"\"\"\n  MILESTONED_EVENT\n\n  \"\"\"\n  Represents a 'moved_columns_in_project' event on a given issue or pull request.\n  \"\"\"\n  MOVED_COLUMNS_IN_PROJECT_EVENT\n\n  \"\"\"\n  Represents a 'pinned' event on a given issue or pull request.\n  \"\"\"\n  PINNED_EVENT\n\n  \"\"\"\n  Represents a 'referenced' event on a given `ReferencedSubject`.\n  \"\"\"\n  REFERENCED_EVENT\n\n  \"\"\"\n  Represents a 'removed_from_project' event on a given issue or pull request.\n  \"\"\"\n  REMOVED_FROM_PROJECT_EVENT\n\n  \"\"\"\n  Represents a 'renamed' event on a given issue or pull request\n  \"\"\"\n  RENAMED_TITLE_EVENT\n\n  \"\"\"\n  Represents a 'reopened' event on any `Closable`.\n  \"\"\"\n  REOPENED_EVENT\n\n  \"\"\"\n  Represents a 'subscribed' event on a given `Subscribable`.\n  \"\"\"\n  SUBSCRIBED_EVENT\n\n  \"\"\"\n  Represents a 'transferred' event on a given issue or pull request.\n  \"\"\"\n  TRANSFERRED_EVENT\n\n  \"\"\"\n  Represents an 'unassigned' event on any assignable object.\n  \"\"\"\n  UNASSIGNED_EVENT\n\n  \"\"\"\n  Represents an 'unlabeled' event on a given issue or pull request.\n  \"\"\"\n  UNLABELED_EVENT\n\n  \"\"\"\n  Represents an 'unlocked' event on a given issue or pull request.\n  \"\"\"\n  UNLOCKED_EVENT\n\n  \"\"\"\n  Represents an 'unpinned' event on a given issue or pull request.\n  \"\"\"\n  UNPINNED_EVENT\n\n  \"\"\"\n  Represents an 'unsubscribed' event on a given `Subscribable`.\n  \"\"\"\n  UNSUBSCRIBED_EVENT\n\n  \"\"\"\n  Represents a 'user_blocked' event on a given user.\n  \"\"\"\n  USER_BLOCKED_EVENT\n}\n\n\"\"\"\nRepresents a user signing up for a GitHub account.\n\"\"\"\ntype JoinedGitHubContribution implements Contribution {\n  \"\"\"\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  \"\"\"\n  isRestricted: Boolean!\n\n  \"\"\"\n  When this contribution was made.\n  \"\"\"\n  occurredAt: DateTime!\n\n  \"\"\"\n  The HTTP path for this contribution.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this contribution.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  The user who made this contribution.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nA label for categorizing Issues or Milestones with a given Repository.\n\"\"\"\ntype Label implements Node {\n  \"\"\"\n  Identifies the label color.\n  \"\"\"\n  color: String!\n\n  \"\"\"\n  Identifies the date and time when the label was created.\n  \"\"\"\n  createdAt: DateTime\n\n  \"\"\"\n  A brief description of this label.\n  \"\"\"\n  description: String\n  id: ID!\n\n  \"\"\"\n  Indicates whether or not this is a default label.\n  \"\"\"\n  isDefault: Boolean!\n\n  \"\"\"\n  A list of issues associated with this label.\n  \"\"\"\n  issues(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Filtering options for issues returned from the connection.\n    \"\"\"\n    filterBy: IssueFilters\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for issues returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the issues by.\n    \"\"\"\n    states: [IssueState!]\n  ): IssueConnection!\n\n  \"\"\"\n  Identifies the label name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  A list of pull requests associated with this label.\n  \"\"\"\n  pullRequests(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    The base ref name to filter the pull requests by.\n    \"\"\"\n    baseRefName: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    The head ref name to filter the pull requests by.\n    \"\"\"\n    headRefName: String\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for pull requests returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the pull requests by.\n    \"\"\"\n    states: [PullRequestState!]\n  ): PullRequestConnection!\n\n  \"\"\"\n  The repository associated with this label.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this label.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the date and time when the label was last updated.\n  \"\"\"\n  updatedAt: DateTime\n\n  \"\"\"\n  The HTTP URL for this label.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nThe connection type for Label.\n\"\"\"\ntype LabelConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [LabelEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Label]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype LabelEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Label\n}\n\n\"\"\"\nAn object that can have labels assigned to it.\n\"\"\"\ninterface Labelable {\n  \"\"\"\n  A list of labels associated with the object.\n  \"\"\"\n  labels(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): LabelConnection\n}\n\n\"\"\"\nRepresents a 'labeled' event on a given issue or pull request.\n\"\"\"\ntype LabeledEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the label associated with the 'labeled' event.\n  \"\"\"\n  label: Label!\n\n  \"\"\"\n  Identifies the `Labelable` associated with the event.\n  \"\"\"\n  labelable: Labelable!\n}\n\n\"\"\"\nRepresents a given language found in repositories.\n\"\"\"\ntype Language implements Node {\n  \"\"\"\n  The color defined for the current language.\n  \"\"\"\n  color: String\n  id: ID!\n\n  \"\"\"\n  The name of the current language.\n  \"\"\"\n  name: String!\n}\n\n\"\"\"\nA list of languages associated with the parent.\n\"\"\"\ntype LanguageConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [LanguageEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Language]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n\n  \"\"\"\n  The total size in bytes of files written in that language.\n  \"\"\"\n  totalSize: Int!\n}\n\n\"\"\"\nRepresents the language of a repository.\n\"\"\"\ntype LanguageEdge {\n  cursor: String!\n  node: Language!\n\n  \"\"\"\n  The number of bytes of code written in the language.\n  \"\"\"\n  size: Int!\n}\n\n\"\"\"\nOrdering options for language connections.\n\"\"\"\ninput LanguageOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order languages by.\n  \"\"\"\n  field: LanguageOrderField!\n}\n\n\"\"\"\nProperties by which language connections can be ordered.\n\"\"\"\nenum LanguageOrderField {\n  \"\"\"\n  Order languages by the size of all files containing the language\n  \"\"\"\n  SIZE\n}\n\n\"\"\"\nA repository's open source license\n\"\"\"\ntype License implements Node {\n  \"\"\"\n  The full text of the license\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  The conditions set by the license\n  \"\"\"\n  conditions: [LicenseRule]!\n\n  \"\"\"\n  A human-readable description of the license\n  \"\"\"\n  description: String\n\n  \"\"\"\n  Whether the license should be featured\n  \"\"\"\n  featured: Boolean!\n\n  \"\"\"\n  Whether the license should be displayed in license pickers\n  \"\"\"\n  hidden: Boolean!\n  id: ID!\n\n  \"\"\"\n  Instructions on how to implement the license\n  \"\"\"\n  implementation: String\n\n  \"\"\"\n  The lowercased SPDX ID of the license\n  \"\"\"\n  key: String!\n\n  \"\"\"\n  The limitations set by the license\n  \"\"\"\n  limitations: [LicenseRule]!\n\n  \"\"\"\n  The license full name specified by <https://spdx.org/licenses>\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  Customary short name if applicable (e.g, GPLv3)\n  \"\"\"\n  nickname: String\n\n  \"\"\"\n  The permissions set by the license\n  \"\"\"\n  permissions: [LicenseRule]!\n\n  \"\"\"\n  Whether the license is a pseudo-license placeholder (e.g., other, no-license)\n  \"\"\"\n  pseudoLicense: Boolean!\n\n  \"\"\"\n  Short identifier specified by <https://spdx.org/licenses>\n  \"\"\"\n  spdxId: String\n\n  \"\"\"\n  URL to the license on <https://choosealicense.com>\n  \"\"\"\n  url: URI\n}\n\n\"\"\"\nDescribes a License's conditions, permissions, and limitations\n\"\"\"\ntype LicenseRule {\n  \"\"\"\n  A description of the rule\n  \"\"\"\n  description: String!\n\n  \"\"\"\n  The machine-readable rule key\n  \"\"\"\n  key: String!\n\n  \"\"\"\n  The human-readable rule label\n  \"\"\"\n  label: String!\n}\n\n\"\"\"\nAutogenerated input type of LockLockable\n\"\"\"\ninput LockLockableInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  A reason for why the issue or pull request will be locked.\n  \"\"\"\n  lockReason: LockReason\n\n  \"\"\"\n  ID of the issue or pull request to be locked.\n  \"\"\"\n  lockableId: ID!\n}\n\n\"\"\"\nAutogenerated return type of LockLockable\n\"\"\"\ntype LockLockablePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The item that was locked.\n  \"\"\"\n  lockedRecord: Lockable\n}\n\n\"\"\"\nThe possible reasons that an issue or pull request was locked.\n\"\"\"\nenum LockReason {\n  \"\"\"\n  The issue or pull request was locked because the conversation was off-topic.\n  \"\"\"\n  OFF_TOPIC\n\n  \"\"\"\n  The issue or pull request was locked because the conversation was resolved.\n  \"\"\"\n  RESOLVED\n\n  \"\"\"\n  The issue or pull request was locked because the conversation was spam.\n  \"\"\"\n  SPAM\n\n  \"\"\"\n  The issue or pull request was locked because the conversation was too heated.\n  \"\"\"\n  TOO_HEATED\n}\n\n\"\"\"\nAn object that can be locked.\n\"\"\"\ninterface Lockable {\n  \"\"\"\n  Reason that the conversation was locked.\n  \"\"\"\n  activeLockReason: LockReason\n\n  \"\"\"\n  `true` if the object is locked\n  \"\"\"\n  locked: Boolean!\n}\n\n\"\"\"\nRepresents a 'locked' event on a given issue or pull request.\n\"\"\"\ntype LockedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Reason that the conversation was locked (optional).\n  \"\"\"\n  lockReason: LockReason\n\n  \"\"\"\n  Object that was locked.\n  \"\"\"\n  lockable: Lockable!\n}\n\n\"\"\"\nA placeholder user for attribution of imported data on GitHub.\n\"\"\"\ntype Mannequin implements Actor & Node & UniformResourceLocatable {\n  \"\"\"\n  A URL pointing to the GitHub App's public avatar.\n  \"\"\"\n  avatarUrl(\n    \"\"\"\n    The size of the resulting square image.\n    \"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n\n  \"\"\"\n  The username of the actor.\n  \"\"\"\n  login: String!\n\n  \"\"\"\n  The HTML path to this resource.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The URL to this resource.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nA public description of a Marketplace category.\n\"\"\"\ntype MarketplaceCategory implements Node {\n  \"\"\"\n  The category's description.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  The technical description of how apps listed in this category work with GitHub.\n  \"\"\"\n  howItWorks: String\n  id: ID!\n\n  \"\"\"\n  The category's name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  How many Marketplace listings have this as their primary category.\n  \"\"\"\n  primaryListingCount: Int!\n\n  \"\"\"\n  The HTTP path for this Marketplace category.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  How many Marketplace listings have this as their secondary category.\n  \"\"\"\n  secondaryListingCount: Int!\n\n  \"\"\"\n  The short name of the category used in its URL.\n  \"\"\"\n  slug: String!\n\n  \"\"\"\n  The HTTP URL for this Marketplace category.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nA listing in the GitHub integration marketplace.\n\"\"\"\ntype MarketplaceListing implements Node {\n  \"\"\"\n  The GitHub App this listing represents.\n  \"\"\"\n  app: App\n\n  \"\"\"\n  URL to the listing owner's company site.\n  \"\"\"\n  companyUrl: URI\n\n  \"\"\"\n  The HTTP path for configuring access to the listing's integration or OAuth app\n  \"\"\"\n  configurationResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for configuring access to the listing's integration or OAuth app\n  \"\"\"\n  configurationUrl: URI!\n\n  \"\"\"\n  URL to the listing's documentation.\n  \"\"\"\n  documentationUrl: URI\n\n  \"\"\"\n  The listing's detailed description.\n  \"\"\"\n  extendedDescription: String\n\n  \"\"\"\n  The listing's detailed description rendered to HTML.\n  \"\"\"\n  extendedDescriptionHTML: HTML!\n\n  \"\"\"\n  The listing's introductory description.\n  \"\"\"\n  fullDescription: String!\n\n  \"\"\"\n  The listing's introductory description rendered to HTML.\n  \"\"\"\n  fullDescriptionHTML: HTML!\n\n  \"\"\"\n  Whether this listing has been submitted for review from GitHub for approval to be displayed in the Marketplace.\n  \"\"\"\n  hasApprovalBeenRequested: Boolean! @deprecated(reason: \"`hasApprovalBeenRequested` will be removed. Use `isVerificationPendingFromDraft` instead. Removal on 2019-10-01 UTC.\")\n\n  \"\"\"\n  Does this listing have any plans with a free trial?\n  \"\"\"\n  hasPublishedFreeTrialPlans: Boolean!\n\n  \"\"\"\n  Does this listing have a terms of service link?\n  \"\"\"\n  hasTermsOfService: Boolean!\n\n  \"\"\"\n  A technical description of how this app works with GitHub.\n  \"\"\"\n  howItWorks: String\n\n  \"\"\"\n  The listing's technical description rendered to HTML.\n  \"\"\"\n  howItWorksHTML: HTML!\n  id: ID!\n\n  \"\"\"\n  URL to install the product to the viewer's account or organization.\n  \"\"\"\n  installationUrl: URI\n\n  \"\"\"\n  Whether this listing's app has been installed for the current viewer\n  \"\"\"\n  installedForViewer: Boolean!\n\n  \"\"\"\n  Whether this listing has been approved for display in the Marketplace.\n  \"\"\"\n  isApproved: Boolean! @deprecated(reason: \"`isApproved` will be removed. Use `isPublic` instead. Removal on 2019-10-01 UTC.\")\n\n  \"\"\"\n  Whether this listing has been removed from the Marketplace.\n  \"\"\"\n  isArchived: Boolean!\n\n  \"\"\"\n  Whether this listing has been removed from the Marketplace.\n  \"\"\"\n  isDelisted: Boolean! @deprecated(reason: \"`isDelisted` will be removed. Use `isArchived` instead. Removal on 2019-10-01 UTC.\")\n\n  \"\"\"\n  Whether this listing is still an editable draft that has not been submitted\n  for review and is not publicly visible in the Marketplace.\n  \"\"\"\n  isDraft: Boolean!\n\n  \"\"\"\n  Whether the product this listing represents is available as part of a paid plan.\n  \"\"\"\n  isPaid: Boolean!\n\n  \"\"\"\n  Whether this listing has been approved for display in the Marketplace.\n  \"\"\"\n  isPublic: Boolean!\n\n  \"\"\"\n  Whether this listing has been rejected by GitHub for display in the Marketplace.\n  \"\"\"\n  isRejected: Boolean!\n\n  \"\"\"\n  Whether this listing has been approved for unverified display in the Marketplace.\n  \"\"\"\n  isUnverified: Boolean!\n\n  \"\"\"\n  Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.\n  \"\"\"\n  isUnverifiedPending: Boolean!\n\n  \"\"\"\n  Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.\n  \"\"\"\n  isVerificationPendingFromDraft: Boolean!\n\n  \"\"\"\n  Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.\n  \"\"\"\n  isVerificationPendingFromUnverified: Boolean!\n\n  \"\"\"\n  Whether this listing has been approved for verified display in the Marketplace.\n  \"\"\"\n  isVerified: Boolean!\n\n  \"\"\"\n  The hex color code, without the leading '#', for the logo background.\n  \"\"\"\n  logoBackgroundColor: String!\n\n  \"\"\"\n  URL for the listing's logo image.\n  \"\"\"\n  logoUrl(\n    \"\"\"\n    The size in pixels of the resulting square image.\n    \"\"\"\n    size: Int = 400\n  ): URI\n\n  \"\"\"\n  The listing's full name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The listing's very short description without a trailing period or ampersands.\n  \"\"\"\n  normalizedShortDescription: String!\n\n  \"\"\"\n  URL to the listing's detailed pricing.\n  \"\"\"\n  pricingUrl: URI\n\n  \"\"\"\n  The category that best describes the listing.\n  \"\"\"\n  primaryCategory: MarketplaceCategory!\n\n  \"\"\"\n  URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.\n  \"\"\"\n  privacyPolicyUrl: URI!\n\n  \"\"\"\n  The HTTP path for the Marketplace listing.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The URLs for the listing's screenshots.\n  \"\"\"\n  screenshotUrls: [String]!\n\n  \"\"\"\n  An alternate category that describes the listing.\n  \"\"\"\n  secondaryCategory: MarketplaceCategory\n\n  \"\"\"\n  The listing's very short description.\n  \"\"\"\n  shortDescription: String!\n\n  \"\"\"\n  The short name of the listing used in its URL.\n  \"\"\"\n  slug: String!\n\n  \"\"\"\n  URL to the listing's status page.\n  \"\"\"\n  statusUrl: URI\n\n  \"\"\"\n  An email address for support for this listing's app.\n  \"\"\"\n  supportEmail: String\n\n  \"\"\"\n  Either a URL or an email address for support for this listing's app, may\n  return an empty string for listings that do not require a support URL.\n  \"\"\"\n  supportUrl: URI!\n\n  \"\"\"\n  URL to the listing's terms of service.\n  \"\"\"\n  termsOfServiceUrl: URI\n\n  \"\"\"\n  The HTTP URL for the Marketplace listing.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  Can the current viewer add plans for this Marketplace listing.\n  \"\"\"\n  viewerCanAddPlans: Boolean!\n\n  \"\"\"\n  Can the current viewer approve this Marketplace listing.\n  \"\"\"\n  viewerCanApprove: Boolean!\n\n  \"\"\"\n  Can the current viewer delist this Marketplace listing.\n  \"\"\"\n  viewerCanDelist: Boolean!\n\n  \"\"\"\n  Can the current viewer edit this Marketplace listing.\n  \"\"\"\n  viewerCanEdit: Boolean!\n\n  \"\"\"\n  Can the current viewer edit the primary and secondary category of this\n  Marketplace listing.\n  \"\"\"\n  viewerCanEditCategories: Boolean!\n\n  \"\"\"\n  Can the current viewer edit the plans for this Marketplace listing.\n  \"\"\"\n  viewerCanEditPlans: Boolean!\n\n  \"\"\"\n  Can the current viewer return this Marketplace listing to draft state\n  so it becomes editable again.\n  \"\"\"\n  viewerCanRedraft: Boolean!\n\n  \"\"\"\n  Can the current viewer reject this Marketplace listing by returning it to\n  an editable draft state or rejecting it entirely.\n  \"\"\"\n  viewerCanReject: Boolean!\n\n  \"\"\"\n  Can the current viewer request this listing be reviewed for display in\n  the Marketplace as verified.\n  \"\"\"\n  viewerCanRequestApproval: Boolean!\n\n  \"\"\"\n  Indicates whether the current user has an active subscription to this Marketplace listing.\n  \"\"\"\n  viewerHasPurchased: Boolean!\n\n  \"\"\"\n  Indicates if the current user has purchased a subscription to this Marketplace listing\n  for all of the organizations the user owns.\n  \"\"\"\n  viewerHasPurchasedForAllOrganizations: Boolean!\n\n  \"\"\"\n  Does the current viewer role allow them to administer this Marketplace listing.\n  \"\"\"\n  viewerIsListingAdmin: Boolean!\n}\n\n\"\"\"\nLook up Marketplace Listings\n\"\"\"\ntype MarketplaceListingConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [MarketplaceListingEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [MarketplaceListing]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype MarketplaceListingEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: MarketplaceListing\n}\n\n\"\"\"\nEntities that have members who can set status messages.\n\"\"\"\ninterface MemberStatusable {\n  \"\"\"\n  Get the status messages members of this entity have set that are either public or visible only to the organization.\n  \"\"\"\n  memberStatuses(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for user statuses returned from the connection.\n    \"\"\"\n    orderBy: UserStatusOrder = {field: UPDATED_AT, direction: DESC}\n  ): UserStatusConnection!\n}\n\n\"\"\"\nRepresents a 'mentioned' event on a given issue or pull request.\n\"\"\"\ntype MentionedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n}\n\n\"\"\"\nAutogenerated input type of MergePullRequest\n\"\"\"\ninput MergePullRequestInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  Commit body to use for the merge commit; if omitted, a default message will be used\n  \"\"\"\n  commitBody: String\n\n  \"\"\"\n  Commit headline to use for the merge commit; if omitted, a default message will be used.\n  \"\"\"\n  commitHeadline: String\n\n  \"\"\"\n  OID that the pull request head ref must match to allow merge; if omitted, no check is performed.\n  \"\"\"\n  expectedHeadOid: GitObjectID\n\n  \"\"\"\n  ID of the pull request to be merged.\n  \"\"\"\n  pullRequestId: ID!\n}\n\n\"\"\"\nAutogenerated return type of MergePullRequest\n\"\"\"\ntype MergePullRequestPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The pull request that was merged.\n  \"\"\"\n  pullRequest: PullRequest\n}\n\n\"\"\"\nWhether or not a PullRequest can be merged.\n\"\"\"\nenum MergeableState {\n  \"\"\"\n  The pull request cannot be merged due to merge conflicts.\n  \"\"\"\n  CONFLICTING\n\n  \"\"\"\n  The pull request can be merged.\n  \"\"\"\n  MERGEABLE\n\n  \"\"\"\n  The mergeability of the pull request is still being calculated.\n  \"\"\"\n  UNKNOWN\n}\n\n\"\"\"\nRepresents a 'merged' event on a given pull request.\n\"\"\"\ntype MergedEvent implements Node & UniformResourceLocatable {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the commit associated with the `merge` event.\n  \"\"\"\n  commit: Commit\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the Ref associated with the `merge` event.\n  \"\"\"\n  mergeRef: Ref\n\n  \"\"\"\n  Identifies the name of the Ref associated with the `merge` event.\n  \"\"\"\n  mergeRefName: String!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  The HTTP path for this merged event.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this merged event.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nRepresents a Milestone object on a given repository.\n\"\"\"\ntype Milestone implements Closable & Node & UniformResourceLocatable {\n  \"\"\"\n  `true` if the object is closed (definition of closed may depend on type)\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"\n  Identifies the date and time when the object was closed.\n  \"\"\"\n  closedAt: DateTime\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the actor who created the milestone.\n  \"\"\"\n  creator: Actor\n\n  \"\"\"\n  Identifies the description of the milestone.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  Identifies the due date of the milestone.\n  \"\"\"\n  dueOn: DateTime\n  id: ID!\n\n  \"\"\"\n  A list of issues associated with the milestone.\n  \"\"\"\n  issues(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Filtering options for issues returned from the connection.\n    \"\"\"\n    filterBy: IssueFilters\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for issues returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the issues by.\n    \"\"\"\n    states: [IssueState!]\n  ): IssueConnection!\n\n  \"\"\"\n  Identifies the number of the milestone.\n  \"\"\"\n  number: Int!\n\n  \"\"\"\n  A list of pull requests associated with the milestone.\n  \"\"\"\n  pullRequests(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    The base ref name to filter the pull requests by.\n    \"\"\"\n    baseRefName: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    The head ref name to filter the pull requests by.\n    \"\"\"\n    headRefName: String\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for pull requests returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the pull requests by.\n    \"\"\"\n    states: [PullRequestState!]\n  ): PullRequestConnection!\n\n  \"\"\"\n  The repository associated with this milestone.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this milestone\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the state of the milestone.\n  \"\"\"\n  state: MilestoneState!\n\n  \"\"\"\n  Identifies the title of the milestone.\n  \"\"\"\n  title: String!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this milestone\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nThe connection type for Milestone.\n\"\"\"\ntype MilestoneConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [MilestoneEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Milestone]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype MilestoneEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Milestone\n}\n\n\"\"\"\nTypes that can be inside a Milestone.\n\"\"\"\nunion MilestoneItem = Issue | PullRequest\n\n\"\"\"\nOrdering options for milestone connections.\n\"\"\"\ninput MilestoneOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order milestones by.\n  \"\"\"\n  field: MilestoneOrderField!\n}\n\n\"\"\"\nProperties by which milestone connections can be ordered.\n\"\"\"\nenum MilestoneOrderField {\n  \"\"\"\n  Order milestones by when they were created.\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order milestones by when they are due.\n  \"\"\"\n  DUE_DATE\n\n  \"\"\"\n  Order milestones by their number.\n  \"\"\"\n  NUMBER\n\n  \"\"\"\n  Order milestones by when they were last updated.\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nThe possible states of a milestone.\n\"\"\"\nenum MilestoneState {\n  \"\"\"\n  A milestone that has been closed.\n  \"\"\"\n  CLOSED\n\n  \"\"\"\n  A milestone that is still open.\n  \"\"\"\n  OPEN\n}\n\n\"\"\"\nRepresents a 'milestoned' event on a given issue or pull request.\n\"\"\"\ntype MilestonedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the milestone title associated with the 'milestoned' event.\n  \"\"\"\n  milestoneTitle: String!\n\n  \"\"\"\n  Object referenced by event.\n  \"\"\"\n  subject: MilestoneItem!\n}\n\n\"\"\"\nAutogenerated input type of MinimizeComment\n\"\"\"\ninput MinimizeCommentInput {\n  \"\"\"\n  The classification of comment\n  \"\"\"\n  classifier: ReportedContentClassifiers!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Node ID of the subject to modify.\n  \"\"\"\n  subjectId: ID!\n}\n\n\"\"\"\nAutogenerated input type of MoveProjectCard\n\"\"\"\ninput MoveProjectCardInput {\n  \"\"\"\n  Place the new card after the card with this id. Pass null to place it at the top.\n  \"\"\"\n  afterCardId: ID\n\n  \"\"\"\n  The id of the card to move.\n  \"\"\"\n  cardId: ID!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The id of the column to move it into.\n  \"\"\"\n  columnId: ID!\n}\n\n\"\"\"\nAutogenerated return type of MoveProjectCard\n\"\"\"\ntype MoveProjectCardPayload {\n  \"\"\"\n  The new edge of the moved card.\n  \"\"\"\n  cardEdge: ProjectCardEdge\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated input type of MoveProjectColumn\n\"\"\"\ninput MoveProjectColumnInput {\n  \"\"\"\n  Place the new column after the column with this id. Pass null to place it at the front.\n  \"\"\"\n  afterColumnId: ID\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The id of the column to move.\n  \"\"\"\n  columnId: ID!\n}\n\n\"\"\"\nAutogenerated return type of MoveProjectColumn\n\"\"\"\ntype MoveProjectColumnPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The new edge of the moved column.\n  \"\"\"\n  columnEdge: ProjectColumnEdge\n}\n\n\"\"\"\nRepresents a 'moved_columns_in_project' event on a given issue or pull request.\n\"\"\"\ntype MovedColumnsInProjectEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n}\n\n\"\"\"\nThe root query for implementing GraphQL mutations.\n\"\"\"\ntype Mutation {\n  \"\"\"\n  Applies a suggested topic to the repository.\n  \"\"\"\n  acceptTopicSuggestion(input: AcceptTopicSuggestionInput!): AcceptTopicSuggestionPayload\n\n  \"\"\"\n  Adds assignees to an assignable object.\n  \"\"\"\n  addAssigneesToAssignable(input: AddAssigneesToAssignableInput!): AddAssigneesToAssignablePayload\n\n  \"\"\"\n  Adds a comment to an Issue or Pull Request.\n  \"\"\"\n  addComment(input: AddCommentInput!): AddCommentPayload\n\n  \"\"\"\n  Adds labels to a labelable object.\n  \"\"\"\n  addLabelsToLabelable(input: AddLabelsToLabelableInput!): AddLabelsToLabelablePayload\n\n  \"\"\"\n  Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.\n  \"\"\"\n  addProjectCard(input: AddProjectCardInput!): AddProjectCardPayload\n\n  \"\"\"\n  Adds a column to a Project.\n  \"\"\"\n  addProjectColumn(input: AddProjectColumnInput!): AddProjectColumnPayload\n\n  \"\"\"\n  Adds a review to a Pull Request.\n  \"\"\"\n  addPullRequestReview(input: AddPullRequestReviewInput!): AddPullRequestReviewPayload\n\n  \"\"\"\n  Adds a comment to a review.\n  \"\"\"\n  addPullRequestReviewComment(input: AddPullRequestReviewCommentInput!): AddPullRequestReviewCommentPayload\n\n  \"\"\"\n  Adds a reaction to a subject.\n  \"\"\"\n  addReaction(input: AddReactionInput!): AddReactionPayload\n\n  \"\"\"\n  Adds a star to a Starrable.\n  \"\"\"\n  addStar(input: AddStarInput!): AddStarPayload\n\n  \"\"\"\n  Update your status on GitHub.\n  \"\"\"\n  changeUserStatus(input: ChangeUserStatusInput!): ChangeUserStatusPayload\n\n  \"\"\"\n  Clears all labels from a labelable object.\n  \"\"\"\n  clearLabelsFromLabelable(input: ClearLabelsFromLabelableInput!): ClearLabelsFromLabelablePayload\n\n  \"\"\"\n  Creates a new project by cloning configuration from an existing project.\n  \"\"\"\n  cloneProject(input: CloneProjectInput!): CloneProjectPayload\n\n  \"\"\"\n  Close an issue.\n  \"\"\"\n  closeIssue(input: CloseIssueInput!): CloseIssuePayload\n\n  \"\"\"\n  Close a pull request.\n  \"\"\"\n  closePullRequest(input: ClosePullRequestInput!): ClosePullRequestPayload\n\n  \"\"\"\n  Convert a project note card to one associated with a newly created issue.\n  \"\"\"\n  convertProjectCardNoteToIssue(input: ConvertProjectCardNoteToIssueInput!): ConvertProjectCardNoteToIssuePayload\n\n  \"\"\"\n  Create a new branch protection rule\n  \"\"\"\n  createBranchProtectionRule(input: CreateBranchProtectionRuleInput!): CreateBranchProtectionRulePayload\n\n  \"\"\"\n  Creates a new issue.\n  \"\"\"\n  createIssue(input: CreateIssueInput!): CreateIssuePayload\n\n  \"\"\"\n  Creates a new project.\n  \"\"\"\n  createProject(input: CreateProjectInput!): CreateProjectPayload\n\n  \"\"\"\n  Create a new pull request\n  \"\"\"\n  createPullRequest(input: CreatePullRequestInput!): CreatePullRequestPayload\n\n  \"\"\"\n  Rejects a suggested topic for the repository.\n  \"\"\"\n  declineTopicSuggestion(input: DeclineTopicSuggestionInput!): DeclineTopicSuggestionPayload\n\n  \"\"\"\n  Delete a branch protection rule\n  \"\"\"\n  deleteBranchProtectionRule(input: DeleteBranchProtectionRuleInput!): DeleteBranchProtectionRulePayload\n\n  \"\"\"\n  Deletes an Issue object.\n  \"\"\"\n  deleteIssue(input: DeleteIssueInput!): DeleteIssuePayload\n\n  \"\"\"\n  Deletes an IssueComment object.\n  \"\"\"\n  deleteIssueComment(input: DeleteIssueCommentInput!): DeleteIssueCommentPayload\n\n  \"\"\"\n  Deletes a project.\n  \"\"\"\n  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload\n\n  \"\"\"\n  Deletes a project card.\n  \"\"\"\n  deleteProjectCard(input: DeleteProjectCardInput!): DeleteProjectCardPayload\n\n  \"\"\"\n  Deletes a project column.\n  \"\"\"\n  deleteProjectColumn(input: DeleteProjectColumnInput!): DeleteProjectColumnPayload\n\n  \"\"\"\n  Deletes a pull request review.\n  \"\"\"\n  deletePullRequestReview(input: DeletePullRequestReviewInput!): DeletePullRequestReviewPayload\n\n  \"\"\"\n  Deletes a pull request review comment.\n  \"\"\"\n  deletePullRequestReviewComment(input: DeletePullRequestReviewCommentInput!): DeletePullRequestReviewCommentPayload\n\n  \"\"\"\n  Dismisses an approved or rejected pull request review.\n  \"\"\"\n  dismissPullRequestReview(input: DismissPullRequestReviewInput!): DismissPullRequestReviewPayload\n\n  \"\"\"\n  Lock a lockable object\n  \"\"\"\n  lockLockable(input: LockLockableInput!): LockLockablePayload\n\n  \"\"\"\n  Merge a pull request.\n  \"\"\"\n  mergePullRequest(input: MergePullRequestInput!): MergePullRequestPayload\n\n  \"\"\"\n  Moves a project card to another place.\n  \"\"\"\n  moveProjectCard(input: MoveProjectCardInput!): MoveProjectCardPayload\n\n  \"\"\"\n  Moves a project column to another place.\n  \"\"\"\n  moveProjectColumn(input: MoveProjectColumnInput!): MoveProjectColumnPayload\n\n  \"\"\"\n  Removes assignees from an assignable object.\n  \"\"\"\n  removeAssigneesFromAssignable(input: RemoveAssigneesFromAssignableInput!): RemoveAssigneesFromAssignablePayload\n\n  \"\"\"\n  Removes labels from a Labelable object.\n  \"\"\"\n  removeLabelsFromLabelable(input: RemoveLabelsFromLabelableInput!): RemoveLabelsFromLabelablePayload\n\n  \"\"\"\n  Removes outside collaborator from all repositories in an organization.\n  \"\"\"\n  removeOutsideCollaborator(input: RemoveOutsideCollaboratorInput!): RemoveOutsideCollaboratorPayload\n\n  \"\"\"\n  Removes a reaction from a subject.\n  \"\"\"\n  removeReaction(input: RemoveReactionInput!): RemoveReactionPayload\n\n  \"\"\"\n  Removes a star from a Starrable.\n  \"\"\"\n  removeStar(input: RemoveStarInput!): RemoveStarPayload\n\n  \"\"\"\n  Reopen a issue.\n  \"\"\"\n  reopenIssue(input: ReopenIssueInput!): ReopenIssuePayload\n\n  \"\"\"\n  Reopen a pull request.\n  \"\"\"\n  reopenPullRequest(input: ReopenPullRequestInput!): ReopenPullRequestPayload\n\n  \"\"\"\n  Set review requests on a pull request.\n  \"\"\"\n  requestReviews(input: RequestReviewsInput!): RequestReviewsPayload\n\n  \"\"\"\n  Marks a review thread as resolved.\n  \"\"\"\n  resolveReviewThread(input: ResolveReviewThreadInput!): ResolveReviewThreadPayload\n\n  \"\"\"\n  Submits a pending pull request review.\n  \"\"\"\n  submitPullRequestReview(input: SubmitPullRequestReviewInput!): SubmitPullRequestReviewPayload\n\n  \"\"\"\n  Unlock a lockable object\n  \"\"\"\n  unlockLockable(input: UnlockLockableInput!): UnlockLockablePayload\n\n  \"\"\"\n  Unmark an issue as a duplicate of another issue.\n  \"\"\"\n  unmarkIssueAsDuplicate(input: UnmarkIssueAsDuplicateInput!): UnmarkIssueAsDuplicatePayload\n\n  \"\"\"\n  Marks a review thread as unresolved.\n  \"\"\"\n  unresolveReviewThread(input: UnresolveReviewThreadInput!): UnresolveReviewThreadPayload\n\n  \"\"\"\n  Create a new branch protection rule\n  \"\"\"\n  updateBranchProtectionRule(input: UpdateBranchProtectionRuleInput!): UpdateBranchProtectionRulePayload\n\n  \"\"\"\n  Updates an Issue.\n  \"\"\"\n  updateIssue(input: UpdateIssueInput!): UpdateIssuePayload\n\n  \"\"\"\n  Updates an IssueComment object.\n  \"\"\"\n  updateIssueComment(input: UpdateIssueCommentInput!): UpdateIssueCommentPayload\n\n  \"\"\"\n  Updates an existing project.\n  \"\"\"\n  updateProject(input: UpdateProjectInput!): UpdateProjectPayload\n\n  \"\"\"\n  Updates an existing project card.\n  \"\"\"\n  updateProjectCard(input: UpdateProjectCardInput!): UpdateProjectCardPayload\n\n  \"\"\"\n  Updates an existing project column.\n  \"\"\"\n  updateProjectColumn(input: UpdateProjectColumnInput!): UpdateProjectColumnPayload\n\n  \"\"\"\n  Update a pull request\n  \"\"\"\n  updatePullRequest(input: UpdatePullRequestInput!): UpdatePullRequestPayload\n\n  \"\"\"\n  Updates the body of a pull request review.\n  \"\"\"\n  updatePullRequestReview(input: UpdatePullRequestReviewInput!): UpdatePullRequestReviewPayload\n\n  \"\"\"\n  Updates a pull request review comment.\n  \"\"\"\n  updatePullRequestReviewComment(input: UpdatePullRequestReviewCommentInput!): UpdatePullRequestReviewCommentPayload\n\n  \"\"\"\n  Updates the state for subscribable subjects.\n  \"\"\"\n  updateSubscription(input: UpdateSubscriptionInput!): UpdateSubscriptionPayload\n\n  \"\"\"\n  Replaces the repository's topics with the given topics.\n  \"\"\"\n  updateTopics(input: UpdateTopicsInput!): UpdateTopicsPayload\n}\n\n\"\"\"\nAn object with an ID.\n\"\"\"\ninterface Node {\n  \"\"\"\n  ID of the object.\n  \"\"\"\n  id: ID!\n}\n\n\"\"\"\nPossible directions in which to order a list of items when provided an `orderBy` argument.\n\"\"\"\nenum OrderDirection {\n  \"\"\"\n  Specifies an ascending order for a given `orderBy` argument.\n  \"\"\"\n  ASC\n\n  \"\"\"\n  Specifies a descending order for a given `orderBy` argument.\n  \"\"\"\n  DESC\n}\n\n\"\"\"\nAn account on GitHub, with one or more owners, that has repositories, members and teams.\n\"\"\"\ntype Organization implements Actor & MemberStatusable & Node & ProfileOwner & ProjectOwner & RegistryPackageOwner & RegistryPackageSearch & RepositoryOwner & UniformResourceLocatable {\n  \"\"\"\n  Determine if this repository owner has any items that can be pinned to their profile.\n  \"\"\"\n  anyPinnableItems(\n    \"\"\"\n    Filter to only a particular kind of pinnable item.\n    \"\"\"\n    type: PinnableItemType\n  ): Boolean!\n\n  \"\"\"\n  A URL pointing to the organization's public avatar.\n  \"\"\"\n  avatarUrl(\n    \"\"\"\n    The size of the resulting square image.\n    \"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The organization's public profile description.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  The organization's public email.\n  \"\"\"\n  email: String\n  id: ID!\n\n  \"\"\"\n  Whether the organization has verified its profile email and website.\n  \"\"\"\n  isVerified: Boolean!\n\n  \"\"\"\n  Showcases a selection of repositories and gists that the profile owner has\n  either curated or that have been selected automatically based on popularity.\n  \"\"\"\n  itemShowcase: ProfileItemShowcase!\n\n  \"\"\"\n  The organization's public profile location.\n  \"\"\"\n  location: String\n\n  \"\"\"\n  The organization's login name.\n  \"\"\"\n  login: String!\n\n  \"\"\"\n  Get the status messages members of this entity have set that are either public or visible only to the organization.\n  \"\"\"\n  memberStatuses(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for user statuses returned from the connection.\n    \"\"\"\n    orderBy: UserStatusOrder = {field: UPDATED_AT, direction: DESC}\n  ): UserStatusConnection!\n\n  \"\"\"\n  A list of users who are members of this organization.\n  \"\"\"\n  membersWithRole(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): OrganizationMemberConnection!\n\n  \"\"\"\n  The organization's public profile name.\n  \"\"\"\n  name: String\n\n  \"\"\"\n  The HTTP path creating a new team\n  \"\"\"\n  newTeamResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL creating a new team\n  \"\"\"\n  newTeamUrl: URI!\n\n  \"\"\"\n  The billing email for the organization.\n  \"\"\"\n  organizationBillingEmail: String\n\n  \"\"\"\n  A list of users who have been invited to join this organization.\n  \"\"\"\n  pendingMembers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n\n  \"\"\"\n  A list of repositories and gists this profile owner can pin to their profile.\n  \"\"\"\n  pinnableItems(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter the types of pinnable items that are returned.\n    \"\"\"\n    types: [PinnableItemType!]\n  ): PinnableItemConnection!\n\n  \"\"\"\n  A list of repositories and gists this profile owner has pinned to their profile\n  \"\"\"\n  pinnedItems(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter the types of pinned items that are returned.\n    \"\"\"\n    types: [PinnableItemType!]\n  ): PinnableItemConnection!\n\n  \"\"\"\n  Returns how many more items this profile owner can pin to their profile.\n  \"\"\"\n  pinnedItemsRemaining: Int!\n\n  \"\"\"\n  A list of repositories this user has pinned to their profile\n  \"\"\"\n  pinnedRepositories(\n    \"\"\"\n    Array of viewer's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    current viewer owns.\n    \"\"\"\n    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    Array of owner's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    organization or user being viewed owns.\n    \"\"\"\n    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection! @deprecated(reason: \"pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-07-01 UTC.\")\n\n  \"\"\"\n  Find project by number.\n  \"\"\"\n  project(\n    \"\"\"\n    The project number to find.\n    \"\"\"\n    number: Int!\n  ): Project\n\n  \"\"\"\n  A list of projects under the owner.\n  \"\"\"\n  projects(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for projects returned from the connection\n    \"\"\"\n    orderBy: ProjectOrder\n\n    \"\"\"\n    Query to search projects by, currently only searching by name.\n    \"\"\"\n    search: String\n\n    \"\"\"\n    A list of states to filter the projects by.\n    \"\"\"\n    states: [ProjectState!]\n  ): ProjectConnection!\n\n  \"\"\"\n  The HTTP path listing organization's projects\n  \"\"\"\n  projectsResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL listing organization's projects\n  \"\"\"\n  projectsUrl: URI!\n\n  \"\"\"\n  A list of repositories that the user owns.\n  \"\"\"\n  repositories(\n    \"\"\"\n    Array of viewer's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    current viewer owns.\n    \"\"\"\n    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If non-null, filters repositories according to whether they are forks of another repository\n    \"\"\"\n    isFork: Boolean\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    Array of owner's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    organization or user being viewed owns.\n    \"\"\"\n    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection!\n\n  \"\"\"\n  Find Repository.\n  \"\"\"\n  repository(\n    \"\"\"\n    Name of Repository to find.\n    \"\"\"\n    name: String!\n  ): Repository\n\n  \"\"\"\n  When true the organization requires all members, billing managers, and outside\n  collaborators to enable two-factor authentication.\n  \"\"\"\n  requiresTwoFactorAuthentication: Boolean\n\n  \"\"\"\n  The HTTP path for this organization.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The Organization's SAML identity providers\n  \"\"\"\n  samlIdentityProvider: OrganizationIdentityProvider\n\n  \"\"\"\n  Find an organization's team by its slug.\n  \"\"\"\n  team(\n    \"\"\"\n    The name or slug of the team to find.\n    \"\"\"\n    slug: String!\n  ): Team\n\n  \"\"\"\n  A list of teams in this organization.\n  \"\"\"\n  teams(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    If true, filters teams that are mapped to an LDAP Group (Enterprise only)\n    \"\"\"\n    ldapMapped: Boolean\n\n    \"\"\"\n    Ordering options for teams returned from the connection\n    \"\"\"\n    orderBy: TeamOrder\n\n    \"\"\"\n    If non-null, filters teams according to privacy\n    \"\"\"\n    privacy: TeamPrivacy\n\n    \"\"\"\n    If non-null, filters teams with query on team name and team slug\n    \"\"\"\n    query: String\n\n    \"\"\"\n    If non-null, filters teams according to whether the viewer is an admin or member on team\n    \"\"\"\n    role: TeamRole\n\n    \"\"\"\n    If true, restrict to only root teams\n    \"\"\"\n    rootTeamsOnly: Boolean = false\n\n    \"\"\"\n    User logins to filter by\n    \"\"\"\n    userLogins: [String!]\n  ): TeamConnection!\n\n  \"\"\"\n  The HTTP path listing organization's teams\n  \"\"\"\n  teamsResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL listing organization's teams\n  \"\"\"\n  teamsUrl: URI!\n\n  \"\"\"\n  The HTTP URL for this organization.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  Organization is adminable by the viewer.\n  \"\"\"\n  viewerCanAdminister: Boolean!\n\n  \"\"\"\n  Can the viewer pin repositories and gists to the profile?\n  \"\"\"\n  viewerCanChangePinnedItems: Boolean!\n\n  \"\"\"\n  Can the current viewer create new projects on this owner.\n  \"\"\"\n  viewerCanCreateProjects: Boolean!\n\n  \"\"\"\n  Viewer can create repositories on this organization\n  \"\"\"\n  viewerCanCreateRepositories: Boolean!\n\n  \"\"\"\n  Viewer can create teams on this organization.\n  \"\"\"\n  viewerCanCreateTeams: Boolean!\n\n  \"\"\"\n  Viewer is an active member of this organization.\n  \"\"\"\n  viewerIsAMember: Boolean!\n\n  \"\"\"\n  The organization's public profile URL.\n  \"\"\"\n  websiteUrl: URI\n}\n\n\"\"\"\nThe connection type for Organization.\n\"\"\"\ntype OrganizationConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [OrganizationEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Organization]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype OrganizationEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Organization\n}\n\n\"\"\"\nAn Identity Provider configured to provision SAML and SCIM identities for Organizations\n\"\"\"\ntype OrganizationIdentityProvider implements Node {\n  \"\"\"\n  The digest algorithm used to sign SAML requests for the Identity Provider.\n  \"\"\"\n  digestMethod: URI\n\n  \"\"\"\n  External Identities provisioned by this Identity Provider\n  \"\"\"\n  externalIdentities(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ExternalIdentityConnection!\n  id: ID!\n\n  \"\"\"\n  The x509 certificate used by the Identity Provder to sign assertions and responses.\n  \"\"\"\n  idpCertificate: X509Certificate\n\n  \"\"\"\n  The Issuer Entity ID for the SAML Identity Provider\n  \"\"\"\n  issuer: String\n\n  \"\"\"\n  Organization this Identity Provider belongs to\n  \"\"\"\n  organization: Organization\n\n  \"\"\"\n  The signature algorithm used to sign SAML requests for the Identity Provider.\n  \"\"\"\n  signatureMethod: URI\n\n  \"\"\"\n  The URL endpoint for the Identity Provider's SAML SSO.\n  \"\"\"\n  ssoUrl: URI\n}\n\n\"\"\"\nAn Invitation for a user to an organization.\n\"\"\"\ntype OrganizationInvitation implements Node {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The email address of the user invited to the organization.\n  \"\"\"\n  email: String\n  id: ID!\n\n  \"\"\"\n  The type of invitation that was sent (e.g. email, user).\n  \"\"\"\n  invitationType: OrganizationInvitationType!\n\n  \"\"\"\n  The user who was invited to the organization.\n  \"\"\"\n  invitee: User\n\n  \"\"\"\n  The user who created the invitation.\n  \"\"\"\n  inviter: User!\n\n  \"\"\"\n  The organization the invite is for\n  \"\"\"\n  organization: Organization!\n\n  \"\"\"\n  The user's pending role in the organization (e.g. member, owner).\n  \"\"\"\n  role: OrganizationInvitationRole!\n}\n\n\"\"\"\nThe connection type for OrganizationInvitation.\n\"\"\"\ntype OrganizationInvitationConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [OrganizationInvitationEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [OrganizationInvitation]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype OrganizationInvitationEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: OrganizationInvitation\n}\n\n\"\"\"\nThe possible organization invitation roles.\n\"\"\"\nenum OrganizationInvitationRole {\n  \"\"\"\n  The user is invited to be an admin of the organization.\n  \"\"\"\n  ADMIN\n\n  \"\"\"\n  The user is invited to be a billing manager of the organization.\n  \"\"\"\n  BILLING_MANAGER\n\n  \"\"\"\n  The user is invited to be a direct member of the organization.\n  \"\"\"\n  DIRECT_MEMBER\n\n  \"\"\"\n  The user's previous role will be reinstated.\n  \"\"\"\n  REINSTATE\n}\n\n\"\"\"\nThe possible organization invitation types.\n\"\"\"\nenum OrganizationInvitationType {\n  \"\"\"\n  The invitation was to an email address.\n  \"\"\"\n  EMAIL\n\n  \"\"\"\n  The invitation was to an existing user.\n  \"\"\"\n  USER\n}\n\n\"\"\"\nThe connection type for User.\n\"\"\"\ntype OrganizationMemberConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [OrganizationMemberEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [User]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nRepresents a user within an organization.\n\"\"\"\ntype OrganizationMemberEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.\n  \"\"\"\n  hasTwoFactorEnabled: Boolean\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: User\n\n  \"\"\"\n  The role this user has in the organization.\n  \"\"\"\n  role: OrganizationMemberRole\n}\n\n\"\"\"\nThe possible roles within an organization for its members.\n\"\"\"\nenum OrganizationMemberRole {\n  \"\"\"\n  The user is an administrator of the organization.\n  \"\"\"\n  ADMIN\n\n  \"\"\"\n  The user is a member of the organization.\n  \"\"\"\n  MEMBER\n}\n\n\"\"\"\nInformation about pagination in a connection.\n\"\"\"\ntype PageInfo {\n  \"\"\"\n  When paginating forwards, the cursor to continue.\n  \"\"\"\n  endCursor: String\n\n  \"\"\"\n  When paginating forwards, are there more items?\n  \"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"\n  When paginating backwards, are there more items?\n  \"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"\n  When paginating backwards, the cursor to continue.\n  \"\"\"\n  startCursor: String\n}\n\n\"\"\"\nTypes that can grant permissions on a repository to a user\n\"\"\"\nunion PermissionGranter = Organization | Repository | Team\n\n\"\"\"\nA level of permission and source for a user's access to a repository.\n\"\"\"\ntype PermissionSource {\n  \"\"\"\n  The organization the repository belongs to.\n  \"\"\"\n  organization: Organization!\n\n  \"\"\"\n  The level of access this source has granted to the user.\n  \"\"\"\n  permission: DefaultRepositoryPermissionField!\n\n  \"\"\"\n  The source of this permission.\n  \"\"\"\n  source: PermissionGranter!\n}\n\n\"\"\"\nAutogenerated input type of PinIssue\n\"\"\"\ninput PinIssueInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the issue to be pinned\n  \"\"\"\n  issueId: ID!\n}\n\n\"\"\"\nTypes that can be pinned to a profile page.\n\"\"\"\nunion PinnableItem = Gist | Repository\n\n\"\"\"\nThe connection type for PinnableItem.\n\"\"\"\ntype PinnableItemConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PinnableItemEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PinnableItem]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PinnableItemEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PinnableItem\n}\n\n\"\"\"\nRepresents items that can be pinned to a profile page or dashboard.\n\"\"\"\nenum PinnableItemType {\n  \"\"\"\n  A gist.\n  \"\"\"\n  GIST\n\n  \"\"\"\n  An issue.\n  \"\"\"\n  ISSUE\n\n  \"\"\"\n  A repository.\n  \"\"\"\n  REPOSITORY\n}\n\n\"\"\"\nRepresents a 'pinned' event on a given issue or pull request.\n\"\"\"\ntype PinnedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the issue associated with the event.\n  \"\"\"\n  issue: Issue!\n}\n\n\"\"\"\nA curatable list of repositories relating to a repository owner, which defaults\nto showing the most popular repositories they own.\n\"\"\"\ntype ProfileItemShowcase {\n  \"\"\"\n  Whether or not the owner has pinned any repositories or gists.\n  \"\"\"\n  hasPinnedItems: Boolean!\n\n  \"\"\"\n  The repositories and gists in the showcase. If the profile owner has any\n  pinned items, those will be returned. Otherwise, the profile owner's popular\n  repositories will be returned.\n  \"\"\"\n  items(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): PinnableItemConnection!\n}\n\n\"\"\"\nRepresents any entity on GitHub that has a profile page.\n\"\"\"\ninterface ProfileOwner {\n  \"\"\"\n  Determine if this repository owner has any items that can be pinned to their profile.\n  \"\"\"\n  anyPinnableItems(\n    \"\"\"\n    Filter to only a particular kind of pinnable item.\n    \"\"\"\n    type: PinnableItemType\n  ): Boolean!\n\n  \"\"\"\n  The public profile email.\n  \"\"\"\n  email: String\n  id: ID!\n\n  \"\"\"\n  Showcases a selection of repositories and gists that the profile owner has\n  either curated or that have been selected automatically based on popularity.\n  \"\"\"\n  itemShowcase: ProfileItemShowcase!\n\n  \"\"\"\n  The public profile location.\n  \"\"\"\n  location: String\n\n  \"\"\"\n  The username used to login.\n  \"\"\"\n  login: String!\n\n  \"\"\"\n  The public profile name.\n  \"\"\"\n  name: String\n\n  \"\"\"\n  A list of repositories and gists this profile owner can pin to their profile.\n  \"\"\"\n  pinnableItems(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter the types of pinnable items that are returned.\n    \"\"\"\n    types: [PinnableItemType!]\n  ): PinnableItemConnection!\n\n  \"\"\"\n  A list of repositories and gists this profile owner has pinned to their profile\n  \"\"\"\n  pinnedItems(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter the types of pinned items that are returned.\n    \"\"\"\n    types: [PinnableItemType!]\n  ): PinnableItemConnection!\n\n  \"\"\"\n  Returns how many more items this profile owner can pin to their profile.\n  \"\"\"\n  pinnedItemsRemaining: Int!\n\n  \"\"\"\n  Can the viewer pin repositories and gists to the profile?\n  \"\"\"\n  viewerCanChangePinnedItems: Boolean!\n\n  \"\"\"\n  The public profile website URL.\n  \"\"\"\n  websiteUrl: URI\n}\n\n\"\"\"\nProjects manage issues, pull requests and notes within a project owner.\n\"\"\"\ntype Project implements Closable & Node & Updatable {\n  \"\"\"\n  The project's description body.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  The projects description body rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  `true` if the object is closed (definition of closed may depend on type)\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"\n  Identifies the date and time when the object was closed.\n  \"\"\"\n  closedAt: DateTime\n\n  \"\"\"\n  List of columns in the project\n  \"\"\"\n  columns(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ProjectColumnConnection!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The actor who originally created the project.\n  \"\"\"\n  creator: Actor\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n\n  \"\"\"\n  The project's name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The project's number.\n  \"\"\"\n  number: Int!\n\n  \"\"\"\n  The project's owner. Currently limited to repositories, organizations, and users.\n  \"\"\"\n  owner: ProjectOwner!\n\n  \"\"\"\n  List of pending cards in this project\n  \"\"\"\n  pendingCards(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    A list of archived states to filter the cards by\n    \"\"\"\n    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ProjectCardConnection!\n\n  \"\"\"\n  The HTTP path for this project\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Whether the project is open or closed.\n  \"\"\"\n  state: ProjectState!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this project\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n}\n\n\"\"\"\nA card in a project.\n\"\"\"\ntype ProjectCard implements Node {\n  \"\"\"\n  The project column this card is associated under. A card may only belong to one\n  project column at a time. The column field will be null if the card is created\n  in a pending state and has yet to be associated with a column. Once cards are\n  associated with a column, they will not become pending in the future.\n  \"\"\"\n  column: ProjectColumn\n\n  \"\"\"\n  The card content item\n  \"\"\"\n  content: ProjectCardItem\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The actor who created this card\n  \"\"\"\n  creator: Actor\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n\n  \"\"\"\n  Whether the card is archived\n  \"\"\"\n  isArchived: Boolean!\n\n  \"\"\"\n  The card note\n  \"\"\"\n  note: String\n\n  \"\"\"\n  The project that contains this card.\n  \"\"\"\n  project: Project!\n\n  \"\"\"\n  The HTTP path for this card\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The state of ProjectCard\n  \"\"\"\n  state: ProjectCardState\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this card\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nThe possible archived states of a project card.\n\"\"\"\nenum ProjectCardArchivedState {\n  \"\"\"\n  A project card that is archived\n  \"\"\"\n  ARCHIVED\n\n  \"\"\"\n  A project card that is not archived\n  \"\"\"\n  NOT_ARCHIVED\n}\n\n\"\"\"\nThe connection type for ProjectCard.\n\"\"\"\ntype ProjectCardConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ProjectCardEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [ProjectCard]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ProjectCardEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: ProjectCard\n}\n\n\"\"\"\nAn issue or PR and its owning repository to be used in a project card.\n\"\"\"\ninput ProjectCardImport {\n  \"\"\"\n  The issue or pull request number.\n  \"\"\"\n  number: Int!\n\n  \"\"\"\n  Repository name with owner (owner/repository).\n  \"\"\"\n  repository: String!\n}\n\n\"\"\"\nTypes that can be inside Project Cards.\n\"\"\"\nunion ProjectCardItem = Issue | PullRequest\n\n\"\"\"\nVarious content states of a ProjectCard\n\"\"\"\nenum ProjectCardState {\n  \"\"\"\n  The card has content only.\n  \"\"\"\n  CONTENT_ONLY\n\n  \"\"\"\n  The card has a note only.\n  \"\"\"\n  NOTE_ONLY\n\n  \"\"\"\n  The card is redacted.\n  \"\"\"\n  REDACTED\n}\n\n\"\"\"\nA column inside a project.\n\"\"\"\ntype ProjectColumn implements Node {\n  \"\"\"\n  List of cards in the column\n  \"\"\"\n  cards(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    A list of archived states to filter the cards by\n    \"\"\"\n    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ProjectCardConnection!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n\n  \"\"\"\n  The project column's name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The project that contains this column.\n  \"\"\"\n  project: Project!\n\n  \"\"\"\n  The semantic purpose of the column\n  \"\"\"\n  purpose: ProjectColumnPurpose\n\n  \"\"\"\n  The HTTP path for this project column\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this project column\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nThe connection type for ProjectColumn.\n\"\"\"\ntype ProjectColumnConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ProjectColumnEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [ProjectColumn]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ProjectColumnEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: ProjectColumn\n}\n\n\"\"\"\nA project column and a list of its issues and PRs.\n\"\"\"\ninput ProjectColumnImport {\n  \"\"\"\n  The name of the column.\n  \"\"\"\n  columnName: String!\n\n  \"\"\"\n  A list of issues and pull requests in the column.\n  \"\"\"\n  issues: [ProjectCardImport!]\n\n  \"\"\"\n  The position of the column, starting from 0.\n  \"\"\"\n  position: Int!\n}\n\n\"\"\"\nThe semantic purpose of the column - todo, in progress, or done.\n\"\"\"\nenum ProjectColumnPurpose {\n  \"\"\"\n  The column contains cards which are complete\n  \"\"\"\n  DONE\n\n  \"\"\"\n  The column contains cards which are currently being worked on\n  \"\"\"\n  IN_PROGRESS\n\n  \"\"\"\n  The column contains cards still to be worked on\n  \"\"\"\n  TODO\n}\n\n\"\"\"\nA list of projects associated with the owner.\n\"\"\"\ntype ProjectConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ProjectEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Project]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ProjectEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Project\n}\n\n\"\"\"\nWays in which lists of projects can be ordered upon return.\n\"\"\"\ninput ProjectOrder {\n  \"\"\"\n  The direction in which to order projects by the specified field.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field in which to order projects by.\n  \"\"\"\n  field: ProjectOrderField!\n}\n\n\"\"\"\nProperties by which project connections can be ordered.\n\"\"\"\nenum ProjectOrderField {\n  \"\"\"\n  Order projects by creation time\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order projects by name\n  \"\"\"\n  NAME\n\n  \"\"\"\n  Order projects by update time\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nRepresents an owner of a Project.\n\"\"\"\ninterface ProjectOwner {\n  id: ID!\n\n  \"\"\"\n  Find project by number.\n  \"\"\"\n  project(\n    \"\"\"\n    The project number to find.\n    \"\"\"\n    number: Int!\n  ): Project\n\n  \"\"\"\n  A list of projects under the owner.\n  \"\"\"\n  projects(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for projects returned from the connection\n    \"\"\"\n    orderBy: ProjectOrder\n\n    \"\"\"\n    Query to search projects by, currently only searching by name.\n    \"\"\"\n    search: String\n\n    \"\"\"\n    A list of states to filter the projects by.\n    \"\"\"\n    states: [ProjectState!]\n  ): ProjectConnection!\n\n  \"\"\"\n  The HTTP path listing owners projects\n  \"\"\"\n  projectsResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL listing owners projects\n  \"\"\"\n  projectsUrl: URI!\n\n  \"\"\"\n  Can the current viewer create new projects on this owner.\n  \"\"\"\n  viewerCanCreateProjects: Boolean!\n}\n\n\"\"\"\nState of the project; either 'open' or 'closed'\n\"\"\"\nenum ProjectState {\n  \"\"\"\n  The project is closed.\n  \"\"\"\n  CLOSED\n\n  \"\"\"\n  The project is open.\n  \"\"\"\n  OPEN\n}\n\n\"\"\"\nA user's public key.\n\"\"\"\ntype PublicKey implements Node {\n  \"\"\"\n  The last time this authorization was used to perform an action\n  \"\"\"\n  accessedAt: DateTime\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The fingerprint for this PublicKey\n  \"\"\"\n  fingerprint: String\n  id: ID!\n\n  \"\"\"\n  Whether this PublicKey is read-only or not\n  \"\"\"\n  isReadOnly: Boolean!\n\n  \"\"\"\n  The public key string\n  \"\"\"\n  key: String!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n}\n\n\"\"\"\nThe connection type for PublicKey.\n\"\"\"\ntype PublicKeyConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PublicKeyEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PublicKey]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PublicKeyEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PublicKey\n}\n\n\"\"\"\nA repository pull request.\n\"\"\"\ntype PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {\n  \"\"\"\n  Reason that the conversation was locked.\n  \"\"\"\n  activeLockReason: LockReason\n\n  \"\"\"\n  The number of additions in this pull request.\n  \"\"\"\n  additions: Int!\n\n  \"\"\"\n  A list of Users assigned to this object.\n  \"\"\"\n  assignees(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n\n  \"\"\"\n  The actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the subject of the comment.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\n  Identifies the base Ref associated with the pull request.\n  \"\"\"\n  baseRef: Ref\n\n  \"\"\"\n  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.\n  \"\"\"\n  baseRefName: String!\n\n  \"\"\"\n  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.\n  \"\"\"\n  baseRefOid: GitObjectID!\n\n  \"\"\"\n  The repository associated with this pull request's base Ref.\n  \"\"\"\n  baseRepository: Repository\n\n  \"\"\"\n  The body as Markdown.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  The body rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  The body rendered to text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  The number of changed files in this pull request.\n  \"\"\"\n  changedFiles: Int!\n\n  \"\"\"\n  `true` if the pull request is closed\n  \"\"\"\n  closed: Boolean!\n\n  \"\"\"\n  Identifies the date and time when the object was closed.\n  \"\"\"\n  closedAt: DateTime\n\n  \"\"\"\n  A list of comments associated with the pull request.\n  \"\"\"\n  comments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): IssueCommentConnection!\n\n  \"\"\"\n  A list of commits present in this pull request's head branch not present in the base branch.\n  \"\"\"\n  commits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): PullRequestCommitConnection!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The number of deletions in this pull request.\n  \"\"\"\n  deletions: Int!\n\n  \"\"\"\n  The actor who edited this pull request's body.\n  \"\"\"\n  editor: Actor\n\n  \"\"\"\n  Lists the files changed within this pull request.\n  \"\"\"\n  files(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): PullRequestChangedFileConnection\n\n  \"\"\"\n  Identifies the head Ref associated with the pull request.\n  \"\"\"\n  headRef: Ref\n\n  \"\"\"\n  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.\n  \"\"\"\n  headRefName: String!\n\n  \"\"\"\n  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.\n  \"\"\"\n  headRefOid: GitObjectID!\n\n  \"\"\"\n  The repository associated with this pull request's head Ref.\n  \"\"\"\n  headRepository: Repository\n\n  \"\"\"\n  The owner of the repository associated with this pull request's head Ref.\n  \"\"\"\n  headRepositoryOwner: RepositoryOwner\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  The head and base repositories are different.\n  \"\"\"\n  isCrossRepository: Boolean!\n\n  \"\"\"\n  A list of labels associated with the object.\n  \"\"\"\n  labels(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): LabelConnection\n\n  \"\"\"\n  The moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  `true` if the pull request is locked\n  \"\"\"\n  locked: Boolean!\n\n  \"\"\"\n  Indicates whether maintainers can modify the pull request.\n  \"\"\"\n  maintainerCanModify: Boolean!\n\n  \"\"\"\n  The commit that was created when this pull request was merged.\n  \"\"\"\n  mergeCommit: Commit\n\n  \"\"\"\n  Whether or not the pull request can be merged based on the existence of merge conflicts.\n  \"\"\"\n  mergeable: MergeableState!\n\n  \"\"\"\n  Whether or not the pull request was merged.\n  \"\"\"\n  merged: Boolean!\n\n  \"\"\"\n  The date and time that the pull request was merged.\n  \"\"\"\n  mergedAt: DateTime\n\n  \"\"\"\n  The actor who merged the pull request.\n  \"\"\"\n  mergedBy: Actor\n\n  \"\"\"\n  Identifies the milestone associated with the pull request.\n  \"\"\"\n  milestone: Milestone\n\n  \"\"\"\n  Identifies the pull request number.\n  \"\"\"\n  number: Int!\n\n  \"\"\"\n  A list of Users that are participating in the Pull Request conversation.\n  \"\"\"\n  participants(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n\n  \"\"\"\n  The permalink to the pull request.\n  \"\"\"\n  permalink: URI!\n\n  \"\"\"\n  The commit that GitHub automatically generated to test if this pull request\n  could be merged. This field will not return a value if the pull request is\n  merged, or if the test merge commit is still being generated. See the\n  `mergeable` field for more details on the mergeability of the pull request.\n  \"\"\"\n  potentialMergeCommit: Commit\n\n  \"\"\"\n  List of project cards associated with this pull request.\n  \"\"\"\n  projectCards(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    A list of archived states to filter the cards by\n    \"\"\"\n    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ProjectCardConnection!\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  A list of reactions grouped by content left on the subject.\n  \"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"\n  A list of Reactions left on the Issue.\n  \"\"\"\n  reactions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Allows filtering Reactions by emoji.\n    \"\"\"\n    content: ReactionContent\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows specifying the order in which reactions are returned.\n    \"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path for this pull request.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP path for reverting this pull request.\n  \"\"\"\n  revertResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for reverting this pull request.\n  \"\"\"\n  revertUrl: URI!\n\n  \"\"\"\n  A list of review requests associated with the pull request.\n  \"\"\"\n  reviewRequests(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ReviewRequestConnection\n\n  \"\"\"\n  The list of all review threads for this pull request.\n  \"\"\"\n  reviewThreads(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): PullRequestReviewThreadConnection!\n\n  \"\"\"\n  A list of reviews associated with the pull request.\n  \"\"\"\n  reviews(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Filter by author of the review.\n    \"\"\"\n    author: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    A list of states to filter the reviews.\n    \"\"\"\n    states: [PullRequestReviewState!]\n  ): PullRequestReviewConnection\n\n  \"\"\"\n  Identifies the state of the pull request.\n  \"\"\"\n  state: PullRequestState!\n\n  \"\"\"\n  A list of reviewer suggestions based on commit history and past review comments.\n  \"\"\"\n  suggestedReviewers: [SuggestedReviewer]!\n\n  \"\"\"\n  A list of events, comments, commits, etc. associated with the pull request.\n  \"\"\"\n  timeline(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows filtering timeline events by a `since` timestamp.\n    \"\"\"\n    since: DateTime\n  ): PullRequestTimelineConnection!\n\n  \"\"\"\n  A list of events, comments, commits, etc. associated with the pull request.\n  \"\"\"\n  timelineItems(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Filter timeline items by type.\n    \"\"\"\n    itemTypes: [PullRequestTimelineItemsItemType!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter timeline items by a `since` timestamp.\n    \"\"\"\n    since: DateTime\n\n    \"\"\"\n    Skips the first _n_ elements in the list.\n    \"\"\"\n    skip: Int\n  ): PullRequestTimelineItemsConnection!\n\n  \"\"\"\n  Identifies the pull request title.\n  \"\"\"\n  title: String!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this pull request.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Whether or not the viewer can apply suggestion.\n  \"\"\"\n  viewerCanApplySuggestion: Boolean!\n\n  \"\"\"\n  Can user react to this subject\n  \"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState\n}\n\n\"\"\"\nA file changed in a pull request.\n\"\"\"\ntype PullRequestChangedFile {\n  \"\"\"\n  The number of additions to the file.\n  \"\"\"\n  additions: Int!\n\n  \"\"\"\n  The number of deletions to the file.\n  \"\"\"\n  deletions: Int!\n\n  \"\"\"\n  The path of the file.\n  \"\"\"\n  path: String!\n}\n\n\"\"\"\nThe connection type for PullRequestChangedFile.\n\"\"\"\ntype PullRequestChangedFileConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PullRequestChangedFileEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PullRequestChangedFile]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PullRequestChangedFileEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PullRequestChangedFile\n}\n\n\"\"\"\nRepresents a Git commit part of a pull request.\n\"\"\"\ntype PullRequestCommit implements Node & UniformResourceLocatable {\n  \"\"\"\n  The Git commit object\n  \"\"\"\n  commit: Commit!\n  id: ID!\n\n  \"\"\"\n  The pull request this commit belongs to\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  The HTTP path for this pull request commit\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this pull request commit\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nRepresents a commit comment thread part of a pull request.\n\"\"\"\ntype PullRequestCommitCommentThread implements Node & RepositoryNode {\n  \"\"\"\n  The comments that exist in this thread.\n  \"\"\"\n  comments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): CommitCommentConnection!\n\n  \"\"\"\n  The commit the comments were made on.\n  \"\"\"\n  commit: Commit!\n  id: ID!\n\n  \"\"\"\n  The file the comments were made on.\n  \"\"\"\n  path: String\n\n  \"\"\"\n  The position in the diff for the commit that the comment was made on.\n  \"\"\"\n  position: Int\n\n  \"\"\"\n  The pull request this commit comment thread belongs to\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n}\n\n\"\"\"\nThe connection type for PullRequestCommit.\n\"\"\"\ntype PullRequestCommitConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PullRequestCommitEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PullRequestCommit]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PullRequestCommitEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PullRequestCommit\n}\n\n\"\"\"\nThe connection type for PullRequest.\n\"\"\"\ntype PullRequestConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PullRequestEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PullRequest]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nThis aggregates pull requests opened by a user within one repository.\n\"\"\"\ntype PullRequestContributionsByRepository {\n  \"\"\"\n  The pull request contributions.\n  \"\"\"\n  contributions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for contributions returned from the connection.\n    \"\"\"\n    orderBy: ContributionOrder = {field: OCCURRED_AT, direction: DESC}\n  ): CreatedPullRequestContributionConnection!\n\n  \"\"\"\n  The repository in which the pull requests were opened.\n  \"\"\"\n  repository: Repository!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PullRequestEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PullRequest\n}\n\n\"\"\"\nWays in which lists of issues can be ordered upon return.\n\"\"\"\ninput PullRequestOrder {\n  \"\"\"\n  The direction in which to order pull requests by the specified field.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field in which to order pull requests by.\n  \"\"\"\n  field: PullRequestOrderField!\n}\n\n\"\"\"\nProperties by which pull_requests connections can be ordered.\n\"\"\"\nenum PullRequestOrderField {\n  \"\"\"\n  Order pull_requests by creation time\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order pull_requests by update time\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nThe possible PubSub channels for a pull request.\n\"\"\"\nenum PullRequestPubSubTopic {\n  \"\"\"\n  The channel ID for observing head ref updates.\n  \"\"\"\n  HEAD_REF\n\n  \"\"\"\n  The channel ID for marking an pull request as read.\n  \"\"\"\n  MARKASREAD\n\n  \"\"\"\n  The channel ID for observing pull request state updates.\n  \"\"\"\n  STATE\n\n  \"\"\"\n  The channel ID for updating items on the pull request timeline.\n  \"\"\"\n  TIMELINE\n\n  \"\"\"\n  The channel ID for observing pull request updates.\n  \"\"\"\n  UPDATED\n}\n\n\"\"\"\nA review object for a given pull request.\n\"\"\"\ntype PullRequestReview implements Comment & Deletable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {\n  \"\"\"\n  The actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the subject of the comment.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\n  Identifies the pull request review body.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  The body of this review rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  The body of this review rendered as plain text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  A list of review comments for the current pull request review.\n  \"\"\"\n  comments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): PullRequestReviewCommentConnection!\n\n  \"\"\"\n  Identifies the commit associated with this pull request review.\n  \"\"\"\n  commit: Commit\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The actor who edited the comment.\n  \"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  The moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  A list of teams that this review was made on behalf of.\n  \"\"\"\n  onBehalfOf(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): TeamConnection!\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  Identifies the pull request associated with this pull request review.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  A list of reactions grouped by content left on the subject.\n  \"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"\n  A list of Reactions left on the Issue.\n  \"\"\"\n  reactions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Allows filtering Reactions by emoji.\n    \"\"\"\n    content: ReactionContent\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows specifying the order in which reactions are returned.\n    \"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path permalink for this PullRequestReview.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the current state of the pull request review.\n  \"\"\"\n  state: PullRequestReviewState!\n\n  \"\"\"\n  Identifies when the Pull Request Review was submitted\n  \"\"\"\n  submittedAt: DateTime\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL permalink for this PullRequestReview.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Check if the current viewer can delete this object.\n  \"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"\n  Can user react to this subject\n  \"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"\nA review comment associated with a given repository pull request.\n\"\"\"\ntype PullRequestReviewComment implements Comment & Deletable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {\n  \"\"\"\n  The actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the subject of the comment.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\n  The comment body of this review comment.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  The comment body of this review comment rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\n  The comment body of this review comment rendered as plain text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  Identifies the commit associated with the comment.\n  \"\"\"\n  commit: Commit!\n\n  \"\"\"\n  Identifies when the comment was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The diff hunk to which the comment applies.\n  \"\"\"\n  diffHunk: String!\n\n  \"\"\"\n  Identifies when the comment was created in a draft state.\n  \"\"\"\n  draftedAt: DateTime!\n\n  \"\"\"\n  The actor who edited the comment.\n  \"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  Returns whether or not a comment has been minimized.\n  \"\"\"\n  isMinimized: Boolean!\n\n  \"\"\"\n  The moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  Returns why the comment was minimized.\n  \"\"\"\n  minimizedReason: String\n\n  \"\"\"\n  Identifies the original commit associated with the comment.\n  \"\"\"\n  originalCommit: Commit\n\n  \"\"\"\n  The original line index in the diff to which the comment applies.\n  \"\"\"\n  originalPosition: Int!\n\n  \"\"\"\n  Identifies when the comment body is outdated\n  \"\"\"\n  outdated: Boolean!\n\n  \"\"\"\n  The path to which the comment applies.\n  \"\"\"\n  path: String!\n\n  \"\"\"\n  The line index in the diff to which the comment applies.\n  \"\"\"\n  position: Int\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  The pull request associated with this review comment.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  The pull request review associated with this review comment.\n  \"\"\"\n  pullRequestReview: PullRequestReview\n\n  \"\"\"\n  A list of reactions grouped by content left on the subject.\n  \"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"\n  A list of Reactions left on the Issue.\n  \"\"\"\n  reactions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Allows filtering Reactions by emoji.\n    \"\"\"\n    content: ReactionContent\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows specifying the order in which reactions are returned.\n    \"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"\n  The comment this is a reply to.\n  \"\"\"\n  replyTo: PullRequestReviewComment\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The HTTP path permalink for this review comment.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the state of the comment.\n  \"\"\"\n  state: PullRequestReviewCommentState!\n\n  \"\"\"\n  Identifies when the comment was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL permalink for this review comment.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Check if the current viewer can delete this object.\n  \"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"\n  Check if the current viewer can minimize this object.\n  \"\"\"\n  viewerCanMinimize: Boolean!\n\n  \"\"\"\n  Can user react to this subject\n  \"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n\"\"\"\nThe connection type for PullRequestReviewComment.\n\"\"\"\ntype PullRequestReviewCommentConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PullRequestReviewCommentEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PullRequestReviewComment]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PullRequestReviewCommentEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PullRequestReviewComment\n}\n\n\"\"\"\nThe possible states of a pull request review comment.\n\"\"\"\nenum PullRequestReviewCommentState {\n  \"\"\"\n  A comment that is part of a pending review\n  \"\"\"\n  PENDING\n\n  \"\"\"\n  A comment that is part of a submitted review\n  \"\"\"\n  SUBMITTED\n}\n\n\"\"\"\nThe connection type for PullRequestReview.\n\"\"\"\ntype PullRequestReviewConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PullRequestReviewEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PullRequestReview]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nThis aggregates pull request reviews made by a user within one repository.\n\"\"\"\ntype PullRequestReviewContributionsByRepository {\n  \"\"\"\n  The pull request review contributions.\n  \"\"\"\n  contributions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for contributions returned from the connection.\n    \"\"\"\n    orderBy: ContributionOrder = {field: OCCURRED_AT, direction: DESC}\n  ): CreatedPullRequestReviewContributionConnection!\n\n  \"\"\"\n  The repository in which the pull request reviews were made.\n  \"\"\"\n  repository: Repository!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PullRequestReviewEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PullRequestReview\n}\n\n\"\"\"\nThe possible events to perform on a pull request review.\n\"\"\"\nenum PullRequestReviewEvent {\n  \"\"\"\n  Submit feedback and approve merging these changes.\n  \"\"\"\n  APPROVE\n\n  \"\"\"\n  Submit general feedback without explicit approval.\n  \"\"\"\n  COMMENT\n\n  \"\"\"\n  Dismiss review so it now longer effects merging.\n  \"\"\"\n  DISMISS\n\n  \"\"\"\n  Submit feedback that must be addressed before merging.\n  \"\"\"\n  REQUEST_CHANGES\n}\n\n\"\"\"\nThe possible states of a pull request review.\n\"\"\"\nenum PullRequestReviewState {\n  \"\"\"\n  A review allowing the pull request to merge.\n  \"\"\"\n  APPROVED\n\n  \"\"\"\n  A review blocking the pull request from merging.\n  \"\"\"\n  CHANGES_REQUESTED\n\n  \"\"\"\n  An informational review.\n  \"\"\"\n  COMMENTED\n\n  \"\"\"\n  A review that has been dismissed.\n  \"\"\"\n  DISMISSED\n\n  \"\"\"\n  A review that has not yet been submitted.\n  \"\"\"\n  PENDING\n}\n\n\"\"\"\nA threaded list of comments for a given pull request.\n\"\"\"\ntype PullRequestReviewThread implements Node {\n  \"\"\"\n  A list of pull request comments associated with the thread.\n  \"\"\"\n  comments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): PullRequestReviewCommentConnection!\n  id: ID!\n\n  \"\"\"\n  Whether this thread has been resolved\n  \"\"\"\n  isResolved: Boolean!\n\n  \"\"\"\n  Identifies the pull request associated with this thread.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  Identifies the repository associated with this thread.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The user who resolved this thread\n  \"\"\"\n  resolvedBy: User\n\n  \"\"\"\n  Whether or not the viewer can resolve this thread\n  \"\"\"\n  viewerCanResolve: Boolean!\n\n  \"\"\"\n  Whether or not the viewer can unresolve this thread\n  \"\"\"\n  viewerCanUnresolve: Boolean!\n}\n\n\"\"\"\nReview comment threads for a pull request review.\n\"\"\"\ntype PullRequestReviewThreadConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PullRequestReviewThreadEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PullRequestReviewThread]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PullRequestReviewThreadEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PullRequestReviewThread\n}\n\n\"\"\"\nRepresents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.\n\"\"\"\ntype PullRequestRevisionMarker {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The last commit the viewer has seen.\n  \"\"\"\n  lastSeenCommit: Commit!\n\n  \"\"\"\n  The pull request to which the marker belongs.\n  \"\"\"\n  pullRequest: PullRequest!\n}\n\n\"\"\"\nThe possible states of a pull request.\n\"\"\"\nenum PullRequestState {\n  \"\"\"\n  A pull request that has been closed without being merged.\n  \"\"\"\n  CLOSED\n\n  \"\"\"\n  A pull request that has been closed by being merged.\n  \"\"\"\n  MERGED\n\n  \"\"\"\n  A pull request that is still open.\n  \"\"\"\n  OPEN\n}\n\n\"\"\"\nThe connection type for PullRequestTimelineItem.\n\"\"\"\ntype PullRequestTimelineConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PullRequestTimelineItemEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PullRequestTimelineItem]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn item in an pull request timeline\n\"\"\"\nunion PullRequestTimelineItem = AssignedEvent | BaseRefForcePushedEvent | ClosedEvent | Commit | CommitCommentThread | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MergedEvent | MilestonedEvent | PullRequestReview | PullRequestReviewComment | PullRequestReviewThread | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PullRequestTimelineItemEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PullRequestTimelineItem\n}\n\n\"\"\"\nAn item in a pull request timeline\n\"\"\"\nunion PullRequestTimelineItems = AddedToProjectEvent | AssignedEvent | BaseRefChangedEvent | BaseRefForcePushedEvent | ClosedEvent | CommentDeletedEvent | ConvertedNoteToIssueEvent | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MentionedEvent | MergedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | PullRequestCommit | PullRequestCommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestRevisionMarker | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent\n\n\"\"\"\nThe connection type for PullRequestTimelineItems.\n\"\"\"\ntype PullRequestTimelineItemsConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PullRequestTimelineItemsEdge]\n\n  \"\"\"\n  Identifies the count of items after applying `before` and `after` filters.\n  \"\"\"\n  filteredCount: Int!\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PullRequestTimelineItems]\n\n  \"\"\"\n  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.\n  \"\"\"\n  pageCount: Int!\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n\n  \"\"\"\n  Identifies the date and time when the timeline was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PullRequestTimelineItemsEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PullRequestTimelineItems\n}\n\n\"\"\"\nThe possible item types found in a timeline.\n\"\"\"\nenum PullRequestTimelineItemsItemType {\n  \"\"\"\n  Represents a 'added_to_project' event on a given issue or pull request.\n  \"\"\"\n  ADDED_TO_PROJECT_EVENT\n\n  \"\"\"\n  Represents an 'assigned' event on any assignable object.\n  \"\"\"\n  ASSIGNED_EVENT\n\n  \"\"\"\n  Represents a 'base_ref_changed' event on a given issue or pull request.\n  \"\"\"\n  BASE_REF_CHANGED_EVENT\n\n  \"\"\"\n  Represents a 'base_ref_force_pushed' event on a given pull request.\n  \"\"\"\n  BASE_REF_FORCE_PUSHED_EVENT\n\n  \"\"\"\n  Represents a 'closed' event on any `Closable`.\n  \"\"\"\n  CLOSED_EVENT\n\n  \"\"\"\n  Represents a 'comment_deleted' event on a given issue or pull request.\n  \"\"\"\n  COMMENT_DELETED_EVENT\n\n  \"\"\"\n  Represents a 'converted_note_to_issue' event on a given issue or pull request.\n  \"\"\"\n  CONVERTED_NOTE_TO_ISSUE_EVENT\n\n  \"\"\"\n  Represents a mention made by one issue or pull request to another.\n  \"\"\"\n  CROSS_REFERENCED_EVENT\n\n  \"\"\"\n  Represents a 'demilestoned' event on a given issue or pull request.\n  \"\"\"\n  DEMILESTONED_EVENT\n\n  \"\"\"\n  Represents a 'deployed' event on a given pull request.\n  \"\"\"\n  DEPLOYED_EVENT\n\n  \"\"\"\n  Represents a 'deployment_environment_changed' event on a given pull request.\n  \"\"\"\n  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT\n\n  \"\"\"\n  Represents a 'head_ref_deleted' event on a given pull request.\n  \"\"\"\n  HEAD_REF_DELETED_EVENT\n\n  \"\"\"\n  Represents a 'head_ref_force_pushed' event on a given pull request.\n  \"\"\"\n  HEAD_REF_FORCE_PUSHED_EVENT\n\n  \"\"\"\n  Represents a 'head_ref_restored' event on a given pull request.\n  \"\"\"\n  HEAD_REF_RESTORED_EVENT\n\n  \"\"\"\n  Represents a comment on an Issue.\n  \"\"\"\n  ISSUE_COMMENT\n\n  \"\"\"\n  Represents a 'labeled' event on a given issue or pull request.\n  \"\"\"\n  LABELED_EVENT\n\n  \"\"\"\n  Represents a 'locked' event on a given issue or pull request.\n  \"\"\"\n  LOCKED_EVENT\n\n  \"\"\"\n  Represents a 'mentioned' event on a given issue or pull request.\n  \"\"\"\n  MENTIONED_EVENT\n\n  \"\"\"\n  Represents a 'merged' event on a given pull request.\n  \"\"\"\n  MERGED_EVENT\n\n  \"\"\"\n  Represents a 'milestoned' event on a given issue or pull request.\n  \"\"\"\n  MILESTONED_EVENT\n\n  \"\"\"\n  Represents a 'moved_columns_in_project' event on a given issue or pull request.\n  \"\"\"\n  MOVED_COLUMNS_IN_PROJECT_EVENT\n\n  \"\"\"\n  Represents a 'pinned' event on a given issue or pull request.\n  \"\"\"\n  PINNED_EVENT\n\n  \"\"\"\n  Represents a Git commit part of a pull request.\n  \"\"\"\n  PULL_REQUEST_COMMIT\n\n  \"\"\"\n  Represents a commit comment thread part of a pull request.\n  \"\"\"\n  PULL_REQUEST_COMMIT_COMMENT_THREAD\n\n  \"\"\"\n  A review object for a given pull request.\n  \"\"\"\n  PULL_REQUEST_REVIEW\n\n  \"\"\"\n  A threaded list of comments for a given pull request.\n  \"\"\"\n  PULL_REQUEST_REVIEW_THREAD\n\n  \"\"\"\n  Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.\n  \"\"\"\n  PULL_REQUEST_REVISION_MARKER\n\n  \"\"\"\n  Represents a 'referenced' event on a given `ReferencedSubject`.\n  \"\"\"\n  REFERENCED_EVENT\n\n  \"\"\"\n  Represents a 'removed_from_project' event on a given issue or pull request.\n  \"\"\"\n  REMOVED_FROM_PROJECT_EVENT\n\n  \"\"\"\n  Represents a 'renamed' event on a given issue or pull request\n  \"\"\"\n  RENAMED_TITLE_EVENT\n\n  \"\"\"\n  Represents a 'reopened' event on any `Closable`.\n  \"\"\"\n  REOPENED_EVENT\n\n  \"\"\"\n  Represents a 'review_dismissed' event on a given issue or pull request.\n  \"\"\"\n  REVIEW_DISMISSED_EVENT\n\n  \"\"\"\n  Represents an 'review_requested' event on a given pull request.\n  \"\"\"\n  REVIEW_REQUESTED_EVENT\n\n  \"\"\"\n  Represents an 'review_request_removed' event on a given pull request.\n  \"\"\"\n  REVIEW_REQUEST_REMOVED_EVENT\n\n  \"\"\"\n  Represents a 'subscribed' event on a given `Subscribable`.\n  \"\"\"\n  SUBSCRIBED_EVENT\n\n  \"\"\"\n  Represents a 'transferred' event on a given issue or pull request.\n  \"\"\"\n  TRANSFERRED_EVENT\n\n  \"\"\"\n  Represents an 'unassigned' event on any assignable object.\n  \"\"\"\n  UNASSIGNED_EVENT\n\n  \"\"\"\n  Represents an 'unlabeled' event on a given issue or pull request.\n  \"\"\"\n  UNLABELED_EVENT\n\n  \"\"\"\n  Represents an 'unlocked' event on a given issue or pull request.\n  \"\"\"\n  UNLOCKED_EVENT\n\n  \"\"\"\n  Represents an 'unpinned' event on a given issue or pull request.\n  \"\"\"\n  UNPINNED_EVENT\n\n  \"\"\"\n  Represents an 'unsubscribed' event on a given `Subscribable`.\n  \"\"\"\n  UNSUBSCRIBED_EVENT\n\n  \"\"\"\n  Represents a 'user_blocked' event on a given user.\n  \"\"\"\n  USER_BLOCKED_EVENT\n}\n\n\"\"\"\nA team or user who has the ability to push to a protected branch.\n\"\"\"\ntype PushAllowance implements Node {\n  \"\"\"\n  The actor that can push.\n  \"\"\"\n  actor: PushAllowanceActor\n\n  \"\"\"\n  Identifies the branch protection rule associated with the allowed user or team.\n  \"\"\"\n  branchProtectionRule: BranchProtectionRule\n  id: ID!\n}\n\n\"\"\"\nTypes that can be an actor.\n\"\"\"\nunion PushAllowanceActor = Team | User\n\n\"\"\"\nThe connection type for PushAllowance.\n\"\"\"\ntype PushAllowanceConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [PushAllowanceEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [PushAllowance]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype PushAllowanceEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: PushAllowance\n}\n\n\"\"\"\nThe query root of GitHub's GraphQL interface.\n\"\"\"\ntype Query {\n  \"\"\"\n  Look up a code of conduct by its key\n  \"\"\"\n  codeOfConduct(\n    \"\"\"\n    The code of conduct's key\n    \"\"\"\n    key: String!\n  ): CodeOfConduct\n\n  \"\"\"\n  Look up a code of conduct by its key\n  \"\"\"\n  codesOfConduct: [CodeOfConduct]\n\n  \"\"\"\n  Look up an open source license by its key\n  \"\"\"\n  license(\n    \"\"\"\n    The license's downcased SPDX ID\n    \"\"\"\n    key: String!\n  ): License\n\n  \"\"\"\n  Return a list of known open source licenses\n  \"\"\"\n  licenses: [License]!\n\n  \"\"\"\n  Get alphabetically sorted list of Marketplace categories\n  \"\"\"\n  marketplaceCategories(\n    \"\"\"\n    Exclude categories with no listings.\n    \"\"\"\n    excludeEmpty: Boolean\n\n    \"\"\"\n    Returns top level categories only, excluding any subcategories.\n    \"\"\"\n    excludeSubcategories: Boolean\n\n    \"\"\"\n    Return only the specified categories.\n    \"\"\"\n    includeCategories: [String!]\n  ): [MarketplaceCategory!]!\n\n  \"\"\"\n  Look up a Marketplace category by its slug.\n  \"\"\"\n  marketplaceCategory(\n    \"\"\"\n    The URL slug of the category.\n    \"\"\"\n    slug: String!\n\n    \"\"\"\n    Also check topic aliases for the category slug\n    \"\"\"\n    useTopicAliases: Boolean\n  ): MarketplaceCategory\n\n  \"\"\"\n  Look up a single Marketplace listing\n  \"\"\"\n  marketplaceListing(\n    \"\"\"\n    Select the listing that matches this slug. It's the short name of the listing used in its URL.\n    \"\"\"\n    slug: String!\n  ): MarketplaceListing\n\n  \"\"\"\n  Look up Marketplace listings\n  \"\"\"\n  marketplaceListings(\n    \"\"\"\n    Select listings that can be administered by the specified user.\n    \"\"\"\n    adminId: ID\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Select listings visible to the viewer even if they are not approved. If omitted or\n    false, only approved listings will be returned.\n    \"\"\"\n    allStates: Boolean\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Select only listings with the given category.\n    \"\"\"\n    categorySlug: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Select listings for products owned by the specified organization.\n    \"\"\"\n    organizationId: ID\n\n    \"\"\"\n    Select only listings where the primary category matches the given category slug.\n    \"\"\"\n    primaryCategoryOnly: Boolean = false\n\n    \"\"\"\n    Select the listings with these slugs, if they are visible to the viewer.\n    \"\"\"\n    slugs: [String]\n\n    \"\"\"\n    Also check topic aliases for the category slug\n    \"\"\"\n    useTopicAliases: Boolean\n\n    \"\"\"\n    Select listings to which user has admin access. If omitted, listings visible to the\n    viewer are returned.\n    \"\"\"\n    viewerCanAdmin: Boolean\n\n    \"\"\"\n    Select only listings that offer a free trial.\n    \"\"\"\n    withFreeTrialsOnly: Boolean = false\n  ): MarketplaceListingConnection!\n\n  \"\"\"\n  Return information about the GitHub instance\n  \"\"\"\n  meta: GitHubMetadata!\n\n  \"\"\"\n  Fetches an object given its ID.\n  \"\"\"\n  node(\n    \"\"\"\n    ID of the object.\n    \"\"\"\n    id: ID!\n  ): Node\n\n  \"\"\"\n  Lookup nodes by a list of IDs.\n  \"\"\"\n  nodes(\n    \"\"\"\n    The list of node IDs.\n    \"\"\"\n    ids: [ID!]!\n  ): [Node]!\n\n  \"\"\"\n  Lookup a organization by login.\n  \"\"\"\n  organization(\n    \"\"\"\n    The organization's login.\n    \"\"\"\n    login: String!\n  ): Organization\n\n  \"\"\"\n  The client's rate limit information.\n  \"\"\"\n  rateLimit(\n    \"\"\"\n    If true, calculate the cost for the query without evaluating it\n    \"\"\"\n    dryRun: Boolean = false\n  ): RateLimit\n\n  \"\"\"\n  Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object\n  \"\"\"\n  relay: Query!\n\n  \"\"\"\n  Lookup a given repository by the owner and repository name.\n  \"\"\"\n  repository(\n    \"\"\"\n    The name of the repository\n    \"\"\"\n    name: String!\n\n    \"\"\"\n    The login field of a user or organization\n    \"\"\"\n    owner: String!\n  ): Repository\n\n  \"\"\"\n  Lookup a repository owner (ie. either a User or an Organization) by login.\n  \"\"\"\n  repositoryOwner(\n    \"\"\"\n    The username to lookup the owner by.\n    \"\"\"\n    login: String!\n  ): RepositoryOwner\n\n  \"\"\"\n  Lookup resource by a URL.\n  \"\"\"\n  resource(\n    \"\"\"\n    The URL.\n    \"\"\"\n    url: URI!\n  ): UniformResourceLocatable\n\n  \"\"\"\n  Perform a search across resources.\n  \"\"\"\n  search(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    The search string to look for.\n    \"\"\"\n    query: String!\n\n    \"\"\"\n    The types of search items to search within.\n    \"\"\"\n    type: SearchType!\n  ): SearchResultItemConnection!\n\n  \"\"\"\n  GitHub Security Advisories\n  \"\"\"\n  securityAdvisories(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Filter advisories by identifier, e.g. GHSA or CVE.\n    \"\"\"\n    identifier: SecurityAdvisoryIdentifierFilter\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for the returned topics.\n    \"\"\"\n    orderBy: SecurityAdvisoryOrder = {field: UPDATED_AT, direction: DESC}\n\n    \"\"\"\n    Filter advisories to those published since a time in the past.\n    \"\"\"\n    publishedSince: DateTime\n\n    \"\"\"\n    Filter advisories to those updated since a time in the past.\n    \"\"\"\n    updatedSince: DateTime\n  ): SecurityAdvisoryConnection!\n\n  \"\"\"\n  Fetch a Security Advisory by its GHSA ID\n  \"\"\"\n  securityAdvisory(\n    \"\"\"\n    GitHub Security Advisory ID.\n    \"\"\"\n    ghsaId: String!\n  ): SecurityAdvisory\n\n  \"\"\"\n  Software Vulnerabilities documented by GitHub Security Advisories\n  \"\"\"\n  securityVulnerabilities(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    An ecosystem to filter vulnerabilities by.\n    \"\"\"\n    ecosystem: SecurityAdvisoryEcosystem\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for the returned topics.\n    \"\"\"\n    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}\n\n    \"\"\"\n    A package name to filter vulnerabilities by.\n    \"\"\"\n    package: String\n\n    \"\"\"\n    A list of severities to filter vulnerabilities by.\n    \"\"\"\n    severities: [SecurityAdvisorySeverity!]\n  ): SecurityVulnerabilityConnection!\n\n  \"\"\"\n  Look up a topic by name.\n  \"\"\"\n  topic(\n    \"\"\"\n    The topic's name.\n    \"\"\"\n    name: String!\n  ): Topic\n\n  \"\"\"\n  Lookup a user by login.\n  \"\"\"\n  user(\n    \"\"\"\n    The user's login.\n    \"\"\"\n    login: String!\n  ): User\n\n  \"\"\"\n  The currently authenticated user.\n  \"\"\"\n  viewer: User!\n}\n\n\"\"\"\nRepresents the client's rate limit.\n\"\"\"\ntype RateLimit {\n  \"\"\"\n  The point cost for the current query counting against the rate limit.\n  \"\"\"\n  cost: Int!\n\n  \"\"\"\n  The maximum number of points the client is permitted to consume in a 60 minute window.\n  \"\"\"\n  limit: Int!\n\n  \"\"\"\n  The maximum number of nodes this query may return\n  \"\"\"\n  nodeCount: Int!\n\n  \"\"\"\n  The number of points remaining in the current rate limit window.\n  \"\"\"\n  remaining: Int!\n\n  \"\"\"\n  The time at which the current rate limit window resets in UTC epoch seconds.\n  \"\"\"\n  resetAt: DateTime!\n}\n\n\"\"\"\nRepresents a subject that can be reacted on.\n\"\"\"\ninterface Reactable {\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n\n  \"\"\"\n  A list of reactions grouped by content left on the subject.\n  \"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"\n  A list of Reactions left on the Issue.\n  \"\"\"\n  reactions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Allows filtering Reactions by emoji.\n    \"\"\"\n    content: ReactionContent\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows specifying the order in which reactions are returned.\n    \"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"\n  Can user react to this subject\n  \"\"\"\n  viewerCanReact: Boolean!\n}\n\n\"\"\"\nThe connection type for User.\n\"\"\"\ntype ReactingUserConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ReactingUserEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [User]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nRepresents a user that's made a reaction.\n\"\"\"\ntype ReactingUserEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n  node: User!\n\n  \"\"\"\n  The moment when the user made the reaction.\n  \"\"\"\n  reactedAt: DateTime!\n}\n\n\"\"\"\nAn emoji reaction to a particular piece of content.\n\"\"\"\ntype Reaction implements Node {\n  \"\"\"\n  Identifies the emoji reaction.\n  \"\"\"\n  content: ReactionContent!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n\n  \"\"\"\n  The reactable piece of content\n  \"\"\"\n  reactable: Reactable!\n\n  \"\"\"\n  Identifies the user who created this reaction.\n  \"\"\"\n  user: User\n}\n\n\"\"\"\nA list of reactions that have been left on the subject.\n\"\"\"\ntype ReactionConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ReactionEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Reaction]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n\n  \"\"\"\n  Whether or not the authenticated user has left a reaction on the subject.\n  \"\"\"\n  viewerHasReacted: Boolean!\n}\n\n\"\"\"\nEmojis that can be attached to Issues, Pull Requests and Comments.\n\"\"\"\nenum ReactionContent {\n  \"\"\"\n  Represents the 😕 emoji.\n  \"\"\"\n  CONFUSED\n\n  \"\"\"\n  Represents the 👀 emoji.\n  \"\"\"\n  EYES\n\n  \"\"\"\n  Represents the ❤️ emoji.\n  \"\"\"\n  HEART\n\n  \"\"\"\n  Represents the 🎉 emoji.\n  \"\"\"\n  HOORAY\n\n  \"\"\"\n  Represents the 😄 emoji.\n  \"\"\"\n  LAUGH\n\n  \"\"\"\n  Represents the 🚀 emoji.\n  \"\"\"\n  ROCKET\n\n  \"\"\"\n  Represents the 👎 emoji.\n  \"\"\"\n  THUMBS_DOWN\n\n  \"\"\"\n  Represents the 👍 emoji.\n  \"\"\"\n  THUMBS_UP\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ReactionEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Reaction\n}\n\n\"\"\"\nA group of emoji reactions to a particular piece of content.\n\"\"\"\ntype ReactionGroup {\n  \"\"\"\n  Identifies the emoji reaction.\n  \"\"\"\n  content: ReactionContent!\n\n  \"\"\"\n  Identifies when the reaction was created.\n  \"\"\"\n  createdAt: DateTime\n\n  \"\"\"\n  The subject that was reacted to.\n  \"\"\"\n  subject: Reactable!\n\n  \"\"\"\n  Users who have reacted to the reaction subject with the emotion represented by this reaction group\n  \"\"\"\n  users(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): ReactingUserConnection!\n\n  \"\"\"\n  Whether or not the authenticated user has left a reaction on the subject.\n  \"\"\"\n  viewerHasReacted: Boolean!\n}\n\n\"\"\"\nWays in which lists of reactions can be ordered upon return.\n\"\"\"\ninput ReactionOrder {\n  \"\"\"\n  The direction in which to order reactions by the specified field.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field in which to order reactions by.\n  \"\"\"\n  field: ReactionOrderField!\n}\n\n\"\"\"\nA list of fields that reactions can be ordered by.\n\"\"\"\nenum ReactionOrderField {\n  \"\"\"\n  Allows ordering a list of reactions by when they were created.\n  \"\"\"\n  CREATED_AT\n}\n\n\"\"\"\nRepresents a Git reference.\n\"\"\"\ntype Ref implements Node {\n  \"\"\"\n  A list of pull requests with this ref as the head ref.\n  \"\"\"\n  associatedPullRequests(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    The base ref name to filter the pull requests by.\n    \"\"\"\n    baseRefName: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    The head ref name to filter the pull requests by.\n    \"\"\"\n    headRefName: String\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for pull requests returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the pull requests by.\n    \"\"\"\n    states: [PullRequestState!]\n  ): PullRequestConnection!\n  id: ID!\n\n  \"\"\"\n  The ref name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The ref's prefix, such as `refs/heads/` or `refs/tags/`.\n  \"\"\"\n  prefix: String!\n\n  \"\"\"\n  The repository the ref belongs to.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  The object the ref points to.\n  \"\"\"\n  target: GitObject!\n}\n\n\"\"\"\nThe connection type for Ref.\n\"\"\"\ntype RefConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [RefEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Ref]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype RefEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Ref\n}\n\n\"\"\"\nWays in which lists of git refs can be ordered upon return.\n\"\"\"\ninput RefOrder {\n  \"\"\"\n  The direction in which to order refs by the specified field.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field in which to order refs by.\n  \"\"\"\n  field: RefOrderField!\n}\n\n\"\"\"\nProperties by which ref connections can be ordered.\n\"\"\"\nenum RefOrderField {\n  \"\"\"\n  Order refs by their alphanumeric name\n  \"\"\"\n  ALPHABETICAL\n\n  \"\"\"\n  Order refs by underlying commit date if the ref prefix is refs/tags/\n  \"\"\"\n  TAG_COMMIT_DATE\n}\n\n\"\"\"\nRepresents a 'referenced' event on a given `ReferencedSubject`.\n\"\"\"\ntype ReferencedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the commit associated with the 'referenced' event.\n  \"\"\"\n  commit: Commit\n\n  \"\"\"\n  Identifies the repository associated with the 'referenced' event.\n  \"\"\"\n  commitRepository: Repository!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Reference originated in a different repository.\n  \"\"\"\n  isCrossRepository: Boolean!\n\n  \"\"\"\n  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.\n  \"\"\"\n  isDirectReference: Boolean!\n\n  \"\"\"\n  Object referenced by event.\n  \"\"\"\n  subject: ReferencedSubject!\n}\n\n\"\"\"\nAny referencable object\n\"\"\"\nunion ReferencedSubject = Issue | PullRequest\n\n\"\"\"\nRepresents an owner of a registry package.\n\"\"\"\ninterface RegistryPackageOwner {\n  id: ID!\n}\n\n\"\"\"\nRepresents an interface to search packages on an object.\n\"\"\"\ninterface RegistryPackageSearch {\n  id: ID!\n}\n\n\"\"\"\nA release contains the content for a release.\n\"\"\"\ntype Release implements Node & UniformResourceLocatable {\n  \"\"\"\n  The author of the release\n  \"\"\"\n  author: User\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the description of the release.\n  \"\"\"\n  description: String\n  id: ID!\n\n  \"\"\"\n  Whether or not the release is a draft\n  \"\"\"\n  isDraft: Boolean!\n\n  \"\"\"\n  Whether or not the release is a prerelease\n  \"\"\"\n  isPrerelease: Boolean!\n\n  \"\"\"\n  Identifies the title of the release.\n  \"\"\"\n  name: String\n\n  \"\"\"\n  Identifies the date and time when the release was created.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  List of releases assets which are dependent on this release.\n  \"\"\"\n  releaseAssets(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    A list of names to filter the assets by.\n    \"\"\"\n    name: String\n  ): ReleaseAssetConnection!\n\n  \"\"\"\n  The HTTP path for this issue\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The Git tag the release points to\n  \"\"\"\n  tag: Ref\n\n  \"\"\"\n  The name of the release's Git tag\n  \"\"\"\n  tagName: String!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this issue\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nA release asset contains the content for a release asset.\n\"\"\"\ntype ReleaseAsset implements Node {\n  \"\"\"\n  The asset's content-type\n  \"\"\"\n  contentType: String!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The number of times this asset was downloaded\n  \"\"\"\n  downloadCount: Int!\n\n  \"\"\"\n  Identifies the URL where you can download the release asset via the browser.\n  \"\"\"\n  downloadUrl: URI!\n  id: ID!\n\n  \"\"\"\n  Identifies the title of the release asset.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  Release that the asset is associated with\n  \"\"\"\n  release: Release\n\n  \"\"\"\n  The size (in bytes) of the asset\n  \"\"\"\n  size: Int!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The user that performed the upload\n  \"\"\"\n  uploadedBy: User!\n\n  \"\"\"\n  Identifies the URL of the release asset.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nThe connection type for ReleaseAsset.\n\"\"\"\ntype ReleaseAssetConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ReleaseAssetEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [ReleaseAsset]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ReleaseAssetEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: ReleaseAsset\n}\n\n\"\"\"\nThe connection type for Release.\n\"\"\"\ntype ReleaseConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ReleaseEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Release]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ReleaseEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Release\n}\n\n\"\"\"\nWays in which lists of releases can be ordered upon return.\n\"\"\"\ninput ReleaseOrder {\n  \"\"\"\n  The direction in which to order releases by the specified field.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field in which to order releases by.\n  \"\"\"\n  field: ReleaseOrderField!\n}\n\n\"\"\"\nProperties by which release connections can be ordered.\n\"\"\"\nenum ReleaseOrderField {\n  \"\"\"\n  Order releases by creation time\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order releases alphabetically by name\n  \"\"\"\n  NAME\n}\n\n\"\"\"\nAutogenerated input type of RemoveAssigneesFromAssignable\n\"\"\"\ninput RemoveAssigneesFromAssignableInput {\n  \"\"\"\n  The id of the assignable object to remove assignees from.\n  \"\"\"\n  assignableId: ID!\n\n  \"\"\"\n  The id of users to remove as assignees.\n  \"\"\"\n  assigneeIds: [ID!]!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated return type of RemoveAssigneesFromAssignable\n\"\"\"\ntype RemoveAssigneesFromAssignablePayload {\n  \"\"\"\n  The item that was unassigned.\n  \"\"\"\n  assignable: Assignable\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated input type of RemoveLabelsFromLabelable\n\"\"\"\ninput RemoveLabelsFromLabelableInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ids of labels to remove.\n  \"\"\"\n  labelIds: [ID!]!\n\n  \"\"\"\n  The id of the Labelable to remove labels from.\n  \"\"\"\n  labelableId: ID!\n}\n\n\"\"\"\nAutogenerated return type of RemoveLabelsFromLabelable\n\"\"\"\ntype RemoveLabelsFromLabelablePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Labelable the labels were removed from.\n  \"\"\"\n  labelable: Labelable\n}\n\n\"\"\"\nAutogenerated input type of RemoveOutsideCollaborator\n\"\"\"\ninput RemoveOutsideCollaboratorInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the organization to remove the outside collaborator from.\n  \"\"\"\n  organizationId: ID!\n\n  \"\"\"\n  The ID of the outside collaborator to remove.\n  \"\"\"\n  userId: ID!\n}\n\n\"\"\"\nAutogenerated return type of RemoveOutsideCollaborator\n\"\"\"\ntype RemoveOutsideCollaboratorPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The user that was removed as an outside collaborator.\n  \"\"\"\n  removedUser: User\n}\n\n\"\"\"\nAutogenerated input type of RemoveReaction\n\"\"\"\ninput RemoveReactionInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of the emoji reaction to remove.\n  \"\"\"\n  content: ReactionContent!\n\n  \"\"\"\n  The Node ID of the subject to modify.\n  \"\"\"\n  subjectId: ID!\n}\n\n\"\"\"\nAutogenerated return type of RemoveReaction\n\"\"\"\ntype RemoveReactionPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The reaction object.\n  \"\"\"\n  reaction: Reaction\n\n  \"\"\"\n  The reactable subject.\n  \"\"\"\n  subject: Reactable\n}\n\n\"\"\"\nAutogenerated input type of RemoveStar\n\"\"\"\ninput RemoveStarInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Starrable ID to unstar.\n  \"\"\"\n  starrableId: ID!\n}\n\n\"\"\"\nAutogenerated return type of RemoveStar\n\"\"\"\ntype RemoveStarPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The starrable.\n  \"\"\"\n  starrable: Starrable\n}\n\n\"\"\"\nRepresents a 'removed_from_project' event on a given issue or pull request.\n\"\"\"\ntype RemovedFromProjectEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n}\n\n\"\"\"\nRepresents a 'renamed' event on a given issue or pull request\n\"\"\"\ntype RenamedTitleEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the current title of the issue or pull request.\n  \"\"\"\n  currentTitle: String!\n  id: ID!\n\n  \"\"\"\n  Identifies the previous title of the issue or pull request.\n  \"\"\"\n  previousTitle: String!\n\n  \"\"\"\n  Subject that was renamed.\n  \"\"\"\n  subject: RenamedTitleSubject!\n}\n\n\"\"\"\nAn object which has a renamable title\n\"\"\"\nunion RenamedTitleSubject = Issue | PullRequest\n\n\"\"\"\nAutogenerated input type of ReopenIssue\n\"\"\"\ninput ReopenIssueInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  ID of the issue to be opened.\n  \"\"\"\n  issueId: ID!\n}\n\n\"\"\"\nAutogenerated return type of ReopenIssue\n\"\"\"\ntype ReopenIssuePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The issue that was opened.\n  \"\"\"\n  issue: Issue\n}\n\n\"\"\"\nAutogenerated input type of ReopenPullRequest\n\"\"\"\ninput ReopenPullRequestInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  ID of the pull request to be reopened.\n  \"\"\"\n  pullRequestId: ID!\n}\n\n\"\"\"\nAutogenerated return type of ReopenPullRequest\n\"\"\"\ntype ReopenPullRequestPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The pull request that was reopened.\n  \"\"\"\n  pullRequest: PullRequest\n}\n\n\"\"\"\nRepresents a 'reopened' event on any `Closable`.\n\"\"\"\ntype ReopenedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Object that was reopened.\n  \"\"\"\n  closable: Closable!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n}\n\n\"\"\"\nThe reasons a piece of content can be reported or minimized.\n\"\"\"\nenum ReportedContentClassifiers {\n  \"\"\"\n  An abusive or harassing piece of content\n  \"\"\"\n  ABUSE\n\n  \"\"\"\n  An irrelevant piece of content\n  \"\"\"\n  OFF_TOPIC\n\n  \"\"\"\n  An outdated piece of content\n  \"\"\"\n  OUTDATED\n\n  \"\"\"\n  The content has been resolved\n  \"\"\"\n  RESOLVED\n\n  \"\"\"\n  A spammy piece of content\n  \"\"\"\n  SPAM\n}\n\n\"\"\"\nA repository contains the content for a project.\n\"\"\"\ntype Repository implements Node & ProjectOwner & RegistryPackageOwner & RepositoryInfo & Starrable & Subscribable & UniformResourceLocatable {\n  \"\"\"\n  A list of users that can be assigned to issues in this repository.\n  \"\"\"\n  assignableUsers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n\n  \"\"\"\n  A list of branch protection rules for this repository.\n  \"\"\"\n  branchProtectionRules(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): BranchProtectionRuleConnection!\n\n  \"\"\"\n  Returns the code of conduct for this repository\n  \"\"\"\n  codeOfConduct: CodeOfConduct\n\n  \"\"\"\n  A list of collaborators associated with the repository.\n  \"\"\"\n  collaborators(\n    \"\"\"\n    Collaborators affiliation level with a repository.\n    \"\"\"\n    affiliation: CollaboratorAffiliation\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): RepositoryCollaboratorConnection\n\n  \"\"\"\n  A list of commit comments associated with the repository.\n  \"\"\"\n  commitComments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): CommitCommentConnection!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The Ref associated with the repository's default branch.\n  \"\"\"\n  defaultBranchRef: Ref\n\n  \"\"\"\n  A list of deploy keys that are on this repository.\n  \"\"\"\n  deployKeys(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): DeployKeyConnection!\n\n  \"\"\"\n  Deployments associated with the repository\n  \"\"\"\n  deployments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Environments to list deployments for\n    \"\"\"\n    environments: [String!]\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for deployments returned from the connection.\n    \"\"\"\n    orderBy: DeploymentOrder = {field: CREATED_AT, direction: ASC}\n  ): DeploymentConnection!\n\n  \"\"\"\n  The description of the repository.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  The description of the repository rendered to HTML.\n  \"\"\"\n  descriptionHTML: HTML!\n\n  \"\"\"\n  The number of kilobytes this repository occupies on disk.\n  \"\"\"\n  diskUsage: Int\n\n  \"\"\"\n  Returns how many forks there are of this repository in the whole network.\n  \"\"\"\n  forkCount: Int!\n\n  \"\"\"\n  A list of direct forked repositories.\n  \"\"\"\n  forks(\n    \"\"\"\n    Array of viewer's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    current viewer owns.\n    \"\"\"\n    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    Array of owner's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    organization or user being viewed owns.\n    \"\"\"\n    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection!\n\n  \"\"\"\n  Indicates if the repository has issues feature enabled.\n  \"\"\"\n  hasIssuesEnabled: Boolean!\n\n  \"\"\"\n  Indicates if the repository has wiki feature enabled.\n  \"\"\"\n  hasWikiEnabled: Boolean!\n\n  \"\"\"\n  The repository's URL.\n  \"\"\"\n  homepageUrl: URI\n  id: ID!\n\n  \"\"\"\n  Indicates if the repository is unmaintained.\n  \"\"\"\n  isArchived: Boolean!\n\n  \"\"\"\n  Returns whether or not this repository disabled.\n  \"\"\"\n  isDisabled: Boolean!\n\n  \"\"\"\n  Identifies if the repository is a fork.\n  \"\"\"\n  isFork: Boolean!\n\n  \"\"\"\n  Indicates if the repository has been locked or not.\n  \"\"\"\n  isLocked: Boolean!\n\n  \"\"\"\n  Identifies if the repository is a mirror.\n  \"\"\"\n  isMirror: Boolean!\n\n  \"\"\"\n  Identifies if the repository is private.\n  \"\"\"\n  isPrivate: Boolean!\n\n  \"\"\"\n  Returns a single issue from the current repository by number.\n  \"\"\"\n  issue(\n    \"\"\"\n    The number for the issue to be returned.\n    \"\"\"\n    number: Int!\n  ): Issue\n\n  \"\"\"\n  Returns a single issue-like object from the current repository by number.\n  \"\"\"\n  issueOrPullRequest(\n    \"\"\"\n    The number for the issue to be returned.\n    \"\"\"\n    number: Int!\n  ): IssueOrPullRequest\n\n  \"\"\"\n  A list of issues that have been opened in the repository.\n  \"\"\"\n  issues(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Filtering options for issues returned from the connection.\n    \"\"\"\n    filterBy: IssueFilters\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for issues returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the issues by.\n    \"\"\"\n    states: [IssueState!]\n  ): IssueConnection!\n\n  \"\"\"\n  Returns a single label by name\n  \"\"\"\n  label(\n    \"\"\"\n    Label name\n    \"\"\"\n    name: String!\n  ): Label\n\n  \"\"\"\n  A list of labels associated with the repository.\n  \"\"\"\n  labels(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    If provided, searches labels by name and description.\n    \"\"\"\n    query: String\n  ): LabelConnection\n\n  \"\"\"\n  A list containing a breakdown of the language composition of the repository.\n  \"\"\"\n  languages(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for connection\n    \"\"\"\n    orderBy: LanguageOrder\n  ): LanguageConnection\n\n  \"\"\"\n  The license associated with the repository\n  \"\"\"\n  licenseInfo: License\n\n  \"\"\"\n  The reason the repository has been locked.\n  \"\"\"\n  lockReason: RepositoryLockReason\n\n  \"\"\"\n  A list of Users that can be mentioned in the context of the repository.\n  \"\"\"\n  mentionableUsers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n\n  \"\"\"\n  Whether or not PRs are merged with a merge commit on this repository.\n  \"\"\"\n  mergeCommitAllowed: Boolean!\n\n  \"\"\"\n  Returns a single milestone from the current repository by number.\n  \"\"\"\n  milestone(\n    \"\"\"\n    The number for the milestone to be returned.\n    \"\"\"\n    number: Int!\n  ): Milestone\n\n  \"\"\"\n  A list of milestones associated with the repository.\n  \"\"\"\n  milestones(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for milestones.\n    \"\"\"\n    orderBy: MilestoneOrder\n\n    \"\"\"\n    Filter by the state of the milestones.\n    \"\"\"\n    states: [MilestoneState!]\n  ): MilestoneConnection\n\n  \"\"\"\n  The repository's original mirror URL.\n  \"\"\"\n  mirrorUrl: URI\n\n  \"\"\"\n  The name of the repository.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The repository's name with owner.\n  \"\"\"\n  nameWithOwner: String!\n\n  \"\"\"\n  A Git object in the repository\n  \"\"\"\n  object(\n    \"\"\"\n    A Git revision expression suitable for rev-parse\n    \"\"\"\n    expression: String\n\n    \"\"\"\n    The Git object ID\n    \"\"\"\n    oid: GitObjectID\n  ): GitObject\n\n  \"\"\"\n  The User owner of the repository.\n  \"\"\"\n  owner: RepositoryOwner!\n\n  \"\"\"\n  The repository parent, if this is a fork.\n  \"\"\"\n  parent: Repository\n\n  \"\"\"\n  The primary language of the repository's code.\n  \"\"\"\n  primaryLanguage: Language\n\n  \"\"\"\n  Find project by number.\n  \"\"\"\n  project(\n    \"\"\"\n    The project number to find.\n    \"\"\"\n    number: Int!\n  ): Project\n\n  \"\"\"\n  A list of projects under the owner.\n  \"\"\"\n  projects(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for projects returned from the connection\n    \"\"\"\n    orderBy: ProjectOrder\n\n    \"\"\"\n    Query to search projects by, currently only searching by name.\n    \"\"\"\n    search: String\n\n    \"\"\"\n    A list of states to filter the projects by.\n    \"\"\"\n    states: [ProjectState!]\n  ): ProjectConnection!\n\n  \"\"\"\n  The HTTP path listing the repository's projects\n  \"\"\"\n  projectsResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL listing the repository's projects\n  \"\"\"\n  projectsUrl: URI!\n\n  \"\"\"\n  Returns a single pull request from the current repository by number.\n  \"\"\"\n  pullRequest(\n    \"\"\"\n    The number for the pull request to be returned.\n    \"\"\"\n    number: Int!\n  ): PullRequest\n\n  \"\"\"\n  A list of pull requests that have been opened in the repository.\n  \"\"\"\n  pullRequests(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    The base ref name to filter the pull requests by.\n    \"\"\"\n    baseRefName: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    The head ref name to filter the pull requests by.\n    \"\"\"\n    headRefName: String\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for pull requests returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the pull requests by.\n    \"\"\"\n    states: [PullRequestState!]\n  ): PullRequestConnection!\n\n  \"\"\"\n  Identifies when the repository was last pushed to.\n  \"\"\"\n  pushedAt: DateTime\n\n  \"\"\"\n  Whether or not rebase-merging is enabled on this repository.\n  \"\"\"\n  rebaseMergeAllowed: Boolean!\n\n  \"\"\"\n  Fetch a given ref from the repository\n  \"\"\"\n  ref(\n    \"\"\"\n    The ref to retrieve. Fully qualified matches are checked in order\n    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).\n    \"\"\"\n    qualifiedName: String!\n  ): Ref\n\n  \"\"\"\n  Fetch a list of refs from the repository\n  \"\"\"\n  refs(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    DEPRECATED: use orderBy. The ordering direction.\n    \"\"\"\n    direction: OrderDirection\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for refs returned from the connection.\n    \"\"\"\n    orderBy: RefOrder\n\n    \"\"\"\n    A ref name prefix like `refs/heads/`, `refs/tags/`, etc.\n    \"\"\"\n    refPrefix: String!\n  ): RefConnection\n\n  \"\"\"\n  Lookup a single release given various criteria.\n  \"\"\"\n  release(\n    \"\"\"\n    The name of the Tag the Release was created from\n    \"\"\"\n    tagName: String!\n  ): Release\n\n  \"\"\"\n  List of releases which are dependent on this repository.\n  \"\"\"\n  releases(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for connection\n    \"\"\"\n    orderBy: ReleaseOrder\n  ): ReleaseConnection!\n\n  \"\"\"\n  A list of applied repository-topic associations for this repository.\n  \"\"\"\n  repositoryTopics(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): RepositoryTopicConnection!\n\n  \"\"\"\n  The HTTP path for this repository\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  A description of the repository, rendered to HTML without any links in it.\n  \"\"\"\n  shortDescriptionHTML(\n    \"\"\"\n    How many characters to return.\n    \"\"\"\n    limit: Int = 200\n  ): HTML!\n\n  \"\"\"\n  Whether or not squash-merging is enabled on this repository.\n  \"\"\"\n  squashMergeAllowed: Boolean!\n\n  \"\"\"\n  The SSH URL to clone this repository\n  \"\"\"\n  sshUrl: GitSSHRemote!\n\n  \"\"\"\n  A list of users who have starred this starrable.\n  \"\"\"\n  stargazers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for connection\n    \"\"\"\n    orderBy: StarOrder\n  ): StargazerConnection!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this repository\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  Indicates whether the viewer has admin permissions on this repository.\n  \"\"\"\n  viewerCanAdminister: Boolean!\n\n  \"\"\"\n  Can the current viewer create new projects on this owner.\n  \"\"\"\n  viewerCanCreateProjects: Boolean!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Indicates whether the viewer can update the topics of this repository.\n  \"\"\"\n  viewerCanUpdateTopics: Boolean!\n\n  \"\"\"\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  \"\"\"\n  viewerHasStarred: Boolean!\n\n  \"\"\"\n  The users permission level on the repository. Will return null if authenticated as an GitHub App.\n  \"\"\"\n  viewerPermission: RepositoryPermission\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState\n\n  \"\"\"\n  A list of users watching the repository.\n  \"\"\"\n  watchers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserConnection!\n}\n\n\"\"\"\nThe affiliation of a user to a repository\n\"\"\"\nenum RepositoryAffiliation {\n  \"\"\"\n  Repositories that the user has been added to as a collaborator.\n  \"\"\"\n  COLLABORATOR\n\n  \"\"\"\n  Repositories that the user has access to through being a member of an\n  organization. This includes every repository on every team that the user is on.\n  \"\"\"\n  ORGANIZATION_MEMBER\n\n  \"\"\"\n  Repositories that are owned by the authenticated user.\n  \"\"\"\n  OWNER\n}\n\n\"\"\"\nThe affiliation type between collaborator and repository.\n\"\"\"\nenum RepositoryCollaboratorAffiliation {\n  \"\"\"\n  All collaborators of the repository.\n  \"\"\"\n  ALL\n\n  \"\"\"\n  All outside collaborators of an organization-owned repository.\n  \"\"\"\n  OUTSIDE\n}\n\n\"\"\"\nThe connection type for User.\n\"\"\"\ntype RepositoryCollaboratorConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [RepositoryCollaboratorEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [User]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nRepresents a user who is a collaborator of a repository.\n\"\"\"\ntype RepositoryCollaboratorEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n  node: User!\n\n  \"\"\"\n  The permission the user has on the repository.\n  \"\"\"\n  permission: RepositoryPermission!\n\n  \"\"\"\n  A list of sources for the user's access to the repository.\n  \"\"\"\n  permissionSources: [PermissionSource!]\n}\n\n\"\"\"\nA list of repositories owned by the subject.\n\"\"\"\ntype RepositoryConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [RepositoryEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Repository]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n\n  \"\"\"\n  The total size in kilobytes of all repositories in the connection.\n  \"\"\"\n  totalDiskUsage: Int!\n}\n\n\"\"\"\nThe reason a repository is listed as 'contributed'.\n\"\"\"\nenum RepositoryContributionType {\n  \"\"\"\n  Created a commit\n  \"\"\"\n  COMMIT\n\n  \"\"\"\n  Created an issue\n  \"\"\"\n  ISSUE\n\n  \"\"\"\n  Created a pull request\n  \"\"\"\n  PULL_REQUEST\n\n  \"\"\"\n  Reviewed a pull request\n  \"\"\"\n  PULL_REQUEST_REVIEW\n\n  \"\"\"\n  Created the repository\n  \"\"\"\n  REPOSITORY\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype RepositoryEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Repository\n}\n\n\"\"\"\nA subset of repository info.\n\"\"\"\ninterface RepositoryInfo {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The description of the repository.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  The description of the repository rendered to HTML.\n  \"\"\"\n  descriptionHTML: HTML!\n\n  \"\"\"\n  Returns how many forks there are of this repository in the whole network.\n  \"\"\"\n  forkCount: Int!\n\n  \"\"\"\n  Indicates if the repository has issues feature enabled.\n  \"\"\"\n  hasIssuesEnabled: Boolean!\n\n  \"\"\"\n  Indicates if the repository has wiki feature enabled.\n  \"\"\"\n  hasWikiEnabled: Boolean!\n\n  \"\"\"\n  The repository's URL.\n  \"\"\"\n  homepageUrl: URI\n\n  \"\"\"\n  Indicates if the repository is unmaintained.\n  \"\"\"\n  isArchived: Boolean!\n\n  \"\"\"\n  Identifies if the repository is a fork.\n  \"\"\"\n  isFork: Boolean!\n\n  \"\"\"\n  Indicates if the repository has been locked or not.\n  \"\"\"\n  isLocked: Boolean!\n\n  \"\"\"\n  Identifies if the repository is a mirror.\n  \"\"\"\n  isMirror: Boolean!\n\n  \"\"\"\n  Identifies if the repository is private.\n  \"\"\"\n  isPrivate: Boolean!\n\n  \"\"\"\n  The license associated with the repository\n  \"\"\"\n  licenseInfo: License\n\n  \"\"\"\n  The reason the repository has been locked.\n  \"\"\"\n  lockReason: RepositoryLockReason\n\n  \"\"\"\n  The repository's original mirror URL.\n  \"\"\"\n  mirrorUrl: URI\n\n  \"\"\"\n  The name of the repository.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The repository's name with owner.\n  \"\"\"\n  nameWithOwner: String!\n\n  \"\"\"\n  The User owner of the repository.\n  \"\"\"\n  owner: RepositoryOwner!\n\n  \"\"\"\n  Identifies when the repository was last pushed to.\n  \"\"\"\n  pushedAt: DateTime\n\n  \"\"\"\n  The HTTP path for this repository\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  A description of the repository, rendered to HTML without any links in it.\n  \"\"\"\n  shortDescriptionHTML(\n    \"\"\"\n    How many characters to return.\n    \"\"\"\n    limit: Int = 200\n  ): HTML!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this repository\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nAn invitation for a user to be added to a repository.\n\"\"\"\ntype RepositoryInvitation implements Node {\n  id: ID!\n\n  \"\"\"\n  The user who received the invitation.\n  \"\"\"\n  invitee: User!\n\n  \"\"\"\n  The user who created the invitation.\n  \"\"\"\n  inviter: User!\n\n  \"\"\"\n  The permission granted on this repository by this invitation.\n  \"\"\"\n  permission: RepositoryPermission!\n\n  \"\"\"\n  The Repository the user is invited to.\n  \"\"\"\n  repository: RepositoryInfo\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype RepositoryInvitationEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: RepositoryInvitation\n}\n\n\"\"\"\nThe possible reasons a given repository could be in a locked state.\n\"\"\"\nenum RepositoryLockReason {\n  \"\"\"\n  The repository is locked due to a billing related reason.\n  \"\"\"\n  BILLING\n\n  \"\"\"\n  The repository is locked due to a migration.\n  \"\"\"\n  MIGRATING\n\n  \"\"\"\n  The repository is locked due to a move.\n  \"\"\"\n  MOVING\n\n  \"\"\"\n  The repository is locked due to a rename.\n  \"\"\"\n  RENAME\n}\n\n\"\"\"\nRepresents a object that belongs to a repository.\n\"\"\"\ninterface RepositoryNode {\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n}\n\n\"\"\"\nOrdering options for repository connections\n\"\"\"\ninput RepositoryOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order repositories by.\n  \"\"\"\n  field: RepositoryOrderField!\n}\n\n\"\"\"\nProperties by which repository connections can be ordered.\n\"\"\"\nenum RepositoryOrderField {\n  \"\"\"\n  Order repositories by creation time\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order repositories by name\n  \"\"\"\n  NAME\n\n  \"\"\"\n  Order repositories by push time\n  \"\"\"\n  PUSHED_AT\n\n  \"\"\"\n  Order repositories by number of stargazers\n  \"\"\"\n  STARGAZERS\n\n  \"\"\"\n  Order repositories by update time\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nRepresents an owner of a Repository.\n\"\"\"\ninterface RepositoryOwner {\n  \"\"\"\n  A URL pointing to the owner's public avatar.\n  \"\"\"\n  avatarUrl(\n    \"\"\"\n    The size of the resulting square image.\n    \"\"\"\n    size: Int\n  ): URI!\n  id: ID!\n\n  \"\"\"\n  The username used to login.\n  \"\"\"\n  login: String!\n\n  \"\"\"\n  A list of repositories this user has pinned to their profile\n  \"\"\"\n  pinnedRepositories(\n    \"\"\"\n    Array of viewer's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    current viewer owns.\n    \"\"\"\n    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    Array of owner's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    organization or user being viewed owns.\n    \"\"\"\n    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection! @deprecated(reason: \"pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-07-01 UTC.\")\n\n  \"\"\"\n  A list of repositories that the user owns.\n  \"\"\"\n  repositories(\n    \"\"\"\n    Array of viewer's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    current viewer owns.\n    \"\"\"\n    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If non-null, filters repositories according to whether they are forks of another repository\n    \"\"\"\n    isFork: Boolean\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    Array of owner's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    organization or user being viewed owns.\n    \"\"\"\n    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection!\n\n  \"\"\"\n  Find Repository.\n  \"\"\"\n  repository(\n    \"\"\"\n    Name of Repository to find.\n    \"\"\"\n    name: String!\n  ): Repository\n\n  \"\"\"\n  The HTTP URL for the owner.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for the owner.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nThe access level to a repository\n\"\"\"\nenum RepositoryPermission {\n  \"\"\"\n  Can read, clone, push, and add collaborators\n  \"\"\"\n  ADMIN\n\n  \"\"\"\n  Can read and clone\n  \"\"\"\n  READ\n\n  \"\"\"\n  Can read, clone and push\n  \"\"\"\n  WRITE\n}\n\n\"\"\"\nThe privacy of a repository\n\"\"\"\nenum RepositoryPrivacy {\n  \"\"\"\n  Private\n  \"\"\"\n  PRIVATE\n\n  \"\"\"\n  Public\n  \"\"\"\n  PUBLIC\n}\n\n\"\"\"\nA repository-topic connects a repository to a topic.\n\"\"\"\ntype RepositoryTopic implements Node & UniformResourceLocatable {\n  id: ID!\n\n  \"\"\"\n  The HTTP path for this repository-topic.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The topic.\n  \"\"\"\n  topic: Topic!\n\n  \"\"\"\n  The HTTP URL for this repository-topic.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nThe connection type for RepositoryTopic.\n\"\"\"\ntype RepositoryTopicConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [RepositoryTopicEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [RepositoryTopic]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype RepositoryTopicEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: RepositoryTopic\n}\n\n\"\"\"\nAutogenerated input type of RequestReviews\n\"\"\"\ninput RequestReviewsInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Node ID of the pull request to modify.\n  \"\"\"\n  pullRequestId: ID!\n\n  \"\"\"\n  The Node IDs of the team to request.\n  \"\"\"\n  teamIds: [ID!]\n\n  \"\"\"\n  Add users to the set rather than replace.\n  \"\"\"\n  union: Boolean\n\n  \"\"\"\n  The Node IDs of the user to request.\n  \"\"\"\n  userIds: [ID!]\n}\n\n\"\"\"\nAutogenerated return type of RequestReviews\n\"\"\"\ntype RequestReviewsPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The pull request that is getting requests.\n  \"\"\"\n  pullRequest: PullRequest\n\n  \"\"\"\n  The edge from the pull request to the requested reviewers.\n  \"\"\"\n  requestedReviewersEdge: UserEdge\n}\n\n\"\"\"\nTypes that can be requested reviewers.\n\"\"\"\nunion RequestedReviewer = Mannequin | Team | User\n\n\"\"\"\nAutogenerated input type of ResolveReviewThread\n\"\"\"\ninput ResolveReviewThreadInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the thread to resolve\n  \"\"\"\n  threadId: ID!\n}\n\n\"\"\"\nAutogenerated return type of ResolveReviewThread\n\"\"\"\ntype ResolveReviewThreadPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The thread to resolve.\n  \"\"\"\n  thread: PullRequestReviewThread\n}\n\n\"\"\"\nRepresents a private contribution a user made on GitHub.\n\"\"\"\ntype RestrictedContribution implements Contribution {\n  \"\"\"\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  \"\"\"\n  isRestricted: Boolean!\n\n  \"\"\"\n  When this contribution was made.\n  \"\"\"\n  occurredAt: DateTime!\n\n  \"\"\"\n  The HTTP path for this contribution.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this contribution.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  The user who made this contribution.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nA team or user who has the ability to dismiss a review on a protected branch.\n\"\"\"\ntype ReviewDismissalAllowance implements Node {\n  \"\"\"\n  The actor that can dismiss.\n  \"\"\"\n  actor: ReviewDismissalAllowanceActor\n\n  \"\"\"\n  Identifies the branch protection rule associated with the allowed user or team.\n  \"\"\"\n  branchProtectionRule: BranchProtectionRule\n  id: ID!\n}\n\n\"\"\"\nTypes that can be an actor.\n\"\"\"\nunion ReviewDismissalAllowanceActor = Team | User\n\n\"\"\"\nThe connection type for ReviewDismissalAllowance.\n\"\"\"\ntype ReviewDismissalAllowanceConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ReviewDismissalAllowanceEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [ReviewDismissalAllowance]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ReviewDismissalAllowanceEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: ReviewDismissalAllowance\n}\n\n\"\"\"\nRepresents a 'review_dismissed' event on a given issue or pull request.\n\"\"\"\ntype ReviewDismissedEvent implements Node & UniformResourceLocatable {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  Identifies the optional message associated with the 'review_dismissed' event.\n  \"\"\"\n  dismissalMessage: String\n\n  \"\"\"\n  Identifies the optional message associated with the event, rendered to HTML.\n  \"\"\"\n  dismissalMessageHTML: String\n  id: ID!\n\n  \"\"\"\n  Identifies the message associated with the 'review_dismissed' event.\n  \"\"\"\n  message: String! @deprecated(reason: \"`message` is being removed because it not nullable, whereas the underlying field is optional. Use `dismissalMessage` instead. Removal on 2019-07-01 UTC.\")\n\n  \"\"\"\n  The message associated with the event, rendered to HTML.\n  \"\"\"\n  messageHtml: HTML! @deprecated(reason: \"`messageHtml` is being removed because it not nullable, whereas the underlying field is optional. Use `dismissalMessageHTML` instead. Removal on 2019-07-01 UTC.\")\n\n  \"\"\"\n  Identifies the previous state of the review with the 'review_dismissed' event.\n  \"\"\"\n  previousReviewState: PullRequestReviewState!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  Identifies the commit which caused the review to become stale.\n  \"\"\"\n  pullRequestCommit: PullRequestCommit\n\n  \"\"\"\n  The HTTP path for this review dismissed event.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the review associated with the 'review_dismissed' event.\n  \"\"\"\n  review: PullRequestReview\n\n  \"\"\"\n  The HTTP URL for this review dismissed event.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nA request for a user to review a pull request.\n\"\"\"\ntype ReviewRequest implements Node {\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n  id: ID!\n\n  \"\"\"\n  Identifies the pull request associated with this review request.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  The reviewer that is requested.\n  \"\"\"\n  requestedReviewer: RequestedReviewer\n}\n\n\"\"\"\nThe connection type for ReviewRequest.\n\"\"\"\ntype ReviewRequestConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [ReviewRequestEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [ReviewRequest]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype ReviewRequestEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: ReviewRequest\n}\n\n\"\"\"\nRepresents an 'review_request_removed' event on a given pull request.\n\"\"\"\ntype ReviewRequestRemovedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  Identifies the reviewer whose review request was removed.\n  \"\"\"\n  requestedReviewer: RequestedReviewer\n}\n\n\"\"\"\nRepresents an 'review_requested' event on a given pull request.\n\"\"\"\ntype ReviewRequestedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  PullRequest referenced by event.\n  \"\"\"\n  pullRequest: PullRequest!\n\n  \"\"\"\n  Identifies the reviewer whose review was requested.\n  \"\"\"\n  requestedReviewer: RequestedReviewer\n}\n\n\"\"\"\nThe results of a search.\n\"\"\"\nunion SearchResultItem = Issue | MarketplaceListing | Organization | PullRequest | Repository | User\n\n\"\"\"\nA list of results that matched against a search query.\n\"\"\"\ntype SearchResultItemConnection {\n  \"\"\"\n  The number of pieces of code that matched the search query.\n  \"\"\"\n  codeCount: Int!\n\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [SearchResultItemEdge]\n\n  \"\"\"\n  The number of issues that matched the search query.\n  \"\"\"\n  issueCount: Int!\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [SearchResultItem]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  The number of repositories that matched the search query.\n  \"\"\"\n  repositoryCount: Int!\n\n  \"\"\"\n  The number of users that matched the search query.\n  \"\"\"\n  userCount: Int!\n\n  \"\"\"\n  The number of wiki pages that matched the search query.\n  \"\"\"\n  wikiCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype SearchResultItemEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: SearchResultItem\n\n  \"\"\"\n  Text matches on the result found.\n  \"\"\"\n  textMatches: [TextMatch]\n}\n\n\"\"\"\nRepresents the individual results of a search.\n\"\"\"\nenum SearchType {\n  \"\"\"\n  Returns results matching issues in repositories.\n  \"\"\"\n  ISSUE\n\n  \"\"\"\n  Returns results matching repositories.\n  \"\"\"\n  REPOSITORY\n\n  \"\"\"\n  Returns results matching users and organizations on GitHub.\n  \"\"\"\n  USER\n}\n\n\"\"\"\nA GitHub Security Advisory\n\"\"\"\ntype SecurityAdvisory implements Node {\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  This is a long plaintext description of the advisory\n  \"\"\"\n  description: String!\n\n  \"\"\"\n  The GitHub Security Advisory ID\n  \"\"\"\n  ghsaId: String!\n  id: ID!\n\n  \"\"\"\n  A list of identifiers for this advisory\n  \"\"\"\n  identifiers: [SecurityAdvisoryIdentifier!]!\n\n  \"\"\"\n  The organization that originated the advisory\n  \"\"\"\n  origin: String!\n\n  \"\"\"\n  When the advisory was published\n  \"\"\"\n  publishedAt: DateTime!\n\n  \"\"\"\n  A list of references for this advisory\n  \"\"\"\n  references: [SecurityAdvisoryReference!]!\n\n  \"\"\"\n  The severity of the advisory\n  \"\"\"\n  severity: SecurityAdvisorySeverity!\n\n  \"\"\"\n  A short plaintext summary of the advisory\n  \"\"\"\n  summary: String!\n\n  \"\"\"\n  When the advisory was last updated\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  Vulnerabilities associated with this Advisory\n  \"\"\"\n  vulnerabilities(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    An ecosystem to filter vulnerabilities by.\n    \"\"\"\n    ecosystem: SecurityAdvisoryEcosystem\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for the returned topics.\n    \"\"\"\n    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}\n\n    \"\"\"\n    A package name to filter vulnerabilities by.\n    \"\"\"\n    package: String\n\n    \"\"\"\n    A list of severities to filter vulnerabilities by.\n    \"\"\"\n    severities: [SecurityAdvisorySeverity!]\n  ): SecurityVulnerabilityConnection!\n\n  \"\"\"\n  When the advisory was withdrawn, if it has been withdrawn\n  \"\"\"\n  withdrawnAt: DateTime\n}\n\n\"\"\"\nThe connection type for SecurityAdvisory.\n\"\"\"\ntype SecurityAdvisoryConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [SecurityAdvisoryEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [SecurityAdvisory]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nThe possible ecosystems of a security vulnerability's package.\n\"\"\"\nenum SecurityAdvisoryEcosystem {\n  \"\"\"\n  Java artifacts hosted at the Maven central repository\n  \"\"\"\n  MAVEN\n\n  \"\"\"\n  JavaScript packages hosted at npmjs.com\n  \"\"\"\n  NPM\n\n  \"\"\"\n  .NET packages hosted at the NuGet Gallery\n  \"\"\"\n  NUGET\n\n  \"\"\"\n  Python packages hosted at PyPI.org\n  \"\"\"\n  PIP\n\n  \"\"\"\n  Ruby gems hosted at RubyGems.org\n  \"\"\"\n  RUBYGEMS\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype SecurityAdvisoryEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: SecurityAdvisory\n}\n\n\"\"\"\nA GitHub Security Advisory Identifier\n\"\"\"\ntype SecurityAdvisoryIdentifier {\n  \"\"\"\n  The identifier type, e.g. GHSA, CVE\n  \"\"\"\n  type: String!\n\n  \"\"\"\n  The identifier\n  \"\"\"\n  value: String!\n}\n\n\"\"\"\nAn advisory identifier to filter results on.\n\"\"\"\ninput SecurityAdvisoryIdentifierFilter {\n  \"\"\"\n  The identifier type.\n  \"\"\"\n  type: SecurityAdvisoryIdentifierType!\n\n  \"\"\"\n  The identifier string. Supports exact or partial matching.\n  \"\"\"\n  value: String!\n}\n\n\"\"\"\nIdentifier formats available for advisories.\n\"\"\"\nenum SecurityAdvisoryIdentifierType {\n  \"\"\"\n  Common Vulnerabilities and Exposures Identifier.\n  \"\"\"\n  CVE\n\n  \"\"\"\n  GitHub Security Advisory ID.\n  \"\"\"\n  GHSA\n}\n\n\"\"\"\nOrdering options for security advisory connections\n\"\"\"\ninput SecurityAdvisoryOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order security advisories by.\n  \"\"\"\n  field: SecurityAdvisoryOrderField!\n}\n\n\"\"\"\nProperties by which security advisory connections can be ordered.\n\"\"\"\nenum SecurityAdvisoryOrderField {\n  \"\"\"\n  Order advisories by publication time\n  \"\"\"\n  PUBLISHED_AT\n\n  \"\"\"\n  Order advisories by update time\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nAn individual package\n\"\"\"\ntype SecurityAdvisoryPackage {\n  \"\"\"\n  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM\n  \"\"\"\n  ecosystem: SecurityAdvisoryEcosystem!\n\n  \"\"\"\n  The package name\n  \"\"\"\n  name: String!\n}\n\n\"\"\"\nAn individual package version\n\"\"\"\ntype SecurityAdvisoryPackageVersion {\n  \"\"\"\n  The package name or version\n  \"\"\"\n  identifier: String!\n}\n\n\"\"\"\nA GitHub Security Advisory Reference\n\"\"\"\ntype SecurityAdvisoryReference {\n  \"\"\"\n  A publicly accessible reference\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nSeverity of the vulnerability.\n\"\"\"\nenum SecurityAdvisorySeverity {\n  \"\"\"\n  Critical.\n  \"\"\"\n  CRITICAL\n\n  \"\"\"\n  High.\n  \"\"\"\n  HIGH\n\n  \"\"\"\n  Low.\n  \"\"\"\n  LOW\n\n  \"\"\"\n  Moderate.\n  \"\"\"\n  MODERATE\n}\n\n\"\"\"\nAn individual vulnerability within an Advisory\n\"\"\"\ntype SecurityVulnerability {\n  \"\"\"\n  The Advisory associated with this Vulnerability\n  \"\"\"\n  advisory: SecurityAdvisory!\n\n  \"\"\"\n  The first version containing a fix for the vulnerability\n  \"\"\"\n  firstPatchedVersion: SecurityAdvisoryPackageVersion\n\n  \"\"\"\n  A description of the vulnerable package\n  \"\"\"\n  package: SecurityAdvisoryPackage!\n\n  \"\"\"\n  The severity of the vulnerability within this package\n  \"\"\"\n  severity: SecurityAdvisorySeverity!\n\n  \"\"\"\n  When the vulnerability was last updated\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  A string that describes the vulnerable package versions.\n  This string follows a basic syntax with a few forms.\n  + `= 0.2.0` denotes a single vulnerable version.\n  + `<= 1.0.8` denotes a version range up to and including the specified version\n  + `< 0.1.11` denotes a version range up to, but excluding, the specified version\n  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.\n  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum\n  \"\"\"\n  vulnerableVersionRange: String!\n}\n\n\"\"\"\nThe connection type for SecurityVulnerability.\n\"\"\"\ntype SecurityVulnerabilityConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [SecurityVulnerabilityEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [SecurityVulnerability]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype SecurityVulnerabilityEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: SecurityVulnerability\n}\n\n\"\"\"\nOrdering options for security vulnerability connections\n\"\"\"\ninput SecurityVulnerabilityOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order security vulnerabilities by.\n  \"\"\"\n  field: SecurityVulnerabilityOrderField!\n}\n\n\"\"\"\nProperties by which security vulnerability connections can be ordered.\n\"\"\"\nenum SecurityVulnerabilityOrderField {\n  \"\"\"\n  Order vulnerability by update time\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nRepresents an S/MIME signature on a Commit or Tag.\n\"\"\"\ntype SmimeSignature implements GitSignature {\n  \"\"\"\n  Email used to sign this object.\n  \"\"\"\n  email: String!\n\n  \"\"\"\n  True if the signature is valid and verified by GitHub.\n  \"\"\"\n  isValid: Boolean!\n\n  \"\"\"\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  \"\"\"\n  payload: String!\n\n  \"\"\"\n  ASCII-armored signature header from object.\n  \"\"\"\n  signature: String!\n\n  \"\"\"\n  GitHub user corresponding to the email signing this commit.\n  \"\"\"\n  signer: User\n\n  \"\"\"\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  \"\"\"\n  state: GitSignatureState!\n\n  \"\"\"\n  True if the signature was made with GitHub's signing key.\n  \"\"\"\n  wasSignedByGitHub: Boolean!\n}\n\n\"\"\"\nWays in which star connections can be ordered.\n\"\"\"\ninput StarOrder {\n  \"\"\"\n  The direction in which to order nodes.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field in which to order nodes by.\n  \"\"\"\n  field: StarOrderField!\n}\n\n\"\"\"\nProperties by which star connections can be ordered.\n\"\"\"\nenum StarOrderField {\n  \"\"\"\n  Allows ordering a list of stars by when they were created.\n  \"\"\"\n  STARRED_AT\n}\n\n\"\"\"\nThe connection type for User.\n\"\"\"\ntype StargazerConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [StargazerEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [User]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nRepresents a user that's starred a repository.\n\"\"\"\ntype StargazerEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n  node: User!\n\n  \"\"\"\n  Identifies when the item was starred.\n  \"\"\"\n  starredAt: DateTime!\n}\n\n\"\"\"\nThings that can be starred.\n\"\"\"\ninterface Starrable {\n  id: ID!\n\n  \"\"\"\n  A list of users who have starred this starrable.\n  \"\"\"\n  stargazers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for connection\n    \"\"\"\n    orderBy: StarOrder\n  ): StargazerConnection!\n\n  \"\"\"\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  \"\"\"\n  viewerHasStarred: Boolean!\n}\n\n\"\"\"\nThe connection type for Repository.\n\"\"\"\ntype StarredRepositoryConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [StarredRepositoryEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Repository]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nRepresents a starred repository.\n\"\"\"\ntype StarredRepositoryEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n  node: Repository!\n\n  \"\"\"\n  Identifies when the item was starred.\n  \"\"\"\n  starredAt: DateTime!\n}\n\n\"\"\"\nRepresents a commit status.\n\"\"\"\ntype Status implements Node {\n  \"\"\"\n  The commit this status is attached to.\n  \"\"\"\n  commit: Commit\n\n  \"\"\"\n  Looks up an individual status context by context name.\n  \"\"\"\n  context(\n    \"\"\"\n    The context name.\n    \"\"\"\n    name: String!\n  ): StatusContext\n\n  \"\"\"\n  The individual status contexts for this commit.\n  \"\"\"\n  contexts: [StatusContext!]!\n  id: ID!\n\n  \"\"\"\n  The combined commit status.\n  \"\"\"\n  state: StatusState!\n}\n\n\"\"\"\nRepresents an individual commit status context\n\"\"\"\ntype StatusContext implements Node {\n  \"\"\"\n  This commit this status context is attached to.\n  \"\"\"\n  commit: Commit\n\n  \"\"\"\n  The name of this status context.\n  \"\"\"\n  context: String!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The actor who created this status context.\n  \"\"\"\n  creator: Actor\n\n  \"\"\"\n  The description for this status context.\n  \"\"\"\n  description: String\n  id: ID!\n\n  \"\"\"\n  The state of this status context.\n  \"\"\"\n  state: StatusState!\n\n  \"\"\"\n  The URL for this status context.\n  \"\"\"\n  targetUrl: URI\n}\n\n\"\"\"\nThe possible commit status states.\n\"\"\"\nenum StatusState {\n  \"\"\"\n  Status is errored.\n  \"\"\"\n  ERROR\n\n  \"\"\"\n  Status is expected.\n  \"\"\"\n  EXPECTED\n\n  \"\"\"\n  Status is failing.\n  \"\"\"\n  FAILURE\n\n  \"\"\"\n  Status is pending.\n  \"\"\"\n  PENDING\n\n  \"\"\"\n  Status is successful.\n  \"\"\"\n  SUCCESS\n}\n\n\"\"\"\nAutogenerated input type of SubmitPullRequestReview\n\"\"\"\ninput SubmitPullRequestReviewInput {\n  \"\"\"\n  The text field to set on the Pull Request Review.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The event to send to the Pull Request Review.\n  \"\"\"\n  event: PullRequestReviewEvent!\n\n  \"\"\"\n  The Pull Request Review ID to submit.\n  \"\"\"\n  pullRequestReviewId: ID!\n}\n\n\"\"\"\nAutogenerated return type of SubmitPullRequestReview\n\"\"\"\ntype SubmitPullRequestReviewPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The submitted pull request review.\n  \"\"\"\n  pullRequestReview: PullRequestReview\n}\n\n\"\"\"\nEntities that can be subscribed to for web and email notifications.\n\"\"\"\ninterface Subscribable {\n  id: ID!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState\n}\n\n\"\"\"\nRepresents a 'subscribed' event on a given `Subscribable`.\n\"\"\"\ntype SubscribedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Object referenced by event.\n  \"\"\"\n  subscribable: Subscribable!\n}\n\n\"\"\"\nThe possible states of a subscription.\n\"\"\"\nenum SubscriptionState {\n  \"\"\"\n  The User is never notified.\n  \"\"\"\n  IGNORED\n\n  \"\"\"\n  The User is notified of all conversations.\n  \"\"\"\n  SUBSCRIBED\n\n  \"\"\"\n  The User is only notified when participating or @mentioned.\n  \"\"\"\n  UNSUBSCRIBED\n}\n\n\"\"\"\nA suggestion to review a pull request based on a user's commit history and review comments.\n\"\"\"\ntype SuggestedReviewer {\n  \"\"\"\n  Is this suggestion based on past commits?\n  \"\"\"\n  isAuthor: Boolean!\n\n  \"\"\"\n  Is this suggestion based on past review comments?\n  \"\"\"\n  isCommenter: Boolean!\n\n  \"\"\"\n  Identifies the user suggested to review the pull request.\n  \"\"\"\n  reviewer: User!\n}\n\n\"\"\"\nRepresents a Git tag.\n\"\"\"\ntype Tag implements GitObject & Node {\n  \"\"\"\n  An abbreviated version of the Git object ID\n  \"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"\n  The HTTP path for this Git object\n  \"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this Git object\n  \"\"\"\n  commitUrl: URI!\n  id: ID!\n\n  \"\"\"\n  The Git tag message.\n  \"\"\"\n  message: String\n\n  \"\"\"\n  The Git tag name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The Git object ID\n  \"\"\"\n  oid: GitObjectID!\n\n  \"\"\"\n  The Repository the Git object belongs to\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  Details about the tag author.\n  \"\"\"\n  tagger: GitActor\n\n  \"\"\"\n  The Git object the tag points to.\n  \"\"\"\n  target: GitObject!\n}\n\n\"\"\"\nA team of users in an organization.\n\"\"\"\ntype Team implements MemberStatusable & Node & Subscribable {\n  \"\"\"\n  A list of teams that are ancestors of this team.\n  \"\"\"\n  ancestors(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): TeamConnection!\n\n  \"\"\"\n  A URL pointing to the team's avatar.\n  \"\"\"\n  avatarUrl(\n    \"\"\"\n    The size in pixels of the resulting square image.\n    \"\"\"\n    size: Int = 400\n  ): URI\n\n  \"\"\"\n  List of child teams belonging to this team\n  \"\"\"\n  childTeams(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Whether to list immediate child teams or all descendant child teams.\n    \"\"\"\n    immediateOnly: Boolean = true\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for connection\n    \"\"\"\n    orderBy: TeamOrder\n\n    \"\"\"\n    User logins to filter by\n    \"\"\"\n    userLogins: [String!]\n  ): TeamConnection!\n\n  \"\"\"\n  The slug corresponding to the organization and team.\n  \"\"\"\n  combinedSlug: String!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The description of the team.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  The HTTP path for editing this team\n  \"\"\"\n  editTeamResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for editing this team\n  \"\"\"\n  editTeamUrl: URI!\n  id: ID!\n\n  \"\"\"\n  A list of pending invitations for users to this team\n  \"\"\"\n  invitations(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): OrganizationInvitationConnection\n\n  \"\"\"\n  Get the status messages members of this entity have set that are either public or visible only to the organization.\n  \"\"\"\n  memberStatuses(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for user statuses returned from the connection.\n    \"\"\"\n    orderBy: UserStatusOrder = {field: UPDATED_AT, direction: DESC}\n  ): UserStatusConnection!\n\n  \"\"\"\n  A list of users who are members of this team.\n  \"\"\"\n  members(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter by membership type\n    \"\"\"\n    membership: TeamMembershipType = ALL\n\n    \"\"\"\n    Order for the connection.\n    \"\"\"\n    orderBy: TeamMemberOrder\n\n    \"\"\"\n    The search string to look for.\n    \"\"\"\n    query: String\n\n    \"\"\"\n    Filter by team member role\n    \"\"\"\n    role: TeamMemberRole\n  ): TeamMemberConnection!\n\n  \"\"\"\n  The HTTP path for the team' members\n  \"\"\"\n  membersResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for the team' members\n  \"\"\"\n  membersUrl: URI!\n\n  \"\"\"\n  The name of the team.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The HTTP path creating a new team\n  \"\"\"\n  newTeamResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL creating a new team\n  \"\"\"\n  newTeamUrl: URI!\n\n  \"\"\"\n  The organization that owns this team.\n  \"\"\"\n  organization: Organization!\n\n  \"\"\"\n  The parent team of the team.\n  \"\"\"\n  parentTeam: Team\n\n  \"\"\"\n  The level of privacy the team has.\n  \"\"\"\n  privacy: TeamPrivacy!\n\n  \"\"\"\n  A list of repositories this team has access to.\n  \"\"\"\n  repositories(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for the connection.\n    \"\"\"\n    orderBy: TeamRepositoryOrder\n\n    \"\"\"\n    The search string to look for.\n    \"\"\"\n    query: String\n  ): TeamRepositoryConnection!\n\n  \"\"\"\n  The HTTP path for this team's repositories\n  \"\"\"\n  repositoriesResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this team's repositories\n  \"\"\"\n  repositoriesUrl: URI!\n\n  \"\"\"\n  The HTTP path for this team\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The slug corresponding to the team.\n  \"\"\"\n  slug: String!\n\n  \"\"\"\n  The HTTP path for this team's teams\n  \"\"\"\n  teamsResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this team's teams\n  \"\"\"\n  teamsUrl: URI!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this team\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  Team is adminable by the viewer.\n  \"\"\"\n  viewerCanAdminister: Boolean!\n\n  \"\"\"\n  Check if the viewer is able to change their subscription status for the repository.\n  \"\"\"\n  viewerCanSubscribe: Boolean!\n\n  \"\"\"\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  \"\"\"\n  viewerSubscription: SubscriptionState\n}\n\n\"\"\"\nThe connection type for Team.\n\"\"\"\ntype TeamConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [TeamEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Team]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype TeamEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Team\n}\n\n\"\"\"\nThe connection type for User.\n\"\"\"\ntype TeamMemberConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [TeamMemberEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [User]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nRepresents a user who is a member of a team.\n\"\"\"\ntype TeamMemberEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The HTTP path to the organization's member access page.\n  \"\"\"\n  memberAccessResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL to the organization's member access page.\n  \"\"\"\n  memberAccessUrl: URI!\n  node: User!\n\n  \"\"\"\n  The role the member has on the team.\n  \"\"\"\n  role: TeamMemberRole!\n}\n\n\"\"\"\nOrdering options for team member connections\n\"\"\"\ninput TeamMemberOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order team members by.\n  \"\"\"\n  field: TeamMemberOrderField!\n}\n\n\"\"\"\nProperties by which team member connections can be ordered.\n\"\"\"\nenum TeamMemberOrderField {\n  \"\"\"\n  Order team members by creation time\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order team members by login\n  \"\"\"\n  LOGIN\n}\n\n\"\"\"\nThe possible team member roles; either 'maintainer' or 'member'.\n\"\"\"\nenum TeamMemberRole {\n  \"\"\"\n  A team maintainer has permission to add and remove team members.\n  \"\"\"\n  MAINTAINER\n\n  \"\"\"\n  A team member has no administrative permissions on the team.\n  \"\"\"\n  MEMBER\n}\n\n\"\"\"\nDefines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.\n\"\"\"\nenum TeamMembershipType {\n  \"\"\"\n  Includes immediate and child team members for the team.\n  \"\"\"\n  ALL\n\n  \"\"\"\n  Includes only child team members for the team.\n  \"\"\"\n  CHILD_TEAM\n\n  \"\"\"\n  Includes only immediate members of the team.\n  \"\"\"\n  IMMEDIATE\n}\n\n\"\"\"\nWays in which team connections can be ordered.\n\"\"\"\ninput TeamOrder {\n  \"\"\"\n  The direction in which to order nodes.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field in which to order nodes by.\n  \"\"\"\n  field: TeamOrderField!\n}\n\n\"\"\"\nProperties by which team connections can be ordered.\n\"\"\"\nenum TeamOrderField {\n  \"\"\"\n  Allows ordering a list of teams by name.\n  \"\"\"\n  NAME\n}\n\n\"\"\"\nThe possible team privacy values.\n\"\"\"\nenum TeamPrivacy {\n  \"\"\"\n  A secret team can only be seen by its members.\n  \"\"\"\n  SECRET\n\n  \"\"\"\n  A visible team can be seen and @mentioned by every member of the organization.\n  \"\"\"\n  VISIBLE\n}\n\n\"\"\"\nThe connection type for Repository.\n\"\"\"\ntype TeamRepositoryConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [TeamRepositoryEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Repository]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nRepresents a team repository.\n\"\"\"\ntype TeamRepositoryEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n  node: Repository!\n\n  \"\"\"\n  The permission level the team has on the repository\n  \"\"\"\n  permission: RepositoryPermission!\n}\n\n\"\"\"\nOrdering options for team repository connections\n\"\"\"\ninput TeamRepositoryOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order repositories by.\n  \"\"\"\n  field: TeamRepositoryOrderField!\n}\n\n\"\"\"\nProperties by which team repository connections can be ordered.\n\"\"\"\nenum TeamRepositoryOrderField {\n  \"\"\"\n  Order repositories by creation time\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order repositories by name\n  \"\"\"\n  NAME\n\n  \"\"\"\n  Order repositories by permission\n  \"\"\"\n  PERMISSION\n\n  \"\"\"\n  Order repositories by push time\n  \"\"\"\n  PUSHED_AT\n\n  \"\"\"\n  Order repositories by number of stargazers\n  \"\"\"\n  STARGAZERS\n\n  \"\"\"\n  Order repositories by update time\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nThe role of a user on a team.\n\"\"\"\nenum TeamRole {\n  \"\"\"\n  User has admin rights on the team.\n  \"\"\"\n  ADMIN\n\n  \"\"\"\n  User is a member of the team.\n  \"\"\"\n  MEMBER\n}\n\n\"\"\"\nA text match within a search result.\n\"\"\"\ntype TextMatch {\n  \"\"\"\n  The specific text fragment within the property matched on.\n  \"\"\"\n  fragment: String!\n\n  \"\"\"\n  Highlights within the matched fragment.\n  \"\"\"\n  highlights: [TextMatchHighlight!]!\n\n  \"\"\"\n  The property matched on.\n  \"\"\"\n  property: String!\n}\n\n\"\"\"\nRepresents a single highlight in a search result match.\n\"\"\"\ntype TextMatchHighlight {\n  \"\"\"\n  The indice in the fragment where the matched text begins.\n  \"\"\"\n  beginIndice: Int!\n\n  \"\"\"\n  The indice in the fragment where the matched text ends.\n  \"\"\"\n  endIndice: Int!\n\n  \"\"\"\n  The text matched.\n  \"\"\"\n  text: String!\n}\n\n\"\"\"\nA topic aggregates entities that are related to a subject.\n\"\"\"\ntype Topic implements Node & Starrable {\n  id: ID!\n\n  \"\"\"\n  The topic's name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  A list of related topics, including aliases of this topic, sorted with the most relevant\n  first. Returns up to 10 Topics.\n  \"\"\"\n  relatedTopics(\n    \"\"\"\n    How many topics to return.\n    \"\"\"\n    first: Int = 3\n  ): [Topic!]!\n\n  \"\"\"\n  A list of users who have starred this starrable.\n  \"\"\"\n  stargazers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for connection\n    \"\"\"\n    orderBy: StarOrder\n  ): StargazerConnection!\n\n  \"\"\"\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  \"\"\"\n  viewerHasStarred: Boolean!\n}\n\n\"\"\"\nThe connection type for Topic.\n\"\"\"\ntype TopicConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [TopicEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [Topic]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype TopicEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: Topic\n}\n\n\"\"\"\nReason that the suggested topic is declined.\n\"\"\"\nenum TopicSuggestionDeclineReason {\n  \"\"\"\n  The suggested topic is not relevant to the repository.\n  \"\"\"\n  NOT_RELEVANT\n\n  \"\"\"\n  The viewer does not like the suggested topic.\n  \"\"\"\n  PERSONAL_PREFERENCE\n\n  \"\"\"\n  The suggested topic is too general for the repository.\n  \"\"\"\n  TOO_GENERAL\n\n  \"\"\"\n  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).\n  \"\"\"\n  TOO_SPECIFIC\n}\n\n\"\"\"\nRepresents a 'transferred' event on a given issue or pull request.\n\"\"\"\ntype TransferredEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  The repository this came from\n  \"\"\"\n  fromRepository: Repository\n  id: ID!\n\n  \"\"\"\n  Identifies the issue associated with the event.\n  \"\"\"\n  issue: Issue!\n}\n\n\"\"\"\nRepresents a Git tree.\n\"\"\"\ntype Tree implements GitObject & Node {\n  \"\"\"\n  An abbreviated version of the Git object ID\n  \"\"\"\n  abbreviatedOid: String!\n\n  \"\"\"\n  The HTTP path for this Git object\n  \"\"\"\n  commitResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL for this Git object\n  \"\"\"\n  commitUrl: URI!\n\n  \"\"\"\n  A list of tree entries.\n  \"\"\"\n  entries: [TreeEntry!]\n  id: ID!\n\n  \"\"\"\n  The Git object ID\n  \"\"\"\n  oid: GitObjectID!\n\n  \"\"\"\n  The Repository the Git object belongs to\n  \"\"\"\n  repository: Repository!\n}\n\n\"\"\"\nRepresents a Git tree entry.\n\"\"\"\ntype TreeEntry {\n  \"\"\"\n  Entry file mode.\n  \"\"\"\n  mode: Int!\n\n  \"\"\"\n  Entry file name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  Entry file object.\n  \"\"\"\n  object: GitObject\n\n  \"\"\"\n  Entry file Git object ID.\n  \"\"\"\n  oid: GitObjectID!\n\n  \"\"\"\n  The Repository the tree entry belongs to\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  Entry file type.\n  \"\"\"\n  type: String!\n}\n\n\"\"\"\nAn RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.\n\"\"\"\nscalar URI\n\n\"\"\"\nRepresents an 'unassigned' event on any assignable object.\n\"\"\"\ntype UnassignedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the assignable associated with the event.\n  \"\"\"\n  assignable: Assignable!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the subject (user) who was unassigned.\n  \"\"\"\n  user: User\n}\n\n\"\"\"\nRepresents a type that can be retrieved by a URL.\n\"\"\"\ninterface UniformResourceLocatable {\n  \"\"\"\n  The HTML path to this resource.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  The URL to this resource.\n  \"\"\"\n  url: URI!\n}\n\n\"\"\"\nRepresents an unknown signature on a Commit or Tag.\n\"\"\"\ntype UnknownSignature implements GitSignature {\n  \"\"\"\n  Email used to sign this object.\n  \"\"\"\n  email: String!\n\n  \"\"\"\n  True if the signature is valid and verified by GitHub.\n  \"\"\"\n  isValid: Boolean!\n\n  \"\"\"\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  \"\"\"\n  payload: String!\n\n  \"\"\"\n  ASCII-armored signature header from object.\n  \"\"\"\n  signature: String!\n\n  \"\"\"\n  GitHub user corresponding to the email signing this commit.\n  \"\"\"\n  signer: User\n\n  \"\"\"\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  \"\"\"\n  state: GitSignatureState!\n\n  \"\"\"\n  True if the signature was made with GitHub's signing key.\n  \"\"\"\n  wasSignedByGitHub: Boolean!\n}\n\n\"\"\"\nRepresents an 'unlabeled' event on a given issue or pull request.\n\"\"\"\ntype UnlabeledEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the label associated with the 'unlabeled' event.\n  \"\"\"\n  label: Label!\n\n  \"\"\"\n  Identifies the `Labelable` associated with the event.\n  \"\"\"\n  labelable: Labelable!\n}\n\n\"\"\"\nAutogenerated input type of UnlockLockable\n\"\"\"\ninput UnlockLockableInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  ID of the issue or pull request to be unlocked.\n  \"\"\"\n  lockableId: ID!\n}\n\n\"\"\"\nAutogenerated return type of UnlockLockable\n\"\"\"\ntype UnlockLockablePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The item that was unlocked.\n  \"\"\"\n  unlockedRecord: Lockable\n}\n\n\"\"\"\nRepresents an 'unlocked' event on a given issue or pull request.\n\"\"\"\ntype UnlockedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Object that was unlocked.\n  \"\"\"\n  lockable: Lockable!\n}\n\n\"\"\"\nAutogenerated input type of UnmarkIssueAsDuplicate\n\"\"\"\ninput UnmarkIssueAsDuplicateInput {\n  \"\"\"\n  ID of the issue or pull request currently considered canonical/authoritative/original.\n  \"\"\"\n  canonicalId: ID!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  ID of the issue or pull request currently marked as a duplicate.\n  \"\"\"\n  duplicateId: ID!\n}\n\n\"\"\"\nAutogenerated return type of UnmarkIssueAsDuplicate\n\"\"\"\ntype UnmarkIssueAsDuplicatePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The issue or pull request that was marked as a duplicate.\n  \"\"\"\n  duplicate: IssueOrPullRequest\n}\n\n\"\"\"\nAutogenerated input type of UnminimizeComment\n\"\"\"\ninput UnminimizeCommentInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Node ID of the subject to modify.\n  \"\"\"\n  subjectId: ID!\n}\n\n\"\"\"\nAutogenerated input type of UnpinIssue\n\"\"\"\ninput UnpinIssueInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the issue to be unpinned\n  \"\"\"\n  issueId: ID!\n}\n\n\"\"\"\nRepresents an 'unpinned' event on a given issue or pull request.\n\"\"\"\ntype UnpinnedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Identifies the issue associated with the event.\n  \"\"\"\n  issue: Issue!\n}\n\n\"\"\"\nAutogenerated input type of UnresolveReviewThread\n\"\"\"\ninput UnresolveReviewThreadInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the thread to unresolve\n  \"\"\"\n  threadId: ID!\n}\n\n\"\"\"\nAutogenerated return type of UnresolveReviewThread\n\"\"\"\ntype UnresolveReviewThreadPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The thread to resolve.\n  \"\"\"\n  thread: PullRequestReviewThread\n}\n\n\"\"\"\nRepresents an 'unsubscribed' event on a given `Subscribable`.\n\"\"\"\ntype UnsubscribedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  Object referenced by event.\n  \"\"\"\n  subscribable: Subscribable!\n}\n\n\"\"\"\nEntities that can be updated.\n\"\"\"\ninterface Updatable {\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n}\n\n\"\"\"\nComments that can be updated.\n\"\"\"\ninterface UpdatableComment {\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n}\n\n\"\"\"\nAutogenerated input type of UpdateBranchProtectionRule\n\"\"\"\ninput UpdateBranchProtectionRuleInput {\n  \"\"\"\n  The global relay id of the branch protection rule to be updated.\n  \"\"\"\n  branchProtectionRuleId: ID!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  Will new commits pushed to matching branches dismiss pull request review approvals.\n  \"\"\"\n  dismissesStaleReviews: Boolean\n\n  \"\"\"\n  Can admins overwrite branch protection.\n  \"\"\"\n  isAdminEnforced: Boolean\n\n  \"\"\"\n  The glob-like pattern used to determine matching branches.\n  \"\"\"\n  pattern: String\n\n  \"\"\"\n  A list of User or Team IDs allowed to push to matching branches.\n  \"\"\"\n  pushActorIds: [ID!]\n\n  \"\"\"\n  Number of approving reviews required to update matching branches.\n  \"\"\"\n  requiredApprovingReviewCount: Int\n\n  \"\"\"\n  List of required status check contexts that must pass for commits to be accepted to matching branches.\n  \"\"\"\n  requiredStatusCheckContexts: [String!]\n\n  \"\"\"\n  Are approving reviews required to update matching branches.\n  \"\"\"\n  requiresApprovingReviews: Boolean\n\n  \"\"\"\n  Are reviews from code owners required to update matching branches.\n  \"\"\"\n  requiresCodeOwnerReviews: Boolean\n\n  \"\"\"\n  Are commits required to be signed.\n  \"\"\"\n  requiresCommitSignatures: Boolean\n\n  \"\"\"\n  Are status checks required to update matching branches.\n  \"\"\"\n  requiresStatusChecks: Boolean\n\n  \"\"\"\n  Are branches required to be up to date before merging.\n  \"\"\"\n  requiresStrictStatusChecks: Boolean\n\n  \"\"\"\n  Is pushing to matching branches restricted.\n  \"\"\"\n  restrictsPushes: Boolean\n\n  \"\"\"\n  Is dismissal of pull request reviews restricted.\n  \"\"\"\n  restrictsReviewDismissals: Boolean\n\n  \"\"\"\n  A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.\n  \"\"\"\n  reviewDismissalActorIds: [ID!]\n}\n\n\"\"\"\nAutogenerated return type of UpdateBranchProtectionRule\n\"\"\"\ntype UpdateBranchProtectionRulePayload {\n  \"\"\"\n  The newly created BranchProtectionRule.\n  \"\"\"\n  branchProtectionRule: BranchProtectionRule\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n}\n\n\"\"\"\nAutogenerated input type of UpdateIssueComment\n\"\"\"\ninput UpdateIssueCommentInput {\n  \"\"\"\n  The updated text of the comment.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the IssueComment to modify.\n  \"\"\"\n  id: ID!\n}\n\n\"\"\"\nAutogenerated return type of UpdateIssueComment\n\"\"\"\ntype UpdateIssueCommentPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The updated comment.\n  \"\"\"\n  issueComment: IssueComment\n}\n\n\"\"\"\nAutogenerated input type of UpdateIssue\n\"\"\"\ninput UpdateIssueInput {\n  \"\"\"\n  An array of Node IDs of users for this issue.\n  \"\"\"\n  assigneeIds: [ID!]\n\n  \"\"\"\n  The body for the issue description.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The ID of the Issue to modify.\n  \"\"\"\n  id: ID!\n\n  \"\"\"\n  An array of Node IDs of labels for this issue.\n  \"\"\"\n  labelIds: [ID!]\n\n  \"\"\"\n  The Node ID of the milestone for this issue.\n  \"\"\"\n  milestoneId: ID\n\n  \"\"\"\n  An array of Node IDs for projects associated with this issue.\n  \"\"\"\n  projectIds: [ID!]\n\n  \"\"\"\n  The desired issue state.\n  \"\"\"\n  state: IssueState\n\n  \"\"\"\n  The title for the issue.\n  \"\"\"\n  title: String\n}\n\n\"\"\"\nAutogenerated return type of UpdateIssue\n\"\"\"\ntype UpdateIssuePayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The issue.\n  \"\"\"\n  issue: Issue\n}\n\n\"\"\"\nAutogenerated input type of UpdateProjectCard\n\"\"\"\ninput UpdateProjectCardInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  Whether or not the ProjectCard should be archived\n  \"\"\"\n  isArchived: Boolean\n\n  \"\"\"\n  The note of ProjectCard.\n  \"\"\"\n  note: String\n\n  \"\"\"\n  The ProjectCard ID to update.\n  \"\"\"\n  projectCardId: ID!\n}\n\n\"\"\"\nAutogenerated return type of UpdateProjectCard\n\"\"\"\ntype UpdateProjectCardPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The updated ProjectCard.\n  \"\"\"\n  projectCard: ProjectCard\n}\n\n\"\"\"\nAutogenerated input type of UpdateProjectColumn\n\"\"\"\ninput UpdateProjectColumnInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of project column.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The ProjectColumn ID to update.\n  \"\"\"\n  projectColumnId: ID!\n}\n\n\"\"\"\nAutogenerated return type of UpdateProjectColumn\n\"\"\"\ntype UpdateProjectColumnPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The updated project column.\n  \"\"\"\n  projectColumn: ProjectColumn\n}\n\n\"\"\"\nAutogenerated input type of UpdateProject\n\"\"\"\ninput UpdateProjectInput {\n  \"\"\"\n  The description of project.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The name of project.\n  \"\"\"\n  name: String\n\n  \"\"\"\n  The Project ID to update.\n  \"\"\"\n  projectId: ID!\n\n  \"\"\"\n  Whether the project is public or not.\n  \"\"\"\n  public: Boolean\n\n  \"\"\"\n  Whether the project is open or closed.\n  \"\"\"\n  state: ProjectState\n}\n\n\"\"\"\nAutogenerated return type of UpdateProject\n\"\"\"\ntype UpdateProjectPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The updated project.\n  \"\"\"\n  project: Project\n}\n\n\"\"\"\nAutogenerated input type of UpdatePullRequest\n\"\"\"\ninput UpdatePullRequestInput {\n  \"\"\"\n  The name of the branch you want your changes pulled into. This should be an existing branch\n  on the current repository.\n  \"\"\"\n  baseRefName: String\n\n  \"\"\"\n  The contents of the pull request.\n  \"\"\"\n  body: String\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  Indicates whether maintainers can modify the pull request.\n  \"\"\"\n  maintainerCanModify: Boolean\n\n  \"\"\"\n  The Node ID of the pull request.\n  \"\"\"\n  pullRequestId: ID!\n\n  \"\"\"\n  The title of the pull request.\n  \"\"\"\n  title: String\n}\n\n\"\"\"\nAutogenerated return type of UpdatePullRequest\n\"\"\"\ntype UpdatePullRequestPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The updated pull request.\n  \"\"\"\n  pullRequest: PullRequest\n}\n\n\"\"\"\nAutogenerated input type of UpdatePullRequestReviewComment\n\"\"\"\ninput UpdatePullRequestReviewCommentInput {\n  \"\"\"\n  The text of the comment.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Node ID of the comment to modify.\n  \"\"\"\n  pullRequestReviewCommentId: ID!\n}\n\n\"\"\"\nAutogenerated return type of UpdatePullRequestReviewComment\n\"\"\"\ntype UpdatePullRequestReviewCommentPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The updated comment.\n  \"\"\"\n  pullRequestReviewComment: PullRequestReviewComment\n}\n\n\"\"\"\nAutogenerated input type of UpdatePullRequestReview\n\"\"\"\ninput UpdatePullRequestReviewInput {\n  \"\"\"\n  The contents of the pull request review body.\n  \"\"\"\n  body: String!\n\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Node ID of the pull request review to modify.\n  \"\"\"\n  pullRequestReviewId: ID!\n}\n\n\"\"\"\nAutogenerated return type of UpdatePullRequestReview\n\"\"\"\ntype UpdatePullRequestReviewPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The updated pull request review.\n  \"\"\"\n  pullRequestReview: PullRequestReview\n}\n\n\"\"\"\nAutogenerated input type of UpdateSubscription\n\"\"\"\ninput UpdateSubscriptionInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The new state of the subscription.\n  \"\"\"\n  state: SubscriptionState!\n\n  \"\"\"\n  The Node ID of the subscribable object to modify.\n  \"\"\"\n  subscribableId: ID!\n}\n\n\"\"\"\nAutogenerated return type of UpdateSubscription\n\"\"\"\ntype UpdateSubscriptionPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The input subscribable entity.\n  \"\"\"\n  subscribable: Subscribable\n}\n\n\"\"\"\nAutogenerated input type of UpdateTopics\n\"\"\"\ninput UpdateTopicsInput {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  The Node ID of the repository.\n  \"\"\"\n  repositoryId: ID!\n\n  \"\"\"\n  An array of topic names.\n  \"\"\"\n  topicNames: [String!]!\n}\n\n\"\"\"\nAutogenerated return type of UpdateTopics\n\"\"\"\ntype UpdateTopicsPayload {\n  \"\"\"\n  A unique identifier for the client performing the mutation.\n  \"\"\"\n  clientMutationId: String\n\n  \"\"\"\n  Names of the provided topics that are not valid.\n  \"\"\"\n  invalidTopicNames: [String!]\n\n  \"\"\"\n  The updated repository.\n  \"\"\"\n  repository: Repository\n}\n\n\"\"\"\nA user is an individual's account on GitHub that owns repositories and can make new content.\n\"\"\"\ntype User implements Actor & Node & ProfileOwner & ProjectOwner & RegistryPackageOwner & RegistryPackageSearch & RepositoryOwner & UniformResourceLocatable {\n  \"\"\"\n  Determine if this repository owner has any items that can be pinned to their profile.\n  \"\"\"\n  anyPinnableItems(\n    \"\"\"\n    Filter to only a particular kind of pinnable item.\n    \"\"\"\n    type: PinnableItemType\n  ): Boolean!\n\n  \"\"\"\n  A URL pointing to the user's public avatar.\n  \"\"\"\n  avatarUrl(\n    \"\"\"\n    The size of the resulting square image.\n    \"\"\"\n    size: Int\n  ): URI!\n\n  \"\"\"\n  The user's public profile bio.\n  \"\"\"\n  bio: String\n\n  \"\"\"\n  The user's public profile bio as HTML.\n  \"\"\"\n  bioHTML: HTML!\n\n  \"\"\"\n  A list of commit comments made by this user.\n  \"\"\"\n  commitComments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): CommitCommentConnection!\n\n  \"\"\"\n  The user's public profile company.\n  \"\"\"\n  company: String\n\n  \"\"\"\n  The user's public profile company as HTML.\n  \"\"\"\n  companyHTML: HTML!\n\n  \"\"\"\n  The collection of contributions this user has made to different repositories.\n  \"\"\"\n  contributionsCollection(\n    \"\"\"\n    Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.\n    \"\"\"\n    from: DateTime\n\n    \"\"\"\n    The ID of the organization used to filter contributions.\n    \"\"\"\n    organizationID: ID\n\n    \"\"\"\n    Only contributions made before and up to and including this time will be\n    counted. If omitted, defaults to the current time.\n    \"\"\"\n    to: DateTime\n  ): ContributionsCollection!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The user's publicly visible profile email.\n  \"\"\"\n  email: String!\n\n  \"\"\"\n  A list of users the given user is followed by.\n  \"\"\"\n  followers(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): FollowerConnection!\n\n  \"\"\"\n  A list of users the given user is following.\n  \"\"\"\n  following(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): FollowingConnection!\n\n  \"\"\"\n  Find gist by repo name.\n  \"\"\"\n  gist(\n    \"\"\"\n    The gist name to find.\n    \"\"\"\n    name: String!\n  ): Gist\n\n  \"\"\"\n  A list of gist comments made by this user.\n  \"\"\"\n  gistComments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): GistCommentConnection!\n\n  \"\"\"\n  A list of the Gists the user has created.\n  \"\"\"\n  gists(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for gists returned from the connection\n    \"\"\"\n    orderBy: GistOrder\n\n    \"\"\"\n    Filters Gists according to privacy.\n    \"\"\"\n    privacy: GistPrivacy\n  ): GistConnection!\n  id: ID!\n\n  \"\"\"\n  Whether or not this user is a participant in the GitHub Security Bug Bounty.\n  \"\"\"\n  isBountyHunter: Boolean!\n\n  \"\"\"\n  Whether or not this user is a participant in the GitHub Campus Experts Program.\n  \"\"\"\n  isCampusExpert: Boolean!\n\n  \"\"\"\n  Whether or not this user is a GitHub Developer Program member.\n  \"\"\"\n  isDeveloperProgramMember: Boolean!\n\n  \"\"\"\n  Whether or not this user is a GitHub employee.\n  \"\"\"\n  isEmployee: Boolean!\n\n  \"\"\"\n  Whether or not the user has marked themselves as for hire.\n  \"\"\"\n  isHireable: Boolean!\n\n  \"\"\"\n  Whether or not this user is a site administrator.\n  \"\"\"\n  isSiteAdmin: Boolean!\n\n  \"\"\"\n  Whether or not this user is the viewing user.\n  \"\"\"\n  isViewer: Boolean!\n\n  \"\"\"\n  A list of issue comments made by this user.\n  \"\"\"\n  issueComments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): IssueCommentConnection!\n\n  \"\"\"\n  A list of issues associated with this user.\n  \"\"\"\n  issues(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Filtering options for issues returned from the connection.\n    \"\"\"\n    filterBy: IssueFilters\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for issues returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the issues by.\n    \"\"\"\n    states: [IssueState!]\n  ): IssueConnection!\n\n  \"\"\"\n  Showcases a selection of repositories and gists that the profile owner has\n  either curated or that have been selected automatically based on popularity.\n  \"\"\"\n  itemShowcase: ProfileItemShowcase!\n\n  \"\"\"\n  The user's public profile location.\n  \"\"\"\n  location: String\n\n  \"\"\"\n  The username used to login.\n  \"\"\"\n  login: String!\n\n  \"\"\"\n  The user's public profile name.\n  \"\"\"\n  name: String\n\n  \"\"\"\n  Find an organization by its login that the user belongs to.\n  \"\"\"\n  organization(\n    \"\"\"\n    The login of the organization to find.\n    \"\"\"\n    login: String!\n  ): Organization\n\n  \"\"\"\n  A list of organizations the user belongs to.\n  \"\"\"\n  organizations(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): OrganizationConnection!\n\n  \"\"\"\n  A list of repositories and gists this profile owner can pin to their profile.\n  \"\"\"\n  pinnableItems(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter the types of pinnable items that are returned.\n    \"\"\"\n    types: [PinnableItemType!]\n  ): PinnableItemConnection!\n\n  \"\"\"\n  A list of repositories and gists this profile owner has pinned to their profile\n  \"\"\"\n  pinnedItems(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter the types of pinned items that are returned.\n    \"\"\"\n    types: [PinnableItemType!]\n  ): PinnableItemConnection!\n\n  \"\"\"\n  Returns how many more items this profile owner can pin to their profile.\n  \"\"\"\n  pinnedItemsRemaining: Int!\n\n  \"\"\"\n  A list of repositories this user has pinned to their profile\n  \"\"\"\n  pinnedRepositories(\n    \"\"\"\n    Array of viewer's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    current viewer owns.\n    \"\"\"\n    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    Array of owner's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    organization or user being viewed owns.\n    \"\"\"\n    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection! @deprecated(reason: \"pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-07-01 UTC.\")\n\n  \"\"\"\n  Find project by number.\n  \"\"\"\n  project(\n    \"\"\"\n    The project number to find.\n    \"\"\"\n    number: Int!\n  ): Project\n\n  \"\"\"\n  A list of projects under the owner.\n  \"\"\"\n  projects(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for projects returned from the connection\n    \"\"\"\n    orderBy: ProjectOrder\n\n    \"\"\"\n    Query to search projects by, currently only searching by name.\n    \"\"\"\n    search: String\n\n    \"\"\"\n    A list of states to filter the projects by.\n    \"\"\"\n    states: [ProjectState!]\n  ): ProjectConnection!\n\n  \"\"\"\n  The HTTP path listing user's projects\n  \"\"\"\n  projectsResourcePath: URI!\n\n  \"\"\"\n  The HTTP URL listing user's projects\n  \"\"\"\n  projectsUrl: URI!\n\n  \"\"\"\n  A list of public keys associated with this user.\n  \"\"\"\n  publicKeys(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): PublicKeyConnection!\n\n  \"\"\"\n  A list of pull requests associated with this user.\n  \"\"\"\n  pullRequests(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    The base ref name to filter the pull requests by.\n    \"\"\"\n    baseRefName: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    The head ref name to filter the pull requests by.\n    \"\"\"\n    headRefName: String\n\n    \"\"\"\n    A list of label names to filter the pull requests by.\n    \"\"\"\n    labels: [String!]\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for pull requests returned from the connection.\n    \"\"\"\n    orderBy: IssueOrder\n\n    \"\"\"\n    A list of states to filter the pull requests by.\n    \"\"\"\n    states: [PullRequestState!]\n  ): PullRequestConnection!\n\n  \"\"\"\n  A list of repositories that the user owns.\n  \"\"\"\n  repositories(\n    \"\"\"\n    Array of viewer's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    current viewer owns.\n    \"\"\"\n    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If non-null, filters repositories according to whether they are forks of another repository\n    \"\"\"\n    isFork: Boolean\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    Array of owner's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    organization or user being viewed owns.\n    \"\"\"\n    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection!\n\n  \"\"\"\n  A list of repositories that the user recently contributed to.\n  \"\"\"\n  repositoriesContributedTo(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    If non-null, include only the specified types of contributions. The\n    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]\n    \"\"\"\n    contributionTypes: [RepositoryContributionType]\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If true, include user repositories\n    \"\"\"\n    includeUserRepositories: Boolean\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection!\n\n  \"\"\"\n  Find Repository.\n  \"\"\"\n  repository(\n    \"\"\"\n    Name of Repository to find.\n    \"\"\"\n    name: String!\n  ): Repository\n\n  \"\"\"\n  The HTTP path for this user\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Repositories the user has starred.\n  \"\"\"\n  starredRepositories(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Order for connection\n    \"\"\"\n    orderBy: StarOrder\n\n    \"\"\"\n    Filters starred repositories to only return repositories owned by the viewer.\n    \"\"\"\n    ownedByViewer: Boolean\n  ): StarredRepositoryConnection!\n\n  \"\"\"\n  The user's description of what they're currently doing.\n  \"\"\"\n  status: UserStatus\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The HTTP URL for this user\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  Can the viewer pin repositories and gists to the profile?\n  \"\"\"\n  viewerCanChangePinnedItems: Boolean!\n\n  \"\"\"\n  Can the current viewer create new projects on this owner.\n  \"\"\"\n  viewerCanCreateProjects: Boolean!\n\n  \"\"\"\n  Whether or not the viewer is able to follow the user.\n  \"\"\"\n  viewerCanFollow: Boolean!\n\n  \"\"\"\n  Whether or not this user is followed by the viewer.\n  \"\"\"\n  viewerIsFollowing: Boolean!\n\n  \"\"\"\n  A list of repositories the given user is watching.\n  \"\"\"\n  watching(\n    \"\"\"\n    Affiliation options for repositories returned from the connection\n    \"\"\"\n    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR, ORGANIZATION_MEMBER]\n\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    If non-null, filters repositories according to whether they have been locked\n    \"\"\"\n    isLocked: Boolean\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for repositories returned from the connection\n    \"\"\"\n    orderBy: RepositoryOrder\n\n    \"\"\"\n    Array of owner's affiliation options for repositories returned from the\n    connection. For example, OWNER will include only repositories that the\n    organization or user being viewed owns.\n    \"\"\"\n    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]\n\n    \"\"\"\n    If non-null, filters repositories according to privacy\n    \"\"\"\n    privacy: RepositoryPrivacy\n  ): RepositoryConnection!\n\n  \"\"\"\n  A URL pointing to the user's public website/blog.\n  \"\"\"\n  websiteUrl: URI\n}\n\n\"\"\"\nThe possible durations that a user can be blocked for.\n\"\"\"\nenum UserBlockDuration {\n  \"\"\"\n  The user was blocked for 1 day\n  \"\"\"\n  ONE_DAY\n\n  \"\"\"\n  The user was blocked for 30 days\n  \"\"\"\n  ONE_MONTH\n\n  \"\"\"\n  The user was blocked for 7 days\n  \"\"\"\n  ONE_WEEK\n\n  \"\"\"\n  The user was blocked permanently\n  \"\"\"\n  PERMANENT\n\n  \"\"\"\n  The user was blocked for 3 days\n  \"\"\"\n  THREE_DAYS\n}\n\n\"\"\"\nRepresents a 'user_blocked' event on a given user.\n\"\"\"\ntype UserBlockedEvent implements Node {\n  \"\"\"\n  Identifies the actor who performed the event.\n  \"\"\"\n  actor: Actor\n\n  \"\"\"\n  Number of days that the user was blocked for.\n  \"\"\"\n  blockDuration: UserBlockDuration!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"\n  The user who was blocked.\n  \"\"\"\n  subject: User\n}\n\n\"\"\"\nThe connection type for User.\n\"\"\"\ntype UserConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [UserEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [User]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edit on user content\n\"\"\"\ntype UserContentEdit implements Node {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the date and time when the object was deleted.\n  \"\"\"\n  deletedAt: DateTime\n\n  \"\"\"\n  The actor who deleted this content\n  \"\"\"\n  deletedBy: Actor\n\n  \"\"\"\n  A summary of the changes for this edit\n  \"\"\"\n  diff: String\n\n  \"\"\"\n  When this content was edited\n  \"\"\"\n  editedAt: DateTime!\n\n  \"\"\"\n  The actor who edited this content\n  \"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n}\n\n\"\"\"\nA list of edits to content.\n\"\"\"\ntype UserContentEditConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [UserContentEditEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [UserContentEdit]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype UserContentEditEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: UserContentEdit\n}\n\n\"\"\"\nRepresents a user.\n\"\"\"\ntype UserEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: User\n}\n\n\"\"\"\nThe user's description of what they're currently doing.\n\"\"\"\ntype UserStatus implements Node {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  An emoji summarizing the user's status.\n  \"\"\"\n  emoji: String\n\n  \"\"\"\n  ID of the object.\n  \"\"\"\n  id: ID!\n\n  \"\"\"\n  Whether this status indicates the user is not fully available on GitHub.\n  \"\"\"\n  indicatesLimitedAvailability: Boolean!\n\n  \"\"\"\n  A brief message describing what the user is doing.\n  \"\"\"\n  message: String\n\n  \"\"\"\n  The organization whose members can see this status. If null, this status is publicly visible.\n  \"\"\"\n  organization: Organization\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The user who has this status.\n  \"\"\"\n  user: User!\n}\n\n\"\"\"\nThe connection type for UserStatus.\n\"\"\"\ntype UserStatusConnection {\n  \"\"\"\n  A list of edges.\n  \"\"\"\n  edges: [UserStatusEdge]\n\n  \"\"\"\n  A list of nodes.\n  \"\"\"\n  nodes: [UserStatus]\n\n  \"\"\"\n  Information to aid in pagination.\n  \"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"\n  Identifies the total count of items in the connection.\n  \"\"\"\n  totalCount: Int!\n}\n\n\"\"\"\nAn edge in a connection.\n\"\"\"\ntype UserStatusEdge {\n  \"\"\"\n  A cursor for use in pagination.\n  \"\"\"\n  cursor: String!\n\n  \"\"\"\n  The item at the end of the edge.\n  \"\"\"\n  node: UserStatus\n}\n\n\"\"\"\nOrdering options for user status connections.\n\"\"\"\ninput UserStatusOrder {\n  \"\"\"\n  The ordering direction.\n  \"\"\"\n  direction: OrderDirection!\n\n  \"\"\"\n  The field to order user statuses by.\n  \"\"\"\n  field: UserStatusOrderField!\n}\n\n\"\"\"\nProperties by which user status connections can be ordered.\n\"\"\"\nenum UserStatusOrderField {\n  \"\"\"\n  Order user statuses by when they were updated.\n  \"\"\"\n  UPDATED_AT\n}\n\n\"\"\"\nA valid x509 certificate string\n\"\"\"\nscalar X509Certificate",
      "containsQueryType": true,
      "typesUndefined": [],
      "directivesUndefined": [
        "deprecated"
      ],
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 327,
      "containsCycle": true,
      "numDefinitions": 540
    }
  ],
  "metrics": {
    "created_at": "2017-12-10T07:33:52Z",
    "updated_at": "2019-07-19T15:31:55Z",
    "pushed_at": "2019-07-19T15:35:57Z",
    "issues": 9,
    "watchers": 2,
    "fork_count": 16,
    "has_wiki_enabled": false,
    "license": "mit",
    "pull_requests": 169,
    "pull_requests_open": 0,
    "pull_requests_closed": 37,
    "pull_requests_merged": 132,
    "releases": 98,
    "stargazers": 52
  }
}