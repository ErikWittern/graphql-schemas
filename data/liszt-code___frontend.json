{
  "repo_name": "frontend",
  "repo_full_name": "liszt-code/frontend",
  "repo_owner": "liszt-code",
  "repo_description": null,
  "repo_private": false,
  "repo_fork": false,
  "schemas": [
    {
      "name": "schema.graphql",
      "path": "schema.graphql",
      "sha": "eda2aab157ccb84ef9c318fa2363da95c2e0fcaf",
      "url": "https://api.github.com/repositories/94521667/contents/schema.graphql?ref=15427ed214cd1b38a7f7293317b87aa188d94060",
      "git_url": "https://api.github.com/repositories/94521667/git/blobs/eda2aab157ccb84ef9c318fa2363da95c2e0fcaf",
      "html_url": "https://github.com/liszt-code/frontend/blob/15427ed214cd1b38a7f7293317b87aa188d94060/schema.graphql",
      "content": "ï»¿input AddToBuildingOnUnitBuildingInput {\n  unitsUnitId: ID!\n  buildingBuildingId: ID!\n  clientMutationId: String!\n}\n\ntype AddToBuildingOnUnitPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  buildingBuilding: Building\n  unitsUnit: Unit\n  buildingBuildingEdge: BuildingEdge\n  unitsUnitEdge: UnitEdge\n}\n\ntype AddToUnitResidentPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  unitsUnit: Unit\n  residentsResident: Resident\n  unitsUnitEdge: UnitEdge\n  residentsResidentEdge: ResidentEdge\n}\n\ninput AddToUnitResidentUnitInput {\n  residentsResidentId: ID!\n  unitsUnitId: ID!\n  clientMutationId: String!\n}\n\n# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.\nscalar BigDecimal\n\n# The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.\nscalar BigInt\n\ntype Building implements Node {\n  createdAt: DateTime!\n  id: ID!\n  name: String!\n  units(filter: UnitFilter, orderBy: UnitOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection\n  updatedAt: DateTime!\n}\n\n# A connection to a list of items.\ntype BuildingConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [BuildingEdge]\n\n  # Count of filtered result set without considering pagination arguments\n  count: Int!\n}\n\n# An edge in a connection.\ntype BuildingEdge {\n  # The item at the end of the edge.\n  node: Building!\n\n  # A cursor for use in pagination.\n  cursor: String!\n}\n\ninput BuildingFilter {\n  AND: [BuildingFilter!]\n  OR: [BuildingFilter!]\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  updatedAt: DateTime\n  updatedAt_not: DateTime\n  updatedAt_in: [DateTime!]\n  updatedAt_not_in: [DateTime!]\n  updatedAt_lt: DateTime\n  updatedAt_lte: DateTime\n  updatedAt_gt: DateTime\n  updatedAt_gte: DateTime\n  units_every: UnitFilter\n  units_some: UnitFilter\n  units_none: UnitFilter\n}\n\nenum BuildingOrderBy {\n  createdAt_ASC\n  createdAt_DESC\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ninput BuildingunitsUnit {\n  name: String!\n  residentsIds: [ID!]\n  residents: [BuildingunitsUnitresidentsResident!]\n}\n\ninput BuildingunitsUnitresidentsResident {\n  name: String!\n  unitsIds: [ID!]\n  units: [BuildingunitsUnitresidentsResidentunitsUnit!]\n}\n\ninput BuildingunitsUnitresidentsResidentunitsUnit {\n  name: String!\n  buildingId: ID\n  residentsIds: [ID!]\n}\n\ninput CreateBuilding {\n  name: String\n  unitsIds: [ID!]\n  units: [BuildingunitsUnit!]\n}\n\ninput CreateBuildingInput {\n  name: String\n  unitsIds: [ID!]\n  units: [BuildingunitsUnit!]\n  clientMutationId: String!\n}\n\ntype CreateBuildingPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  building: Building\n  edge: BuildingEdge\n}\n\ninput CreateFile {\n  name: String!\n}\n\ninput CreateFileInput {\n  name: String!\n  clientMutationId: String!\n}\n\ntype CreateFilePayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  file: File\n  edge: FileEdge\n}\n\ninput CreateResident {\n  name: String!\n  unitsIds: [ID!]\n  units: [ResidentunitsUnit!]\n}\n\ninput CreateResidentInput {\n  name: String!\n  unitsIds: [ID!]\n  units: [ResidentunitsUnit!]\n  clientMutationId: String!\n}\n\ntype CreateResidentPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  resident: Resident\n  edge: ResidentEdge\n}\n\ninput CreateUnit {\n  name: String!\n  buildingId: ID\n  building: UnitbuildingBuilding\n  residentsIds: [ID!]\n  residents: [UnitresidentsResident!]\n}\n\ninput CreateUnitInput {\n  name: String!\n  buildingId: ID\n  building: UnitbuildingBuilding\n  residentsIds: [ID!]\n  residents: [UnitresidentsResident!]\n  clientMutationId: String!\n}\n\ntype CreateUnitPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  unit: Unit\n  edge: UnitEdge\n  building: Building\n}\n\n# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.\ntype CreateUserPayload {\n  user: User\n  clientMutationId: String\n  viewer: Viewer!\n}\n\nscalar DateTime\n\ninput DeleteBuildingInput {\n  id: ID!\n  clientMutationId: String!\n}\n\ntype DeleteBuildingPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  building: Building\n  edge: BuildingEdge\n  deletedId: ID\n}\n\ninput DeleteFileInput {\n  id: ID!\n  clientMutationId: String!\n}\n\ntype DeleteFilePayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  file: File\n  edge: FileEdge\n  deletedId: ID\n}\n\ninput DeleteResidentInput {\n  id: ID!\n  clientMutationId: String!\n}\n\ntype DeleteResidentPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  resident: Resident\n  edge: ResidentEdge\n  deletedId: ID\n}\n\ninput DeleteUnitInput {\n  id: ID!\n  clientMutationId: String!\n}\n\ntype DeleteUnitPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  unit: Unit\n  edge: UnitEdge\n  building: Building\n  deletedId: ID\n}\n\ninput DeleteUserInput {\n  id: ID!\n  clientMutationId: String!\n}\n\ntype DeleteUserPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  user: User\n  edge: UserEdge\n  deletedId: ID\n}\n\ntype File implements Node {\n  contentType: String!\n  createdAt: DateTime!\n  id: ID!\n  name: String!\n  secret: String!\n  size: Int!\n  updatedAt: DateTime!\n  url: String!\n}\n\n# A connection to a list of items.\ntype FileConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [FileEdge]\n\n  # Count of filtered result set without considering pagination arguments\n  count: Int!\n}\n\n# An edge in a connection.\ntype FileEdge {\n  # The item at the end of the edge.\n  node: File!\n\n  # A cursor for use in pagination.\n  cursor: String!\n}\n\ninput FileFilter {\n  AND: [FileFilter!]\n  OR: [FileFilter!]\n  contentType: String\n  contentType_not: String\n  contentType_in: [String!]\n  contentType_not_in: [String!]\n  contentType_lt: String\n  contentType_lte: String\n  contentType_gt: String\n  contentType_gte: String\n  contentType_contains: String\n  contentType_not_contains: String\n  contentType_starts_with: String\n  contentType_not_starts_with: String\n  contentType_ends_with: String\n  contentType_not_ends_with: String\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  secret: String\n  secret_not: String\n  secret_in: [String!]\n  secret_not_in: [String!]\n  secret_lt: String\n  secret_lte: String\n  secret_gt: String\n  secret_gte: String\n  secret_contains: String\n  secret_not_contains: String\n  secret_starts_with: String\n  secret_not_starts_with: String\n  secret_ends_with: String\n  secret_not_ends_with: String\n  size: Int\n  size_not: Int\n  size_in: [Int!]\n  size_not_in: [Int!]\n  size_lt: Int\n  size_lte: Int\n  size_gt: Int\n  size_gte: Int\n  updatedAt: DateTime\n  updatedAt_not: DateTime\n  updatedAt_in: [DateTime!]\n  updatedAt_not_in: [DateTime!]\n  updatedAt_lt: DateTime\n  updatedAt_lte: DateTime\n  updatedAt_gt: DateTime\n  updatedAt_gte: DateTime\n  url: String\n  url_not: String\n  url_in: [String!]\n  url_not_in: [String!]\n  url_lt: String\n  url_lte: String\n  url_gt: String\n  url_gte: String\n  url_contains: String\n  url_not_contains: String\n  url_starts_with: String\n  url_not_starts_with: String\n  url_ends_with: String\n  url_not_ends_with: String\n}\n\nenum FileOrderBy {\n  contentType_ASC\n  contentType_DESC\n  createdAt_ASC\n  createdAt_DESC\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  secret_ASC\n  secret_DESC\n  size_ASC\n  size_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  url_ASC\n  url_DESC\n}\n\n# The `Long` scalar type represents non-fractional signed whole numeric values.\n# Long can represent values between -(2^63) and 2^63 - 1.\nscalar Long\n\ntype Mutation {\n  createBuilding(input: CreateBuildingInput!): CreateBuildingPayload\n  createFile(input: CreateFileInput!): CreateFilePayload\n  createResident(input: CreateResidentInput!): CreateResidentPayload\n  createUnit(input: CreateUnitInput!): CreateUnitPayload\n  updateBuilding(input: UpdateBuildingInput!): UpdateBuildingPayload\n  updateFile(input: UpdateFileInput!): UpdateFilePayload\n  updateResident(input: UpdateResidentInput!): UpdateResidentPayload\n  updateUnit(input: UpdateUnitInput!): UpdateUnitPayload\n  updateUser(input: UpdateUserInput!): UpdateUserPayload\n  updateOrCreateBuilding(input: UpdateOrCreateBuildingInput!): UpdateOrCreateBuildingPayload\n  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload\n  updateOrCreateResident(input: UpdateOrCreateResidentInput!): UpdateOrCreateResidentPayload\n  updateOrCreateUnit(input: UpdateOrCreateUnitInput!): UpdateOrCreateUnitPayload\n  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload\n  deleteBuilding(input: DeleteBuildingInput!): DeleteBuildingPayload\n  deleteFile(input: DeleteFileInput!): DeleteFilePayload\n  deleteResident(input: DeleteResidentInput!): DeleteResidentPayload\n  deleteUnit(input: DeleteUnitInput!): DeleteUnitPayload\n  deleteUser(input: DeleteUserInput!): DeleteUserPayload\n  addToBuildingOnUnit(input: AddToBuildingOnUnitBuildingInput!): AddToBuildingOnUnitPayload\n  addToUnitResident(input: AddToUnitResidentUnitInput!): AddToUnitResidentPayload\n  removeFromBuildingOnUnit(input: RemoveFromBuildingOnUnitBuildingInput!): RemoveFromBuildingOnUnitPayload\n  removeFromUnitResident(input: RemoveFromUnitResidentUnitInput!): RemoveFromUnitResidentPayload\n  createUser(input: SignupUserInput!): CreateUserPayload!\n}\n\n# An object with an ID\ninterface Node {\n  # The id of the object.\n  id: ID!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\ntype Query {\n  viewer: Viewer!\n\n  # Fetches an object given its ID\n  node(\n    # The ID of an object\n    id: ID!\n  ): Node\n}\n\ninput RemoveFromBuildingOnUnitBuildingInput {\n  unitsUnitId: ID!\n  buildingBuildingId: ID!\n  clientMutationId: String!\n}\n\ntype RemoveFromBuildingOnUnitPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  buildingBuilding: Building\n  unitsUnit: Unit\n  buildingBuildingEdge: BuildingEdge\n  unitsUnitEdge: UnitEdge\n}\n\ntype RemoveFromUnitResidentPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  unitsUnit: Unit\n  residentsResident: Resident\n  unitsUnitEdge: UnitEdge\n  residentsResidentEdge: ResidentEdge\n}\n\ninput RemoveFromUnitResidentUnitInput {\n  residentsResidentId: ID!\n  unitsUnitId: ID!\n  clientMutationId: String!\n}\n\ntype Resident implements Node {\n  createdAt: DateTime!\n  id: ID!\n  name: String!\n  units(filter: UnitFilter, orderBy: UnitOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection\n  updatedAt: DateTime!\n}\n\n# A connection to a list of items.\ntype ResidentConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [ResidentEdge]\n\n  # Count of filtered result set without considering pagination arguments\n  count: Int!\n}\n\n# An edge in a connection.\ntype ResidentEdge {\n  # The item at the end of the edge.\n  node: Resident!\n\n  # A cursor for use in pagination.\n  cursor: String!\n}\n\ninput ResidentFilter {\n  AND: [ResidentFilter!]\n  OR: [ResidentFilter!]\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  updatedAt: DateTime\n  updatedAt_not: DateTime\n  updatedAt_in: [DateTime!]\n  updatedAt_not_in: [DateTime!]\n  updatedAt_lt: DateTime\n  updatedAt_lte: DateTime\n  updatedAt_gt: DateTime\n  updatedAt_gte: DateTime\n  units_every: UnitFilter\n  units_some: UnitFilter\n  units_none: UnitFilter\n}\n\nenum ResidentOrderBy {\n  createdAt_ASC\n  createdAt_DESC\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ninput ResidentunitsUnit {\n  name: String!\n  buildingId: ID\n  building: ResidentunitsUnitbuildingBuilding\n  residentsIds: [ID!]\n  residents: [ResidentunitsUnitresidentsResident!]\n}\n\ninput ResidentunitsUnitbuildingBuilding {\n  name: String\n  unitsIds: [ID!]\n  units: [ResidentunitsUnitbuildingBuildingunitsUnit!]\n}\n\ninput ResidentunitsUnitbuildingBuildingunitsUnit {\n  name: String!\n  buildingId: ID\n  residentsIds: [ID!]\n}\n\ninput ResidentunitsUnitresidentsResident {\n  name: String!\n  unitsIds: [ID!]\n  units: [ResidentunitsUnitresidentsResidentunitsUnit!]\n}\n\ninput ResidentunitsUnitresidentsResidentunitsUnit {\n  name: String!\n  buildingId: ID\n  residentsIds: [ID!]\n}\n\ninput SignupUserInput {\n  clientMutationId: String!\n}\n\ntype Unit implements Node {\n  building(filter: BuildingFilter): Building\n  createdAt: DateTime!\n  id: ID!\n  name: String!\n  residents(filter: ResidentFilter, orderBy: ResidentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ResidentConnection\n  updatedAt: DateTime!\n}\n\ninput UnitbuildingBuilding {\n  name: String\n  unitsIds: [ID!]\n  units: [UnitbuildingBuildingunitsUnit!]\n}\n\ninput UnitbuildingBuildingunitsUnit {\n  name: String!\n  residentsIds: [ID!]\n  residents: [UnitbuildingBuildingunitsUnitresidentsResident!]\n}\n\ninput UnitbuildingBuildingunitsUnitresidentsResident {\n  name: String!\n  unitsIds: [ID!]\n}\n\n# A connection to a list of items.\ntype UnitConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UnitEdge]\n\n  # Count of filtered result set without considering pagination arguments\n  count: Int!\n}\n\n# An edge in a connection.\ntype UnitEdge {\n  # The item at the end of the edge.\n  node: Unit!\n\n  # A cursor for use in pagination.\n  cursor: String!\n}\n\ninput UnitFilter {\n  AND: [UnitFilter!]\n  OR: [UnitFilter!]\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  updatedAt: DateTime\n  updatedAt_not: DateTime\n  updatedAt_in: [DateTime!]\n  updatedAt_not_in: [DateTime!]\n  updatedAt_lt: DateTime\n  updatedAt_lte: DateTime\n  updatedAt_gt: DateTime\n  updatedAt_gte: DateTime\n  building: BuildingFilter\n  residents_every: ResidentFilter\n  residents_some: ResidentFilter\n  residents_none: ResidentFilter\n}\n\nenum UnitOrderBy {\n  createdAt_ASC\n  createdAt_DESC\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ninput UnitresidentsResident {\n  name: String!\n  unitsIds: [ID!]\n  units: [UnitresidentsResidentunitsUnit!]\n}\n\ninput UnitresidentsResidentunitsUnit {\n  name: String!\n  buildingId: ID\n  building: UnitresidentsResidentunitsUnitbuildingBuilding\n  residentsIds: [ID!]\n  residents: [UnitresidentsResidentunitsUnitresidentsResident!]\n}\n\ninput UnitresidentsResidentunitsUnitbuildingBuilding {\n  name: String\n  unitsIds: [ID!]\n}\n\ninput UnitresidentsResidentunitsUnitresidentsResident {\n  name: String!\n  unitsIds: [ID!]\n}\n\ninput UpdateBuilding {\n  id: ID!\n  name: String\n  unitsIds: [ID!]\n  units: [BuildingunitsUnit!]\n}\n\ninput UpdateBuildingInput {\n  id: ID!\n  name: String\n  unitsIds: [ID!]\n  units: [BuildingunitsUnit!]\n  clientMutationId: String!\n}\n\ntype UpdateBuildingPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  building: Building\n  edge: BuildingEdge\n}\n\ninput UpdateFile {\n  id: ID!\n  name: String\n}\n\ninput UpdateFileInput {\n  id: ID!\n  name: String\n  clientMutationId: String!\n}\n\ntype UpdateFilePayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  file: File\n  edge: FileEdge\n}\n\ninput UpdateOrCreateBuildingInput {\n  update: UpdateBuilding!\n  create: CreateBuilding!\n  clientMutationId: String!\n}\n\ntype UpdateOrCreateBuildingPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  building: Building\n  edge: BuildingEdge\n}\n\ninput UpdateOrCreateFileInput {\n  update: UpdateFile!\n  create: CreateFile!\n  clientMutationId: String!\n}\n\ntype UpdateOrCreateFilePayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  file: File\n  edge: FileEdge\n}\n\ninput UpdateOrCreateResidentInput {\n  update: UpdateResident!\n  create: CreateResident!\n  clientMutationId: String!\n}\n\ntype UpdateOrCreateResidentPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  resident: Resident\n  edge: ResidentEdge\n}\n\ninput UpdateOrCreateUnitInput {\n  update: UpdateUnit!\n  create: CreateUnit!\n  clientMutationId: String!\n}\n\ntype UpdateOrCreateUnitPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  unit: Unit\n  edge: UnitEdge\n  building: Building\n}\n\ninput UpdateOrCreateUserInput {\n  update: UpdateUser!\n  clientMutationId: String!\n}\n\ntype UpdateOrCreateUserPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  user: User\n  edge: UserEdge\n}\n\ninput UpdateResident {\n  id: ID!\n  name: String\n  unitsIds: [ID!]\n  units: [ResidentunitsUnit!]\n}\n\ninput UpdateResidentInput {\n  id: ID!\n  name: String\n  unitsIds: [ID!]\n  units: [ResidentunitsUnit!]\n  clientMutationId: String!\n}\n\ntype UpdateResidentPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  resident: Resident\n  edge: ResidentEdge\n}\n\ninput UpdateUnit {\n  id: ID!\n  name: String\n  buildingId: ID\n  building: UnitbuildingBuilding\n  residentsIds: [ID!]\n  residents: [UnitresidentsResident!]\n}\n\ninput UpdateUnitInput {\n  id: ID!\n  name: String\n  buildingId: ID\n  building: UnitbuildingBuilding\n  residentsIds: [ID!]\n  residents: [UnitresidentsResident!]\n  clientMutationId: String!\n}\n\ntype UpdateUnitPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  unit: Unit\n  edge: UnitEdge\n  building: Building\n}\n\ninput UpdateUser {\n  id: ID!\n}\n\ninput UpdateUserInput {\n  id: ID!\n  clientMutationId: String!\n}\n\ntype UpdateUserPayload {\n  viewer: Viewer!\n  clientMutationId: String!\n  user: User\n  edge: UserEdge\n}\n\ntype User implements Node {\n  createdAt: DateTime!\n  id: ID!\n  updatedAt: DateTime!\n}\n\n# A connection to a list of items.\ntype UserConnection {\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # A list of edges.\n  edges: [UserEdge]\n\n  # Count of filtered result set without considering pagination arguments\n  count: Int!\n}\n\n# An edge in a connection.\ntype UserEdge {\n  # The item at the end of the edge.\n  node: User!\n\n  # A cursor for use in pagination.\n  cursor: String!\n}\n\ninput UserFilter {\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n  createdAt: DateTime\n  createdAt_not: DateTime\n  createdAt_in: [DateTime!]\n  createdAt_not_in: [DateTime!]\n  createdAt_lt: DateTime\n  createdAt_lte: DateTime\n  createdAt_gt: DateTime\n  createdAt_gte: DateTime\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  updatedAt: DateTime\n  updatedAt_not: DateTime\n  updatedAt_in: [DateTime!]\n  updatedAt_not_in: [DateTime!]\n  updatedAt_lt: DateTime\n  updatedAt_lte: DateTime\n  updatedAt_gt: DateTime\n  updatedAt_gte: DateTime\n}\n\nenum UserOrderBy {\n  createdAt_ASC\n  createdAt_DESC\n  id_ASC\n  id_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\n# This is the famous Relay viewer object\ntype Viewer {\n  allBuildings(filter: BuildingFilter, orderBy: BuildingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): BuildingConnection!\n  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!\n  allResidents(filter: ResidentFilter, orderBy: ResidentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ResidentConnection!\n  allUnits(filter: UnitFilter, orderBy: UnitOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection!\n  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  user: User\n  Building(id: ID): Building\n  File(id: ID, secret: String, url: String): File\n  Resident(id: ID): Resident\n  Unit(id: ID): Unit\n  User(id: ID): User\n  id: ID!\n}\n",
      "containsQueryType": true,
      "validSchema": true,
      "contentDuplicate": false,
      "numObjectTypes": 43,
      "containsCycle": true,
      "numDefinitions": 106
    }
  ],
  "metrics": {
    "created_at": "2017-06-16T08:14:55Z",
    "updated_at": "2017-06-16T08:41:30Z",
    "pushed_at": "2017-06-16T09:04:39Z",
    "issues": 0,
    "watchers": 0,
    "fork_count": 0,
    "has_wiki_enabled": true,
    "license": "mit",
    "pull_requests": 0,
    "pull_requests_open": 0,
    "pull_requests_closed": 0,
    "pull_requests_merged": 0,
    "releases": 0,
    "stargazers": 0
  }
}